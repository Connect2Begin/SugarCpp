//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-18 11:25:39

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Switch=62;
	public const int Stmt_Try=63;
	public const int Stmt_Typedef=64;
	public const int Stmt_Unless=65;
	public const int Stmt_Until=66;
	public const int Stmt_Using=67;
	public const int Stmt_While=68;
	public const int Switch_Item=69;
	public const int Type_Array=70;
	public const int Type_Ident=71;
	public const int Type_Ref=72;
	public const int Type_Star=73;
	public const int Type_Template=74;
	public const int White_Space=75;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:200:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(200, 1);
		try
		{
			// SugarCpp.g:201:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:201:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(201, 4);
			// SugarCpp.g:201:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:201:4: NEWLINE
					{
					DebugLocation(201, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root528);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(201, 13);
			PushFollow(Follow._global_block_in_root531);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(201, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root533);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 201:30: -> ^( Root global_block )
			{
				DebugLocation(201, 33);
				// SugarCpp.g:201:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(201, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(201, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:204:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(204, 1);
		try
		{
			// SugarCpp.g:205:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(205, 4);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==119||(LA3_0>=128 && LA3_0<=129)||LA3_0==133||LA3_0==137||LA3_0==141||LA3_0==146||LA3_0==151||LA3_0==153||LA3_0==155||LA3_0==161))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:5: node ( NEWLINE )+
					{
					DebugLocation(205, 5);
					PushFollow(Follow._node_in_global_block553);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(205, 10);
					// SugarCpp.g:205:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:10: NEWLINE
							{
							DebugLocation(205, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block555);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(205, 24);
				// SugarCpp.g:205:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(205, 39);
				// SugarCpp.g:205:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(205, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(208, 1);
		try
		{
			// SugarCpp.g:209:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:209:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._func_def_in_node578);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:210:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._class_def_in_node583);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:211:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._enum_def_in_node588);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:212:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._global_alloc_in_node593);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:213:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._global_using_in_node598);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:214:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._global_typedef_in_node603);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:215:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._import_def_in_node608);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:216:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._namespace_def_in_node613);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:219:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args625); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:221:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args630); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:222:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._ident_in_attribute_args635);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:225:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==129))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(226, 4);
				PushFollow(Follow._ident_in_attribute_item646);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(226, 10);
				// SugarCpp.g:226:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==83))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:226:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(226, 11);
					char_literal18=(IToken)Match(input,83,Follow._83_in_attribute_item649);  
					stream_83.Add(char_literal18);

					DebugLocation(226, 15);
					PushFollow(Follow._attribute_args_in_attribute_item651);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(226, 30);
					// SugarCpp.g:226:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==90))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:31: ',' attribute_args
							{
							DebugLocation(226, 31);
							char_literal20=(IToken)Match(input,90,Follow._90_in_attribute_item654);  
							stream_90.Add(char_literal20);

							DebugLocation(226, 35);
							PushFollow(Follow._attribute_args_in_attribute_item656);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(226, 52);
					char_literal22=(IToken)Match(input,84,Follow._84_in_attribute_item660);  
					stream_84.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(226, 61);
					// SugarCpp.g:226:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(226, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(226, 79);
					// SugarCpp.g:226:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(226, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(227, 4);
				string_literal23=(IToken)Match(input,129,Follow._129_in_attribute_item678);  
				stream_129.Add(string_literal23);

				DebugLocation(227, 12);
				// SugarCpp.g:227:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==83))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(227, 13);
					char_literal24=(IToken)Match(input,83,Follow._83_in_attribute_item681);  
					stream_83.Add(char_literal24);

					DebugLocation(227, 17);
					PushFollow(Follow._attribute_args_in_attribute_item683);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(227, 32);
					// SugarCpp.g:227:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==90))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:227:33: ',' attribute_args
							{
							DebugLocation(227, 33);
							char_literal26=(IToken)Match(input,90,Follow._90_in_attribute_item686);  
							stream_90.Add(char_literal26);

							DebugLocation(227, 37);
							PushFollow(Follow._attribute_args_in_attribute_item688);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(227, 54);
					char_literal28=(IToken)Match(input,84,Follow._84_in_attribute_item692);  
					stream_84.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(227, 63);
					// SugarCpp.g:227:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(227, 75);
					adaptor.AddChild(root_1, stream_129.NextNode());
					DebugLocation(227, 83);
					// SugarCpp.g:227:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(227, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:230:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(231, 4);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==119))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(231, 5);
					char_literal29=(IToken)Match(input,119,Follow._119_in_attribute717);  
					stream_119.Add(char_literal29);

					DebugLocation(231, 9);
					PushFollow(Follow._attribute_item_in_attribute719);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(231, 24);
					// SugarCpp.g:231:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==90))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:25: ',' attribute_item
							{
							DebugLocation(231, 25);
							char_literal31=(IToken)Match(input,90,Follow._90_in_attribute722);  
							stream_90.Add(char_literal31);

							DebugLocation(231, 29);
							PushFollow(Follow._attribute_item_in_attribute724);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(231, 46);
					char_literal33=(IToken)Match(input,120,Follow._120_in_attribute728);  
					stream_120.Add(char_literal33);

					DebugLocation(231, 50);
					// SugarCpp.g:231:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:50: NEWLINE
							{
							DebugLocation(231, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute730);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:61: -> ( attribute_item )+
			{
				DebugLocation(231, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(231, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:234:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(235, 4);
			// SugarCpp.g:235:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==119))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: attribute
				{
				DebugLocation(235, 4);
				PushFollow(Follow._attribute_in_global_alloc749);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(235, 15);
			PushFollow(Follow._ident_list_in_global_alloc752);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(235, 26);
			// SugarCpp.g:235:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==100))
			{
				alt19 = 1;
			}
			else if ((LA19_0==102))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(235, 28);
				char_literal37=(IToken)Match(input,100,Follow._100_in_global_alloc756);  
				stream_100.Add(char_literal37);

				DebugLocation(235, 32);
				PushFollow(Follow._type_name_in_global_alloc758);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(235, 42);
				// SugarCpp.g:235:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 102:
				case 109:
					{
					alt17 = 1;
					}
					break;
				case 83:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:44: ( '=' | ':=' ) expr
					{
					DebugLocation(235, 44);
					// SugarCpp.g:235:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==109))
					{
						alt15 = 1;
					}
					else if ((LA15_0==102))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:45: '='
						{
						DebugLocation(235, 45);
						char_literal39=(IToken)Match(input,109,Follow._109_in_global_alloc763);  
						stream_109.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:235:51: ':='
						{
						DebugLocation(235, 51);
						string_literal40=(IToken)Match(input,102,Follow._102_in_global_alloc767);  
						stream_102.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(235, 57);
					PushFollow(Follow._expr_in_global_alloc770);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 235:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(235, 65);
						// SugarCpp.g:235:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(235, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(235, 84);
						// SugarCpp.g:235:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(235, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(235, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(235, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(235, 116);
						// SugarCpp.g:235:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(235, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:236:43: '(' ( expr_list )? ')'
					{
					DebugLocation(236, 43);
					char_literal42=(IToken)Match(input,83,Follow._83_in_global_alloc830);  
					stream_83.Add(char_literal42);

					DebugLocation(236, 47);
					// SugarCpp.g:236:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==76||LA16_0==81||LA16_0==83||LA16_0==85||(LA16_0>=87 && LA16_0<=88)||(LA16_0>=91 && LA16_0<=92)||(LA16_0>=118 && LA16_0<=119)||(LA16_0>=142 && LA16_0<=143)||LA16_0==161))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:47: expr_list
						{
						DebugLocation(236, 47);
						PushFollow(Follow._expr_list_in_global_alloc832);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(236, 58);
					char_literal44=(IToken)Match(input,84,Follow._84_in_global_alloc835);  
					stream_84.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 236:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(236, 65);
						// SugarCpp.g:236:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(236, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(236, 86);
						// SugarCpp.g:236:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(236, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(236, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(236, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(236, 118);
						// SugarCpp.g:236:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(236, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:237:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 237:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(237, 20);
						// SugarCpp.g:237:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(237, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(237, 39);
						// SugarCpp.g:237:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(237, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(237, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(237, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(239, 10);
				string_literal45=(IToken)Match(input,102,Follow._102_in_global_alloc908);  
				stream_102.Add(string_literal45);

				DebugLocation(239, 15);
				// SugarCpp.g:239:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:239:16: expr ( ',' expr )*
				{
				DebugLocation(239, 16);
				PushFollow(Follow._expr_in_global_alloc911);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(239, 21);
				// SugarCpp.g:239:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==90))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:239:22: ',' expr
						{
						DebugLocation(239, 22);
						char_literal47=(IToken)Match(input,90,Follow._90_in_global_alloc914);  
						stream_90.Add(char_literal47);

						DebugLocation(239, 26);
						PushFollow(Follow._expr_in_global_alloc916);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 102, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(239, 37);
					// SugarCpp.g:239:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_102.NextNode(), root_1);

					DebugLocation(239, 44);
					// SugarCpp.g:239:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(239, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(239, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(239, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(239, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:243:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==119))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_global_using953);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(244, 15);
			string_literal50=(IToken)Match(input,155,Follow._155_in_global_using956);  
			stream_155.Add(string_literal50);

			DebugLocation(244, 23);
			// SugarCpp.g:244:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==141))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:23: stmt_using_item
					{
					DebugLocation(244, 23);
					PushFollow(Follow._stmt_using_item_in_global_using958);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(244, 43);
				// SugarCpp.g:244:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(244, 56);
				// SugarCpp.g:244:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(244, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(244, 67);
				// SugarCpp.g:244:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(244, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:247:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==119))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: attribute
				{
				DebugLocation(248, 4);
				PushFollow(Follow._attribute_in_global_typedef982);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(248, 15);
			string_literal53=(IToken)Match(input,151,Follow._151_in_global_typedef985);  
			stream_151.Add(string_literal53);

			DebugLocation(248, 25);
			PushFollow(Follow._ident_in_global_typedef987);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(248, 31);
			char_literal55=(IToken)Match(input,109,Follow._109_in_global_typedef989);  
			stream_109.Add(char_literal55);

			DebugLocation(248, 35);
			PushFollow(Follow._type_name_in_global_typedef991);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(248, 48);
				// SugarCpp.g:248:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(248, 63);
				// SugarCpp.g:248:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(248, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(248, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(248, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:251:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==119))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: attribute
				{
				DebugLocation(252, 4);
				PushFollow(Follow._attribute_in_import_def1015);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(252, 15);
			string_literal58=(IToken)Match(input,137,Follow._137_in_import_def1018);  
			stream_137.Add(string_literal58);

			DebugLocation(252, 24);
			// SugarCpp.g:252:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:24: STRING
				{
				DebugLocation(252, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1020);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(252, 32);
			// SugarCpp.g:252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(252, 33);
				// SugarCpp.g:252:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:33: NEWLINE
						{
						DebugLocation(252, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1024);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(252, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1027);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(252, 49);
				// SugarCpp.g:252:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:49: NEWLINE
						{
						DebugLocation(252, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1029);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(252, 59);
				// SugarCpp.g:252:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:60: STRING ( NEWLINE )+
						{
						DebugLocation(252, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1034);  
						stream_STRING.Add(STRING63);

						DebugLocation(252, 67);
						// SugarCpp.g:252:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:252:67: NEWLINE
								{
								DebugLocation(252, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1036);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(252, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1041);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(252, 90);
				// SugarCpp.g:252:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(252, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(252, 99);
				// SugarCpp.g:252:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(252, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(252, 110);
				// SugarCpp.g:252:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(252, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:255:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(256, 4);
			// SugarCpp.g:256:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==119))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: attribute
				{
				DebugLocation(256, 4);
				PushFollow(Follow._attribute_in_enum_def1066);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(256, 15);
			string_literal67=(IToken)Match(input,133,Follow._133_in_enum_def1069);  
			stream_133.Add(string_literal67);

			DebugLocation(256, 22);
			PushFollow(Follow._ident_in_enum_def1071);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(256, 28);
			char_literal69=(IToken)Match(input,109,Follow._109_in_enum_def1073);  
			stream_109.Add(char_literal69);

			DebugLocation(256, 32);
			// SugarCpp.g:256:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:33: ident ( '|' ident )*
				{
				DebugLocation(256, 33);
				PushFollow(Follow._ident_in_enum_def1076);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(256, 39);
				// SugarCpp.g:256:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==158))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:40: '|' ident
						{
						DebugLocation(256, 40);
						char_literal71=(IToken)Match(input,158,Follow._158_in_enum_def1079);  
						stream_158.Add(char_literal71);

						DebugLocation(256, 44);
						PushFollow(Follow._ident_in_enum_def1081);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(256, 57);
				// SugarCpp.g:256:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(256, 64);
				// SugarCpp.g:256:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(256, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(256, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(256, 81);
				// SugarCpp.g:256:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(256, 94);
				// SugarCpp.g:256:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(256, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:259:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(259, 1);
		try
		{
			// SugarCpp.g:260:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:260:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(260, 4);
			// SugarCpp.g:260:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==119))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:4: attribute
				{
				DebugLocation(260, 4);
				PushFollow(Follow._attribute_in_namespace_def1114);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(260, 15);
			string_literal74=(IToken)Match(input,141,Follow._141_in_namespace_def1117);  
			stream_141.Add(string_literal74);

			DebugLocation(260, 27);
			PushFollow(Follow._ident_in_namespace_def1119);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(260, 33);
			// SugarCpp.g:260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(260, 34);
				// SugarCpp.g:260:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:34: NEWLINE
						{
						DebugLocation(260, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1122);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(260, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1125);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(260, 50);
				// SugarCpp.g:260:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:50: NEWLINE
						{
						DebugLocation(260, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1127);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(260, 59);
				PushFollow(Follow._global_block_in_namespace_def1130);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(260, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1132);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 260:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(260, 84);
				// SugarCpp.g:260:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(260, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(260, 96);
				// SugarCpp.g:260:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(260, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(260, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(260, 113);
				// SugarCpp.g:260:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(260, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:263:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(264, 5);
			// SugarCpp.g:264:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==119))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:5: attribute
				{
				DebugLocation(264, 5);
				PushFollow(Follow._attribute_in_class_def1160);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(264, 16);
			string_literal82=(IToken)Match(input,128,Follow._128_in_class_def1163);  
			stream_128.Add(string_literal82);

			DebugLocation(264, 24);
			PushFollow(Follow._ident_in_class_def1165);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(264, 30);
			// SugarCpp.g:264:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==104))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:31: generic_parameter
				{
				DebugLocation(264, 31);
				PushFollow(Follow._generic_parameter_in_class_def1168);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(264, 51);
			// SugarCpp.g:264:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==83))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:52: '(' func_args ')'
				{
				DebugLocation(264, 52);
				char_literal85=(IToken)Match(input,83,Follow._83_in_class_def1173);  
				stream_83.Add(char_literal85);

				DebugLocation(264, 56);
				PushFollow(Follow._func_args_in_class_def1175);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(264, 66);
				char_literal87=(IToken)Match(input,84,Follow._84_in_class_def1177);  
				stream_84.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(264, 72);
			// SugarCpp.g:264:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==100))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:73: ':' ident ( ',' ident )*
				{
				DebugLocation(264, 73);
				char_literal88=(IToken)Match(input,100,Follow._100_in_class_def1182);  
				stream_100.Add(char_literal88);

				DebugLocation(264, 77);
				PushFollow(Follow._ident_in_class_def1184);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(264, 83);
				// SugarCpp.g:264:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==90))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:84: ',' ident
						{
						DebugLocation(264, 84);
						char_literal90=(IToken)Match(input,90,Follow._90_in_class_def1187);  
						stream_90.Add(char_literal90);

						DebugLocation(264, 88);
						PushFollow(Follow._ident_in_class_def1189);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(264, 98);
			// SugarCpp.g:264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(264, 99);
				// SugarCpp.g:264:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:99: NEWLINE
						{
						DebugLocation(264, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1196);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(264, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1199);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(264, 115);
				// SugarCpp.g:264:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:115: NEWLINE
						{
						DebugLocation(264, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1201);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(264, 124);
				PushFollow(Follow._global_block_in_class_def1204);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(264, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1206);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(264, 149);
				// SugarCpp.g:264:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(264, 157);
				// SugarCpp.g:264:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(264, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(264, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(264, 174);
				// SugarCpp.g:264:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(264, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(264, 193);
				// SugarCpp.g:264:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(264, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(264, 204);
				// SugarCpp.g:264:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(264, 205);
					// SugarCpp.g:264:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(264, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(264, 218);
					// SugarCpp.g:264:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(264, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(264, 228);
				// SugarCpp.g:264:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(264, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:267:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(268, 4);
			PushFollow(Follow._type_star_in_type_name1249);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(268, 14);
			// SugarCpp.g:268:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt46 = 1;
				}
				break;
			case 119:
				{
				alt46 = 2;
				}
				break;
			case IDENT:
			case NEWLINE:
			case 83:
			case 84:
			case 90:
			case 102:
			case 103:
			case 109:
			case 112:
			case 135:
			case 136:
			case 152:
			case 154:
			case 157:
			case 161:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:268:16: '&'
				{
				DebugLocation(268, 16);
				char_literal98=(IToken)Match(input,81,Follow._81_in_type_name1253);  
				stream_81.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 268:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(268, 23);
					// SugarCpp.g:268:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(268, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(268, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:269:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(269, 7);
				char_literal99=(IToken)Match(input,119,Follow._119_in_type_name1269);  
				stream_119.Add(char_literal99);

				DebugLocation(269, 11);
				PushFollow(Follow._expr_in_type_name1271);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(269, 16);
				// SugarCpp.g:269:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==90))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:17: ',' expr
						{
						DebugLocation(269, 17);
						char_literal101=(IToken)Match(input,90,Follow._90_in_type_name1274);  
						stream_90.Add(char_literal101);

						DebugLocation(269, 21);
						PushFollow(Follow._expr_in_type_name1276);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(269, 28);
				char_literal103=(IToken)Match(input,120,Follow._120_in_type_name1280);  
				stream_120.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 269:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(269, 35);
					// SugarCpp.g:269:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(269, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(269, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(269, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(269, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:270:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:7: -> type_star
				{
					DebugLocation(270, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:274:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(275, 4);
			PushFollow(Follow._type_template_type_in_type_star1318);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(275, 23);
			// SugarCpp.g:275:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==85))
			{
				alt48 = 1;
			}
			else if ((LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==81||(LA48_0>=83 && LA48_0<=84)||LA48_0==90||(LA48_0>=102 && LA48_0<=103)||LA48_0==109||LA48_0==112||LA48_0==119||(LA48_0>=135 && LA48_0<=136)||LA48_0==152||LA48_0==154||LA48_0==157||LA48_0==161))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:25: ( '*' )+
				{
				DebugLocation(275, 25);
				// SugarCpp.g:275:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==85))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:25: '*'
						{
						DebugLocation(275, 25);
						char_literal105=(IToken)Match(input,85,Follow._85_in_type_star1322);  
						stream_85.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 85, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 275:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(275, 33);
					// SugarCpp.g:275:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(275, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(275, 64);
					if (!(stream_85.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_85.HasNext )
					{
						DebugLocation(275, 64);
						adaptor.AddChild(root_1, stream_85.NextNode());

					}
					stream_85.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:276:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:10: -> type_template_type
				{
					DebugLocation(276, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:280:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(281, 4);
			PushFollow(Follow._type_ident_in_type_template_type1368);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(281, 15);
			// SugarCpp.g:281:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==104))
			{
				alt51 = 1;
			}
			else if ((LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==81||(LA51_0>=83 && LA51_0<=85)||LA51_0==90||(LA51_0>=102 && LA51_0<=103)||LA51_0==109||LA51_0==112||LA51_0==119||(LA51_0>=135 && LA51_0<=136)||LA51_0==152||LA51_0==154||LA51_0==157||LA51_0==161))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(281, 17);
				char_literal107=(IToken)Match(input,104,Follow._104_in_type_template_type1372);  
				stream_104.Add(char_literal107);

				DebugLocation(281, 21);
				// SugarCpp.g:281:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==129||LA50_0==146||LA50_0==153))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:22: type_name ( ',' type_name )*
					{
					DebugLocation(281, 22);
					PushFollow(Follow._type_name_in_type_template_type1375);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(281, 32);
					// SugarCpp.g:281:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==90))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:281:33: ',' type_name
							{
							DebugLocation(281, 33);
							char_literal109=(IToken)Match(input,90,Follow._90_in_type_template_type1378);  
							stream_90.Add(char_literal109);

							DebugLocation(281, 37);
							PushFollow(Follow._type_name_in_type_template_type1380);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(281, 51);
				char_literal111=(IToken)Match(input,112,Follow._112_in_type_template_type1386);  
				stream_112.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(281, 58);
					// SugarCpp.g:281:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(281, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(281, 85);
					// SugarCpp.g:281:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(281, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:8: -> type_ident
				{
					DebugLocation(282, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:286:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree string_literal114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(287, 4);
			// SugarCpp.g:287:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==129))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:4: 'const'
				{
				DebugLocation(287, 4);
				string_literal112=(IToken)Match(input,129,Follow._129_in_type_ident1426);  
				stream_129.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(287, 13);
			// SugarCpp.g:287:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==153))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:13: 'unsigned'
				{
				DebugLocation(287, 13);
				string_literal113=(IToken)Match(input,153,Follow._153_in_type_ident1429);  
				stream_153.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(287, 25);
			// SugarCpp.g:287:25: ( 'struct' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==146))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:25: 'struct'
				{
				DebugLocation(287, 25);
				string_literal114=(IToken)Match(input,146,Follow._146_in_type_ident1432);  
				stream_146.Add(string_literal114);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(287, 35);
			PushFollow(Follow._ident_in_type_ident1435);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);


			{
			// AST REWRITE
			// elements: ident, 153, 146, 129
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(287, 44);
				// SugarCpp.g:287:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(287, 57);
				// SugarCpp.g:287:57: ( 'const' )?
				if (stream_129.HasNext)
				{
					DebugLocation(287, 57);
					adaptor.AddChild(root_1, stream_129.NextNode());

				}
				stream_129.Reset();
				DebugLocation(287, 66);
				// SugarCpp.g:287:66: ( 'unsigned' )?
				if (stream_153.HasNext)
				{
					DebugLocation(287, 66);
					adaptor.AddChild(root_1, stream_153.NextNode());

				}
				stream_153.Reset();
				DebugLocation(287, 78);
				// SugarCpp.g:287:78: ( 'struct' )?
				if (stream_146.HasNext)
				{
					DebugLocation(287, 78);
					adaptor.AddChild(root_1, stream_146.NextNode());

				}
				stream_146.Reset();
				DebugLocation(287, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:290:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: ident ( ',' ident )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1463);
			ident116=ident();
			PopFollow();

			stream_ident.Add(ident116.Tree);
			DebugLocation(291, 10);
			// SugarCpp.g:291:10: ( ',' ident )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==90))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:11: ',' ident
					{
					DebugLocation(291, 11);
					char_literal117=(IToken)Match(input,90,Follow._90_in_generic_parameter_inside1466);  
					stream_90.Add(char_literal117);

					DebugLocation(291, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1468);
					ident118=ident();
					PopFollow();

					stream_ident.Add(ident118.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(291, 26);
				// SugarCpp.g:291:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(291, 47);
				// SugarCpp.g:291:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(291, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:294:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:295:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(295, 4);
			char_literal119=(IToken)Match(input,104,Follow._104_in_generic_parameter1490);  
			stream_104.Add(char_literal119);

			DebugLocation(295, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1492);
			generic_parameter_inside120=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside120.Tree);
			DebugLocation(295, 33);
			char_literal121=(IToken)Match(input,112,Follow._112_in_generic_parameter1494);  
			stream_112.Add(char_literal121);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 295:37: -> generic_parameter_inside
			{
				DebugLocation(295, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:298:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(298, 1);
		try
		{
			// SugarCpp.g:299:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(299, 4);
			PushFollow(Follow._func_args_item_in_func_args1509);
			func_args_item122=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item122.Tree);
			DebugLocation(299, 19);
			// SugarCpp.g:299:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==90))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:299:20: ',' func_args_item
					{
					DebugLocation(299, 20);
					char_literal123=(IToken)Match(input,90,Follow._90_in_func_args1512);  
					stream_90.Add(char_literal123);

					DebugLocation(299, 24);
					PushFollow(Follow._func_args_item_in_func_args1514);
					func_args_item124=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item124.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 299:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(299, 44);
				// SugarCpp.g:299:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(299, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(299, 56);
				// SugarCpp.g:299:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(299, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:302:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken string_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree string_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==IDENT))
			{
				alt60 = 1;
			}
			else if ((LA60_0==102))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(303, 4);
				PushFollow(Follow._ident_list_in_func_args_item1536);
				ident_list125=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list125.Tree);
				DebugLocation(303, 15);
				char_literal126=(IToken)Match(input,100,Follow._100_in_func_args_item1538);  
				stream_100.Add(char_literal126);

				DebugLocation(303, 19);
				PushFollow(Follow._type_name_in_func_args_item1540);
				type_name127=type_name();
				PopFollow();

				stream_type_name.Add(type_name127.Tree);
				DebugLocation(303, 29);
				// SugarCpp.g:303:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt59=3;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				switch (input.LA(1))
				{
				case 102:
				case 109:
					{
					alt59 = 1;
					}
					break;
				case 83:
					{
					alt59 = 2;
					}
					break;
				case 84:
				case 90:
					{
					alt59 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:31: ( '=' | ':=' ) expr
					{
					DebugLocation(303, 31);
					// SugarCpp.g:303:31: ( '=' | ':=' )
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==109))
					{
						alt57 = 1;
					}
					else if ((LA57_0==102))
					{
						alt57 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:303:32: '='
						{
						DebugLocation(303, 32);
						char_literal128=(IToken)Match(input,109,Follow._109_in_func_args_item1545);  
						stream_109.Add(char_literal128);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:303:38: ':='
						{
						DebugLocation(303, 38);
						string_literal129=(IToken)Match(input,102,Follow._102_in_func_args_item1549);  
						stream_102.Add(string_literal129);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(303, 44);
					PushFollow(Follow._expr_in_func_args_item1552);
					expr130=expr();
					PopFollow();

					stream_expr.Add(expr130.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(303, 53);
						// SugarCpp.g:303:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(303, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(303, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(303, 93);
						// SugarCpp.g:303:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(303, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:33: '(' ( expr_list )? ')'
					{
					DebugLocation(304, 33);
					char_literal131=(IToken)Match(input,83,Follow._83_in_func_args_item1600);  
					stream_83.Add(char_literal131);

					DebugLocation(304, 37);
					// SugarCpp.g:304:37: ( expr_list )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==76||LA58_0==81||LA58_0==83||LA58_0==85||(LA58_0>=87 && LA58_0<=88)||(LA58_0>=91 && LA58_0<=92)||(LA58_0>=118 && LA58_0<=119)||(LA58_0>=142 && LA58_0<=143)||LA58_0==161))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:37: expr_list
						{
						DebugLocation(304, 37);
						PushFollow(Follow._expr_list_in_func_args_item1602);
						expr_list132=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list132.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(304, 48);
					char_literal133=(IToken)Match(input,84,Follow._84_in_func_args_item1605);  
					stream_84.Add(char_literal133);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(304, 56);
						// SugarCpp.g:304:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(304, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(304, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(304, 98);
						// SugarCpp.g:304:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(304, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:305:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 305:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(305, 18);
						// SugarCpp.g:305:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(305, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(305, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(305, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:307:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 8);
				string_literal134=(IToken)Match(input,102,Follow._102_in_func_args_item1662); 
				string_literal134_tree = (CommonTree)adaptor.Create(string_literal134);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal134_tree, root_0);
				DebugLocation(307, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1666);
				modify_expr135=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr135.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:310:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal138 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken NEWLINE144 = default(IToken);
		IToken char_literal146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree NEWLINE144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(310, 4);
		try
		{
			// SugarCpp.g:311:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(311, 4);
			// SugarCpp.g:311:4: ( attribute )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==119))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:4: attribute
				{
				DebugLocation(311, 4);
				PushFollow(Follow._attribute_in_func_def1677);
				attribute136=attribute();
				PopFollow();

				stream_attribute.Add(attribute136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(311, 15);
			// SugarCpp.g:311:15: ( type_name )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			try
			{
				alt62 = dfa62.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:15: type_name
				{
				DebugLocation(311, 15);
				PushFollow(Follow._type_name_in_func_def1680);
				type_name137=type_name();
				PopFollow();

				stream_type_name.Add(type_name137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(311, 26);
			// SugarCpp.g:311:26: ( '~' )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==161))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:26: '~'
				{
				DebugLocation(311, 26);
				char_literal138=(IToken)Match(input,161,Follow._161_in_func_def1683);  
				stream_161.Add(char_literal138);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(311, 31);
			PushFollow(Follow._ident_in_func_def1686);
			ident139=ident();
			PopFollow();

			stream_ident.Add(ident139.Tree);
			DebugLocation(311, 37);
			// SugarCpp.g:311:37: ( generic_parameter )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==104))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:37: generic_parameter
				{
				DebugLocation(311, 37);
				PushFollow(Follow._generic_parameter_in_func_def1688);
				generic_parameter140=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(311, 56);
			char_literal141=(IToken)Match(input,83,Follow._83_in_func_def1691);  
			stream_83.Add(char_literal141);

			DebugLocation(311, 60);
			// SugarCpp.g:311:60: ( func_args )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==IDENT||LA65_0==102))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:60: func_args
				{
				DebugLocation(311, 60);
				PushFollow(Follow._func_args_in_func_def1693);
				func_args142=func_args();
				PopFollow();

				stream_func_args.Add(func_args142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(311, 71);
			char_literal143=(IToken)Match(input,84,Follow._84_in_func_def1696);  
			stream_84.Add(char_literal143);

			DebugLocation(311, 75);
			// SugarCpp.g:311:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==NEWLINE))
			{
				alt67 = 1;
			}
			else if ((LA67_0==109))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(311, 76);
				// SugarCpp.g:311:76: ( NEWLINE )+
				int cnt66=0;
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=2;
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==NEWLINE))
					{
						alt66 = 1;
					}


					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:76: NEWLINE
						{
						DebugLocation(311, 76);
						NEWLINE144=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1699);  
						stream_NEWLINE.Add(NEWLINE144);


						}
						break;

					default:
						if (cnt66 >= 1)
							goto loop66;

						EarlyExitException eee66 = new EarlyExitException( 66, input );
						DebugRecognitionException(eee66);
						throw eee66;
					}
					cnt66++;
				}
				loop66:
					;

				} finally { DebugExitSubRule(66); }

				DebugLocation(311, 85);
				PushFollow(Follow._stmt_block_in_func_def1702);
				stmt_block145=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block145.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, ident, func_args, stmt_block, 161, type_name, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(311, 99);
					// SugarCpp.g:311:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(311, 110);
					// SugarCpp.g:311:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(311, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(311, 121);
					// SugarCpp.g:311:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(311, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(311, 132);
					// SugarCpp.g:311:132: ( '~' )?
					if (stream_161.HasNext)
					{
						DebugLocation(311, 132);
						adaptor.AddChild(root_1, stream_161.NextNode());

					}
					stream_161.Reset();
					DebugLocation(311, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(311, 143);
					// SugarCpp.g:311:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(311, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(311, 162);
					// SugarCpp.g:311:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(311, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(311, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:23: '=' expr
				{
				DebugLocation(312, 23);
				char_literal146=(IToken)Match(input,109,Follow._109_in_func_def1751);  
				stream_109.Add(char_literal146);

				DebugLocation(312, 27);
				PushFollow(Follow._expr_in_func_def1753);
				expr147=expr();
				PopFollow();

				stream_expr.Add(expr147.Tree);


				{
				// AST REWRITE
				// elements: attribute, func_args, ident, 161, expr, type_name, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(312, 36);
					// SugarCpp.g:312:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(312, 47);
					// SugarCpp.g:312:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(312, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(312, 58);
					// SugarCpp.g:312:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(312, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(312, 69);
					// SugarCpp.g:312:69: ( '~' )?
					if (stream_161.HasNext)
					{
						DebugLocation(312, 69);
						adaptor.AddChild(root_1, stream_161.NextNode());

					}
					stream_161.Reset();
					DebugLocation(312, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(312, 80);
					// SugarCpp.g:312:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(312, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(312, 99);
					// SugarCpp.g:312:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(312, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(312, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:315:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE | ';' )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 23);
		TraceIn("stmt_block", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT148 = default(IToken);
		IToken NEWLINE149 = default(IToken);
		IToken NEWLINE151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken DEDENT153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT148_tree = default(CommonTree);
		CommonTree NEWLINE149_tree = default(CommonTree);
		CommonTree NEWLINE151_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree DEDENT153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE | ';' )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE | ';' )+ )* DEDENT
			{
			DebugLocation(316, 4);
			INDENT148=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1794);  
			stream_INDENT.Add(INDENT148);

			DebugLocation(316, 11);
			// SugarCpp.g:316:11: ( NEWLINE )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==NEWLINE))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:11: NEWLINE
					{
					DebugLocation(316, 11);
					NEWLINE149=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1796);  
					stream_NEWLINE.Add(NEWLINE149);


					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(316, 20);
			// SugarCpp.g:316:20: ( stmt ( NEWLINE | ';' )+ )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==IDENT||LA70_0==76||LA70_0==81||LA70_0==83||LA70_0==85||(LA70_0>=87 && LA70_0<=88)||(LA70_0>=91 && LA70_0<=92)||LA70_0==118||LA70_0==130||(LA70_0>=134 && LA70_0<=136)||LA70_0==140||LA70_0==143||LA70_0==145||LA70_0==147||(LA70_0>=150 && LA70_0<=152)||(LA70_0>=154 && LA70_0<=155)||LA70_0==157||LA70_0==161))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:21: stmt ( NEWLINE | ';' )+
					{
					DebugLocation(316, 21);
					PushFollow(Follow._stmt_in_stmt_block1800);
					stmt150=stmt();
					PopFollow();

					stream_stmt.Add(stmt150.Tree);
					DebugLocation(316, 26);
					// SugarCpp.g:316:26: ( NEWLINE | ';' )+
					int cnt69=0;
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=3;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}
						else if ((LA69_0==103))
						{
							alt69 = 2;
						}


						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:316:27: NEWLINE
							{
							DebugLocation(316, 27);
							NEWLINE151=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1803);  
							stream_NEWLINE.Add(NEWLINE151);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:316:37: ';'
							{
							DebugLocation(316, 37);
							char_literal152=(IToken)Match(input,103,Follow._103_in_stmt_block1807);  
							stream_103.Add(char_literal152);


							}
							break;

						default:
							if (cnt69 >= 1)
								goto loop69;

							EarlyExitException eee69 = new EarlyExitException( 69, input );
							DebugRecognitionException(eee69);
							throw eee69;
						}
						cnt69++;
					}
					loop69:
						;

					} finally { DebugExitSubRule(69); }


					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }

			DebugLocation(316, 45);
			DEDENT153=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1813);  
			stream_DEDENT.Add(DEDENT153);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:52: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(316, 55);
				// SugarCpp.g:316:55: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 57);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(316, 68);
				// SugarCpp.g:316:68: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(316, 68);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 23);
			LeaveRule("stmt_block", 23);
			LeaveRule_stmt_block();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:319:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 24);
		TraceIn("stmt", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer )
			int alt71=6;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 76:
			case 81:
			case 83:
			case 85:
			case 87:
			case 88:
			case 91:
			case 92:
			case 118:
			case 143:
			case 145:
			case 147:
			case 151:
			case 155:
			case 161:
				{
				alt71 = 1;
				}
				break;
			case 136:
			case 152:
				{
				alt71 = 2;
				}
				break;
			case 135:
				{
				alt71 = 3;
				}
				break;
			case 140:
			case 154:
			case 157:
				{
				alt71 = 4;
				}
				break;
			case 150:
				{
				alt71 = 5;
				}
				break;
			case 130:
			case 134:
				{
				alt71 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._stmt_expr_in_stmt1833);
				stmt_expr154=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr154.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:321:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._stmt_if_in_stmt1838);
				stmt_if155=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if155.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:322:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._stmt_for_in_stmt1843);
				stmt_for156=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for156.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:323:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(323, 4);
				PushFollow(Follow._stmt_while_in_stmt1848);
				stmt_while157=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while157.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:324:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(324, 4);
				PushFollow(Follow._stmt_try_in_stmt1853);
				stmt_try158=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try158.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:325:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._stmt_defer_in_stmt1858);
				stmt_defer159=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer159.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 24);
			LeaveRule("stmt", 24);
			LeaveRule_stmt();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:328:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 25);
		TraceIn("stmt_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal160 = default(IToken);
		IToken string_literal162 = default(IToken);
		IToken string_literal164 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken string_literal168 = default(IToken);
		IToken char_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal160_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree string_literal168_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(329, 4);
			// SugarCpp.g:329:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:329:5: a= stmt_expr_item
			{
			DebugLocation(329, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1872);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:22: -> $a
			{
				DebugLocation(329, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(329, 29);
			// SugarCpp.g:329:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=6;
				try { DebugEnterDecision(73, false);
				switch (input.LA(1))
				{
				case 136:
					{
					alt73 = 1;
					}
					break;
				case 152:
					{
					alt73 = 2;
					}
					break;
				case 157:
					{
					alt73 = 3;
					}
					break;
				case 154:
					{
					alt73 = 4;
					}
					break;
				case 135:
					{
					alt73 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:31: 'if' expr
					{
					DebugLocation(329, 31);
					string_literal160=(IToken)Match(input,136,Follow._136_in_stmt_expr1882);  
					stream_136.Add(string_literal160);

					DebugLocation(329, 36);
					PushFollow(Follow._expr_in_stmt_expr1884);
					expr161=expr();
					PopFollow();

					stream_expr.Add(expr161.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(329, 44);
						// SugarCpp.g:329:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(329, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 59);
						// SugarCpp.g:329:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(329, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:330:13: 'unless' expr
					{
					DebugLocation(330, 13);
					string_literal162=(IToken)Match(input,152,Follow._152_in_stmt_expr1913);  
					stream_152.Add(string_literal162);

					DebugLocation(330, 22);
					PushFollow(Follow._expr_in_stmt_expr1915);
					expr163=expr();
					PopFollow();

					stream_expr.Add(expr163.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(330, 30);
						// SugarCpp.g:330:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(330, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(330, 49);
						// SugarCpp.g:330:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(330, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:331:13: 'while' expr
					{
					DebugLocation(331, 13);
					string_literal164=(IToken)Match(input,157,Follow._157_in_stmt_expr1944);  
					stream_157.Add(string_literal164);

					DebugLocation(331, 21);
					PushFollow(Follow._expr_in_stmt_expr1946);
					expr165=expr();
					PopFollow();

					stream_expr.Add(expr165.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(331, 29);
						// SugarCpp.g:331:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(331, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(331, 47);
						// SugarCpp.g:331:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(331, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:332:13: 'until' expr
					{
					DebugLocation(332, 13);
					string_literal166=(IToken)Match(input,154,Follow._154_in_stmt_expr1975);  
					stream_154.Add(string_literal166);

					DebugLocation(332, 21);
					PushFollow(Follow._expr_in_stmt_expr1977);
					expr167=expr();
					PopFollow();

					stream_expr.Add(expr167.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(332, 29);
						// SugarCpp.g:332:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(332, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(332, 47);
						// SugarCpp.g:332:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(332, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:333:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(333, 13);
					string_literal168=(IToken)Match(input,135,Follow._135_in_stmt_expr2006);  
					stream_135.Add(string_literal168);

					DebugLocation(333, 19);
					PushFollow(Follow._for_item_in_stmt_expr2008);
					for_item169=for_item();
					PopFollow();

					stream_for_item.Add(for_item169.Tree);
					DebugLocation(333, 28);
					// SugarCpp.g:333:28: ( ',' for_item )*
					try { DebugEnterSubRule(72);
					while (true)
					{
						int alt72=2;
						try { DebugEnterDecision(72, false);
						int LA72_0 = input.LA(1);

						if ((LA72_0==90))
						{
							alt72 = 1;
						}


						} finally { DebugExitDecision(72); }
						switch ( alt72 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:333:29: ',' for_item
							{
							DebugLocation(333, 29);
							char_literal170=(IToken)Match(input,90,Follow._90_in_stmt_expr2011);  
							stream_90.Add(char_literal170);

							DebugLocation(333, 33);
							PushFollow(Follow._for_item_in_stmt_expr2013);
							for_item171=for_item();
							PopFollow();

							stream_for_item.Add(for_item171.Tree);

							}
							break;

						default:
							goto loop72;
						}
					}

					loop72:
						;

					} finally { DebugExitSubRule(72); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(333, 47);
						// SugarCpp.g:333:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(333, 58);
						// SugarCpp.g:333:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(333, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(333, 68);
						// SugarCpp.g:333:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(333, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 25);
			LeaveRule("stmt_expr", 25);
			LeaveRule_stmt_expr();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:337:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 26);
		TraceIn("stmt_expr_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch )
			int alt74=6;
			try { DebugEnterDecision(74, false);
			try
			{
				alt74 = dfa74.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:338:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2055);
				stmt_alloc172=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc172.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:339:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2060);
				stmt_return173=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return173.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:340:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2065);
				stmt_using174=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using174.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:341:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(341, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2070);
				stmt_typedef175=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef175.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:342:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(342, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2075);
				stmt_modify176=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify176.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:343:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 4);
				PushFollow(Follow._stmt_switch_in_stmt_expr_item2080);
				stmt_switch177=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch177.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 26);
			LeaveRule("stmt_expr_item", 26);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:346:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 27);
		TraceIn("stmt_defer", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal178 = default(IToken);
		IToken string_literal180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==130))
			{
				alt75 = 1;
			}
			else if ((LA75_0==134))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:347:4: 'defer' stmt
				{
				DebugLocation(347, 4);
				string_literal178=(IToken)Match(input,130,Follow._130_in_stmt_defer2091);  
				stream_130.Add(string_literal178);

				DebugLocation(347, 12);
				PushFollow(Follow._stmt_in_stmt_defer2093);
				stmt179=stmt();
				PopFollow();

				stream_stmt.Add(stmt179.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(347, 20);
					// SugarCpp.g:347:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(347, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(347, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:348:4: 'finally' stmt
				{
				DebugLocation(348, 4);
				string_literal180=(IToken)Match(input,134,Follow._134_in_stmt_defer2106);  
				stream_134.Add(string_literal180);

				DebugLocation(348, 14);
				PushFollow(Follow._stmt_in_stmt_defer2108);
				stmt181=stmt();
				PopFollow();

				stream_stmt.Add(stmt181.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(348, 22);
					// SugarCpp.g:348:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(348, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(348, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 27);
			LeaveRule("stmt_defer", 27);
			LeaveRule_stmt_defer();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:351:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 28);
		TraceIn("stmt_typedef", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal182 = default(IToken);
		IToken char_literal184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal182_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(351, 1);
		try
		{
			// SugarCpp.g:352:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: 'typedef' ident '=' type_name
			{
			DebugLocation(352, 4);
			string_literal182=(IToken)Match(input,151,Follow._151_in_stmt_typedef2127);  
			stream_151.Add(string_literal182);

			DebugLocation(352, 14);
			PushFollow(Follow._ident_in_stmt_typedef2129);
			ident183=ident();
			PopFollow();

			stream_ident.Add(ident183.Tree);
			DebugLocation(352, 20);
			char_literal184=(IToken)Match(input,109,Follow._109_in_stmt_typedef2131);  
			stream_109.Add(char_literal184);

			DebugLocation(352, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2133);
			type_name185=type_name();
			PopFollow();

			stream_type_name.Add(type_name185.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(352, 37);
				// SugarCpp.g:352:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(352, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(352, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(352, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 28);
			LeaveRule("stmt_typedef", 28);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:355:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 29);
		TraceIn("stmt_using_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(355, 36);
		try
		{
			// SugarCpp.g:355:16: ( ident | 'namespace' )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==IDENT))
			{
				alt76 = 1;
			}
			else if ((LA76_0==141))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 18);
				PushFollow(Follow._ident_in_stmt_using_item2152);
				ident186=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident186.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:355:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 26);
				string_literal187=(IToken)Match(input,141,Follow._141_in_stmt_using_item2156); 
				string_literal187_tree = (CommonTree)adaptor.Create(string_literal187);
				adaptor.AddChild(root_0, string_literal187_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 29);
			LeaveRule("stmt_using_item", 29);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(355, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:356:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 30);
		TraceIn("stmt_using", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(357, 4);
			string_literal188=(IToken)Match(input,155,Follow._155_in_stmt_using2164);  
			stream_155.Add(string_literal188);

			DebugLocation(357, 12);
			// SugarCpp.g:357:12: ( stmt_using_item )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==IDENT||LA77_0==141))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:12: stmt_using_item
					{
					DebugLocation(357, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2166);
					stmt_using_item189=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item189.Tree);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 357:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(357, 32);
				// SugarCpp.g:357:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(357, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(357, 45);
				// SugarCpp.g:357:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(357, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 30);
			LeaveRule("stmt_using", 30);
			LeaveRule_stmt_using();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:360:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 31);
		TraceIn("stmt_return", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:361:4: 'return' ( expr )?
			{
			DebugLocation(361, 4);
			string_literal190=(IToken)Match(input,145,Follow._145_in_stmt_return2187);  
			stream_145.Add(string_literal190);

			DebugLocation(361, 13);
			// SugarCpp.g:361:13: ( expr )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENT||LA78_0==NUMBER||LA78_0==STRING||LA78_0==76||LA78_0==81||LA78_0==83||LA78_0==85||(LA78_0>=87 && LA78_0<=88)||(LA78_0>=91 && LA78_0<=92)||(LA78_0>=118 && LA78_0<=119)||(LA78_0>=142 && LA78_0<=143)||LA78_0==161))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:13: expr
				{
				DebugLocation(361, 13);
				PushFollow(Follow._expr_in_stmt_return2189);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(78); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(361, 22);
				// SugarCpp.g:361:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(361, 36);
				// SugarCpp.g:361:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(361, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 31);
			LeaveRule("stmt_return", 31);
			LeaveRule_stmt_return();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:364:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 32);
		TraceIn("stmt_if", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal192 = default(IToken);
		IToken NEWLINE194 = default(IToken);
		IToken NEWLINE196 = default(IToken);
		IToken string_literal197 = default(IToken);
		IToken NEWLINE198 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken string_literal202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		IToken NEWLINE206 = default(IToken);
		IToken string_literal207 = default(IToken);
		IToken NEWLINE208 = default(IToken);
		IToken string_literal210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree NEWLINE194_tree = default(CommonTree);
		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree string_literal197_tree = default(CommonTree);
		CommonTree NEWLINE198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		CommonTree NEWLINE206_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree NEWLINE208_tree = default(CommonTree);
		CommonTree string_literal210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt89=2;
			try { DebugEnterDecision(89, false);
			int LA89_0 = input.LA(1);

			if ((LA89_0==136))
			{
				alt89 = 1;
			}
			else if ((LA89_0==152))
			{
				alt89 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(365, 4);
				string_literal192=(IToken)Match(input,136,Follow._136_in_stmt_if2210);  
				stream_136.Add(string_literal192);

				DebugLocation(365, 9);
				PushFollow(Follow._expr_in_stmt_if2212);
				expr193=expr();
				PopFollow();

				stream_expr.Add(expr193.Tree);
				DebugLocation(365, 14);
				// SugarCpp.g:365:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==NEWLINE))
				{
					alt83 = 1;
				}
				else if ((LA83_0==148))
				{
					alt83 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(365, 15);
					// SugarCpp.g:365:15: ( NEWLINE )+
					int cnt79=0;
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==NEWLINE))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:365:15: NEWLINE
							{
							DebugLocation(365, 15);
							NEWLINE194=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2215);  
							stream_NEWLINE.Add(NEWLINE194);


							}
							break;

						default:
							if (cnt79 >= 1)
								goto loop79;

							EarlyExitException eee79 = new EarlyExitException( 79, input );
							DebugRecognitionException(eee79);
							throw eee79;
						}
						cnt79++;
					}
					loop79:
						;

					} finally { DebugExitSubRule(79); }

					DebugLocation(365, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2218);
					stmt_block195=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block195.Tree);
					DebugLocation(365, 35);
					// SugarCpp.g:365:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, false);
					try
					{
						alt82 = dfa82.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:365:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(365, 36);
						// SugarCpp.g:365:36: ( NEWLINE )*
						try { DebugEnterSubRule(80);
						while (true)
						{
							int alt80=2;
							try { DebugEnterDecision(80, false);
							int LA80_0 = input.LA(1);

							if ((LA80_0==NEWLINE))
							{
								alt80 = 1;
							}


							} finally { DebugExitDecision(80); }
							switch ( alt80 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:365:36: NEWLINE
								{
								DebugLocation(365, 36);
								NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2221);  
								stream_NEWLINE.Add(NEWLINE196);


								}
								break;

							default:
								goto loop80;
							}
						}

						loop80:
							;

						} finally { DebugExitSubRule(80); }

						DebugLocation(365, 45);
						string_literal197=(IToken)Match(input,132,Follow._132_in_stmt_if2224);  
						stream_132.Add(string_literal197);

						DebugLocation(365, 52);
						// SugarCpp.g:365:52: ( NEWLINE )+
						int cnt81=0;
						try { DebugEnterSubRule(81);
						while (true)
						{
							int alt81=2;
							try { DebugEnterDecision(81, false);
							int LA81_0 = input.LA(1);

							if ((LA81_0==NEWLINE))
							{
								alt81 = 1;
							}


							} finally { DebugExitDecision(81); }
							switch (alt81)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:365:52: NEWLINE
								{
								DebugLocation(365, 52);
								NEWLINE198=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2226);  
								stream_NEWLINE.Add(NEWLINE198);


								}
								break;

							default:
								if (cnt81 >= 1)
									goto loop81;

								EarlyExitException eee81 = new EarlyExitException( 81, input );
								DebugRecognitionException(eee81);
								throw eee81;
							}
							cnt81++;
						}
						loop81:
							;

						} finally { DebugExitSubRule(81); }

						DebugLocation(365, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2229);
						stmt_block199=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block199.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(82); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(365, 77);
						// SugarCpp.g:365:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(365, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(365, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(365, 103);
						// SugarCpp.g:365:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(365, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:366:16: 'then' stmt
					{
					DebugLocation(366, 16);
					string_literal200=(IToken)Match(input,148,Follow._148_in_stmt_if2261);  
					stream_148.Add(string_literal200);

					DebugLocation(366, 23);
					PushFollow(Follow._stmt_in_stmt_if2263);
					stmt201=stmt();
					PopFollow();

					stream_stmt.Add(stmt201.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 366:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(366, 31);
						// SugarCpp.g:366:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(366, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(366, 46);
						// SugarCpp.g:366:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(366, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:368:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(368, 4);
				string_literal202=(IToken)Match(input,152,Follow._152_in_stmt_if2288);  
				stream_152.Add(string_literal202);

				DebugLocation(368, 13);
				PushFollow(Follow._expr_in_stmt_if2290);
				expr203=expr();
				PopFollow();

				stream_expr.Add(expr203.Tree);
				DebugLocation(368, 18);
				// SugarCpp.g:368:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==NEWLINE))
				{
					alt88 = 1;
				}
				else if ((LA88_0==148))
				{
					alt88 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(368, 19);
					// SugarCpp.g:368:19: ( NEWLINE )+
					int cnt84=0;
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==NEWLINE))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:368:19: NEWLINE
							{
							DebugLocation(368, 19);
							NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2293);  
							stream_NEWLINE.Add(NEWLINE204);


							}
							break;

						default:
							if (cnt84 >= 1)
								goto loop84;

							EarlyExitException eee84 = new EarlyExitException( 84, input );
							DebugRecognitionException(eee84);
							throw eee84;
						}
						cnt84++;
					}
					loop84:
						;

					} finally { DebugExitSubRule(84); }

					DebugLocation(368, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2296);
					stmt_block205=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block205.Tree);
					DebugLocation(368, 39);
					// SugarCpp.g:368:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, false);
					try
					{
						alt87 = dfa87.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(368, 40);
						// SugarCpp.g:368:40: ( NEWLINE )*
						try { DebugEnterSubRule(85);
						while (true)
						{
							int alt85=2;
							try { DebugEnterDecision(85, false);
							int LA85_0 = input.LA(1);

							if ((LA85_0==NEWLINE))
							{
								alt85 = 1;
							}


							} finally { DebugExitDecision(85); }
							switch ( alt85 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:368:40: NEWLINE
								{
								DebugLocation(368, 40);
								NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2299);  
								stream_NEWLINE.Add(NEWLINE206);


								}
								break;

							default:
								goto loop85;
							}
						}

						loop85:
							;

						} finally { DebugExitSubRule(85); }

						DebugLocation(368, 49);
						string_literal207=(IToken)Match(input,132,Follow._132_in_stmt_if2302);  
						stream_132.Add(string_literal207);

						DebugLocation(368, 56);
						// SugarCpp.g:368:56: ( NEWLINE )+
						int cnt86=0;
						try { DebugEnterSubRule(86);
						while (true)
						{
							int alt86=2;
							try { DebugEnterDecision(86, false);
							int LA86_0 = input.LA(1);

							if ((LA86_0==NEWLINE))
							{
								alt86 = 1;
							}


							} finally { DebugExitDecision(86); }
							switch (alt86)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:368:56: NEWLINE
								{
								DebugLocation(368, 56);
								NEWLINE208=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2304);  
								stream_NEWLINE.Add(NEWLINE208);


								}
								break;

							default:
								if (cnt86 >= 1)
									goto loop86;

								EarlyExitException eee86 = new EarlyExitException( 86, input );
								DebugRecognitionException(eee86);
								throw eee86;
							}
							cnt86++;
						}
						loop86:
							;

						} finally { DebugExitSubRule(86); }

						DebugLocation(368, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2307);
						stmt_block209=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block209.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(87); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(368, 81);
						// SugarCpp.g:368:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(368, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(368, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(368, 111);
						// SugarCpp.g:368:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(368, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:20: 'then' stmt
					{
					DebugLocation(369, 20);
					string_literal210=(IToken)Match(input,148,Follow._148_in_stmt_if2343);  
					stream_148.Add(string_literal210);

					DebugLocation(369, 27);
					PushFollow(Follow._stmt_in_stmt_if2345);
					stmt211=stmt();
					PopFollow();

					stream_stmt.Add(stmt211.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(369, 35);
						// SugarCpp.g:369:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(369, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(369, 54);
						// SugarCpp.g:369:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(369, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 32);
			LeaveRule("stmt_if", 32);
			LeaveRule_stmt_if();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:373:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 33);
		TraceIn("stmt_while", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal212 = default(IToken);
		IToken NEWLINE214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken string_literal218 = default(IToken);
		IToken NEWLINE220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken string_literal224 = default(IToken);
		IToken NEWLINE226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal212_tree = default(CommonTree);
		CommonTree NEWLINE214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree NEWLINE220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree NEWLINE226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt96=3;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case 157:
				{
				alt96 = 1;
				}
				break;
			case 154:
				{
				alt96 = 2;
				}
				break;
			case 140:
				{
				alt96 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(374, 4);
				string_literal212=(IToken)Match(input,157,Follow._157_in_stmt_while2380);  
				stream_157.Add(string_literal212);

				DebugLocation(374, 12);
				PushFollow(Follow._expr_in_stmt_while2382);
				expr213=expr();
				PopFollow();

				stream_expr.Add(expr213.Tree);
				DebugLocation(374, 17);
				// SugarCpp.g:374:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==NEWLINE))
				{
					alt91 = 1;
				}
				else if ((LA91_0==148))
				{
					alt91 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(374, 19);
					// SugarCpp.g:374:19: ( NEWLINE )+
					int cnt90=0;
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==NEWLINE))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch (alt90)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:374:19: NEWLINE
							{
							DebugLocation(374, 19);
							NEWLINE214=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2386);  
							stream_NEWLINE.Add(NEWLINE214);


							}
							break;

						default:
							if (cnt90 >= 1)
								goto loop90;

							EarlyExitException eee90 = new EarlyExitException( 90, input );
							DebugRecognitionException(eee90);
							throw eee90;
						}
						cnt90++;
					}
					loop90:
						;

					} finally { DebugExitSubRule(90); }

					DebugLocation(374, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2389);
					stmt_block215=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block215.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 374:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(374, 42);
						// SugarCpp.g:374:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(374, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(374, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:375:13: 'then' stmt
					{
					DebugLocation(375, 13);
					string_literal216=(IToken)Match(input,148,Follow._148_in_stmt_while2413);  
					stream_148.Add(string_literal216);

					DebugLocation(375, 20);
					PushFollow(Follow._stmt_in_stmt_while2415);
					stmt217=stmt();
					PopFollow();

					stream_stmt.Add(stmt217.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(375, 28);
						// SugarCpp.g:375:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(375, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(375, 46);
						// SugarCpp.g:375:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(375, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:377:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(377, 4);
				string_literal218=(IToken)Match(input,154,Follow._154_in_stmt_while2443);  
				stream_154.Add(string_literal218);

				DebugLocation(377, 12);
				PushFollow(Follow._expr_in_stmt_while2445);
				expr219=expr();
				PopFollow();

				stream_expr.Add(expr219.Tree);
				DebugLocation(377, 17);
				// SugarCpp.g:377:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==NEWLINE))
				{
					alt93 = 1;
				}
				else if ((LA93_0==148))
				{
					alt93 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(377, 19);
					// SugarCpp.g:377:19: ( NEWLINE )+
					int cnt92=0;
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch (alt92)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:377:19: NEWLINE
							{
							DebugLocation(377, 19);
							NEWLINE220=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2449);  
							stream_NEWLINE.Add(NEWLINE220);


							}
							break;

						default:
							if (cnt92 >= 1)
								goto loop92;

							EarlyExitException eee92 = new EarlyExitException( 92, input );
							DebugRecognitionException(eee92);
							throw eee92;
						}
						cnt92++;
					}
					loop92:
						;

					} finally { DebugExitSubRule(92); }

					DebugLocation(377, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2452);
					stmt_block221=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block221.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(377, 42);
						// SugarCpp.g:377:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(377, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(377, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:378:13: 'then' stmt
					{
					DebugLocation(378, 13);
					string_literal222=(IToken)Match(input,148,Follow._148_in_stmt_while2476);  
					stream_148.Add(string_literal222);

					DebugLocation(378, 20);
					PushFollow(Follow._stmt_in_stmt_while2478);
					stmt223=stmt();
					PopFollow();

					stream_stmt.Add(stmt223.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(378, 28);
						// SugarCpp.g:378:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(378, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(378, 46);
						// SugarCpp.g:378:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(378, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(93); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:380:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(380, 4);
				string_literal224=(IToken)Match(input,140,Follow._140_in_stmt_while2506);  
				stream_140.Add(string_literal224);

				DebugLocation(380, 11);
				// SugarCpp.g:380:11: ( expr )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==IDENT||LA94_0==NUMBER||LA94_0==STRING||LA94_0==76||LA94_0==81||LA94_0==83||LA94_0==85||(LA94_0>=87 && LA94_0<=88)||(LA94_0>=91 && LA94_0<=92)||(LA94_0>=118 && LA94_0<=119)||(LA94_0>=142 && LA94_0<=143)||LA94_0==161))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:11: expr
					{
					DebugLocation(380, 11);
					PushFollow(Follow._expr_in_stmt_while2508);
					expr225=expr();
					PopFollow();

					stream_expr.Add(expr225.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(380, 17);
				// SugarCpp.g:380:17: ( NEWLINE )+
				int cnt95=0;
				try { DebugEnterSubRule(95);
				while (true)
				{
					int alt95=2;
					try { DebugEnterDecision(95, false);
					int LA95_0 = input.LA(1);

					if ((LA95_0==NEWLINE))
					{
						alt95 = 1;
					}


					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:380:17: NEWLINE
						{
						DebugLocation(380, 17);
						NEWLINE226=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2511);  
						stream_NEWLINE.Add(NEWLINE226);


						}
						break;

					default:
						if (cnt95 >= 1)
							goto loop95;

						EarlyExitException eee95 = new EarlyExitException( 95, input );
						DebugRecognitionException(eee95);
						throw eee95;
					}
					cnt95++;
				}
				loop95:
					;

				} finally { DebugExitSubRule(95); }

				DebugLocation(380, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2514);
				stmt_block227=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block227.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(380, 40);
					// SugarCpp.g:380:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(380, 52);
					// SugarCpp.g:380:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(380, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(380, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 33);
			LeaveRule("stmt_while", 33);
			LeaveRule_stmt_while();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:383:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 34);
		TraceIn("for_range", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal229 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken string_literal232 = default(IToken);
		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal229_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:384:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(384, 4);
			PushFollow(Follow._ident_in_for_range2536);
			ident228=ident();
			PopFollow();

			stream_ident.Add(ident228.Tree);
			DebugLocation(384, 10);
			string_literal229=(IToken)Match(input,105,Follow._105_in_for_range2538);  
			stream_105.Add(string_literal229);

			DebugLocation(384, 16);
			PushFollow(Follow._expr_in_for_range2542);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(384, 22);
			// SugarCpp.g:384:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt99=3;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case 149:
				{
				alt99 = 1;
				}
				break;
			case 131:
				{
				alt99 = 2;
				}
				break;
			case NEWLINE:
			case 90:
			case 103:
			case 135:
			case 136:
			case 152:
			case 154:
			case 157:
				{
				alt99 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(384, 23);
				string_literal230=(IToken)Match(input,149,Follow._149_in_for_range2545);  
				stream_149.Add(string_literal230);

				DebugLocation(384, 29);
				PushFollow(Follow._expr_in_for_range2549);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(384, 35);
				// SugarCpp.g:384:35: ( 'by' c= expr )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==126))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:384:36: 'by' c= expr
					{
					DebugLocation(384, 36);
					string_literal231=(IToken)Match(input,126,Follow._126_in_for_range2552);  
					stream_126.Add(string_literal231);

					DebugLocation(384, 42);
					PushFollow(Follow._expr_in_for_range2556);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(97); }



				{
				// AST REWRITE
				// elements: c, a, ident, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 384:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(384, 53);
					// SugarCpp.g:384:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(384, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(384, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(384, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(384, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(384, 80);
					// SugarCpp.g:384:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(384, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(385, 8);
				string_literal232=(IToken)Match(input,131,Follow._131_in_for_range2585);  
				stream_131.Add(string_literal232);

				DebugLocation(385, 18);
				PushFollow(Follow._expr_in_for_range2589);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(385, 24);
				// SugarCpp.g:385:24: ( 'by' c= expr )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==126))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:25: 'by' c= expr
					{
					DebugLocation(385, 25);
					string_literal233=(IToken)Match(input,126,Follow._126_in_for_range2592);  
					stream_126.Add(string_literal233);

					DebugLocation(385, 31);
					PushFollow(Follow._expr_in_for_range2596);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(98); }



				{
				// AST REWRITE
				// elements: a, c, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(385, 42);
					// SugarCpp.g:385:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(385, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(385, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(385, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(385, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(385, 74);
					// SugarCpp.g:385:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(385, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:386:9: 
				{

				{
				// AST REWRITE
				// elements: ident, a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(386, 12);
					// SugarCpp.g:386:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(386, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(386, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(386, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 34);
			LeaveRule("for_range", 34);
			LeaveRule_for_range();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:390:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 35);
		TraceIn("for_when", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: expr
			{
			DebugLocation(391, 4);
			PushFollow(Follow._expr_in_for_when2654);
			expr234=expr();
			PopFollow();

			stream_expr.Add(expr234.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:9: -> ^( For_Item_When expr )
			{
				DebugLocation(391, 12);
				// SugarCpp.g:391:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(391, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(391, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 35);
			LeaveRule("for_when", 35);
			LeaveRule_for_when();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:394:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 36);
		TraceIn("for_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(394, 1);
		try
		{
			// SugarCpp.g:395:2: ( for_range | for_when )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			try
			{
				alt100 = dfa100.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:395:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._for_range_in_for_item2673);
				for_range235=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range235.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:396:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._for_when_in_for_item2678);
				for_when236=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when236.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 36);
			LeaveRule("for_item", 36);
			LeaveRule_for_item();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:399:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 37);
		TraceIn("stmt_for", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal237 = default(IToken);
		IToken char_literal239 = default(IToken);
		IToken NEWLINE241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree char_literal239_tree = default(CommonTree);
		CommonTree NEWLINE241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:400:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(400, 4);
			string_literal237=(IToken)Match(input,135,Follow._135_in_stmt_for2689);  
			stream_135.Add(string_literal237);

			DebugLocation(400, 10);
			// SugarCpp.g:400:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:400:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(400, 12);
			PushFollow(Follow._for_item_in_stmt_for2693);
			for_item238=for_item();
			PopFollow();

			stream_for_item.Add(for_item238.Tree);
			DebugLocation(400, 21);
			// SugarCpp.g:400:21: ( ',' for_item )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==90))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:22: ',' for_item
					{
					DebugLocation(400, 22);
					char_literal239=(IToken)Match(input,90,Follow._90_in_stmt_for2696);  
					stream_90.Add(char_literal239);

					DebugLocation(400, 26);
					PushFollow(Follow._for_item_in_stmt_for2698);
					for_item240=for_item();
					PopFollow();

					stream_for_item.Add(for_item240.Tree);

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }

			DebugLocation(400, 37);
			// SugarCpp.g:400:37: ( NEWLINE )+
			int cnt102=0;
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==NEWLINE))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:37: NEWLINE
					{
					DebugLocation(400, 37);
					NEWLINE241=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2702);  
					stream_NEWLINE.Add(NEWLINE241);


					}
					break;

				default:
					if (cnt102 >= 1)
						goto loop102;

					EarlyExitException eee102 = new EarlyExitException( 102, input );
					DebugRecognitionException(eee102);
					throw eee102;
				}
				cnt102++;
			}
			loop102:
				;

			} finally { DebugExitSubRule(102); }

			DebugLocation(400, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2705);
			stmt_block242=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block242.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 400:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(400, 60);
				// SugarCpp.g:400:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(400, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(400, 71);
				// SugarCpp.g:400:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(400, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(400, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 37);
			LeaveRule("stmt_for", 37);
			LeaveRule_stmt_for();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:405:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 38);
		TraceIn("stmt_try", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		IToken NEWLINE244 = default(IToken);
		IToken NEWLINE246 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken NEWLINE249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree NEWLINE244_tree = default(CommonTree);
		CommonTree NEWLINE246_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree NEWLINE249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:406:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(406, 4);
			string_literal243=(IToken)Match(input,150,Follow._150_in_stmt_try2736);  
			stream_150.Add(string_literal243);

			DebugLocation(406, 10);
			// SugarCpp.g:406:10: ( NEWLINE )+
			int cnt103=0;
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==NEWLINE))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:10: NEWLINE
					{
					DebugLocation(406, 10);
					NEWLINE244=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2738);  
					stream_NEWLINE.Add(NEWLINE244);


					}
					break;

				default:
					if (cnt103 >= 1)
						goto loop103;

					EarlyExitException eee103 = new EarlyExitException( 103, input );
					DebugRecognitionException(eee103);
					throw eee103;
				}
				cnt103++;
			}
			loop103:
				;

			} finally { DebugExitSubRule(103); }

			DebugLocation(406, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2741);
			stmt_block245=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block245.Tree);
			DebugLocation(406, 30);
			// SugarCpp.g:406:30: ( NEWLINE )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:30: NEWLINE
					{
					DebugLocation(406, 30);
					NEWLINE246=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2743);  
					stream_NEWLINE.Add(NEWLINE246);


					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(406, 39);
			string_literal247=(IToken)Match(input,127,Follow._127_in_stmt_try2746);  
			stream_127.Add(string_literal247);

			DebugLocation(406, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2748);
			stmt_alloc248=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc248.Tree);
			DebugLocation(406, 58);
			// SugarCpp.g:406:58: ( NEWLINE )+
			int cnt105=0;
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==NEWLINE))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:58: NEWLINE
					{
					DebugLocation(406, 58);
					NEWLINE249=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2750);  
					stream_NEWLINE.Add(NEWLINE249);


					}
					break;

				default:
					if (cnt105 >= 1)
						goto loop105;

					EarlyExitException eee105 = new EarlyExitException( 105, input );
					DebugRecognitionException(eee105);
					throw eee105;
				}
				cnt105++;
			}
			loop105:
				;

			} finally { DebugExitSubRule(105); }

			DebugLocation(406, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2753);
			stmt_block250=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block250.Tree);


			{
			// AST REWRITE
			// elements: stmt_alloc, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(406, 81);
				// SugarCpp.g:406:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(406, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(406, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(406, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(406, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 38);
			LeaveRule("stmt_try", 38);
			LeaveRule_stmt_try();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:409:1: switch_item : 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 39);
		TraceIn("switch_item", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(410, 4);
			string_literal251=(IToken)Match(input,156,Follow._156_in_switch_item2776);  
			stream_156.Add(string_literal251);

			DebugLocation(410, 11);
			PushFollow(Follow._expr_in_switch_item2778);
			expr252=expr();
			PopFollow();

			stream_expr.Add(expr252.Tree);
			DebugLocation(410, 16);
			// SugarCpp.g:410:16: ( ',' expr )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==90))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:17: ',' expr
					{
					DebugLocation(410, 17);
					char_literal253=(IToken)Match(input,90,Follow._90_in_switch_item2781);  
					stream_90.Add(char_literal253);

					DebugLocation(410, 21);
					PushFollow(Follow._expr_in_switch_item2783);
					expr254=expr();
					PopFollow();

					stream_expr.Add(expr254.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }

			DebugLocation(410, 28);
			// SugarCpp.g:410:28: ( NEWLINE )+
			int cnt107=0;
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==NEWLINE))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:28: NEWLINE
					{
					DebugLocation(410, 28);
					NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item2787);  
					stream_NEWLINE.Add(NEWLINE255);


					}
					break;

				default:
					if (cnt107 >= 1)
						goto loop107;

					EarlyExitException eee107 = new EarlyExitException( 107, input );
					DebugRecognitionException(eee107);
					throw eee107;
				}
				cnt107++;
			}
			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(410, 37);
			PushFollow(Follow._stmt_block_in_switch_item2790);
			stmt_block256=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block256.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:48: -> ^( Switch_Item ( expr )+ stmt_block )
			{
				DebugLocation(410, 51);
				// SugarCpp.g:410:51: ^( Switch_Item ( expr )+ stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(410, 53);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

				DebugLocation(410, 65);
				if (!(stream_expr.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.HasNext )
				{
					DebugLocation(410, 65);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(410, 71);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 39);
			LeaveRule("switch_item", 39);
			LeaveRule_switch_item();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:413:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? ( NEWLINE )* DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 40);
		TraceIn("stmt_switch", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal257 = default(IToken);
		IToken NEWLINE259 = default(IToken);
		IToken INDENT260 = default(IToken);
		IToken NEWLINE261 = default(IToken);
		IToken NEWLINE263 = default(IToken);
		IToken string_literal264 = default(IToken);
		IToken NEWLINE265 = default(IToken);
		IToken NEWLINE267 = default(IToken);
		IToken DEDENT268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block266 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree NEWLINE259_tree = default(CommonTree);
		CommonTree INDENT260_tree = default(CommonTree);
		CommonTree NEWLINE261_tree = default(CommonTree);
		CommonTree NEWLINE263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		CommonTree NEWLINE265_tree = default(CommonTree);
		CommonTree NEWLINE267_tree = default(CommonTree);
		CommonTree DEDENT268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? ( NEWLINE )* DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? ( NEWLINE )* DEDENT
			{
			DebugLocation(414, 4);
			string_literal257=(IToken)Match(input,147,Follow._147_in_stmt_switch2812);  
			stream_147.Add(string_literal257);

			DebugLocation(414, 13);
			// SugarCpp.g:414:13: ( expr )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==IDENT||LA108_0==NUMBER||LA108_0==STRING||LA108_0==76||LA108_0==81||LA108_0==83||LA108_0==85||(LA108_0>=87 && LA108_0<=88)||(LA108_0>=91 && LA108_0<=92)||(LA108_0>=118 && LA108_0<=119)||(LA108_0>=142 && LA108_0<=143)||LA108_0==161))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:13: expr
				{
				DebugLocation(414, 13);
				PushFollow(Follow._expr_in_stmt_switch2814);
				expr258=expr();
				PopFollow();

				stream_expr.Add(expr258.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(414, 19);
			// SugarCpp.g:414:19: ( NEWLINE )+
			int cnt109=0;
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:19: NEWLINE
					{
					DebugLocation(414, 19);
					NEWLINE259=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2817);  
					stream_NEWLINE.Add(NEWLINE259);


					}
					break;

				default:
					if (cnt109 >= 1)
						goto loop109;

					EarlyExitException eee109 = new EarlyExitException( 109, input );
					DebugRecognitionException(eee109);
					throw eee109;
				}
				cnt109++;
			}
			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(414, 28);
			INDENT260=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch2820);  
			stream_INDENT.Add(INDENT260);

			DebugLocation(414, 35);
			// SugarCpp.g:414:35: ( ( NEWLINE )* switch_item )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				try
				{
					alt111 = dfa111.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:36: ( NEWLINE )* switch_item
					{
					DebugLocation(414, 36);
					// SugarCpp.g:414:36: ( NEWLINE )*
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==NEWLINE))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch ( alt110 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:36: NEWLINE
							{
							DebugLocation(414, 36);
							NEWLINE261=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2823);  
							stream_NEWLINE.Add(NEWLINE261);


							}
							break;

						default:
							goto loop110;
						}
					}

					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(414, 45);
					PushFollow(Follow._switch_item_in_stmt_switch2826);
					switch_item262=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item262.Tree);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(414, 59);
			// SugarCpp.g:414:59: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			try
			{
				alt114 = dfa114.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:60: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
				{
				DebugLocation(414, 60);
				// SugarCpp.g:414:60: ( NEWLINE )*
				try { DebugEnterSubRule(112);
				while (true)
				{
					int alt112=2;
					try { DebugEnterDecision(112, false);
					int LA112_0 = input.LA(1);

					if ((LA112_0==NEWLINE))
					{
						alt112 = 1;
					}


					} finally { DebugExitDecision(112); }
					switch ( alt112 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:414:60: NEWLINE
						{
						DebugLocation(414, 60);
						NEWLINE263=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2831);  
						stream_NEWLINE.Add(NEWLINE263);


						}
						break;

					default:
						goto loop112;
					}
				}

				loop112:
					;

				} finally { DebugExitSubRule(112); }

				DebugLocation(414, 69);
				string_literal264=(IToken)Match(input,132,Follow._132_in_stmt_switch2834);  
				stream_132.Add(string_literal264);

				DebugLocation(414, 76);
				// SugarCpp.g:414:76: ( NEWLINE )+
				int cnt113=0;
				try { DebugEnterSubRule(113);
				while (true)
				{
					int alt113=2;
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==NEWLINE))
					{
						alt113 = 1;
					}


					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:414:76: NEWLINE
						{
						DebugLocation(414, 76);
						NEWLINE265=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2836);  
						stream_NEWLINE.Add(NEWLINE265);


						}
						break;

					default:
						if (cnt113 >= 1)
							goto loop113;

						EarlyExitException eee113 = new EarlyExitException( 113, input );
						DebugRecognitionException(eee113);
						throw eee113;
					}
					cnt113++;
				}
				loop113:
					;

				} finally { DebugExitSubRule(113); }

				DebugLocation(414, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch2839);
				stmt_block266=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block266.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(414, 98);
			// SugarCpp.g:414:98: ( NEWLINE )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==NEWLINE))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:98: NEWLINE
					{
					DebugLocation(414, 98);
					NEWLINE267=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2843);  
					stream_NEWLINE.Add(NEWLINE267);


					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(414, 107);
			DEDENT268=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch2846);  
			stream_DEDENT.Add(DEDENT268);



			{
			// AST REWRITE
			// elements: switch_item, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(414, 117);
				// SugarCpp.g:414:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(414, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(414, 131);
				// SugarCpp.g:414:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(414, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(414, 137);
				// SugarCpp.g:414:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(414, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(414, 150);
				// SugarCpp.g:414:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(414, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 40);
			LeaveRule("stmt_switch", 40);
			LeaveRule_stmt_switch();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:417:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 41);
		TraceIn("ident_list", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: ident ( ',' ident )*
			{
			DebugLocation(418, 4);
			PushFollow(Follow._ident_in_ident_list2872);
			ident269=ident();
			PopFollow();

			stream_ident.Add(ident269.Tree);
			DebugLocation(418, 10);
			// SugarCpp.g:418:10: ( ',' ident )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==90))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:11: ',' ident
					{
					DebugLocation(418, 11);
					char_literal270=(IToken)Match(input,90,Follow._90_in_ident_list2875);  
					stream_90.Add(char_literal270);

					DebugLocation(418, 15);
					PushFollow(Follow._ident_in_ident_list2877);
					ident271=ident();
					PopFollow();

					stream_ident.Add(ident271.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(418, 26);
				// SugarCpp.g:418:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(418, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(418, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 41);
			LeaveRule("ident_list", 41);
			LeaveRule_ident_list();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:421:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 42);
		TraceIn("stmt_alloc", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal273 = default(IToken);
		IToken char_literal275 = default(IToken);
		IToken string_literal276 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal280 = default(IToken);
		IToken string_literal281 = default(IToken);
		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal273_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree string_literal281_tree = default(CommonTree);
		CommonTree char_literal283_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(421, 1);
		try
		{
			// SugarCpp.g:422:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:422:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(422, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2899);
			ident_list272=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list272.Tree);
			DebugLocation(422, 15);
			// SugarCpp.g:422:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, false);
			int LA121_0 = input.LA(1);

			if ((LA121_0==100))
			{
				alt121 = 1;
			}
			else if ((LA121_0==102))
			{
				alt121 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:422:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(422, 17);
				char_literal273=(IToken)Match(input,100,Follow._100_in_stmt_alloc2903);  
				stream_100.Add(char_literal273);

				DebugLocation(422, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2905);
				type_name274=type_name();
				PopFollow();

				stream_type_name.Add(type_name274.Tree);
				DebugLocation(422, 31);
				// SugarCpp.g:422:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt119=3;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				switch (input.LA(1))
				{
				case 102:
				case 109:
					{
					alt119 = 1;
					}
					break;
				case 83:
					{
					alt119 = 2;
					}
					break;
				case NEWLINE:
				case 103:
				case 135:
				case 136:
				case 152:
				case 154:
				case 157:
					{
					alt119 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:422:33: ( '=' | ':=' ) expr
					{
					DebugLocation(422, 33);
					// SugarCpp.g:422:33: ( '=' | ':=' )
					int alt117=2;
					try { DebugEnterSubRule(117);
					try { DebugEnterDecision(117, false);
					int LA117_0 = input.LA(1);

					if ((LA117_0==109))
					{
						alt117 = 1;
					}
					else if ((LA117_0==102))
					{
						alt117 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:422:34: '='
						{
						DebugLocation(422, 34);
						char_literal275=(IToken)Match(input,109,Follow._109_in_stmt_alloc2910);  
						stream_109.Add(char_literal275);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:422:40: ':='
						{
						DebugLocation(422, 40);
						string_literal276=(IToken)Match(input,102,Follow._102_in_stmt_alloc2914);  
						stream_102.Add(string_literal276);


						}
						break;

					}
					} finally { DebugExitSubRule(117); }

					DebugLocation(422, 46);
					PushFollow(Follow._expr_in_stmt_alloc2917);
					expr277=expr();
					PopFollow();

					stream_expr.Add(expr277.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 422:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(422, 55);
						// SugarCpp.g:422:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(422, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(422, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(422, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(422, 95);
						// SugarCpp.g:422:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(422, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:423:33: '(' ( expr_list )? ')'
					{
					DebugLocation(423, 33);
					char_literal278=(IToken)Match(input,83,Follow._83_in_stmt_alloc2965);  
					stream_83.Add(char_literal278);

					DebugLocation(423, 37);
					// SugarCpp.g:423:37: ( expr_list )?
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					int LA118_0 = input.LA(1);

					if ((LA118_0==IDENT||LA118_0==NUMBER||LA118_0==STRING||LA118_0==76||LA118_0==81||LA118_0==83||LA118_0==85||(LA118_0>=87 && LA118_0<=88)||(LA118_0>=91 && LA118_0<=92)||(LA118_0>=118 && LA118_0<=119)||(LA118_0>=142 && LA118_0<=143)||LA118_0==161))
					{
						alt118 = 1;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:423:37: expr_list
						{
						DebugLocation(423, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2967);
						expr_list279=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list279.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(423, 48);
					char_literal280=(IToken)Match(input,84,Follow._84_in_stmt_alloc2970);  
					stream_84.Add(char_literal280);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(423, 56);
						// SugarCpp.g:423:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(423, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(423, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(423, 98);
						// SugarCpp.g:423:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(423, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:424:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 424:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(424, 18);
						// SugarCpp.g:424:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(424, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(424, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(424, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:426:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(426, 8);
				string_literal281=(IToken)Match(input,102,Follow._102_in_stmt_alloc3031);  
				stream_102.Add(string_literal281);

				DebugLocation(426, 14);
				// SugarCpp.g:426:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:426:15: expr ( ',' expr )*
				{
				DebugLocation(426, 15);
				PushFollow(Follow._expr_in_stmt_alloc3035);
				expr282=expr();
				PopFollow();

				stream_expr.Add(expr282.Tree);
				DebugLocation(426, 20);
				// SugarCpp.g:426:20: ( ',' expr )*
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_0 = input.LA(1);

					if ((LA120_0==90))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch ( alt120 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:426:21: ',' expr
						{
						DebugLocation(426, 21);
						char_literal283=(IToken)Match(input,90,Follow._90_in_stmt_alloc3038);  
						stream_90.Add(char_literal283);

						DebugLocation(426, 25);
						PushFollow(Follow._expr_in_stmt_alloc3040);
						expr284=expr();
						PopFollow();

						stream_expr.Add(expr284.Tree);

						}
						break;

					default:
						goto loop120;
					}
				}

				loop120:
					;

				} finally { DebugExitSubRule(120); }


				}



				{
				// AST REWRITE
				// elements: 102, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 426:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(426, 36);
					// SugarCpp.g:426:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(426, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_102.NextNode(), root_1);

					DebugLocation(426, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(426, 54);
					// SugarCpp.g:426:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(426, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 42);
			LeaveRule("stmt_alloc", 42);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:429:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 43);
		TraceIn("stmt_modify", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal288 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal288_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:430:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(430, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3066);
			lvalue285=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue285.Tree);
			DebugLocation(430, 11);
			// SugarCpp.g:430:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt122=3;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==79||LA122_0==82||LA122_0==86||LA122_0==89||LA122_0==93||LA122_0==99||LA122_0==107||LA122_0==109||LA122_0==115||LA122_0==122||LA122_0==159))
			{
				alt122 = 1;
			}
			else if ((LA122_0==117))
			{
				alt122 = 2;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:430:13: modify_expr_op ^ expr
				{
				DebugLocation(430, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3070);
				modify_expr_op286=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op286.Tree, root_0);
				DebugLocation(430, 29);
				PushFollow(Follow._expr_in_stmt_modify3073);
				expr287=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr287.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:431:13: '?=' ^ modify_expr
				{
				DebugLocation(431, 17);
				string_literal288=(IToken)Match(input,117,Follow._117_in_stmt_modify3087); 
				string_literal288_tree = (CommonTree)adaptor.Create(string_literal288);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal288_tree, root_0);
				DebugLocation(431, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify3090);
				modify_expr289=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr289.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 43);
			LeaveRule("stmt_modify", 43);
			LeaveRule_stmt_modify();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:434:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 44);
		TraceIn("expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(434, 1);
		try
		{
			// SugarCpp.g:435:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:435:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(435, 4);
			PushFollow(Follow._list_expr_in_expr3103);
			list_expr290=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr290.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 44);
			LeaveRule("expr", 44);
			LeaveRule_expr();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:438:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 45);
		TraceIn("list_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal291 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken NEWLINE293 = default(IToken);
		IToken INDENT294 = default(IToken);
		IToken DEDENT295 = default(IToken);
		IToken char_literal297 = default(IToken);
		IToken NEWLINE298 = default(IToken);
		IToken INDENT299 = default(IToken);
		IToken DEDENT300 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken NEWLINE303 = default(IToken);
		IToken INDENT304 = default(IToken);
		IToken DEDENT305 = default(IToken);
		IToken char_literal306 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr307 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree NEWLINE293_tree = default(CommonTree);
		CommonTree INDENT294_tree = default(CommonTree);
		CommonTree DEDENT295_tree = default(CommonTree);
		CommonTree char_literal297_tree = default(CommonTree);
		CommonTree NEWLINE298_tree = default(CommonTree);
		CommonTree INDENT299_tree = default(CommonTree);
		CommonTree DEDENT300_tree = default(CommonTree);
		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree NEWLINE303_tree = default(CommonTree);
		CommonTree INDENT304_tree = default(CommonTree);
		CommonTree DEDENT305_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt128=2;
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==119))
			{
				alt128 = 1;
			}
			else if ((LA128_0==IDENT||LA128_0==NUMBER||LA128_0==STRING||LA128_0==76||LA128_0==81||LA128_0==83||LA128_0==85||(LA128_0>=87 && LA128_0<=88)||(LA128_0>=91 && LA128_0<=92)||LA128_0==118||(LA128_0>=142 && LA128_0<=143)||LA128_0==161))
			{
				alt128 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(439, 4);
				char_literal291=(IToken)Match(input,119,Follow._119_in_list_expr3114);  
				stream_119.Add(char_literal291);

				DebugLocation(439, 8);
				// SugarCpp.g:439:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				try
				{
					alt126 = dfa126.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(439, 9);
					// SugarCpp.g:439:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(123);
					while (true)
					{
						int alt123=5;
						try { DebugEnterDecision(123, false);
						switch (input.LA(1))
						{
						case 90:
							{
							alt123 = 1;
							}
							break;
						case NEWLINE:
							{
							alt123 = 2;
							}
							break;
						case INDENT:
							{
							alt123 = 3;
							}
							break;
						case DEDENT:
							{
							alt123 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(123); }
						switch ( alt123 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:10: ','
							{
							DebugLocation(439, 10);
							char_literal292=(IToken)Match(input,90,Follow._90_in_list_expr3118);  
							stream_90.Add(char_literal292);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:439:16: NEWLINE
							{
							DebugLocation(439, 16);
							NEWLINE293=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3122);  
							stream_NEWLINE.Add(NEWLINE293);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:439:26: INDENT
							{
							DebugLocation(439, 26);
							INDENT294=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3126);  
							stream_INDENT.Add(INDENT294);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:439:35: DEDENT
							{
							DebugLocation(439, 35);
							DEDENT295=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3130);  
							stream_DEDENT.Add(DEDENT295);


							}
							break;

						default:
							goto loop123;
						}
					}

					loop123:
						;

					} finally { DebugExitSubRule(123); }

					DebugLocation(439, 44);
					PushFollow(Follow._list_expr_in_list_expr3134);
					list_expr296=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr296.Tree);
					DebugLocation(439, 54);
					// SugarCpp.g:439:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(125);
					while (true)
					{
						int alt125=2;
						try { DebugEnterDecision(125, false);
						try
						{
							alt125 = dfa125.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(125); }
						switch ( alt125 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(439, 55);
							// SugarCpp.g:439:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt124=0;
							try { DebugEnterSubRule(124);
							while (true)
							{
								int alt124=5;
								try { DebugEnterDecision(124, false);
								switch (input.LA(1))
								{
								case 90:
									{
									alt124 = 1;
									}
									break;
								case NEWLINE:
									{
									alt124 = 2;
									}
									break;
								case INDENT:
									{
									alt124 = 3;
									}
									break;
								case DEDENT:
									{
									alt124 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(124); }
								switch (alt124)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:439:56: ','
									{
									DebugLocation(439, 56);
									char_literal297=(IToken)Match(input,90,Follow._90_in_list_expr3138);  
									stream_90.Add(char_literal297);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:439:62: NEWLINE
									{
									DebugLocation(439, 62);
									NEWLINE298=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3142);  
									stream_NEWLINE.Add(NEWLINE298);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:439:72: INDENT
									{
									DebugLocation(439, 72);
									INDENT299=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3146);  
									stream_INDENT.Add(INDENT299);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:439:81: DEDENT
									{
									DebugLocation(439, 81);
									DEDENT300=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3150);  
									stream_DEDENT.Add(DEDENT300);


									}
									break;

								default:
									if (cnt124 >= 1)
										goto loop124;

									EarlyExitException eee124 = new EarlyExitException( 124, input );
									DebugRecognitionException(eee124);
									throw eee124;
								}
								cnt124++;
							}
							loop124:
								;

							} finally { DebugExitSubRule(124); }

							DebugLocation(439, 90);
							PushFollow(Follow._list_expr_in_list_expr3154);
							list_expr301=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr301.Tree);

							}
							break;

						default:
							goto loop125;
						}
					}

					loop125:
						;

					} finally { DebugExitSubRule(125); }


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(439, 104);
				// SugarCpp.g:439:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=5;
					try { DebugEnterDecision(127, false);
					switch (input.LA(1))
					{
					case 90:
						{
						alt127 = 1;
						}
						break;
					case NEWLINE:
						{
						alt127 = 2;
						}
						break;
					case INDENT:
						{
						alt127 = 3;
						}
						break;
					case DEDENT:
						{
						alt127 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(127); }
					switch ( alt127 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:439:105: ','
						{
						DebugLocation(439, 105);
						char_literal302=(IToken)Match(input,90,Follow._90_in_list_expr3161);  
						stream_90.Add(char_literal302);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:439:111: NEWLINE
						{
						DebugLocation(439, 111);
						NEWLINE303=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3165);  
						stream_NEWLINE.Add(NEWLINE303);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:439:121: INDENT
						{
						DebugLocation(439, 121);
						INDENT304=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3169);  
						stream_INDENT.Add(INDENT304);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:439:130: DEDENT
						{
						DebugLocation(439, 130);
						DEDENT305=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3173);  
						stream_DEDENT.Add(DEDENT305);


						}
						break;

					default:
						goto loop127;
					}
				}

				loop127:
					;

				} finally { DebugExitSubRule(127); }

				DebugLocation(439, 139);
				char_literal306=(IToken)Match(input,120,Follow._120_in_list_expr3177);  
				stream_120.Add(char_literal306);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 439:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(439, 146);
					// SugarCpp.g:439:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(439, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(439, 158);
					// SugarCpp.g:439:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(439, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(440, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3191);
				lambda_expr307=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr307.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 45);
			LeaveRule("list_expr", 45);
			LeaveRule_list_expr();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:443:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 46);
		TraceIn("lambda_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal308 = default(IToken);
		IToken char_literal310 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken string_literal313 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal308_tree = default(CommonTree);
		CommonTree char_literal310_tree = default(CommonTree);
		CommonTree string_literal311_tree = default(CommonTree);
		CommonTree string_literal313_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			try
			{
				alt131 = dfa131.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(444, 4);
				char_literal308=(IToken)Match(input,83,Follow._83_in_lambda_expr3202);  
				stream_83.Add(char_literal308);

				DebugLocation(444, 8);
				// SugarCpp.g:444:8: ( func_args )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==IDENT||LA129_0==102))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:8: func_args
					{
					DebugLocation(444, 8);
					PushFollow(Follow._func_args_in_lambda_expr3204);
					func_args309=func_args();
					PopFollow();

					stream_func_args.Add(func_args309.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(444, 19);
				char_literal310=(IToken)Match(input,84,Follow._84_in_lambda_expr3207);  
				stream_84.Add(char_literal310);

				DebugLocation(444, 23);
				// SugarCpp.g:444:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==94))
				{
					alt130 = 1;
				}
				else if ((LA130_0==111))
				{
					alt130 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:25: '->' expr
					{
					DebugLocation(444, 25);
					string_literal311=(IToken)Match(input,94,Follow._94_in_lambda_expr3211);  
					stream_94.Add(string_literal311);

					DebugLocation(444, 30);
					PushFollow(Follow._expr_in_lambda_expr3213);
					expr312=expr();
					PopFollow();

					stream_expr.Add(expr312.Tree);


					{
					// AST REWRITE
					// elements: 94, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(444, 39);
						// SugarCpp.g:444:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(444, 53);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(444, 58);
						// SugarCpp.g:444:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(444, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(444, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:25: '=>' expr
					{
					DebugLocation(445, 25);
					string_literal313=(IToken)Match(input,111,Follow._111_in_lambda_expr3253);  
					stream_111.Add(string_literal313);

					DebugLocation(445, 30);
					PushFollow(Follow._expr_in_lambda_expr3255);
					expr314=expr();
					PopFollow();

					stream_expr.Add(expr314.Tree);


					{
					// AST REWRITE
					// elements: func_args, expr, 111
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(445, 39);
						// SugarCpp.g:445:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(445, 53);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(445, 58);
						// SugarCpp.g:445:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(445, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(445, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:446:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(446, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3275);
				modify_expr315=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr315.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 46);
			LeaveRule("lambda_expr", 46);
			LeaveRule_lambda_expr();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:449:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 47);
		TraceIn("modify_expr_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set316 = default(IToken);

		CommonTree set316_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(449, 91);
		try
		{
			// SugarCpp.g:449:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(449, 15);

			set316=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==99||input.LA(1)==107||input.LA(1)==109||input.LA(1)==115||input.LA(1)==122||input.LA(1)==159)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set316));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 47);
			LeaveRule("modify_expr_op", 47);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(449, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:450:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 48);
		TraceIn("modify_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set318 = default(IToken);
		IToken char_literal320 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set318_tree = default(CommonTree);
		CommonTree char_literal320_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(451, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3332);
			cond_expr317=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr317.Tree);
			DebugLocation(451, 14);
			// SugarCpp.g:451:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt133=3;
			try { DebugEnterSubRule(133);
			try { DebugEnterDecision(133, false);
			int LA133_0 = input.LA(1);

			if ((LA133_0==79||LA133_0==82||LA133_0==86||LA133_0==89||LA133_0==93||LA133_0==99||LA133_0==102||LA133_0==107||LA133_0==115||LA133_0==122||LA133_0==159))
			{
				alt133 = 1;
			}
			else if ((LA133_0==109))
			{
				alt133 = 2;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:451:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(451, 94);

				set318=(IToken)input.LT(1);
				set318=(IToken)input.LT(1);
				if (input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==99||input.LA(1)==102||input.LA(1)==107||input.LA(1)==115||input.LA(1)==122||input.LA(1)==159)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set318), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(451, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3381);
				cond_expr319=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr319.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:452:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(452, 7);
				// SugarCpp.g:452:7: ( '=' ^ cond_expr )+
				int cnt132=0;
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==109))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:452:8: '=' ^ cond_expr
						{
						DebugLocation(452, 11);
						char_literal320=(IToken)Match(input,109,Follow._109_in_modify_expr3390); 
						char_literal320_tree = (CommonTree)adaptor.Create(char_literal320);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal320_tree, root_0);
						DebugLocation(452, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3393);
						cond_expr321=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr321.Tree);

						}
						break;

					default:
						if (cnt132 >= 1)
							goto loop132;

						EarlyExitException eee132 = new EarlyExitException( 132, input );
						DebugRecognitionException(eee132);
						throw eee132;
					}
					cnt132++;
				}
				loop132:
					;

				} finally { DebugExitSubRule(132); }


				}
				break;

			}
			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 48);
			LeaveRule("modify_expr", 48);
			LeaveRule_modify_expr();
		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:455:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 49);
		TraceIn("cond_expr_item", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr322 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(455, 24);
		try
		{
			// SugarCpp.g:455:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:455:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(455, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3406);
			or_expr322=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr322.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 49);
			LeaveRule("cond_expr_item", 49);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(455, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:456:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 50);
		TraceIn("cond_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal323 = default(IToken);
		IToken char_literal324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal323_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(457, 4);
			// SugarCpp.g:457:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:457:5: a= or_expr
			{
			DebugLocation(457, 6);
			PushFollow(Follow._or_expr_in_cond_expr3418);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:15: -> $a
			{
				DebugLocation(457, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(457, 22);
			// SugarCpp.g:457:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_0 = input.LA(1);

			if ((LA136_0==116))
			{
				alt136 = 1;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:457:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(457, 23);
				char_literal323=(IToken)Match(input,116,Follow._116_in_cond_expr3427);  
				stream_116.Add(char_literal323);

				DebugLocation(457, 27);
				// SugarCpp.g:457:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==IDENT||LA135_0==NUMBER||LA135_0==STRING||LA135_0==76||LA135_0==81||LA135_0==83||LA135_0==85||(LA135_0>=87 && LA135_0<=88)||(LA135_0>=91 && LA135_0<=92)||LA135_0==118||(LA135_0>=142 && LA135_0<=143)||LA135_0==161))
				{
					alt135 = 1;
				}
				else if ((LA135_0==DEDENT||LA135_0==INDENT||LA135_0==NEWLINE||LA135_0==79||LA135_0==82||LA135_0==84||LA135_0==86||(LA135_0>=89 && LA135_0<=90)||LA135_0==93||LA135_0==99||(LA135_0>=102 && LA135_0<=103)||LA135_0==107||LA135_0==109||LA135_0==115||LA135_0==120||LA135_0==122||LA135_0==126||LA135_0==131||(LA135_0>=135 && LA135_0<=136)||(LA135_0>=148 && LA135_0<=149)||LA135_0==152||LA135_0==154||LA135_0==157||LA135_0==159))
				{
					alt135 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(457, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3433);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(457, 46);
					// SugarCpp.g:457:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt134=2;
					try { DebugEnterSubRule(134);
					try { DebugEnterDecision(134, false);
					int LA134_0 = input.LA(1);

					if ((LA134_0==100))
					{
						alt134 = 1;
					}
					else if ((LA134_0==DEDENT||LA134_0==INDENT||LA134_0==NEWLINE||LA134_0==79||LA134_0==82||LA134_0==84||LA134_0==86||(LA134_0>=89 && LA134_0<=90)||LA134_0==93||LA134_0==99||(LA134_0>=102 && LA134_0<=103)||LA134_0==107||LA134_0==109||LA134_0==115||LA134_0==120||LA134_0==122||LA134_0==126||LA134_0==131||(LA134_0>=135 && LA134_0<=136)||(LA134_0>=148 && LA134_0<=149)||LA134_0==152||LA134_0==154||LA134_0==157||LA134_0==159))
					{
						alt134 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:457:48: ':' b= cond_expr_item
						{
						DebugLocation(457, 48);
						char_literal324=(IToken)Match(input,100,Follow._100_in_cond_expr3437);  
						stream_100.Add(char_literal324);

						DebugLocation(457, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3441);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 457:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(457, 72);
							// SugarCpp.g:457:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(457, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(457, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(457, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(457, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:458:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 458:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(458, 20);
							// SugarCpp.g:458:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(458, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(458, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(458, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(134); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:460:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(460, 14);
						// SugarCpp.g:460:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(460, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;

			}
			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 50);
			LeaveRule("cond_expr", 50);
			LeaveRule_cond_expr();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:464:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 51);
		TraceIn("or_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set325 = default(IToken);

		CommonTree set325_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(464, 19);
		try
		{
			// SugarCpp.g:464:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(464, 6);

			set325=(IToken)input.LT(1);
			if (input.LA(1)==144||input.LA(1)==160)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set325));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 51);
			LeaveRule("or_op", 51);
			LeaveRule_or_op();
		}
		DebugLocation(464, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:465:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 52);
		TraceIn("or_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:466:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(466, 4);
			// SugarCpp.g:466:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:466:5: a= and_expr
			{
			DebugLocation(466, 6);
			PushFollow(Follow._and_expr_in_or_expr3555);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 466:16: -> $a
			{
				DebugLocation(466, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(466, 23);
			// SugarCpp.g:466:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==144||LA137_0==160))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:466:24: op= or_op b= and_expr
					{
					DebugLocation(466, 26);
					PushFollow(Follow._or_op_in_or_expr3566);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(466, 34);
					PushFollow(Follow._and_expr_in_or_expr3570);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 466:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(466, 47);
						// SugarCpp.g:466:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(466, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(466, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(466, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(466, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 52);
			LeaveRule("or_expr", 52);
			LeaveRule_or_expr();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:469:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 53);
		TraceIn("and_op", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set326 = default(IToken);

		CommonTree set326_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(469, 21);
		try
		{
			// SugarCpp.g:469:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(469, 7);

			set326=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==124)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set326));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 53);
			LeaveRule("and_op", 53);
			LeaveRule_and_op();
		}
		DebugLocation(469, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:470:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 54);
		TraceIn("and_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(470, 1);
		try
		{
			// SugarCpp.g:471:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:471:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(471, 4);
			// SugarCpp.g:471:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:471:5: a= bit_or
			{
			DebugLocation(471, 6);
			PushFollow(Follow._bit_or_in_and_expr3612);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 471:14: -> $a
			{
				DebugLocation(471, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(471, 21);
			// SugarCpp.g:471:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==80||LA138_0==124))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:22: op= and_op b= bit_or
					{
					DebugLocation(471, 24);
					PushFollow(Follow._and_op_in_and_expr3623);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(471, 33);
					PushFollow(Follow._bit_or_in_and_expr3627);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(471, 44);
						// SugarCpp.g:471:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(471, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(471, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(471, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 54);
			LeaveRule("and_expr", 54);
			LeaveRule_and_expr();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:474:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 55);
		TraceIn("bit_or", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal327 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal327_tree = default(CommonTree);
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(475, 4);
			// SugarCpp.g:475:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:475:5: a= bit_xor
			{
			DebugLocation(475, 6);
			PushFollow(Follow._bit_xor_in_bit_or3658);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 475:15: -> $a
			{
				DebugLocation(475, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(475, 22);
			// SugarCpp.g:475:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==158))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:23: '|' b= bit_xor
					{
					DebugLocation(475, 23);
					char_literal327=(IToken)Match(input,158,Follow._158_in_bit_or3667);  
					stream_158.Add(char_literal327);

					DebugLocation(475, 28);
					PushFollow(Follow._bit_xor_in_bit_or3671);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 158, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 475:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(475, 40);
						// SugarCpp.g:475:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(475, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(475, 51);
						adaptor.AddChild(root_1, stream_158.NextNode());
						DebugLocation(475, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(475, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 55);
			LeaveRule("bit_or", 55);
			LeaveRule_bit_or();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:478:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 56);
		TraceIn("bit_xor", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal328 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal328_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(479, 4);
			// SugarCpp.g:479:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:479:5: a= bit_and
			{
			DebugLocation(479, 6);
			PushFollow(Follow._bit_and_in_bit_xor3701);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 479:15: -> $a
			{
				DebugLocation(479, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(479, 22);
			// SugarCpp.g:479:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==121))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:23: '^' b= bit_and
					{
					DebugLocation(479, 23);
					char_literal328=(IToken)Match(input,121,Follow._121_in_bit_xor3710);  
					stream_121.Add(char_literal328);

					DebugLocation(479, 28);
					PushFollow(Follow._bit_and_in_bit_xor3714);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 121, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(479, 40);
						// SugarCpp.g:479:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(479, 51);
						adaptor.AddChild(root_1, stream_121.NextNode());
						DebugLocation(479, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(479, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 56);
			LeaveRule("bit_xor", 56);
			LeaveRule_bit_xor();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:482:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 57);
		TraceIn("bit_and", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal329 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal329_tree = default(CommonTree);
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(482, 1);
		try
		{
			// SugarCpp.g:483:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:483:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(483, 4);
			// SugarCpp.g:483:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:483:5: a= cmp_expr
			{
			DebugLocation(483, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3744);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 483:16: -> $a
			{
				DebugLocation(483, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(483, 23);
			// SugarCpp.g:483:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==81))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch ( alt141 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:483:24: '&' b= cmp_expr
					{
					DebugLocation(483, 24);
					char_literal329=(IToken)Match(input,81,Follow._81_in_bit_and3753);  
					stream_81.Add(char_literal329);

					DebugLocation(483, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3757);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 81
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 483:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(483, 42);
						// SugarCpp.g:483:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(483, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(483, 53);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(483, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(483, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop141;
				}
			}

			loop141:
				;

			} finally { DebugExitSubRule(141); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 57);
			LeaveRule("bit_and", 57);
			LeaveRule_bit_and();
		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:486:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 58);
		TraceIn("chain_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set330 = default(IToken);

		CommonTree set330_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(486, 64);
		try
		{
			// SugarCpp.g:486:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(486, 9);

			set330=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==104||input.LA(1)==108||input.LA(1)==110||(input.LA(1)>=112 && input.LA(1)<=113)||(input.LA(1)>=138 && input.LA(1)<=139))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set330));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 58);
			LeaveRule("chain_op", 58);
			LeaveRule_chain_op();
		}
		DebugLocation(486, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:487:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 59);
		TraceIn("no_less_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set331 = default(IToken);

		CommonTree set331_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(487, 60);
		try
		{
			// SugarCpp.g:487:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(487, 11);

			set331=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==108||input.LA(1)==110||(input.LA(1)>=112 && input.LA(1)<=113)||(input.LA(1)>=138 && input.LA(1)<=139))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set331));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 59);
			LeaveRule("no_less_op", 59);
			LeaveRule_no_less_op();
		}
		DebugLocation(487, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:488:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 60);
		TraceIn("chain_list", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr333 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(488, 35);
		try
		{
			// SugarCpp.g:488:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:488:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(488, 13);
			// SugarCpp.g:488:13: ( chain_op infix_expr )+
			int cnt142=0;
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==77||LA142_0==104||LA142_0==108||LA142_0==110||(LA142_0>=112 && LA142_0<=113)||(LA142_0>=138 && LA142_0<=139)))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:14: chain_op infix_expr
					{
					DebugLocation(488, 14);
					PushFollow(Follow._chain_op_in_chain_list3849);
					chain_op332=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op332.Tree);
					DebugLocation(488, 23);
					PushFollow(Follow._infix_expr_in_chain_list3851);
					infix_expr333=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr333.Tree);

					}
					break;

				default:
					if (cnt142 >= 1)
						goto loop142;

					EarlyExitException eee142 = new EarlyExitException( 142, input );
					DebugRecognitionException(eee142);
					throw eee142;
				}
				cnt142++;
			}
			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 60);
			LeaveRule("chain_list", 60);
			LeaveRule_chain_list();
		}
		DebugLocation(488, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:489:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 61);
		TraceIn("cmp_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal334 = default(IToken);
		IToken char_literal336 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken char_literal339 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal334_tree = default(CommonTree);
		CommonTree char_literal336_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:490:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(490, 4);
			// SugarCpp.g:490:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:490:5: a= infix_expr
			{
			DebugLocation(490, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3865);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:18: -> $a
			{
				DebugLocation(490, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(490, 25);
			// SugarCpp.g:490:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt147=3;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==104))
			{
				alt147 = 1;
			}
			else if ((LA147_0==77||LA147_0==108||LA147_0==110||(LA147_0>=112 && LA147_0<=113)||(LA147_0>=138 && LA147_0<=139)))
			{
				alt147 = 2;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:490:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(490, 27);
				char_literal334=(IToken)Match(input,104,Follow._104_in_cmp_expr3875);  
				stream_104.Add(char_literal334);

				DebugLocation(490, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3879);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(490, 44);
				// SugarCpp.g:490:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt145=3;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt145 = 1;
					}
					break;
				case 112:
					{
					int LA145_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt145 = 1;
					}
					else if ((true))
					{
						alt145 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 145, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 77:
				case 104:
				case 108:
				case 110:
				case 113:
				case 138:
				case 139:
					{
					alt145 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 79:
				case 80:
				case 81:
				case 82:
				case 84:
				case 86:
				case 89:
				case 90:
				case 93:
				case 99:
				case 100:
				case 102:
				case 103:
				case 107:
				case 109:
				case 115:
				case 116:
				case 120:
				case 121:
				case 122:
				case 124:
				case 126:
				case 131:
				case 135:
				case 136:
				case 144:
				case 148:
				case 149:
				case 152:
				case 154:
				case 157:
				case 158:
				case 159:
				case 160:
					{
					alt145 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(490, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(490, 76);
					// SugarCpp.g:490:76: ( ident )*
					try { DebugEnterSubRule(143);
					while (true)
					{
						int alt143=2;
						try { DebugEnterDecision(143, false);
						int LA143_0 = input.LA(1);

						if ((LA143_0==IDENT))
						{
							alt143 = 1;
						}


						} finally { DebugExitDecision(143); }
						switch ( alt143 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:76: ident
							{
							DebugLocation(490, 76);
							PushFollow(Follow._ident_in_cmp_expr3885);
							ident335=ident();
							PopFollow();

							stream_ident.Add(ident335.Tree);

							}
							break;

						default:
							goto loop143;
						}
					}

					loop143:
						;

					} finally { DebugExitSubRule(143); }

					DebugLocation(490, 83);
					char_literal336=(IToken)Match(input,112,Follow._112_in_cmp_expr3888);  
					stream_112.Add(char_literal336);

					DebugLocation(490, 87);
					char_literal337=(IToken)Match(input,83,Follow._83_in_cmp_expr3890);  
					stream_83.Add(char_literal337);

					DebugLocation(490, 91);
					// SugarCpp.g:490:91: ( expr_list )?
					int alt144=2;
					try { DebugEnterSubRule(144);
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==IDENT||LA144_0==NUMBER||LA144_0==STRING||LA144_0==76||LA144_0==81||LA144_0==83||LA144_0==85||(LA144_0>=87 && LA144_0<=88)||(LA144_0>=91 && LA144_0<=92)||(LA144_0>=118 && LA144_0<=119)||(LA144_0>=142 && LA144_0<=143)||LA144_0==161))
					{
						alt144 = 1;
					}
					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:490:91: expr_list
						{
						DebugLocation(490, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3892);
						expr_list338=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list338.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(144); }

					DebugLocation(490, 102);
					char_literal339=(IToken)Match(input,84,Follow._84_in_cmp_expr3895);  
					stream_84.Add(char_literal339);



					{
					// AST REWRITE
					// elements: ident, expr_list, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(490, 109);
						// SugarCpp.g:490:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(490, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(490, 131);
						// SugarCpp.g:490:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(490, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(490, 155);
						// SugarCpp.g:490:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(490, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(490, 163);
						// SugarCpp.g:490:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(490, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:491:46: chain_list
					{
					DebugLocation(491, 46);
					PushFollow(Follow._chain_list_in_cmp_expr3964);
					chain_list340=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list340.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 104, chain_list
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(491, 60);
						// SugarCpp.g:491:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(491, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(491, 84);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(491, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(491, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:492:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 104
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(492, 19);
						// SugarCpp.g:492:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(492, 30);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(492, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(492, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:493:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(493, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4041);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(493, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr4045);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(493, 54);
				// SugarCpp.g:493:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==77||LA146_0==104||LA146_0==108||LA146_0==110||(LA146_0>=112 && LA146_0<=113)||(LA146_0>=138 && LA146_0<=139)))
				{
					alt146 = 1;
				}
				else if ((LA146_0==DEDENT||LA146_0==INDENT||LA146_0==NEWLINE||(LA146_0>=79 && LA146_0<=82)||LA146_0==84||LA146_0==86||(LA146_0>=89 && LA146_0<=90)||LA146_0==93||(LA146_0>=99 && LA146_0<=100)||(LA146_0>=102 && LA146_0<=103)||LA146_0==107||LA146_0==109||(LA146_0>=115 && LA146_0<=116)||(LA146_0>=120 && LA146_0<=122)||LA146_0==124||LA146_0==126||LA146_0==131||(LA146_0>=135 && LA146_0<=136)||LA146_0==144||(LA146_0>=148 && LA146_0<=149)||LA146_0==152||LA146_0==154||(LA146_0>=157 && LA146_0<=160)))
				{
					alt146 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 146, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:493:56: chain_list
					{
					DebugLocation(493, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4049);
					chain_list341=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list341.Tree);


					{
					// AST REWRITE
					// elements: chain_list, cmp_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(493, 70);
						// SugarCpp.g:493:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(493, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(493, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(493, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(493, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:494:17: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(494, 20);
						// SugarCpp.g:494:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(494, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(494, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(494, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 61);
			LeaveRule("cmp_expr", 61);
			LeaveRule_cmp_expr();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:499:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 62);
		TraceIn("infix_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func342 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:500:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(500, 4);
			// SugarCpp.g:500:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:500:5: a= shift_expr
			{
			DebugLocation(500, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4140);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 500:18: -> $a
			{
				DebugLocation(500, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(500, 25);
			// SugarCpp.g:500:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==123))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:500:27: infix_func b= shift_expr
					{
					DebugLocation(500, 27);
					PushFollow(Follow._infix_func_in_infix_expr4150);
					infix_func342=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func342.Tree);
					DebugLocation(500, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4154);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, infix_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 500:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(500, 55);
						// SugarCpp.g:500:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(500, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(500, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(500, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(500, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 62);
			LeaveRule("infix_expr", 62);
			LeaveRule_infix_expr();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:503:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 63);
		TraceIn("shift_expr_op", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set343 = default(IToken);

		CommonTree set343_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(503, 27);
		try
		{
			// SugarCpp.g:503:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(503, 14);

			set343=(IToken)input.LT(1);
			if (input.LA(1)==106||input.LA(1)==114)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set343));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 63);
			LeaveRule("shift_expr_op", 63);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(503, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:504:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 64);
		TraceIn("shift_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op344 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:505:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(505, 4);
			// SugarCpp.g:505:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:505:5: a= add_expr
			{
			DebugLocation(505, 6);
			PushFollow(Follow._add_expr_in_shift_expr4197);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 505:16: -> $a
			{
				DebugLocation(505, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(505, 23);
			// SugarCpp.g:505:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==106||LA149_0==114))
				{
					alt149 = 1;
				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:505:24: shift_expr_op b= add_expr
					{
					DebugLocation(505, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4206);
					shift_expr_op344=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op344.Tree);
					DebugLocation(505, 39);
					PushFollow(Follow._add_expr_in_shift_expr4210);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(505, 52);
						// SugarCpp.g:505:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(505, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(505, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(505, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 64);
			LeaveRule("shift_expr", 64);
			LeaveRule_shift_expr();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:508:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 65);
		TraceIn("add_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal345 = default(IToken);
		IToken char_literal346 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal345_tree = default(CommonTree);
		CommonTree char_literal346_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(508, 1);
		try
		{
			// SugarCpp.g:509:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:509:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(509, 4);
			// SugarCpp.g:509:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:509:5: a= mul_expr
			{
			DebugLocation(509, 6);
			PushFollow(Follow._mul_expr_in_add_expr4240);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 509:16: -> $a
			{
				DebugLocation(509, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(509, 23);
			// SugarCpp.g:509:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=3;
				try { DebugEnterDecision(150, false);
				int LA150_0 = input.LA(1);

				if ((LA150_0==87))
				{
					alt150 = 1;
				}
				else if ((LA150_0==91))
				{
					alt150 = 2;
				}


				} finally { DebugExitDecision(150); }
				switch ( alt150 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:509:25: '+' b= mul_expr
					{
					DebugLocation(509, 25);
					char_literal345=(IToken)Match(input,87,Follow._87_in_add_expr4250);  
					stream_87.Add(char_literal345);

					DebugLocation(509, 30);
					PushFollow(Follow._mul_expr_in_add_expr4254);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 87, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 509:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(509, 43);
						// SugarCpp.g:509:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(509, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(509, 54);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(509, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(509, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:510:10: '-' b= mul_expr
					{
					DebugLocation(510, 10);
					char_literal346=(IToken)Match(input,91,Follow._91_in_add_expr4279);  
					stream_91.Add(char_literal346);

					DebugLocation(510, 15);
					PushFollow(Follow._mul_expr_in_add_expr4283);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 91
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 510:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(510, 28);
						// SugarCpp.g:510:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(510, 39);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(510, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(510, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop150;
				}
			}

			loop150:
				;

			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 65);
			LeaveRule("add_expr", 65);
			LeaveRule_add_expr();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:514:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 66);
		TraceIn("mul_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal347 = default(IToken);
		IToken char_literal348 = default(IToken);
		IToken char_literal349 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal347_tree = default(CommonTree);
		CommonTree char_literal348_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(514, 1);
		try
		{
			// SugarCpp.g:515:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:515:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(515, 4);
			// SugarCpp.g:515:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:515:5: a= selector_expr
			{
			DebugLocation(515, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4321);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 515:21: -> $a
			{
				DebugLocation(515, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(515, 28);
			// SugarCpp.g:515:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=4;
				try { DebugEnterDecision(151, false);
				switch (input.LA(1))
				{
				case 85:
					{
					alt151 = 1;
					}
					break;
				case 98:
					{
					alt151 = 2;
					}
					break;
				case 78:
					{
					alt151 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:515:30: '*' b= selector_expr
					{
					DebugLocation(515, 30);
					char_literal347=(IToken)Match(input,85,Follow._85_in_mul_expr4331);  
					stream_85.Add(char_literal347);

					DebugLocation(515, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4335);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 85, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 515:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(515, 53);
						// SugarCpp.g:515:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(515, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(515, 64);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(515, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(515, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:516:15: '/' b= selector_expr
					{
					DebugLocation(516, 15);
					char_literal348=(IToken)Match(input,98,Follow._98_in_mul_expr4365);  
					stream_98.Add(char_literal348);

					DebugLocation(516, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4369);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 98
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(516, 38);
						// SugarCpp.g:516:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(516, 49);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(516, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(516, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:517:15: '%' b= selector_expr
					{
					DebugLocation(517, 15);
					char_literal349=(IToken)Match(input,78,Follow._78_in_mul_expr4399);  
					stream_78.Add(char_literal349);

					DebugLocation(517, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4403);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 78
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(517, 38);
						// SugarCpp.g:517:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(517, 49);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(517, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(517, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 66);
			LeaveRule("mul_expr", 66);
			LeaveRule_mul_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:521:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 67);
		TraceIn("selector_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal350 = default(IToken);
		IToken string_literal351 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal350_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(522, 4);
			// SugarCpp.g:522:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:522:5: a= cast_expr
			{
			DebugLocation(522, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4446);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 522:17: -> $a
			{
				DebugLocation(522, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(522, 24);
			// SugarCpp.g:522:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(152);
			while (true)
			{
				int alt152=3;
				try { DebugEnterDecision(152, false);
				int LA152_0 = input.LA(1);

				if ((LA152_0==95))
				{
					alt152 = 1;
				}
				else if ((LA152_0==97))
				{
					alt152 = 2;
				}


				} finally { DebugExitDecision(152); }
				switch ( alt152 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:26: '->*' b= ident
					{
					DebugLocation(522, 26);
					string_literal350=(IToken)Match(input,95,Follow._95_in_selector_expr4456);  
					stream_95.Add(string_literal350);

					DebugLocation(522, 33);
					PushFollow(Follow._ident_in_selector_expr4460);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 95
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 522:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(522, 43);
						// SugarCpp.g:522:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(522, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(522, 57);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(522, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(522, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:523:11: '.*' b= ident
					{
					DebugLocation(523, 11);
					string_literal351=(IToken)Match(input,97,Follow._97_in_selector_expr4486);  
					stream_97.Add(string_literal351);

					DebugLocation(523, 18);
					PushFollow(Follow._ident_in_selector_expr4491);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 97
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 523:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(523, 28);
						// SugarCpp.g:523:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(523, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(523, 42);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(523, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(523, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop152;
				}
			}

			loop152:
				;

			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 67);
			LeaveRule("selector_expr", 67);
			LeaveRule_selector_expr();
		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:527:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 68);
		TraceIn("cast_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal352 = default(IToken);
		IToken char_literal353 = default(IToken);
		IToken char_literal355 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name354 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal352_tree = default(CommonTree);
		CommonTree char_literal353_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(527, 1);
		try
		{
			// SugarCpp.g:528:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:528:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(528, 4);
			// SugarCpp.g:528:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:528:5: a= prefix_expr
			{
			DebugLocation(528, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4531);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 528:19: -> $a
			{
				DebugLocation(528, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(528, 26);
			// SugarCpp.g:528:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_0 = input.LA(1);

			if ((LA153_0==125))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:528:27: 'as' '(' type_name ')'
				{
				DebugLocation(528, 27);
				string_literal352=(IToken)Match(input,125,Follow._125_in_cast_expr4540);  
				stream_125.Add(string_literal352);

				DebugLocation(528, 32);
				char_literal353=(IToken)Match(input,83,Follow._83_in_cast_expr4542);  
				stream_83.Add(char_literal353);

				DebugLocation(528, 36);
				PushFollow(Follow._type_name_in_cast_expr4544);
				type_name354=type_name();
				PopFollow();

				stream_type_name.Add(type_name354.Tree);
				DebugLocation(528, 46);
				char_literal355=(IToken)Match(input,84,Follow._84_in_cast_expr4546);  
				stream_84.Add(char_literal355);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(528, 53);
					// SugarCpp.g:528:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(528, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(528, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(528, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 68);
			LeaveRule("cast_expr", 68);
			LeaveRule_cast_expr();
		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:531:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 69);
		TraceIn("prefix_expr_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set356 = default(IToken);

		CommonTree set356_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(531, 71);
		try
		{
			// SugarCpp.g:531:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(531, 15);

			set356=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==81||input.LA(1)==85||(input.LA(1)>=87 && input.LA(1)<=88)||(input.LA(1)>=91 && input.LA(1)<=92)||input.LA(1)==143||input.LA(1)==161)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set356));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 69);
			LeaveRule("prefix_expr_op", 69);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(531, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:532:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 70);
		TraceIn("prefix_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal359 = default(IToken);
		IToken char_literal361 = default(IToken);
		IToken char_literal363 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list362 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr364 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal359_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal363_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(532, 1);
		try
		{
			// SugarCpp.g:533:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt155=3;
			try { DebugEnterDecision(155, false);
			switch (input.LA(1))
			{
			case 76:
			case 81:
			case 85:
			case 87:
			case 88:
			case 91:
			case 92:
			case 143:
			case 161:
				{
				alt155 = 1;
				}
				break;
			case 142:
				{
				alt155 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 83:
			case 118:
				{
				alt155 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:533:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(533, 4);
				// SugarCpp.g:533:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:533:5: prefix_expr_op prefix_expr
				{
				DebugLocation(533, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4608);
				prefix_expr_op357=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op357.Tree);
				DebugLocation(533, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4610);
				prefix_expr358=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr358.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 533:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(533, 36);
					// SugarCpp.g:533:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(533, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(533, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(533, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:534:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(534, 4);
				string_literal359=(IToken)Match(input,142,Follow._142_in_prefix_expr4626);  
				stream_142.Add(string_literal359);

				DebugLocation(534, 10);
				PushFollow(Follow._type_name_in_prefix_expr4628);
				type_name360=type_name();
				PopFollow();

				stream_type_name.Add(type_name360.Tree);
				DebugLocation(534, 20);
				char_literal361=(IToken)Match(input,83,Follow._83_in_prefix_expr4630);  
				stream_83.Add(char_literal361);

				DebugLocation(534, 24);
				// SugarCpp.g:534:24: ( expr_list )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, false);
				int LA154_0 = input.LA(1);

				if ((LA154_0==IDENT||LA154_0==NUMBER||LA154_0==STRING||LA154_0==76||LA154_0==81||LA154_0==83||LA154_0==85||(LA154_0>=87 && LA154_0<=88)||(LA154_0>=91 && LA154_0<=92)||(LA154_0>=118 && LA154_0<=119)||(LA154_0>=142 && LA154_0<=143)||LA154_0==161))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:24: expr_list
					{
					DebugLocation(534, 24);
					PushFollow(Follow._expr_list_in_prefix_expr4632);
					expr_list362=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list362.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(534, 35);
				char_literal363=(IToken)Match(input,84,Follow._84_in_prefix_expr4635);  
				stream_84.Add(char_literal363);



				{
				// AST REWRITE
				// elements: expr_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 534:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(534, 42);
					// SugarCpp.g:534:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(534, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(534, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(534, 68);
					// SugarCpp.g:534:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(534, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:535:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(535, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4651);
				suffix_expr364=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr364.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 70);
			LeaveRule("prefix_expr", 70);
			LeaveRule_prefix_expr();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:538:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 71);
		TraceIn("expr_list", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal366 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal366_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(538, 1);
		try
		{
			// SugarCpp.g:539:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:539:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(539, 4);
			PushFollow(Follow._expr_in_expr_list4663);
			expr365=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr365.Tree);
			DebugLocation(539, 9);
			// SugarCpp.g:539:9: ( ',' ! expr )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, false);
				int LA156_0 = input.LA(1);

				if ((LA156_0==90))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:10: ',' ! expr
					{
					DebugLocation(539, 13);
					char_literal366=(IToken)Match(input,90,Follow._90_in_expr_list4666); 
					DebugLocation(539, 15);
					PushFollow(Follow._expr_in_expr_list4669);
					expr367=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr367.Tree);

					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 71);
			LeaveRule("expr_list", 71);
			LeaveRule_expr_list();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:542:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 72);
		TraceIn("suffix_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal368 = default(IToken);
		IToken string_literal369 = default(IToken);
		IToken char_literal370 = default(IToken);
		IToken string_literal372 = default(IToken);
		IToken char_literal374 = default(IToken);
		IToken char_literal376 = default(IToken);
		IToken char_literal377 = default(IToken);
		IToken char_literal378 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken char_literal381 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident371 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident373 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list379 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal368_tree = default(CommonTree);
		CommonTree string_literal369_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree string_literal372_tree = default(CommonTree);
		CommonTree char_literal374_tree = default(CommonTree);
		CommonTree char_literal376_tree = default(CommonTree);
		CommonTree char_literal377_tree = default(CommonTree);
		CommonTree char_literal378_tree = default(CommonTree);
		CommonTree char_literal380_tree = default(CommonTree);
		CommonTree char_literal381_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(542, 1);
		try
		{
			// SugarCpp.g:543:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:543:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(543, 4);
			// SugarCpp.g:543:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:543:5: a= atom_expr
			{
			DebugLocation(543, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4685);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 543:17: -> $a
			{
				DebugLocation(543, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(543, 24);
			// SugarCpp.g:543:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(159);
			while (true)
			{
				int alt159=7;
				try { DebugEnterDecision(159, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt159 = 1;
					}
					break;
				case 92:
					{
					alt159 = 2;
					}
					break;
				case 96:
					{
					alt159 = 3;
					}
					break;
				case 94:
					{
					alt159 = 4;
					}
					break;
				case 83:
					{
					alt159 = 5;
					}
					break;
				case 119:
					{
					alt159 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(159); }
				switch ( alt159 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:543:26: '++'
					{
					DebugLocation(543, 26);
					string_literal368=(IToken)Match(input,88,Follow._88_in_suffix_expr4695);  
					stream_88.Add(string_literal368);



					{
					// AST REWRITE
					// elements: suffix_expr, 88
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 543:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(543, 34);
						// SugarCpp.g:543:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(543, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(543, 48);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(543, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:544:14: '--'
					{
					DebugLocation(544, 14);
					string_literal369=(IToken)Match(input,92,Follow._92_in_suffix_expr4721);  
					stream_92.Add(string_literal369);



					{
					// AST REWRITE
					// elements: suffix_expr, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 544:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(544, 22);
						// SugarCpp.g:544:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(544, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(544, 36);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(544, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:545:11: '.' ident
					{
					DebugLocation(545, 11);
					char_literal370=(IToken)Match(input,96,Follow._96_in_suffix_expr4744);  
					stream_96.Add(char_literal370);

					DebugLocation(545, 15);
					PushFollow(Follow._ident_in_suffix_expr4746);
					ident371=ident();
					PopFollow();

					stream_ident.Add(ident371.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 96, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 545:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(545, 24);
						// SugarCpp.g:545:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(545, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(545, 38);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(545, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(545, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:546:11: '->' ident
					{
					DebugLocation(546, 11);
					string_literal372=(IToken)Match(input,94,Follow._94_in_suffix_expr4771);  
					stream_94.Add(string_literal372);

					DebugLocation(546, 16);
					PushFollow(Follow._ident_in_suffix_expr4773);
					ident373=ident();
					PopFollow();

					stream_ident.Add(ident373.Tree);


					{
					// AST REWRITE
					// elements: 94, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(546, 25);
						// SugarCpp.g:546:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(546, 39);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(546, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(546, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:547:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(547, 11);
					char_literal374=(IToken)Match(input,83,Follow._83_in_suffix_expr4798);  
					stream_83.Add(char_literal374);

					DebugLocation(547, 15);
					// SugarCpp.g:547:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt157=2;
					try { DebugEnterSubRule(157);
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==IDENT||LA157_0==NUMBER||LA157_0==STRING||LA157_0==76||LA157_0==81||LA157_0==83||LA157_0==85||(LA157_0>=87 && LA157_0<=88)||(LA157_0>=91 && LA157_0<=92)||(LA157_0>=118 && LA157_0<=119)||(LA157_0>=142 && LA157_0<=143)||LA157_0==161))
					{
						alt157 = 1;
					}
					else if ((LA157_0==84))
					{
						alt157 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:547:17: expr_list ')'
						{
						DebugLocation(547, 17);
						PushFollow(Follow._expr_list_in_suffix_expr4802);
						expr_list375=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list375.Tree);
						DebugLocation(547, 27);
						char_literal376=(IToken)Match(input,84,Follow._84_in_suffix_expr4804);  
						stream_84.Add(char_literal376);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 547:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(547, 34);
							// SugarCpp.g:547:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(547, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(547, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(547, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:548:17: ')'
						{
						DebugLocation(548, 17);
						char_literal377=(IToken)Match(input,84,Follow._84_in_suffix_expr4833);  
						stream_84.Add(char_literal377);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 548:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(548, 24);
							// SugarCpp.g:548:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(548, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(548, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(157); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:550:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(550, 11);
					char_literal378=(IToken)Match(input,119,Follow._119_in_suffix_expr4864);  
					stream_119.Add(char_literal378);

					DebugLocation(550, 15);
					// SugarCpp.g:550:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt158=2;
					try { DebugEnterSubRule(158);
					try { DebugEnterDecision(158, false);
					int LA158_0 = input.LA(1);

					if ((LA158_0==IDENT||LA158_0==NUMBER||LA158_0==STRING||LA158_0==76||LA158_0==81||LA158_0==83||LA158_0==85||(LA158_0>=87 && LA158_0<=88)||(LA158_0>=91 && LA158_0<=92)||(LA158_0>=118 && LA158_0<=119)||(LA158_0>=142 && LA158_0<=143)||LA158_0==161))
					{
						alt158 = 1;
					}
					else if ((LA158_0==120))
					{
						alt158 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(158); }
					switch (alt158)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:550:17: expr_list ']'
						{
						DebugLocation(550, 17);
						PushFollow(Follow._expr_list_in_suffix_expr4868);
						expr_list379=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list379.Tree);
						DebugLocation(550, 27);
						char_literal380=(IToken)Match(input,120,Follow._120_in_suffix_expr4870);  
						stream_120.Add(char_literal380);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 550:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(550, 34);
							// SugarCpp.g:550:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(550, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(550, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(550, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:551:17: ']'
						{
						DebugLocation(551, 17);
						char_literal381=(IToken)Match(input,120,Follow._120_in_suffix_expr4899);  
						stream_120.Add(char_literal381);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 551:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(551, 24);
							// SugarCpp.g:551:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(551, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(551, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(158); }


					}
					break;

				default:
					goto loop159;
				}
			}

			loop159:
				;

			} finally { DebugExitSubRule(159); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 72);
			LeaveRule("suffix_expr", 72);
			LeaveRule_suffix_expr();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:557:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 73);
		TraceIn("atom_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER382 = default(IToken);
		IToken STRING384 = default(IToken);
		IToken char_literal385 = default(IToken);
		IToken char_literal387 = default(IToken);
		IToken char_literal388 = default(IToken);
		IToken char_literal390 = default(IToken);
		IToken char_literal391 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident386 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr389 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER382_tree = default(CommonTree);
		CommonTree STRING384_tree = default(CommonTree);
		CommonTree char_literal385_tree = default(CommonTree);
		CommonTree char_literal387_tree = default(CommonTree);
		CommonTree char_literal388_tree = default(CommonTree);
		CommonTree char_literal390_tree = default(CommonTree);
		CommonTree char_literal391_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(557, 1);
		try
		{
			// SugarCpp.g:558:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt162=5;
			try { DebugEnterDecision(162, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt162 = 1;
				}
				break;
			case IDENT:
				{
				alt162 = 2;
				}
				break;
			case STRING:
				{
				alt162 = 3;
				}
				break;
			case 118:
				{
				alt162 = 4;
				}
				break;
			case 83:
				{
				alt162 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:558:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(558, 4);
				NUMBER382=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4952); 
				NUMBER382_tree = (CommonTree)adaptor.Create(NUMBER382);
				adaptor.AddChild(root_0, NUMBER382_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:559:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(559, 4);
				PushFollow(Follow._ident_in_atom_expr4957);
				ident383=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident383.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:560:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(560, 4);
				STRING384=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4962); 
				STRING384_tree = (CommonTree)adaptor.Create(STRING384);
				adaptor.AddChild(root_0, STRING384_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:561:4: '@' ident
				{
				DebugLocation(561, 4);
				char_literal385=(IToken)Match(input,118,Follow._118_in_atom_expr4967);  
				stream_118.Add(char_literal385);

				DebugLocation(561, 8);
				PushFollow(Follow._ident_in_atom_expr4969);
				ident386=ident();
				PopFollow();

				stream_ident.Add(ident386.Tree);


				{
				// AST REWRITE
				// elements: 118, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 561:14: -> ^( '@' ident )
				{
					DebugLocation(561, 17);
					// SugarCpp.g:561:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(561, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_118.NextNode(), root_1);

					DebugLocation(561, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:562:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(562, 4);
				char_literal387=(IToken)Match(input,83,Follow._83_in_atom_expr4982);  
				stream_83.Add(char_literal387);

				DebugLocation(562, 9);
				PushFollow(Follow._expr_in_atom_expr4986);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(562, 15);
				// SugarCpp.g:562:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, false);
				int LA161_0 = input.LA(1);

				if ((LA161_0==90))
				{
					alt161 = 1;
				}
				else if ((LA161_0==84))
				{
					alt161 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:562:17: ( ',' expr )+ ')'
					{
					DebugLocation(562, 17);
					// SugarCpp.g:562:17: ( ',' expr )+
					int cnt160=0;
					try { DebugEnterSubRule(160);
					while (true)
					{
						int alt160=2;
						try { DebugEnterDecision(160, false);
						int LA160_0 = input.LA(1);

						if ((LA160_0==90))
						{
							alt160 = 1;
						}


						} finally { DebugExitDecision(160); }
						switch (alt160)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:562:18: ',' expr
							{
							DebugLocation(562, 18);
							char_literal388=(IToken)Match(input,90,Follow._90_in_atom_expr4991);  
							stream_90.Add(char_literal388);

							DebugLocation(562, 22);
							PushFollow(Follow._expr_in_atom_expr4993);
							expr389=expr();
							PopFollow();

							stream_expr.Add(expr389.Tree);

							}
							break;

						default:
							if (cnt160 >= 1)
								goto loop160;

							EarlyExitException eee160 = new EarlyExitException( 160, input );
							DebugRecognitionException(eee160);
							throw eee160;
						}
						cnt160++;
					}
					loop160:
						;

					} finally { DebugExitSubRule(160); }

					DebugLocation(562, 29);
					char_literal390=(IToken)Match(input,84,Follow._84_in_atom_expr4997);  
					stream_84.Add(char_literal390);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(562, 36);
						// SugarCpp.g:562:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(562, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(562, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:563:17: ')' {...}?
					{
					DebugLocation(563, 17);
					char_literal391=(IToken)Match(input,84,Follow._84_in_atom_expr5024);  
					stream_84.Add(char_literal391);

					DebugLocation(563, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 563:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(563, 40);
						// SugarCpp.g:563:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(563, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(563, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(161); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 73);
			LeaveRule("atom_expr", 73);
			LeaveRule_atom_expr();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:567:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 74);
		TraceIn("lvalue_item", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix392 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(568, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item5055);
			lvalue_prefix392=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix392.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 74);
			LeaveRule("lvalue_item", 74);
			LeaveRule_lvalue_item();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:571:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 75);
		TraceIn("lvalue_prefix", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt163=2;
			try { DebugEnterDecision(163, false);
			int LA163_0 = input.LA(1);

			if ((LA163_0==76||LA163_0==81||LA163_0==85||(LA163_0>=87 && LA163_0<=88)||(LA163_0>=91 && LA163_0<=92)||LA163_0==143||LA163_0==161))
			{
				alt163 = 1;
			}
			else if ((LA163_0==IDENT||LA163_0==118))
			{
				alt163 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:572:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(572, 4);
				// SugarCpp.g:572:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:572:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(572, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix5067);
				prefix_expr_op393=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op393.Tree);
				DebugLocation(572, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix5069);
				lvalue_prefix394=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix394.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 572:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(572, 38);
					// SugarCpp.g:572:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(572, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(572, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(572, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:573:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(573, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix5085);
				lvalue_suffix395=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix395.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 75);
			LeaveRule("lvalue_prefix", 75);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(574, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:576:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 76);
		TraceIn("lvalue_suffix", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal396 = default(IToken);
		IToken string_literal397 = default(IToken);
		IToken char_literal398 = default(IToken);
		IToken string_literal400 = default(IToken);
		IToken char_literal403 = default(IToken);
		IToken char_literal405 = default(IToken);
		IToken char_literal406 = default(IToken);
		IToken char_literal408 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter402 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list404 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal396_tree = default(CommonTree);
		CommonTree string_literal397_tree = default(CommonTree);
		CommonTree char_literal398_tree = default(CommonTree);
		CommonTree string_literal400_tree = default(CommonTree);
		CommonTree char_literal403_tree = default(CommonTree);
		CommonTree char_literal405_tree = default(CommonTree);
		CommonTree char_literal406_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(576, 1);
		try
		{
			// SugarCpp.g:577:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:577:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(577, 4);
			// SugarCpp.g:577:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:577:5: a= lvalue_atom
			{
			DebugLocation(577, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix5099);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 577:19: -> $a
			{
				DebugLocation(577, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(577, 26);
			// SugarCpp.g:577:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(167);
			while (true)
			{
				int alt167=7;
				try { DebugEnterDecision(167, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt167 = 1;
					}
					break;
				case 92:
					{
					alt167 = 2;
					}
					break;
				case 96:
					{
					alt167 = 3;
					}
					break;
				case 94:
					{
					alt167 = 4;
					}
					break;
				case 83:
				case 104:
					{
					alt167 = 5;
					}
					break;
				case 119:
					{
					alt167 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(167); }
				switch ( alt167 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:577:28: '++'
					{
					DebugLocation(577, 28);
					string_literal396=(IToken)Match(input,88,Follow._88_in_lvalue_suffix5109);  
					stream_88.Add(string_literal396);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 88
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(577, 36);
						// SugarCpp.g:577:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(577, 50);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(577, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:578:16: '--'
					{
					DebugLocation(578, 16);
					string_literal397=(IToken)Match(input,92,Follow._92_in_lvalue_suffix5137);  
					stream_92.Add(string_literal397);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 578:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(578, 24);
						// SugarCpp.g:578:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(578, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(578, 38);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(578, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:579:13: '.' ident
					{
					DebugLocation(579, 13);
					char_literal398=(IToken)Match(input,96,Follow._96_in_lvalue_suffix5162);  
					stream_96.Add(char_literal398);

					DebugLocation(579, 17);
					PushFollow(Follow._ident_in_lvalue_suffix5164);
					ident399=ident();
					PopFollow();

					stream_ident.Add(ident399.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 96, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 579:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(579, 26);
						// SugarCpp.g:579:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(579, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(579, 40);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(579, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(579, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:580:13: '->' ident
					{
					DebugLocation(580, 13);
					string_literal400=(IToken)Match(input,94,Follow._94_in_lvalue_suffix5191);  
					stream_94.Add(string_literal400);

					DebugLocation(580, 18);
					PushFollow(Follow._ident_in_lvalue_suffix5193);
					ident401=ident();
					PopFollow();

					stream_ident.Add(ident401.Tree);


					{
					// AST REWRITE
					// elements: 94, lvalue_suffix, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 580:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(580, 27);
						// SugarCpp.g:580:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(580, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(580, 41);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(580, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(580, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:581:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(581, 13);
					// SugarCpp.g:581:13: ( generic_parameter )?
					int alt164=2;
					try { DebugEnterSubRule(164);
					try { DebugEnterDecision(164, false);
					int LA164_0 = input.LA(1);

					if ((LA164_0==104))
					{
						alt164 = 1;
					}
					} finally { DebugExitDecision(164); }
					switch (alt164)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:581:13: generic_parameter
						{
						DebugLocation(581, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix5220);
						generic_parameter402=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter402.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(164); }

					DebugLocation(581, 32);
					char_literal403=(IToken)Match(input,83,Follow._83_in_lvalue_suffix5223);  
					stream_83.Add(char_literal403);

					DebugLocation(581, 36);
					// SugarCpp.g:581:36: ( expr_list )?
					int alt165=2;
					try { DebugEnterSubRule(165);
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==IDENT||LA165_0==NUMBER||LA165_0==STRING||LA165_0==76||LA165_0==81||LA165_0==83||LA165_0==85||(LA165_0>=87 && LA165_0<=88)||(LA165_0>=91 && LA165_0<=92)||(LA165_0>=118 && LA165_0<=119)||(LA165_0>=142 && LA165_0<=143)||LA165_0==161))
					{
						alt165 = 1;
					}
					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:581:36: expr_list
						{
						DebugLocation(581, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix5225);
						expr_list404=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list404.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(165); }

					DebugLocation(581, 47);
					char_literal405=(IToken)Match(input,84,Follow._84_in_lvalue_suffix5228);  
					stream_84.Add(char_literal405);



					{
					// AST REWRITE
					// elements: generic_parameter, expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 581:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(581, 54);
						// SugarCpp.g:581:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(581, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(581, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(581, 81);
						// SugarCpp.g:581:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(581, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(581, 100);
						// SugarCpp.g:581:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(581, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:582:13: '[' ( expr_list )? ']'
					{
					DebugLocation(582, 13);
					char_literal406=(IToken)Match(input,119,Follow._119_in_lvalue_suffix5257);  
					stream_119.Add(char_literal406);

					DebugLocation(582, 17);
					// SugarCpp.g:582:17: ( expr_list )?
					int alt166=2;
					try { DebugEnterSubRule(166);
					try { DebugEnterDecision(166, false);
					int LA166_0 = input.LA(1);

					if ((LA166_0==IDENT||LA166_0==NUMBER||LA166_0==STRING||LA166_0==76||LA166_0==81||LA166_0==83||LA166_0==85||(LA166_0>=87 && LA166_0<=88)||(LA166_0>=91 && LA166_0<=92)||(LA166_0>=118 && LA166_0<=119)||(LA166_0>=142 && LA166_0<=143)||LA166_0==161))
					{
						alt166 = 1;
					}
					} finally { DebugExitDecision(166); }
					switch (alt166)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:582:17: expr_list
						{
						DebugLocation(582, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix5259);
						expr_list407=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list407.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(166); }

					DebugLocation(582, 28);
					char_literal408=(IToken)Match(input,120,Follow._120_in_lvalue_suffix5262);  
					stream_120.Add(char_literal408);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 582:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(582, 35);
						// SugarCpp.g:582:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(582, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(582, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(582, 62);
						// SugarCpp.g:582:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(582, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop167;
				}
			}

			loop167:
				;

			} finally { DebugExitSubRule(167); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 76);
			LeaveRule("lvalue_suffix", 76);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:586:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 77);
		TraceIn("lvalue_atom", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal410 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident411 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal410_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(586, 1);
		try
		{
			// SugarCpp.g:587:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt168=2;
			try { DebugEnterDecision(168, false);
			int LA168_0 = input.LA(1);

			if ((LA168_0==IDENT))
			{
				alt168 = 1;
			}
			else if ((LA168_0==118))
			{
				alt168 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:587:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(587, 4);
				PushFollow(Follow._ident_in_lvalue_atom5301);
				ident409=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident409.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:588:4: '@' ident
				{
				DebugLocation(588, 4);
				char_literal410=(IToken)Match(input,118,Follow._118_in_lvalue_atom5306);  
				stream_118.Add(char_literal410);

				DebugLocation(588, 8);
				PushFollow(Follow._ident_in_lvalue_atom5308);
				ident411=ident();
				PopFollow();

				stream_ident.Add(ident411.Tree);


				{
				// AST REWRITE
				// elements: ident, 118
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 588:14: -> ^( '@' ident )
				{
					DebugLocation(588, 17);
					// SugarCpp.g:588:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(588, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_118.NextNode(), root_1);

					DebugLocation(588, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 77);
			LeaveRule("lvalue_atom", 77);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(589, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:591:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 78);
		TraceIn("lvalue", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal412 = default(IToken);
		IToken char_literal414 = default(IToken);
		IToken char_literal416 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item415 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item417 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal412_tree = default(CommonTree);
		CommonTree char_literal414_tree = default(CommonTree);
		CommonTree char_literal416_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(591, 1);
		try
		{
			// SugarCpp.g:592:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt170=2;
			try { DebugEnterDecision(170, false);
			int LA170_0 = input.LA(1);

			if ((LA170_0==83))
			{
				alt170 = 1;
			}
			else if ((LA170_0==IDENT||LA170_0==76||LA170_0==81||LA170_0==85||(LA170_0>=87 && LA170_0<=88)||(LA170_0>=91 && LA170_0<=92)||LA170_0==118||LA170_0==143||LA170_0==161))
			{
				alt170 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 170, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:592:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(592, 4);
				char_literal412=(IToken)Match(input,83,Follow._83_in_lvalue5327);  
				stream_83.Add(char_literal412);

				DebugLocation(592, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5329);
				lvalue_item413=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item413.Tree);
				DebugLocation(592, 20);
				// SugarCpp.g:592:20: ( ',' lvalue_item )+
				int cnt169=0;
				try { DebugEnterSubRule(169);
				while (true)
				{
					int alt169=2;
					try { DebugEnterDecision(169, false);
					int LA169_0 = input.LA(1);

					if ((LA169_0==90))
					{
						alt169 = 1;
					}


					} finally { DebugExitDecision(169); }
					switch (alt169)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:592:21: ',' lvalue_item
						{
						DebugLocation(592, 21);
						char_literal414=(IToken)Match(input,90,Follow._90_in_lvalue5332);  
						stream_90.Add(char_literal414);

						DebugLocation(592, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5334);
						lvalue_item415=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item415.Tree);

						}
						break;

					default:
						if (cnt169 >= 1)
							goto loop169;

						EarlyExitException eee169 = new EarlyExitException( 169, input );
						DebugRecognitionException(eee169);
						throw eee169;
					}
					cnt169++;
				}
				loop169:
					;

				} finally { DebugExitSubRule(169); }

				DebugLocation(592, 39);
				char_literal416=(IToken)Match(input,84,Follow._84_in_lvalue5338);  
				stream_84.Add(char_literal416);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 592:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(592, 46);
					// SugarCpp.g:592:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(592, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(592, 60);
					// SugarCpp.g:592:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(592, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:593:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(593, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5352);
				lvalue_item417=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item417.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 78);
			LeaveRule("lvalue", 78);
			LeaveRule_lvalue();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:596:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 79);
		TraceIn("ident", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT418 = default(IToken);
		IToken string_literal419 = default(IToken);
		IToken IDENT420 = default(IToken);

		CommonTree IDENT418_tree = default(CommonTree);
		CommonTree string_literal419_tree = default(CommonTree);
		CommonTree IDENT420_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(596, 1);
		try
		{
			// SugarCpp.g:597:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:597:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 4);
			IDENT418=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5363); 
			IDENT418_tree = (CommonTree)adaptor.Create(IDENT418);
			adaptor.AddChild(root_0, IDENT418_tree);
			DebugLocation(597, 10);
			// SugarCpp.g:597:10: ( '::' IDENT )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==101))
				{
					alt171 = 1;
				}


				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:597:11: '::' IDENT
					{
					DebugLocation(597, 11);
					string_literal419=(IToken)Match(input,101,Follow._101_in_ident5366); 
					string_literal419_tree = (CommonTree)adaptor.Create(string_literal419);
					adaptor.AddChild(root_0, string_literal419_tree);
					DebugLocation(597, 16);
					IDENT420=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5368); 
					IDENT420_tree = (CommonTree)adaptor.Create(IDENT420);
					adaptor.AddChild(root_0, IDENT420_tree);

					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 79);
			LeaveRule("ident", 79);
			LeaveRule_ident();
		}
		DebugLocation(598, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:600:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 80);
		TraceIn("infix_func", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal421 = default(IToken);
		IToken char_literal423 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal421_tree = default(CommonTree);
		CommonTree char_literal423_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(600, 1);
		try
		{
			// SugarCpp.g:601:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:601:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(601, 7);
			char_literal421=(IToken)Match(input,123,Follow._123_in_infix_func5381); 
			DebugLocation(601, 9);
			PushFollow(Follow._ident_in_infix_func5384);
			ident422=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident422.Tree);
			DebugLocation(601, 18);
			char_literal423=(IToken)Match(input,123,Follow._123_in_infix_func5386); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 80);
			LeaveRule("infix_func", 80);
			LeaveRule_infix_func();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA62 dfa62;
	private DFA74 dfa74;
	private DFA82 dfa82;
	private DFA87 dfa87;
	private DFA100 dfa100;
	private DFA111 dfa111;
	private DFA114 dfa114;
	private DFA126 dfa126;
	private DFA125 dfa125;
	private DFA131 dfa131;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa62 = new DFA62( this );
		dfa74 = new DFA74( this );
		dfa82 = new DFA82( this );
		dfa87 = new DFA87( this );
		dfa100 = new DFA100( this );
		dfa111 = new DFA111( this );
		dfa114 = new DFA114( this );
		dfa126 = new DFA126( this );
		dfa125 = new DFA125( this );
		dfa131 = new DFA131( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x29\x1\xFFFF\x1\x29\x6\xFFFF\x2\x53\x1\x29\x1\xFFFF\x3\x29\x1\x30"+
			"\x2\x29\x1\x53\x3\x54\x2\x53\x1\x29\x3\x54\x1\x29\x1\x5A\x5\x29\x1\x5A"+
			"\x1\x29\x4\x54\x1\x53\xA\x54\x2\x29\x1\x5A\x2\x29\x1\x5A\x2\x29\xA\x54"+
			"\x2\x29\x2\x54";
		private const string DFA4_maxS =
			"\x1\xA1\x1\x81\x1\xFFFF\x1\xA1\x6\xFFFF\x2\x78\x1\x29\x1\xFFFF\x1\x29"+
			"\x1\x36\x1\x81\x1\x30\x1\x36\x1\xA1\x1\x78\x2\x5A\x1\x65\x2\x78\x1\xA1"+
			"\x2\x5A\x1\x65\x1\x36\x1\x78\x2\x29\x3\x36\x1\x78\x1\x29\x2\x5A\x2\x65"+
			"\x1\x78\x2\x5A\x1\x65\x2\x5A\x1\x65\x2\x5A\x2\x65\x1\x29\x1\x36\x1\x78"+
			"\x1\x29\x1\x36\x1\x78\x2\x29\x1\x65\x2\x5A\x2\x65\x2\x5A\x3\x65\x2\x29"+
			"\x2\x65";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4D\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x2",
				"\x1\xA\x57\xFFFF\x1\xB",
				"",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x29\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x57\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x29\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x46\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x3\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x5\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x30\x1\xA1\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x30\x1\xA1\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x30\x1\xA1\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA62 : DFA
	{
		private const string DFA62_eotS =
			"\xF\xFFFF";
		private const string DFA62_eofS =
			"\xF\xFFFF";
		private const string DFA62_minS =
			"\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF\x3\x29\x1\x51\x3\x29\x2\x51\x1\x29\x1"+
			"\x51";
		private const string DFA62_maxS =
			"\x1\xA1\x1\xFFFF\x1\xA1\x1\xFFFF\x1\x29\x1\x99\x1\xA1\x1\x77\x1\x29\x1"+
			"\x99\x1\xA1\x2\x77\x1\x29\x1\x77";
		private const string DFA62_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA62_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA62_transitionS =
			{
				"\x1\x2\x57\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x3",
				"",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x29\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x46\xFFFF\x1\x1\x10\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x29\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x57\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x29\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
		private static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
		private static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
		private static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
		private static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
		private static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
		private static readonly short[][] DFA62_transition;

		static DFA62()
		{
			int numStates = DFA62_transitionS.Length;
			DFA62_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA62_transition[i] = DFA.UnpackEncodedString(DFA62_transitionS[i]);
			}
		}

		public DFA62( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 62;
			this.eot = DFA62_eot;
			this.eof = DFA62_eof;
			this.min = DFA62_min;
			this.max = DFA62_max;
			this.accept = DFA62_accept;
			this.special = DFA62_special;
			this.transition = DFA62_transition;
		}

		public override string Description { get { return "311:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA74 : DFA
	{
		private const string DFA74_eotS =
			"\xA\xFFFF";
		private const string DFA74_eofS =
			"\xA\xFFFF";
		private const string DFA74_minS =
			"\x1\x29\x1\x30\x5\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA74_maxS =
			"\x1\xA1\x1\x9F\x5\xFFFF\x1\x29\x1\xFFFF\x1\x9F";
		private const string DFA74_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA74_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA74_transitionS =
			{
				"\x1\x1\x22\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x18\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x6\x3\xFFFF\x1\x4\x3\xFFFF\x1\x3\x5\xFFFF\x1\x5",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x8\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8"+
				"\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xF\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"",
				"\x1\x9",
				"",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x8\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8"+
				"\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xF\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA74_eot = DFA.UnpackEncodedString(DFA74_eotS);
		private static readonly short[] DFA74_eof = DFA.UnpackEncodedString(DFA74_eofS);
		private static readonly char[] DFA74_min = DFA.UnpackEncodedStringToUnsignedChars(DFA74_minS);
		private static readonly char[] DFA74_max = DFA.UnpackEncodedStringToUnsignedChars(DFA74_maxS);
		private static readonly short[] DFA74_accept = DFA.UnpackEncodedString(DFA74_acceptS);
		private static readonly short[] DFA74_special = DFA.UnpackEncodedString(DFA74_specialS);
		private static readonly short[][] DFA74_transition;

		static DFA74()
		{
			int numStates = DFA74_transitionS.Length;
			DFA74_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA74_transition[i] = DFA.UnpackEncodedString(DFA74_transitionS[i]);
			}
		}

		public DFA74( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 74;
			this.eot = DFA74_eot;
			this.eof = DFA74_eof;
			this.min = DFA74_min;
			this.max = DFA74_max;
			this.accept = DFA74_accept;
			this.special = DFA74_special;
			this.transition = DFA74_transition;
		}

		public override string Description { get { return "337:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA82 : DFA
	{
		private const string DFA82_eotS =
			"\x4\xFFFF";
		private const string DFA82_eofS =
			"\x4\xFFFF";
		private const string DFA82_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA82_maxS =
			"\x1\x84\x1\xA1\x2\xFFFF";
		private const string DFA82_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA82_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA82_transitionS =
			{
				"\x1\x1\x36\xFFFF\x1\x3\x1C\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\xA\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
		private static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
		private static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
		private static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
		private static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
		private static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
		private static readonly short[][] DFA82_transition;

		static DFA82()
		{
			int numStates = DFA82_transitionS.Length;
			DFA82_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
			}
		}

		public DFA82( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}

		public override string Description { get { return "365:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA87 : DFA
	{
		private const string DFA87_eotS =
			"\x4\xFFFF";
		private const string DFA87_eofS =
			"\x4\xFFFF";
		private const string DFA87_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA87_maxS =
			"\x1\x84\x1\xA1\x2\xFFFF";
		private const string DFA87_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA87_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA87_transitionS =
			{
				"\x1\x1\x36\xFFFF\x1\x3\x1C\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\xA\xFFFF"+
				"\x1\x3\xE\xFFFF\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
		private static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
		private static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
		private static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
		private static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
		private static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
		private static readonly short[][] DFA87_transition;

		static DFA87()
		{
			int numStates = DFA87_transitionS.Length;
			DFA87_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA87_transition[i] = DFA.UnpackEncodedString(DFA87_transitionS[i]);
			}
		}

		public DFA87( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}

		public override string Description { get { return "368:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA100 : DFA
	{
		private const string DFA100_eotS =
			"\x6\xFFFF";
		private const string DFA100_eofS =
			"\x6\xFFFF";
		private const string DFA100_minS =
			"\x1\x29\x1\x30\x1\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA100_maxS =
			"\x1\xA1\x1\xA0\x1\xFFFF\x1\x29\x1\xFFFF\x1\xA0";
		private const string DFA100_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA100_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA100_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x3\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x3\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2"
			};

		private static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
		private static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
		private static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
		private static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
		private static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
		private static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
		private static readonly short[][] DFA100_transition;

		static DFA100()
		{
			int numStates = DFA100_transitionS.Length;
			DFA100_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA100_transition[i] = DFA.UnpackEncodedString(DFA100_transitionS[i]);
			}
		}

		public DFA100( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 100;
			this.eot = DFA100_eot;
			this.eof = DFA100_eof;
			this.min = DFA100_min;
			this.max = DFA100_max;
			this.accept = DFA100_accept;
			this.special = DFA100_special;
			this.transition = DFA100_transition;
		}

		public override string Description { get { return "394:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA111 : DFA
	{
		private const string DFA111_eotS =
			"\x4\xFFFF";
		private const string DFA111_eofS =
			"\x4\xFFFF";
		private const string DFA111_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA111_maxS =
			"\x2\x9C\x2\xFFFF";
		private const string DFA111_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA111_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA111_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x1\x53\xFFFF\x1\x2\x17\xFFFF\x1\x3",
				"\x1\x2\x27\xFFFF\x1\x1\x53\xFFFF\x1\x2\x17\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
		private static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
		private static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
		private static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
		private static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
		private static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
		private static readonly short[][] DFA111_transition;

		static DFA111()
		{
			int numStates = DFA111_transitionS.Length;
			DFA111_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA111_transition[i] = DFA.UnpackEncodedString(DFA111_transitionS[i]);
			}
		}

		public DFA111( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 111;
			this.eot = DFA111_eot;
			this.eof = DFA111_eof;
			this.min = DFA111_min;
			this.max = DFA111_max;
			this.accept = DFA111_accept;
			this.special = DFA111_special;
			this.transition = DFA111_transition;
		}

		public override string Description { get { return "()* loopback of 414:35: ( ( NEWLINE )* switch_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA114 : DFA
	{
		private const string DFA114_eotS =
			"\x4\xFFFF";
		private const string DFA114_eofS =
			"\x4\xFFFF";
		private const string DFA114_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA114_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA114_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA114_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA114_transitionS =
			{
				"\x1\x3\x27\xFFFF\x1\x1\x53\xFFFF\x1\x2",
				"\x1\x3\x27\xFFFF\x1\x1\x53\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA114_eot = DFA.UnpackEncodedString(DFA114_eotS);
		private static readonly short[] DFA114_eof = DFA.UnpackEncodedString(DFA114_eofS);
		private static readonly char[] DFA114_min = DFA.UnpackEncodedStringToUnsignedChars(DFA114_minS);
		private static readonly char[] DFA114_max = DFA.UnpackEncodedStringToUnsignedChars(DFA114_maxS);
		private static readonly short[] DFA114_accept = DFA.UnpackEncodedString(DFA114_acceptS);
		private static readonly short[] DFA114_special = DFA.UnpackEncodedString(DFA114_specialS);
		private static readonly short[][] DFA114_transition;

		static DFA114()
		{
			int numStates = DFA114_transitionS.Length;
			DFA114_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA114_transition[i] = DFA.UnpackEncodedString(DFA114_transitionS[i]);
			}
		}

		public DFA114( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 114;
			this.eot = DFA114_eot;
			this.eof = DFA114_eof;
			this.min = DFA114_min;
			this.max = DFA114_max;
			this.accept = DFA114_accept;
			this.special = DFA114_special;
			this.transition = DFA114_transition;
		}

		public override string Description { get { return "414:59: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA126 : DFA
	{
		private const string DFA126_eotS =
			"\x7\xFFFF";
		private const string DFA126_eofS =
			"\x7\xFFFF";
		private const string DFA126_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA126_maxS =
			"\x5\xA1\x2\xFFFF";
		private const string DFA126_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA126_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA126_transitionS =
			{
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA126_eot = DFA.UnpackEncodedString(DFA126_eotS);
		private static readonly short[] DFA126_eof = DFA.UnpackEncodedString(DFA126_eofS);
		private static readonly char[] DFA126_min = DFA.UnpackEncodedStringToUnsignedChars(DFA126_minS);
		private static readonly char[] DFA126_max = DFA.UnpackEncodedStringToUnsignedChars(DFA126_maxS);
		private static readonly short[] DFA126_accept = DFA.UnpackEncodedString(DFA126_acceptS);
		private static readonly short[] DFA126_special = DFA.UnpackEncodedString(DFA126_specialS);
		private static readonly short[][] DFA126_transition;

		static DFA126()
		{
			int numStates = DFA126_transitionS.Length;
			DFA126_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA126_transition[i] = DFA.UnpackEncodedString(DFA126_transitionS[i]);
			}
		}

		public DFA126( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}

		public override string Description { get { return "439:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA125 : DFA
	{
		private const string DFA125_eotS =
			"\x7\xFFFF";
		private const string DFA125_eofS =
			"\x7\xFFFF";
		private const string DFA125_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA125_maxS =
			"\x1\x78\x4\xA1\x2\xFFFF";
		private const string DFA125_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA125_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA125_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x3\x5\xFFFF\x1\x2\x29\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA125_eot = DFA.UnpackEncodedString(DFA125_eotS);
		private static readonly short[] DFA125_eof = DFA.UnpackEncodedString(DFA125_eofS);
		private static readonly char[] DFA125_min = DFA.UnpackEncodedStringToUnsignedChars(DFA125_minS);
		private static readonly char[] DFA125_max = DFA.UnpackEncodedStringToUnsignedChars(DFA125_maxS);
		private static readonly short[] DFA125_accept = DFA.UnpackEncodedString(DFA125_acceptS);
		private static readonly short[] DFA125_special = DFA.UnpackEncodedString(DFA125_specialS);
		private static readonly short[][] DFA125_transition;

		static DFA125()
		{
			int numStates = DFA125_transitionS.Length;
			DFA125_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA125_transition[i] = DFA.UnpackEncodedString(DFA125_transitionS[i]);
			}
		}

		public DFA125( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 125;
			this.eot = DFA125_eot;
			this.eof = DFA125_eof;
			this.min = DFA125_min;
			this.max = DFA125_max;
			this.accept = DFA125_accept;
			this.special = DFA125_special;
			this.transition = DFA125_transition;
		}

		public override string Description { get { return "()* loopback of 439:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA131 : DFA
	{
		private const string DFA131_eotS =
			"\xB\xFFFF";
		private const string DFA131_eofS =
			"\xB\xFFFF";
		private const string DFA131_minS =
			"\x2\x29\x1\xFFFF\x1\x4D\x1\xFFFF\x2\x29\x2\x4D\x1\x29\x1\x4D";
		private const string DFA131_maxS =
			"\x2\xA1\x1\xFFFF\x1\xA0\x1\xFFFF\x1\x29\x1\xA1\x2\xA0\x1\x29\x1\xA0";
		private const string DFA131_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA131_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA131_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x17\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2"
			};

		private static readonly short[] DFA131_eot = DFA.UnpackEncodedString(DFA131_eotS);
		private static readonly short[] DFA131_eof = DFA.UnpackEncodedString(DFA131_eofS);
		private static readonly char[] DFA131_min = DFA.UnpackEncodedStringToUnsignedChars(DFA131_minS);
		private static readonly char[] DFA131_max = DFA.UnpackEncodedStringToUnsignedChars(DFA131_maxS);
		private static readonly short[] DFA131_accept = DFA.UnpackEncodedString(DFA131_acceptS);
		private static readonly short[] DFA131_special = DFA.UnpackEncodedString(DFA131_specialS);
		private static readonly short[][] DFA131_transition;

		static DFA131()
		{
			int numStates = DFA131_transitionS.Length;
			DFA131_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA131_transition[i] = DFA.UnpackEncodedString(DFA131_transitionS[i]);
			}
		}

		public DFA131( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}

		public override string Description { get { return "443:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root528 = new BitSet(new ulong[]{0x1020000000000UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _global_block_in_root531 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block553 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block555 = new BitSet(new ulong[]{0x1020000000002UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _func_def_in_node578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item646 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _83_in_attribute_item649 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item651 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_attribute_item654 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item656 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_attribute_item660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_attribute_item678 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _83_in_attribute_item681 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item683 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_attribute_item686 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item688 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_attribute_item692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_attribute717 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _attribute_item_in_attribute719 = new BitSet(new ulong[]{0x0UL,0x100000004000000UL});
		public static readonly BitSet _90_in_attribute722 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _attribute_item_in_attribute724 = new BitSet(new ulong[]{0x0UL,0x100000004000000UL});
		public static readonly BitSet _120_in_attribute728 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute730 = new BitSet(new ulong[]{0x1000000000002UL,0x80000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc749 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc752 = new BitSet(new ulong[]{0x0UL,0x5000000000UL});
		public static readonly BitSet _100_in_global_alloc756 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_global_alloc758 = new BitSet(new ulong[]{0x2UL,0x204000080000UL});
		public static readonly BitSet _109_in_global_alloc763 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _102_in_global_alloc767 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_global_alloc770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_global_alloc830 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_global_alloc832 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_global_alloc835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_global_alloc908 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_global_alloc911 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_global_alloc914 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_global_alloc916 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _attribute_in_global_using953 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_global_using956 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x2000UL});
		public static readonly BitSet _stmt_using_item_in_global_using958 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x2000UL});
		public static readonly BitSet _attribute_in_global_typedef982 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_global_typedef985 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_global_typedef987 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_global_typedef989 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_global_typedef991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1015 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_import_def1018 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def1020 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1024 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_import_def1027 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1029 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def1034 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1036 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_enum_def1069 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1071 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_enum_def1073 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _ident_in_enum_def1076 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_enum_def1079 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1081 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _attribute_in_namespace_def1114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_namespace_def1117 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def1119 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1122 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1125 = new BitSet(new ulong[]{0x1020000000100UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1127 = new BitSet(new ulong[]{0x1020000000100UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _global_block_in_namespace_def1130 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1160 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_class_def1163 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1165 = new BitSet(new ulong[]{0x1000000000002UL,0x11000080000UL});
		public static readonly BitSet _generic_parameter_in_class_def1168 = new BitSet(new ulong[]{0x1000000000002UL,0x1000080000UL});
		public static readonly BitSet _83_in_class_def1173 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000UL});
		public static readonly BitSet _func_args_in_class_def1175 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_class_def1177 = new BitSet(new ulong[]{0x1000000000002UL,0x1000000000UL});
		public static readonly BitSet _100_in_class_def1182 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1184 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000UL});
		public static readonly BitSet _90_in_class_def1187 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1189 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1196 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_class_def1199 = new BitSet(new ulong[]{0x1020000000100UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _NEWLINE_in_class_def1201 = new BitSet(new ulong[]{0x1020000000100UL,0x80000000000000UL,0x20A842223UL});
		public static readonly BitSet _global_block_in_class_def1204 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1249 = new BitSet(new ulong[]{0x2UL,0x80000000020000UL});
		public static readonly BitSet _81_in_type_name1253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_type_name1269 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_type_name1271 = new BitSet(new ulong[]{0x0UL,0x100000004000000UL});
		public static readonly BitSet _90_in_type_name1274 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_type_name1276 = new BitSet(new ulong[]{0x0UL,0x100000004000000UL});
		public static readonly BitSet _120_in_type_name1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1318 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_type_star1322 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _type_ident_in_type_template_type1368 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_template_type1372 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000UL,0x2040002UL});
		public static readonly BitSet _type_name_in_type_template_type1375 = new BitSet(new ulong[]{0x0UL,0x1000004000000UL});
		public static readonly BitSet _90_in_type_template_type1378 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_type_template_type1380 = new BitSet(new ulong[]{0x0UL,0x1000004000000UL});
		public static readonly BitSet _112_in_type_template_type1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_type_ident1426 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040000UL});
		public static readonly BitSet _153_in_type_ident1429 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_type_ident1432 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_ident1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1463 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_generic_parameter_inside1466 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1468 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _104_in_generic_parameter1490 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1492 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_generic_parameter1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1509 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_func_args1512 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1514 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1536 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_func_args_item1538 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_func_args_item1540 = new BitSet(new ulong[]{0x2UL,0x204000080000UL});
		public static readonly BitSet _109_in_func_args_item1545 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _102_in_func_args_item1549 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_func_args_item1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_func_args_item1600 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_func_args_item1602 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_func_args_item1605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_func_args_item1662 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1677 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x202040002UL});
		public static readonly BitSet _type_name_in_func_def1680 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _161_in_func_def1683 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1686 = new BitSet(new ulong[]{0x0UL,0x10000080000UL});
		public static readonly BitSet _generic_parameter_in_func_def1688 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_func_def1691 = new BitSet(new ulong[]{0x20000000000UL,0x4000100000UL});
		public static readonly BitSet _func_args_in_func_def1693 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_func_def1696 = new BitSet(new ulong[]{0x1000000000000UL,0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1699 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_func_def1751 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_func_def1753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1794 = new BitSet(new ulong[]{0x1020000000100UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1796 = new BitSet(new ulong[]{0x1020000000100UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_block1800 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1803 = new BitSet(new ulong[]{0x1020000000100UL,0x40008019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _103_in_stmt_block1807 = new BitSet(new ulong[]{0x1020000000100UL,0x40008019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _DEDENT_in_stmt_block1813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1872 = new BitSet(new ulong[]{0x2UL,0x0UL,0x25000180UL});
		public static readonly BitSet _136_in_stmt_expr1882 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_expr1884 = new BitSet(new ulong[]{0x2UL,0x0UL,0x25000180UL});
		public static readonly BitSet _152_in_stmt_expr1913 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_expr1915 = new BitSet(new ulong[]{0x2UL,0x0UL,0x25000180UL});
		public static readonly BitSet _157_in_stmt_expr1944 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_expr1946 = new BitSet(new ulong[]{0x2UL,0x0UL,0x25000180UL});
		public static readonly BitSet _154_in_stmt_expr1975 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_expr1977 = new BitSet(new ulong[]{0x2UL,0x0UL,0x25000180UL});
		public static readonly BitSet _135_in_stmt_expr2006 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _for_item_in_stmt_expr2008 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x25000180UL});
		public static readonly BitSet _90_in_stmt_expr2011 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _for_item_in_stmt_expr2013 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x25000180UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_expr_item2080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_defer2091 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_defer2093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_stmt_defer2106 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_defer2108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_typedef2127 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2129 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_stmt_typedef2131 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_stmt_typedef2133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_using_item2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_using2164 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x2000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2166 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x2000UL});
		public static readonly BitSet _145_in_stmt_return2187 = new BitSet(new ulong[]{0x42020000000002UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_return2189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_if2210 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_if2212 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2215 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2218 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2221 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_stmt_if2224 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2226 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_if2261 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_if2263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_if2288 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_if2290 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2293 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2296 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2299 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_stmt_if2302 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2304 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_if2343 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_if2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_while2380 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_while2382 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2386 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2413 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_while2415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while2443 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_while2445 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2449 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2476 = new BitSet(new ulong[]{0x20000000000UL,0x40000019AA1000UL,0x22DCA91C4UL});
		public static readonly BitSet _stmt_in_stmt_while2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_while2506 = new BitSet(new ulong[]{0x43020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_while2508 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2511 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2536 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_for_range2538 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_for_range2542 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200008UL});
		public static readonly BitSet _149_in_for_range2545 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_for_range2549 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_for_range2552 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_for_range2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_for_range2585 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_for_range2589 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_for_range2592 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_for_range2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_for2689 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _for_item_in_stmt_for2693 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_for2696 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _for_item_in_stmt_for2698 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2702 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_stmt_try2736 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2738 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2741 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2743 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_stmt_try2746 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2748 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2750 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_switch_item2776 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_switch_item2778 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _90_in_switch_item2781 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_switch_item2783 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item2787 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item2790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_switch2812 = new BitSet(new ulong[]{0x43020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_switch2814 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2817 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch2820 = new BitSet(new ulong[]{0x1000000000100UL,0x0UL,0x10000010UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2823 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch2826 = new BitSet(new ulong[]{0x1000000000100UL,0x0UL,0x10000010UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2831 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_stmt_switch2834 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2836 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch2839 = new BitSet(new ulong[]{0x1000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2843 = new BitSet(new ulong[]{0x1000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch2846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2872 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_ident_list2875 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2877 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2899 = new BitSet(new ulong[]{0x0UL,0x5000000000UL});
		public static readonly BitSet _100_in_stmt_alloc2903 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_stmt_alloc2905 = new BitSet(new ulong[]{0x2UL,0x204000080000UL});
		public static readonly BitSet _109_in_stmt_alloc2910 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _102_in_stmt_alloc2914 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_alloc2917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_stmt_alloc2965 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2967 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_stmt_alloc2970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_stmt_alloc3031 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_alloc3035 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_alloc3038 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_alloc3040 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3066 = new BitSet(new ulong[]{0x2UL,0x428280822448000UL,0x80000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3070 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_stmt_modify3073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_stmt_modify3087 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify3090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_list_expr3114 = new BitSet(new ulong[]{0x43060000000100UL,0x1C000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _90_in_list_expr3118 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3122 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _INDENT_in_list_expr3126 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _DEDENT_in_list_expr3130 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _list_expr_in_list_expr3134 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _90_in_list_expr3138 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3142 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _INDENT_in_list_expr3146 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _DEDENT_in_list_expr3150 = new BitSet(new ulong[]{0x43060000000100UL,0xC000001DAA1000UL,0x20000C000UL});
		public static readonly BitSet _list_expr_in_list_expr3154 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _90_in_list_expr3161 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3165 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _INDENT_in_list_expr3169 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3173 = new BitSet(new ulong[]{0x1040000000100UL,0x100000004000000UL});
		public static readonly BitSet _120_in_list_expr3177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_lambda_expr3202 = new BitSet(new ulong[]{0x20000000000UL,0x4000100000UL});
		public static readonly BitSet _func_args_in_lambda_expr3204 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lambda_expr3207 = new BitSet(new ulong[]{0x0UL,0x800040000000UL});
		public static readonly BitSet _94_in_lambda_expr3211 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_lambda_expr3213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_lambda_expr3253 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_lambda_expr3255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3332 = new BitSet(new ulong[]{0x2UL,0x408284822448000UL,0x80000000UL});
		public static readonly BitSet _set_in_modify_expr3336 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_modify_expr3390 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3393 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3418 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_cond_expr3427 = new BitSet(new ulong[]{0x42020000000002UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3433 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_cond_expr3437 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3555 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000UL});
		public static readonly BitSet _or_op_in_or_expr3566 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _and_expr_in_or_expr3570 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000UL});
		public static readonly BitSet _bit_or_in_and_expr3612 = new BitSet(new ulong[]{0x2UL,0x1000000000010000UL});
		public static readonly BitSet _and_op_in_and_expr3623 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _bit_or_in_and_expr3627 = new BitSet(new ulong[]{0x2UL,0x1000000000010000UL});
		public static readonly BitSet _bit_xor_in_bit_or3658 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_bit_or3667 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _bit_xor_in_bit_or3671 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _bit_and_in_bit_xor3701 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_bit_xor3710 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _bit_and_in_bit_xor3714 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3744 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_bit_and3753 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3757 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _chain_op_in_chain_list3849 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _infix_expr_in_chain_list3851 = new BitSet(new ulong[]{0x2UL,0x3510000002000UL,0xC00UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3865 = new BitSet(new ulong[]{0x2UL,0x3510000002000UL,0xC00UL});
		public static readonly BitSet _104_in_cmp_expr3875 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3879 = new BitSet(new ulong[]{0x20000000002UL,0x3510000002000UL,0xC00UL});
		public static readonly BitSet _ident_in_cmp_expr3885 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000UL});
		public static readonly BitSet _112_in_cmp_expr3888 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cmp_expr3890 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_cmp_expr3892 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cmp_expr3895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr3964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4041 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4045 = new BitSet(new ulong[]{0x2UL,0x3510000002000UL,0xC00UL});
		public static readonly BitSet _chain_list_in_cmp_expr4049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4140 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4150 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _shift_expr_in_infix_expr4154 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4197 = new BitSet(new ulong[]{0x2UL,0x4040000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4206 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _add_expr_in_shift_expr4210 = new BitSet(new ulong[]{0x2UL,0x4040000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4240 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _87_in_add_expr4250 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _mul_expr_in_add_expr4254 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _91_in_add_expr4279 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _mul_expr_in_add_expr4283 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4321 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _85_in_mul_expr4331 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4335 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _98_in_mul_expr4365 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4369 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _78_in_mul_expr4399 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4403 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4446 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _95_in_selector_expr4456 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4460 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _97_in_selector_expr4486 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4491 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4531 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_cast_expr4540 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cast_expr4542 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_cast_expr4544 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cast_expr4546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4608 = new BitSet(new ulong[]{0x42020000000000UL,0x40000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_prefix_expr4626 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x2040002UL});
		public static readonly BitSet _type_name_in_prefix_expr4628 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_prefix_expr4630 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4632 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_prefix_expr4635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4663 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_expr_list4666 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_expr_list4669 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4685 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _88_in_suffix_expr4695 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _92_in_suffix_expr4721 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _96_in_suffix_expr4744 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4746 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _94_in_suffix_expr4771 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4773 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _83_in_suffix_expr4798 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4802 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_suffix_expr4804 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _84_in_suffix_expr4833 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _119_in_suffix_expr4864 = new BitSet(new ulong[]{0x42020000000000UL,0x1C0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4868 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_suffix_expr4870 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _120_in_suffix_expr4899 = new BitSet(new ulong[]{0x2UL,0x80000151080000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_atom_expr4967 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_atom_expr4969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_atom_expr4982 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_atom_expr4986 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_atom_expr4991 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_in_atom_expr4993 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_atom_expr4997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_atom_expr5024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item5055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix5067 = new BitSet(new ulong[]{0x20000000000UL,0x40000019A21000UL,0x200008000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix5069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix5085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix5099 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _88_in_lvalue_suffix5109 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _92_in_lvalue_suffix5137 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _96_in_lvalue_suffix5162 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5164 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _94_in_lvalue_suffix5191 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5193 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix5220 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_lvalue_suffix5223 = new BitSet(new ulong[]{0x42020000000000UL,0xC0000019BA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5225 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lvalue_suffix5228 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _119_in_lvalue_suffix5257 = new BitSet(new ulong[]{0x42020000000000UL,0x1C0000019AA1000UL,0x20000C000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5259 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_lvalue_suffix5262 = new BitSet(new ulong[]{0x2UL,0x80010151080000UL});
		public static readonly BitSet _ident_in_lvalue_atom5301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_lvalue_atom5306 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_lvalue5327 = new BitSet(new ulong[]{0x20000000000UL,0x40000019A21000UL,0x200008000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5329 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_lvalue5332 = new BitSet(new ulong[]{0x20000000000UL,0x40000019A21000UL,0x200008000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5334 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_lvalue5338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5363 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_ident5366 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident5368 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _123_in_infix_func5381 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func5384 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_infix_func5386 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
