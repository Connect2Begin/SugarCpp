//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-15 20:14:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Try=62;
	public const int Stmt_Typedef=63;
	public const int Stmt_Unless=64;
	public const int Stmt_Until=65;
	public const int Stmt_Using=66;
	public const int Stmt_While=67;
	public const int Type_Array=68;
	public const int Type_Ident=69;
	public const int Type_Ref=70;
	public const int Type_Star=71;
	public const int Type_Template=72;
	public const int White_Space=73;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:197:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:198:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(198, 4);
			// SugarCpp.g:198:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:4: NEWLINE
					{
					DebugLocation(198, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root515);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(198, 13);
			PushFollow(Follow._global_block_in_root518);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(198, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root520);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 198:30: -> ^( Root global_block )
			{
				DebugLocation(198, 33);
				// SugarCpp.g:198:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(198, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(198, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:201:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(201, 1);
		try
		{
			// SugarCpp.g:202:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:202:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(202, 4);
			// SugarCpp.g:202:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==116||(LA3_0>=125 && LA3_0<=126)||LA3_0==130||LA3_0==134||LA3_0==138||LA3_0==145||LA3_0==147||LA3_0==149||LA3_0==154))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:202:5: node ( NEWLINE )+
					{
					DebugLocation(202, 5);
					PushFollow(Follow._node_in_global_block540);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(202, 10);
					// SugarCpp.g:202:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:202:10: NEWLINE
							{
							DebugLocation(202, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block542);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 202:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(202, 24);
				// SugarCpp.g:202:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(202, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(202, 39);
				// SugarCpp.g:202:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(202, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:205:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(205, 1);
		try
		{
			// SugarCpp.g:206:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(206, 4);
				PushFollow(Follow._func_def_in_node565);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:207:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(207, 4);
				PushFollow(Follow._class_def_in_node570);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:208:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(208, 4);
				PushFollow(Follow._enum_def_in_node575);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:209:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._global_alloc_in_node580);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:210:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._global_using_in_node585);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:211:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._global_typedef_in_node590);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:212:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._import_def_in_node595);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:213:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._namespace_def_in_node600);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:216:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(216, 1);
		try
		{
			// SugarCpp.g:217:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args612); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:218:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args617); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:219:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._ident_in_attribute_args622);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:222:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==126))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(223, 4);
				PushFollow(Follow._ident_in_attribute_item633);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(223, 10);
				// SugarCpp.g:223:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==81))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(223, 11);
					char_literal18=(IToken)Match(input,81,Follow._81_in_attribute_item636);  
					stream_81.Add(char_literal18);

					DebugLocation(223, 15);
					PushFollow(Follow._attribute_args_in_attribute_item638);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(223, 30);
					// SugarCpp.g:223:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==88))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:223:31: ',' attribute_args
							{
							DebugLocation(223, 31);
							char_literal20=(IToken)Match(input,88,Follow._88_in_attribute_item641);  
							stream_88.Add(char_literal20);

							DebugLocation(223, 35);
							PushFollow(Follow._attribute_args_in_attribute_item643);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(223, 52);
					char_literal22=(IToken)Match(input,82,Follow._82_in_attribute_item647);  
					stream_82.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 223:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(223, 61);
					// SugarCpp.g:223:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(223, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(223, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(223, 79);
					// SugarCpp.g:223:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(223, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(224, 4);
				string_literal23=(IToken)Match(input,126,Follow._126_in_attribute_item665);  
				stream_126.Add(string_literal23);

				DebugLocation(224, 12);
				// SugarCpp.g:224:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==81))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:224:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(224, 13);
					char_literal24=(IToken)Match(input,81,Follow._81_in_attribute_item668);  
					stream_81.Add(char_literal24);

					DebugLocation(224, 17);
					PushFollow(Follow._attribute_args_in_attribute_item670);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(224, 32);
					// SugarCpp.g:224:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==88))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:224:33: ',' attribute_args
							{
							DebugLocation(224, 33);
							char_literal26=(IToken)Match(input,88,Follow._88_in_attribute_item673);  
							stream_88.Add(char_literal26);

							DebugLocation(224, 37);
							PushFollow(Follow._attribute_args_in_attribute_item675);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(224, 54);
					char_literal28=(IToken)Match(input,82,Follow._82_in_attribute_item679);  
					stream_82.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 126, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 224:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(224, 63);
					// SugarCpp.g:224:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(224, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(224, 75);
					adaptor.AddChild(root_1, stream_126.NextNode());
					DebugLocation(224, 83);
					// SugarCpp.g:224:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(224, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:227:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(227, 1);
		try
		{
			// SugarCpp.g:228:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:228:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(228, 4);
			// SugarCpp.g:228:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==116))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:228:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(228, 5);
					char_literal29=(IToken)Match(input,116,Follow._116_in_attribute704);  
					stream_116.Add(char_literal29);

					DebugLocation(228, 9);
					PushFollow(Follow._attribute_item_in_attribute706);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(228, 24);
					// SugarCpp.g:228:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==88))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:228:25: ',' attribute_item
							{
							DebugLocation(228, 25);
							char_literal31=(IToken)Match(input,88,Follow._88_in_attribute709);  
							stream_88.Add(char_literal31);

							DebugLocation(228, 29);
							PushFollow(Follow._attribute_item_in_attribute711);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(228, 46);
					char_literal33=(IToken)Match(input,117,Follow._117_in_attribute715);  
					stream_117.Add(char_literal33);

					DebugLocation(228, 50);
					// SugarCpp.g:228:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:228:50: NEWLINE
							{
							DebugLocation(228, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute717);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 228:61: -> ( attribute_item )+
			{
				DebugLocation(228, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(228, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:231:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:232:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(232, 4);
			// SugarCpp.g:232:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==116))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: attribute
				{
				DebugLocation(232, 4);
				PushFollow(Follow._attribute_in_global_alloc736);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(232, 15);
			PushFollow(Follow._ident_list_in_global_alloc739);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(232, 26);
			// SugarCpp.g:232:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==98))
			{
				alt19 = 1;
			}
			else if ((LA19_0==100))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(232, 28);
				char_literal37=(IToken)Match(input,98,Follow._98_in_global_alloc743);  
				stream_98.Add(char_literal37);

				DebugLocation(232, 32);
				PushFollow(Follow._type_name_in_global_alloc745);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(232, 42);
				// SugarCpp.g:232:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 100:
				case 106:
					{
					alt17 = 1;
					}
					break;
				case 81:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:44: ( '=' | ':=' ) expr
					{
					DebugLocation(232, 44);
					// SugarCpp.g:232:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==106))
					{
						alt15 = 1;
					}
					else if ((LA15_0==100))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:232:45: '='
						{
						DebugLocation(232, 45);
						char_literal39=(IToken)Match(input,106,Follow._106_in_global_alloc750);  
						stream_106.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:232:51: ':='
						{
						DebugLocation(232, 51);
						string_literal40=(IToken)Match(input,100,Follow._100_in_global_alloc754);  
						stream_100.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(232, 57);
					PushFollow(Follow._expr_in_global_alloc757);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: attribute, expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 232:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(232, 65);
						// SugarCpp.g:232:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(232, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(232, 84);
						// SugarCpp.g:232:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(232, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(232, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(232, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(232, 116);
						// SugarCpp.g:232:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(232, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:233:43: '(' ( expr_list )? ')'
					{
					DebugLocation(233, 43);
					char_literal42=(IToken)Match(input,81,Follow._81_in_global_alloc817);  
					stream_81.Add(char_literal42);

					DebugLocation(233, 47);
					// SugarCpp.g:233:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==74||LA16_0==79||LA16_0==81||LA16_0==83||(LA16_0>=85 && LA16_0<=86)||(LA16_0>=89 && LA16_0<=90)||(LA16_0>=115 && LA16_0<=116)||LA16_0==139||LA16_0==154))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:233:47: expr_list
						{
						DebugLocation(233, 47);
						PushFollow(Follow._expr_list_in_global_alloc819);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(233, 58);
					char_literal44=(IToken)Match(input,82,Follow._82_in_global_alloc822);  
					stream_82.Add(char_literal44);



					{
					// AST REWRITE
					// elements: attribute, expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 233:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(233, 65);
						// SugarCpp.g:233:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(233, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(233, 86);
						// SugarCpp.g:233:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(233, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(233, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(233, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(233, 118);
						// SugarCpp.g:233:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(233, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:234:17: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 234:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(234, 20);
						// SugarCpp.g:234:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(234, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(234, 39);
						// SugarCpp.g:234:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(234, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(234, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(234, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:236:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(236, 10);
				string_literal45=(IToken)Match(input,100,Follow._100_in_global_alloc895);  
				stream_100.Add(string_literal45);

				DebugLocation(236, 15);
				// SugarCpp.g:236:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:236:16: expr ( ',' expr )*
				{
				DebugLocation(236, 16);
				PushFollow(Follow._expr_in_global_alloc898);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(236, 21);
				// SugarCpp.g:236:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==88))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:22: ',' expr
						{
						DebugLocation(236, 22);
						char_literal47=(IToken)Match(input,88,Follow._88_in_global_alloc901);  
						stream_88.Add(char_literal47);

						DebugLocation(236, 26);
						PushFollow(Follow._expr_in_global_alloc903);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, expr, ident_list, 100
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(236, 37);
					// SugarCpp.g:236:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_100.NextNode(), root_1);

					DebugLocation(236, 44);
					// SugarCpp.g:236:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(236, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(236, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(236, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(236, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:240:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==116))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: attribute
				{
				DebugLocation(241, 4);
				PushFollow(Follow._attribute_in_global_using940);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(241, 15);
			string_literal50=(IToken)Match(input,149,Follow._149_in_global_using943);  
			stream_149.Add(string_literal50);

			DebugLocation(241, 23);
			// SugarCpp.g:241:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==138))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:23: stmt_using_item
					{
					DebugLocation(241, 23);
					PushFollow(Follow._stmt_using_item_in_global_using945);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(241, 43);
				// SugarCpp.g:241:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(241, 56);
				// SugarCpp.g:241:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(241, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(241, 67);
				// SugarCpp.g:241:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(241, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:244:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(244, 1);
		try
		{
			// SugarCpp.g:245:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:245:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(245, 4);
			// SugarCpp.g:245:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==116))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:245:4: attribute
				{
				DebugLocation(245, 4);
				PushFollow(Follow._attribute_in_global_typedef969);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(245, 15);
			string_literal53=(IToken)Match(input,145,Follow._145_in_global_typedef972);  
			stream_145.Add(string_literal53);

			DebugLocation(245, 25);
			PushFollow(Follow._ident_in_global_typedef974);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(245, 31);
			char_literal55=(IToken)Match(input,106,Follow._106_in_global_typedef976);  
			stream_106.Add(char_literal55);

			DebugLocation(245, 35);
			PushFollow(Follow._type_name_in_global_typedef978);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(245, 48);
				// SugarCpp.g:245:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(245, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(245, 63);
				// SugarCpp.g:245:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(245, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(245, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(245, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:248:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(248, 1);
		try
		{
			// SugarCpp.g:249:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:249:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(249, 4);
			// SugarCpp.g:249:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==116))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:249:4: attribute
				{
				DebugLocation(249, 4);
				PushFollow(Follow._attribute_in_import_def1002);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(249, 15);
			string_literal58=(IToken)Match(input,134,Follow._134_in_import_def1005);  
			stream_134.Add(string_literal58);

			DebugLocation(249, 24);
			// SugarCpp.g:249:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:249:24: STRING
				{
				DebugLocation(249, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1007);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(249, 32);
			// SugarCpp.g:249:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:249:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(249, 33);
				// SugarCpp.g:249:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:249:33: NEWLINE
						{
						DebugLocation(249, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1011);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(249, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1014);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(249, 49);
				// SugarCpp.g:249:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:249:49: NEWLINE
						{
						DebugLocation(249, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1016);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(249, 59);
				// SugarCpp.g:249:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:249:60: STRING ( NEWLINE )+
						{
						DebugLocation(249, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1021);  
						stream_STRING.Add(STRING63);

						DebugLocation(249, 67);
						// SugarCpp.g:249:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:249:67: NEWLINE
								{
								DebugLocation(249, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1023);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(249, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1028);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(249, 90);
				// SugarCpp.g:249:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(249, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(249, 99);
				// SugarCpp.g:249:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(249, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(249, 110);
				// SugarCpp.g:249:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(249, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:252:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:253:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(253, 4);
			// SugarCpp.g:253:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==116))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:4: attribute
				{
				DebugLocation(253, 4);
				PushFollow(Follow._attribute_in_enum_def1053);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(253, 15);
			string_literal67=(IToken)Match(input,130,Follow._130_in_enum_def1056);  
			stream_130.Add(string_literal67);

			DebugLocation(253, 22);
			PushFollow(Follow._ident_in_enum_def1058);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(253, 28);
			char_literal69=(IToken)Match(input,106,Follow._106_in_enum_def1060);  
			stream_106.Add(char_literal69);

			DebugLocation(253, 32);
			// SugarCpp.g:253:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:33: ident ( '|' ident )*
				{
				DebugLocation(253, 33);
				PushFollow(Follow._ident_in_enum_def1063);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(253, 39);
				// SugarCpp.g:253:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==151))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:253:40: '|' ident
						{
						DebugLocation(253, 40);
						char_literal71=(IToken)Match(input,151,Follow._151_in_enum_def1066);  
						stream_151.Add(char_literal71);

						DebugLocation(253, 44);
						PushFollow(Follow._ident_in_enum_def1068);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(253, 57);
				// SugarCpp.g:253:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(253, 64);
				// SugarCpp.g:253:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(253, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(253, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(253, 81);
				// SugarCpp.g:253:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(253, 94);
				// SugarCpp.g:253:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(253, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:256:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(257, 4);
			// SugarCpp.g:257:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==116))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: attribute
				{
				DebugLocation(257, 4);
				PushFollow(Follow._attribute_in_namespace_def1101);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(257, 15);
			string_literal74=(IToken)Match(input,138,Follow._138_in_namespace_def1104);  
			stream_138.Add(string_literal74);

			DebugLocation(257, 27);
			PushFollow(Follow._ident_in_namespace_def1106);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(257, 33);
			// SugarCpp.g:257:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(257, 34);
				// SugarCpp.g:257:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:257:34: NEWLINE
						{
						DebugLocation(257, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1109);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(257, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1112);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(257, 50);
				// SugarCpp.g:257:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:257:50: NEWLINE
						{
						DebugLocation(257, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1114);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(257, 59);
				PushFollow(Follow._global_block_in_namespace_def1117);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(257, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1119);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: attribute, global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(257, 84);
				// SugarCpp.g:257:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(257, 96);
				// SugarCpp.g:257:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(257, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(257, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(257, 113);
				// SugarCpp.g:257:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(257, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:260:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(261, 5);
			// SugarCpp.g:261:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==116))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:5: attribute
				{
				DebugLocation(261, 5);
				PushFollow(Follow._attribute_in_class_def1147);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(261, 16);
			string_literal82=(IToken)Match(input,125,Follow._125_in_class_def1150);  
			stream_125.Add(string_literal82);

			DebugLocation(261, 24);
			PushFollow(Follow._ident_in_class_def1152);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(261, 30);
			// SugarCpp.g:261:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==101))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:31: generic_parameter
				{
				DebugLocation(261, 31);
				PushFollow(Follow._generic_parameter_in_class_def1155);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(261, 51);
			// SugarCpp.g:261:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==81))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:52: '(' func_args ')'
				{
				DebugLocation(261, 52);
				char_literal85=(IToken)Match(input,81,Follow._81_in_class_def1160);  
				stream_81.Add(char_literal85);

				DebugLocation(261, 56);
				PushFollow(Follow._func_args_in_class_def1162);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(261, 66);
				char_literal87=(IToken)Match(input,82,Follow._82_in_class_def1164);  
				stream_82.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(261, 72);
			// SugarCpp.g:261:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==98))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:73: ':' ident ( ',' ident )*
				{
				DebugLocation(261, 73);
				char_literal88=(IToken)Match(input,98,Follow._98_in_class_def1169);  
				stream_98.Add(char_literal88);

				DebugLocation(261, 77);
				PushFollow(Follow._ident_in_class_def1171);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(261, 83);
				// SugarCpp.g:261:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==88))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:84: ',' ident
						{
						DebugLocation(261, 84);
						char_literal90=(IToken)Match(input,88,Follow._88_in_class_def1174);  
						stream_88.Add(char_literal90);

						DebugLocation(261, 88);
						PushFollow(Follow._ident_in_class_def1176);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(261, 98);
			// SugarCpp.g:261:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(261, 99);
				// SugarCpp.g:261:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:99: NEWLINE
						{
						DebugLocation(261, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1183);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(261, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1186);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(261, 115);
				// SugarCpp.g:261:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:115: NEWLINE
						{
						DebugLocation(261, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1188);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(261, 124);
				PushFollow(Follow._global_block_in_class_def1191);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(261, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1193);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident, generic_parameter, global_block, func_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(261, 149);
				// SugarCpp.g:261:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(261, 157);
				// SugarCpp.g:261:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(261, 174);
				// SugarCpp.g:261:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(261, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(261, 193);
				// SugarCpp.g:261:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(261, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(261, 204);
				// SugarCpp.g:261:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(261, 205);
					// SugarCpp.g:261:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(261, 218);
					// SugarCpp.g:261:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(261, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(261, 228);
				// SugarCpp.g:261:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(261, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:264:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(265, 4);
			PushFollow(Follow._type_star_in_type_name1236);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(265, 14);
			// SugarCpp.g:265:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 79:
				{
				alt46 = 1;
				}
				break;
			case 116:
				{
				alt46 = 2;
				}
				break;
			case IDENT:
			case NEWLINE:
			case 81:
			case 82:
			case 88:
			case 100:
			case 106:
			case 109:
			case 132:
			case 133:
			case 146:
			case 148:
			case 150:
			case 154:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:16: '&'
				{
				DebugLocation(265, 16);
				char_literal98=(IToken)Match(input,79,Follow._79_in_type_name1240);  
				stream_79.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(265, 23);
					// SugarCpp.g:265:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(265, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:266:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(266, 7);
				char_literal99=(IToken)Match(input,116,Follow._116_in_type_name1256);  
				stream_116.Add(char_literal99);

				DebugLocation(266, 11);
				PushFollow(Follow._expr_in_type_name1258);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(266, 16);
				// SugarCpp.g:266:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==88))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:17: ',' expr
						{
						DebugLocation(266, 17);
						char_literal101=(IToken)Match(input,88,Follow._88_in_type_name1261);  
						stream_88.Add(char_literal101);

						DebugLocation(266, 21);
						PushFollow(Follow._expr_in_type_name1263);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(266, 28);
				char_literal103=(IToken)Match(input,117,Follow._117_in_type_name1267);  
				stream_117.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 266:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(266, 35);
					// SugarCpp.g:266:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(266, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(266, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(266, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(266, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:267:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 267:7: -> type_star
				{
					DebugLocation(267, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:271:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(271, 1);
		try
		{
			// SugarCpp.g:272:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(272, 4);
			PushFollow(Follow._type_template_type_in_type_star1305);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(272, 23);
			// SugarCpp.g:272:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==83))
			{
				alt48 = 1;
			}
			else if ((LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==79||(LA48_0>=81 && LA48_0<=82)||LA48_0==88||LA48_0==100||LA48_0==106||LA48_0==109||LA48_0==116||(LA48_0>=132 && LA48_0<=133)||LA48_0==146||LA48_0==148||LA48_0==150||LA48_0==154))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:272:25: ( '*' )+
				{
				DebugLocation(272, 25);
				// SugarCpp.g:272:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==83))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:272:25: '*'
						{
						DebugLocation(272, 25);
						char_literal105=(IToken)Match(input,83,Follow._83_in_type_star1309);  
						stream_83.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 83, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 272:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(272, 33);
					// SugarCpp.g:272:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(272, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(272, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(272, 64);
					if (!(stream_83.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_83.HasNext )
					{
						DebugLocation(272, 64);
						adaptor.AddChild(root_1, stream_83.NextNode());

					}
					stream_83.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:273:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:10: -> type_template_type
				{
					DebugLocation(273, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:277:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(278, 4);
			PushFollow(Follow._type_ident_in_type_template_type1355);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(278, 15);
			// SugarCpp.g:278:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==101))
			{
				alt51 = 1;
			}
			else if ((LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==79||(LA51_0>=81 && LA51_0<=83)||LA51_0==88||LA51_0==100||LA51_0==106||LA51_0==109||LA51_0==116||(LA51_0>=132 && LA51_0<=133)||LA51_0==146||LA51_0==148||LA51_0==150||LA51_0==154))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(278, 17);
				char_literal107=(IToken)Match(input,101,Follow._101_in_type_template_type1359);  
				stream_101.Add(char_literal107);

				DebugLocation(278, 21);
				// SugarCpp.g:278:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==126||LA50_0==147))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:22: type_name ( ',' type_name )*
					{
					DebugLocation(278, 22);
					PushFollow(Follow._type_name_in_type_template_type1362);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(278, 32);
					// SugarCpp.g:278:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==88))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:278:33: ',' type_name
							{
							DebugLocation(278, 33);
							char_literal109=(IToken)Match(input,88,Follow._88_in_type_template_type1365);  
							stream_88.Add(char_literal109);

							DebugLocation(278, 37);
							PushFollow(Follow._type_name_in_type_template_type1367);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(278, 51);
				char_literal111=(IToken)Match(input,109,Follow._109_in_type_template_type1373);  
				stream_109.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(278, 58);
					// SugarCpp.g:278:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(278, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(278, 85);
					// SugarCpp.g:278:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(278, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:279:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:8: -> type_ident
				{
					DebugLocation(279, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:283:1: type_ident : ( 'const' )? ( 'unsigned' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( ( 'const' )? ( 'unsigned' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: ( 'const' )? ( 'unsigned' )? ident
			{
			DebugLocation(284, 4);
			// SugarCpp.g:284:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==126))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:4: 'const'
				{
				DebugLocation(284, 4);
				string_literal112=(IToken)Match(input,126,Follow._126_in_type_ident1413);  
				stream_126.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(284, 13);
			// SugarCpp.g:284:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==147))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:13: 'unsigned'
				{
				DebugLocation(284, 13);
				string_literal113=(IToken)Match(input,147,Follow._147_in_type_ident1416);  
				stream_147.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(284, 25);
			PushFollow(Follow._ident_in_type_ident1419);
			ident114=ident();
			PopFollow();

			stream_ident.Add(ident114.Tree);


			{
			// AST REWRITE
			// elements: 147, ident, 126
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 284:31: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident )
			{
				DebugLocation(284, 34);
				// SugarCpp.g:284:34: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(284, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(284, 47);
				// SugarCpp.g:284:47: ( 'const' )?
				if (stream_126.HasNext)
				{
					DebugLocation(284, 47);
					adaptor.AddChild(root_1, stream_126.NextNode());

				}
				stream_126.Reset();
				DebugLocation(284, 56);
				// SugarCpp.g:284:56: ( 'unsigned' )?
				if (stream_147.HasNext)
				{
					DebugLocation(284, 56);
					adaptor.AddChild(root_1, stream_147.NextNode());

				}
				stream_147.Reset();
				DebugLocation(284, 68);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:287:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal116_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(287, 1);
		try
		{
			// SugarCpp.g:288:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: ident ( ',' ident )*
			{
			DebugLocation(288, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1444);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);
			DebugLocation(288, 10);
			// SugarCpp.g:288:10: ( ',' ident )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==88))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:288:11: ',' ident
					{
					DebugLocation(288, 11);
					char_literal116=(IToken)Match(input,88,Follow._88_in_generic_parameter_inside1447);  
					stream_88.Add(char_literal116);

					DebugLocation(288, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1449);
					ident117=ident();
					PopFollow();

					stream_ident.Add(ident117.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 288:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(288, 26);
				// SugarCpp.g:288:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(288, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(288, 47);
				// SugarCpp.g:288:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(288, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:291:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(292, 4);
			char_literal118=(IToken)Match(input,101,Follow._101_in_generic_parameter1471);  
			stream_101.Add(char_literal118);

			DebugLocation(292, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1473);
			generic_parameter_inside119=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside119.Tree);
			DebugLocation(292, 33);
			char_literal120=(IToken)Match(input,109,Follow._109_in_generic_parameter1475);  
			stream_109.Add(char_literal120);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 292:37: -> generic_parameter_inside
			{
				DebugLocation(292, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:295:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(295, 1);
		try
		{
			// SugarCpp.g:296:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:296:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(296, 4);
			PushFollow(Follow._func_args_item_in_func_args1490);
			func_args_item121=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item121.Tree);
			DebugLocation(296, 19);
			// SugarCpp.g:296:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==88))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:296:20: ',' func_args_item
					{
					DebugLocation(296, 20);
					char_literal122=(IToken)Match(input,88,Follow._88_in_func_args1493);  
					stream_88.Add(char_literal122);

					DebugLocation(296, 24);
					PushFollow(Follow._func_args_item_in_func_args1495);
					func_args_item123=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item123.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 296:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(296, 44);
				// SugarCpp.g:296:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(296, 56);
				// SugarCpp.g:296:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(296, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:299:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken string_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree string_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(299, 1);
		try
		{
			// SugarCpp.g:300:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==IDENT))
			{
				alt59 = 1;
			}
			else if ((LA59_0==100))
			{
				alt59 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:300:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(300, 4);
				PushFollow(Follow._ident_list_in_func_args_item1517);
				ident_list124=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list124.Tree);
				DebugLocation(300, 15);
				char_literal125=(IToken)Match(input,98,Follow._98_in_func_args_item1519);  
				stream_98.Add(char_literal125);

				DebugLocation(300, 19);
				PushFollow(Follow._type_name_in_func_args_item1521);
				type_name126=type_name();
				PopFollow();

				stream_type_name.Add(type_name126.Tree);
				DebugLocation(300, 29);
				// SugarCpp.g:300:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt58=3;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				switch (input.LA(1))
				{
				case 100:
				case 106:
					{
					alt58 = 1;
					}
					break;
				case 81:
					{
					alt58 = 2;
					}
					break;
				case 82:
				case 88:
					{
					alt58 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:300:31: ( '=' | ':=' ) expr
					{
					DebugLocation(300, 31);
					// SugarCpp.g:300:31: ( '=' | ':=' )
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					int LA56_0 = input.LA(1);

					if ((LA56_0==106))
					{
						alt56 = 1;
					}
					else if ((LA56_0==100))
					{
						alt56 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:300:32: '='
						{
						DebugLocation(300, 32);
						char_literal127=(IToken)Match(input,106,Follow._106_in_func_args_item1526);  
						stream_106.Add(char_literal127);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:300:38: ':='
						{
						DebugLocation(300, 38);
						string_literal128=(IToken)Match(input,100,Follow._100_in_func_args_item1530);  
						stream_100.Add(string_literal128);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(300, 44);
					PushFollow(Follow._expr_in_func_args_item1533);
					expr129=expr();
					PopFollow();

					stream_expr.Add(expr129.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 300:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(300, 53);
						// SugarCpp.g:300:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(300, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(300, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(300, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(300, 93);
						// SugarCpp.g:300:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(300, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:301:33: '(' ( expr_list )? ')'
					{
					DebugLocation(301, 33);
					char_literal130=(IToken)Match(input,81,Follow._81_in_func_args_item1581);  
					stream_81.Add(char_literal130);

					DebugLocation(301, 37);
					// SugarCpp.g:301:37: ( expr_list )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==IDENT||LA57_0==NUMBER||LA57_0==STRING||LA57_0==74||LA57_0==79||LA57_0==81||LA57_0==83||(LA57_0>=85 && LA57_0<=86)||(LA57_0>=89 && LA57_0<=90)||(LA57_0>=115 && LA57_0<=116)||LA57_0==139||LA57_0==154))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:301:37: expr_list
						{
						DebugLocation(301, 37);
						PushFollow(Follow._expr_list_in_func_args_item1583);
						expr_list131=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list131.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(301, 48);
					char_literal132=(IToken)Match(input,82,Follow._82_in_func_args_item1586);  
					stream_82.Add(char_literal132);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 301:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(301, 56);
						// SugarCpp.g:301:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(301, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(301, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(301, 98);
						// SugarCpp.g:301:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(301, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:302:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 302:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(302, 18);
						// SugarCpp.g:302:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(302, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(302, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(302, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:304:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(304, 8);
				string_literal133=(IToken)Match(input,100,Follow._100_in_func_args_item1643); 
				string_literal133_tree = (CommonTree)adaptor.Create(string_literal133);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal133_tree, root_0);
				DebugLocation(304, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1647);
				modify_expr134=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr134.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:307:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken NEWLINE143 = default(IToken);
		IToken char_literal145 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree NEWLINE143_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(307, 4);
		try
		{
			// SugarCpp.g:308:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(308, 4);
			// SugarCpp.g:308:4: ( attribute )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==116))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:4: attribute
				{
				DebugLocation(308, 4);
				PushFollow(Follow._attribute_in_func_def1658);
				attribute135=attribute();
				PopFollow();

				stream_attribute.Add(attribute135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(308, 15);
			// SugarCpp.g:308:15: ( type_name )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			try
			{
				alt61 = dfa61.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:15: type_name
				{
				DebugLocation(308, 15);
				PushFollow(Follow._type_name_in_func_def1661);
				type_name136=type_name();
				PopFollow();

				stream_type_name.Add(type_name136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(308, 26);
			// SugarCpp.g:308:26: ( '~' )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==154))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:26: '~'
				{
				DebugLocation(308, 26);
				char_literal137=(IToken)Match(input,154,Follow._154_in_func_def1664);  
				stream_154.Add(char_literal137);


				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(308, 31);
			PushFollow(Follow._ident_in_func_def1667);
			ident138=ident();
			PopFollow();

			stream_ident.Add(ident138.Tree);
			DebugLocation(308, 37);
			// SugarCpp.g:308:37: ( generic_parameter )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==101))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:37: generic_parameter
				{
				DebugLocation(308, 37);
				PushFollow(Follow._generic_parameter_in_func_def1669);
				generic_parameter139=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter139.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(308, 56);
			char_literal140=(IToken)Match(input,81,Follow._81_in_func_def1672);  
			stream_81.Add(char_literal140);

			DebugLocation(308, 60);
			// SugarCpp.g:308:60: ( func_args )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==IDENT||LA64_0==100))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:60: func_args
				{
				DebugLocation(308, 60);
				PushFollow(Follow._func_args_in_func_def1674);
				func_args141=func_args();
				PopFollow();

				stream_func_args.Add(func_args141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(308, 71);
			char_literal142=(IToken)Match(input,82,Follow._82_in_func_def1677);  
			stream_82.Add(char_literal142);

			DebugLocation(308, 75);
			// SugarCpp.g:308:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==NEWLINE))
			{
				alt66 = 1;
			}
			else if ((LA66_0==106))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(308, 76);
				// SugarCpp.g:308:76: ( NEWLINE )+
				int cnt65=0;
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==NEWLINE))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:308:76: NEWLINE
						{
						DebugLocation(308, 76);
						NEWLINE143=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1680);  
						stream_NEWLINE.Add(NEWLINE143);


						}
						break;

					default:
						if (cnt65 >= 1)
							goto loop65;

						EarlyExitException eee65 = new EarlyExitException( 65, input );
						DebugRecognitionException(eee65);
						throw eee65;
					}
					cnt65++;
				}
				loop65:
					;

				} finally { DebugExitSubRule(65); }

				DebugLocation(308, 85);
				PushFollow(Follow._stmt_block_in_func_def1683);
				stmt_block144=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block144.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, type_name, 154, attribute, func_args, generic_parameter, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(308, 99);
					// SugarCpp.g:308:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(308, 110);
					// SugarCpp.g:308:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(308, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(308, 121);
					// SugarCpp.g:308:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(308, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(308, 132);
					// SugarCpp.g:308:132: ( '~' )?
					if (stream_154.HasNext)
					{
						DebugLocation(308, 132);
						adaptor.AddChild(root_1, stream_154.NextNode());

					}
					stream_154.Reset();
					DebugLocation(308, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(308, 143);
					// SugarCpp.g:308:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(308, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(308, 162);
					// SugarCpp.g:308:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(308, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(308, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:23: '=' expr
				{
				DebugLocation(309, 23);
				char_literal145=(IToken)Match(input,106,Follow._106_in_func_def1732);  
				stream_106.Add(char_literal145);

				DebugLocation(309, 27);
				PushFollow(Follow._expr_in_func_def1734);
				expr146=expr();
				PopFollow();

				stream_expr.Add(expr146.Tree);


				{
				// AST REWRITE
				// elements: ident, 154, expr, func_args, attribute, type_name, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(309, 36);
					// SugarCpp.g:309:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(309, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(309, 47);
					// SugarCpp.g:309:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(309, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(309, 58);
					// SugarCpp.g:309:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(309, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(309, 69);
					// SugarCpp.g:309:69: ( '~' )?
					if (stream_154.HasNext)
					{
						DebugLocation(309, 69);
						adaptor.AddChild(root_1, stream_154.NextNode());

					}
					stream_154.Reset();
					DebugLocation(309, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(309, 80);
					// SugarCpp.g:309:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(309, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(309, 99);
					// SugarCpp.g:309:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(309, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(309, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:312:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 23);
		TraceIn("stmt_block", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT147 = default(IToken);
		IToken NEWLINE148 = default(IToken);
		IToken NEWLINE150 = default(IToken);
		IToken DEDENT151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT147_tree = default(CommonTree);
		CommonTree NEWLINE148_tree = default(CommonTree);
		CommonTree NEWLINE150_tree = default(CommonTree);
		CommonTree DEDENT151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(312, 1);
		try
		{
			// SugarCpp.g:313:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:313:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(313, 4);
			INDENT147=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1775);  
			stream_INDENT.Add(INDENT147);

			DebugLocation(313, 11);
			// SugarCpp.g:313:11: ( NEWLINE )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==NEWLINE))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:313:11: NEWLINE
					{
					DebugLocation(313, 11);
					NEWLINE148=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1777);  
					stream_NEWLINE.Add(NEWLINE148);


					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(313, 21);
			// SugarCpp.g:313:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==IDENT||LA69_0==81||LA69_0==115||LA69_0==127||(LA69_0>=131 && LA69_0<=133)||LA69_0==137||LA69_0==141||(LA69_0>=144 && LA69_0<=146)||(LA69_0>=148 && LA69_0<=150)))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:313:22: stmt ( NEWLINE )+
					{
					DebugLocation(313, 22);
					PushFollow(Follow._stmt_in_stmt_block1782);
					stmt149=stmt();
					PopFollow();

					stream_stmt.Add(stmt149.Tree);
					DebugLocation(313, 27);
					// SugarCpp.g:313:27: ( NEWLINE )+
					int cnt68=0;
					try { DebugEnterSubRule(68);
					while (true)
					{
						int alt68=2;
						try { DebugEnterDecision(68, false);
						int LA68_0 = input.LA(1);

						if ((LA68_0==NEWLINE))
						{
							alt68 = 1;
						}


						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:313:27: NEWLINE
							{
							DebugLocation(313, 27);
							NEWLINE150=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1784);  
							stream_NEWLINE.Add(NEWLINE150);


							}
							break;

						default:
							if (cnt68 >= 1)
								goto loop68;

							EarlyExitException eee68 = new EarlyExitException( 68, input );
							DebugRecognitionException(eee68);
							throw eee68;
						}
						cnt68++;
					}
					loop68:
						;

					} finally { DebugExitSubRule(68); }


					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }

			DebugLocation(313, 38);
			DEDENT151=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1789);  
			stream_DEDENT.Add(DEDENT151);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 313:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(313, 48);
				// SugarCpp.g:313:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(313, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(313, 61);
				// SugarCpp.g:313:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(313, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 23);
			LeaveRule("stmt_block", 23);
			LeaveRule_stmt_block();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:316:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 24);
		TraceIn("stmt", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer )
			int alt70=6;
			try { DebugEnterDecision(70, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 81:
			case 115:
			case 141:
			case 145:
			case 149:
				{
				alt70 = 1;
				}
				break;
			case 133:
			case 146:
				{
				alt70 = 2;
				}
				break;
			case 132:
				{
				alt70 = 3;
				}
				break;
			case 137:
			case 148:
			case 150:
				{
				alt70 = 4;
				}
				break;
			case 144:
				{
				alt70 = 5;
				}
				break;
			case 127:
			case 131:
				{
				alt70 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._stmt_expr_in_stmt1809);
				stmt_expr152=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr152.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:318:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._stmt_if_in_stmt1814);
				stmt_if153=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if153.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:319:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(319, 4);
				PushFollow(Follow._stmt_for_in_stmt1819);
				stmt_for154=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for154.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:320:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._stmt_while_in_stmt1824);
				stmt_while155=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while155.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:321:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._stmt_try_in_stmt1829);
				stmt_try156=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try156.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:322:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._stmt_defer_in_stmt1834);
				stmt_defer157=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer157.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 24);
			LeaveRule("stmt", 24);
			LeaveRule_stmt();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:325:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 25);
		TraceIn("stmt_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		IToken string_literal160 = default(IToken);
		IToken string_literal162 = default(IToken);
		IToken string_literal164 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(325, 1);
		try
		{
			// SugarCpp.g:326:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:326:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(326, 4);
			// SugarCpp.g:326:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:326:5: a= stmt_expr_item
			{
			DebugLocation(326, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1848);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 326:22: -> $a
			{
				DebugLocation(326, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(326, 29);
			// SugarCpp.g:326:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=6;
				try { DebugEnterDecision(72, false);
				switch (input.LA(1))
				{
				case 133:
					{
					alt72 = 1;
					}
					break;
				case 146:
					{
					alt72 = 2;
					}
					break;
				case 150:
					{
					alt72 = 3;
					}
					break;
				case 148:
					{
					alt72 = 4;
					}
					break;
				case 132:
					{
					alt72 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:326:31: 'if' expr
					{
					DebugLocation(326, 31);
					string_literal158=(IToken)Match(input,133,Follow._133_in_stmt_expr1858);  
					stream_133.Add(string_literal158);

					DebugLocation(326, 36);
					PushFollow(Follow._expr_in_stmt_expr1860);
					expr159=expr();
					PopFollow();

					stream_expr.Add(expr159.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 326:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(326, 44);
						// SugarCpp.g:326:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(326, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(326, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(326, 59);
						// SugarCpp.g:326:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(326, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(326, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:327:13: 'unless' expr
					{
					DebugLocation(327, 13);
					string_literal160=(IToken)Match(input,146,Follow._146_in_stmt_expr1889);  
					stream_146.Add(string_literal160);

					DebugLocation(327, 22);
					PushFollow(Follow._expr_in_stmt_expr1891);
					expr161=expr();
					PopFollow();

					stream_expr.Add(expr161.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(327, 30);
						// SugarCpp.g:327:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(327, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(327, 49);
						// SugarCpp.g:327:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(327, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:328:13: 'while' expr
					{
					DebugLocation(328, 13);
					string_literal162=(IToken)Match(input,150,Follow._150_in_stmt_expr1920);  
					stream_150.Add(string_literal162);

					DebugLocation(328, 21);
					PushFollow(Follow._expr_in_stmt_expr1922);
					expr163=expr();
					PopFollow();

					stream_expr.Add(expr163.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 328:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(328, 29);
						// SugarCpp.g:328:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(328, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(328, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(328, 47);
						// SugarCpp.g:328:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(328, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(328, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:329:13: 'until' expr
					{
					DebugLocation(329, 13);
					string_literal164=(IToken)Match(input,148,Follow._148_in_stmt_expr1951);  
					stream_148.Add(string_literal164);

					DebugLocation(329, 21);
					PushFollow(Follow._expr_in_stmt_expr1953);
					expr165=expr();
					PopFollow();

					stream_expr.Add(expr165.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(329, 29);
						// SugarCpp.g:329:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(329, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 47);
						// SugarCpp.g:329:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(329, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:330:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(330, 13);
					string_literal166=(IToken)Match(input,132,Follow._132_in_stmt_expr1982);  
					stream_132.Add(string_literal166);

					DebugLocation(330, 19);
					PushFollow(Follow._for_item_in_stmt_expr1984);
					for_item167=for_item();
					PopFollow();

					stream_for_item.Add(for_item167.Tree);
					DebugLocation(330, 28);
					// SugarCpp.g:330:28: ( ',' for_item )*
					try { DebugEnterSubRule(71);
					while (true)
					{
						int alt71=2;
						try { DebugEnterDecision(71, false);
						int LA71_0 = input.LA(1);

						if ((LA71_0==88))
						{
							alt71 = 1;
						}


						} finally { DebugExitDecision(71); }
						switch ( alt71 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:330:29: ',' for_item
							{
							DebugLocation(330, 29);
							char_literal168=(IToken)Match(input,88,Follow._88_in_stmt_expr1987);  
							stream_88.Add(char_literal168);

							DebugLocation(330, 33);
							PushFollow(Follow._for_item_in_stmt_expr1989);
							for_item169=for_item();
							PopFollow();

							stream_for_item.Add(for_item169.Tree);

							}
							break;

						default:
							goto loop71;
						}
					}

					loop71:
						;

					} finally { DebugExitSubRule(71); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(330, 47);
						// SugarCpp.g:330:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(330, 58);
						// SugarCpp.g:330:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(330, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(330, 68);
						// SugarCpp.g:330:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(330, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 25);
			LeaveRule("stmt_expr", 25);
			LeaveRule_stmt_expr();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:334:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 26);
		TraceIn("stmt_expr_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt73=5;
			try { DebugEnterDecision(73, false);
			try
			{
				alt73 = dfa73.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(335, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2031);
				stmt_alloc170=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc170.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:336:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2036);
				stmt_return171=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return171.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:337:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2041);
				stmt_using172=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using172.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:338:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2046);
				stmt_typedef173=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef173.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:339:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2051);
				stmt_modify174=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify174.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 26);
			LeaveRule("stmt_expr_item", 26);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:342:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 27);
		TraceIn("stmt_defer", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal175 = default(IToken);
		IToken string_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal175_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==127))
			{
				alt74 = 1;
			}
			else if ((LA74_0==131))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:4: 'defer' stmt
				{
				DebugLocation(343, 4);
				string_literal175=(IToken)Match(input,127,Follow._127_in_stmt_defer2062);  
				stream_127.Add(string_literal175);

				DebugLocation(343, 12);
				PushFollow(Follow._stmt_in_stmt_defer2064);
				stmt176=stmt();
				PopFollow();

				stream_stmt.Add(stmt176.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(343, 20);
					// SugarCpp.g:343:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(343, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:344:4: 'finally' stmt
				{
				DebugLocation(344, 4);
				string_literal177=(IToken)Match(input,131,Follow._131_in_stmt_defer2077);  
				stream_131.Add(string_literal177);

				DebugLocation(344, 14);
				PushFollow(Follow._stmt_in_stmt_defer2079);
				stmt178=stmt();
				PopFollow();

				stream_stmt.Add(stmt178.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(344, 22);
					// SugarCpp.g:344:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(344, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 27);
			LeaveRule("stmt_defer", 27);
			LeaveRule_stmt_defer();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:347:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 28);
		TraceIn("stmt_typedef", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: 'typedef' ident '=' type_name
			{
			DebugLocation(348, 4);
			string_literal179=(IToken)Match(input,145,Follow._145_in_stmt_typedef2098);  
			stream_145.Add(string_literal179);

			DebugLocation(348, 14);
			PushFollow(Follow._ident_in_stmt_typedef2100);
			ident180=ident();
			PopFollow();

			stream_ident.Add(ident180.Tree);
			DebugLocation(348, 20);
			char_literal181=(IToken)Match(input,106,Follow._106_in_stmt_typedef2102);  
			stream_106.Add(char_literal181);

			DebugLocation(348, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2104);
			type_name182=type_name();
			PopFollow();

			stream_type_name.Add(type_name182.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 348:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(348, 37);
				// SugarCpp.g:348:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(348, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(348, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(348, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 28);
			LeaveRule("stmt_typedef", 28);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:351:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 29);
		TraceIn("stmt_using_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(351, 36);
		try
		{
			// SugarCpp.g:351:16: ( ident | 'namespace' )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==138))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(351, 18);
				PushFollow(Follow._ident_in_stmt_using_item2123);
				ident183=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:351:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(351, 26);
				string_literal184=(IToken)Match(input,138,Follow._138_in_stmt_using_item2127); 
				string_literal184_tree = (CommonTree)adaptor.Create(string_literal184);
				adaptor.AddChild(root_0, string_literal184_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 29);
			LeaveRule("stmt_using_item", 29);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(351, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:352:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 30);
		TraceIn("stmt_using", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(353, 4);
			string_literal185=(IToken)Match(input,149,Follow._149_in_stmt_using2135);  
			stream_149.Add(string_literal185);

			DebugLocation(353, 12);
			// SugarCpp.g:353:12: ( stmt_using_item )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==IDENT||LA76_0==138))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:12: stmt_using_item
					{
					DebugLocation(353, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2137);
					stmt_using_item186=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item186.Tree);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 353:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(353, 32);
				// SugarCpp.g:353:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(353, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(353, 45);
				// SugarCpp.g:353:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(353, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 30);
			LeaveRule("stmt_using", 30);
			LeaveRule_stmt_using();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:356:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 31);
		TraceIn("stmt_return", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: 'return' ( expr )?
			{
			DebugLocation(357, 4);
			string_literal187=(IToken)Match(input,141,Follow._141_in_stmt_return2158);  
			stream_141.Add(string_literal187);

			DebugLocation(357, 13);
			// SugarCpp.g:357:13: ( expr )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT||LA77_0==NUMBER||LA77_0==STRING||LA77_0==74||LA77_0==79||LA77_0==81||LA77_0==83||(LA77_0>=85 && LA77_0<=86)||(LA77_0>=89 && LA77_0<=90)||(LA77_0>=115 && LA77_0<=116)||LA77_0==139||LA77_0==154))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:13: expr
				{
				DebugLocation(357, 13);
				PushFollow(Follow._expr_in_stmt_return2160);
				expr188=expr();
				PopFollow();

				stream_expr.Add(expr188.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 357:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(357, 22);
				// SugarCpp.g:357:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(357, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(357, 36);
				// SugarCpp.g:357:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(357, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 31);
			LeaveRule("stmt_return", 31);
			LeaveRule_stmt_return();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:360:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 32);
		TraceIn("stmt_if", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal189 = default(IToken);
		IToken NEWLINE191 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken string_literal197 = default(IToken);
		IToken string_literal199 = default(IToken);
		IToken NEWLINE201 = default(IToken);
		IToken NEWLINE203 = default(IToken);
		IToken string_literal204 = default(IToken);
		IToken NEWLINE205 = default(IToken);
		IToken string_literal207 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree NEWLINE191_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree string_literal197_tree = default(CommonTree);
		CommonTree string_literal199_tree = default(CommonTree);
		CommonTree NEWLINE201_tree = default(CommonTree);
		CommonTree NEWLINE203_tree = default(CommonTree);
		CommonTree string_literal204_tree = default(CommonTree);
		CommonTree NEWLINE205_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==133))
			{
				alt88 = 1;
			}
			else if ((LA88_0==146))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(361, 4);
				string_literal189=(IToken)Match(input,133,Follow._133_in_stmt_if2181);  
				stream_133.Add(string_literal189);

				DebugLocation(361, 9);
				PushFollow(Follow._expr_in_stmt_if2183);
				expr190=expr();
				PopFollow();

				stream_expr.Add(expr190.Tree);
				DebugLocation(361, 14);
				// SugarCpp.g:361:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==NEWLINE))
				{
					alt82 = 1;
				}
				else if ((LA82_0==142))
				{
					alt82 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:361:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(361, 15);
					// SugarCpp.g:361:15: ( NEWLINE )+
					int cnt78=0;
					try { DebugEnterSubRule(78);
					while (true)
					{
						int alt78=2;
						try { DebugEnterDecision(78, false);
						int LA78_0 = input.LA(1);

						if ((LA78_0==NEWLINE))
						{
							alt78 = 1;
						}


						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:361:15: NEWLINE
							{
							DebugLocation(361, 15);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2186);  
							stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							if (cnt78 >= 1)
								goto loop78;

							EarlyExitException eee78 = new EarlyExitException( 78, input );
							DebugRecognitionException(eee78);
							throw eee78;
						}
						cnt78++;
					}
					loop78:
						;

					} finally { DebugExitSubRule(78); }

					DebugLocation(361, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2189);
					stmt_block192=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block192.Tree);
					DebugLocation(361, 35);
					// SugarCpp.g:361:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, false);
					try
					{
						alt81 = dfa81.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:361:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(361, 36);
						// SugarCpp.g:361:36: ( NEWLINE )*
						try { DebugEnterSubRule(79);
						while (true)
						{
							int alt79=2;
							try { DebugEnterDecision(79, false);
							int LA79_0 = input.LA(1);

							if ((LA79_0==NEWLINE))
							{
								alt79 = 1;
							}


							} finally { DebugExitDecision(79); }
							switch ( alt79 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:361:36: NEWLINE
								{
								DebugLocation(361, 36);
								NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2192);  
								stream_NEWLINE.Add(NEWLINE193);


								}
								break;

							default:
								goto loop79;
							}
						}

						loop79:
							;

						} finally { DebugExitSubRule(79); }

						DebugLocation(361, 45);
						string_literal194=(IToken)Match(input,129,Follow._129_in_stmt_if2195);  
						stream_129.Add(string_literal194);

						DebugLocation(361, 52);
						// SugarCpp.g:361:52: ( NEWLINE )+
						int cnt80=0;
						try { DebugEnterSubRule(80);
						while (true)
						{
							int alt80=2;
							try { DebugEnterDecision(80, false);
							int LA80_0 = input.LA(1);

							if ((LA80_0==NEWLINE))
							{
								alt80 = 1;
							}


							} finally { DebugExitDecision(80); }
							switch (alt80)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:361:52: NEWLINE
								{
								DebugLocation(361, 52);
								NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2197);  
								stream_NEWLINE.Add(NEWLINE195);


								}
								break;

							default:
								if (cnt80 >= 1)
									goto loop80;

								EarlyExitException eee80 = new EarlyExitException( 80, input );
								DebugRecognitionException(eee80);
								throw eee80;
							}
							cnt80++;
						}
						loop80:
							;

						} finally { DebugExitSubRule(80); }

						DebugLocation(361, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2200);
						stmt_block196=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block196.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(81); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 361:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(361, 77);
						// SugarCpp.g:361:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(361, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(361, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(361, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(361, 103);
						// SugarCpp.g:361:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(361, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:362:16: 'then' stmt
					{
					DebugLocation(362, 16);
					string_literal197=(IToken)Match(input,142,Follow._142_in_stmt_if2232);  
					stream_142.Add(string_literal197);

					DebugLocation(362, 23);
					PushFollow(Follow._stmt_in_stmt_if2234);
					stmt198=stmt();
					PopFollow();

					stream_stmt.Add(stmt198.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 362:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(362, 31);
						// SugarCpp.g:362:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(362, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(362, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(362, 46);
						// SugarCpp.g:362:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(362, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(362, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:364:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(364, 4);
				string_literal199=(IToken)Match(input,146,Follow._146_in_stmt_if2259);  
				stream_146.Add(string_literal199);

				DebugLocation(364, 13);
				PushFollow(Follow._expr_in_stmt_if2261);
				expr200=expr();
				PopFollow();

				stream_expr.Add(expr200.Tree);
				DebugLocation(364, 18);
				// SugarCpp.g:364:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==NEWLINE))
				{
					alt87 = 1;
				}
				else if ((LA87_0==142))
				{
					alt87 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:364:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(364, 19);
					// SugarCpp.g:364:19: ( NEWLINE )+
					int cnt83=0;
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_0 = input.LA(1);

						if ((LA83_0==NEWLINE))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch (alt83)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:364:19: NEWLINE
							{
							DebugLocation(364, 19);
							NEWLINE201=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2264);  
							stream_NEWLINE.Add(NEWLINE201);


							}
							break;

						default:
							if (cnt83 >= 1)
								goto loop83;

							EarlyExitException eee83 = new EarlyExitException( 83, input );
							DebugRecognitionException(eee83);
							throw eee83;
						}
						cnt83++;
					}
					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(364, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2267);
					stmt_block202=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block202.Tree);
					DebugLocation(364, 39);
					// SugarCpp.g:364:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					try
					{
						alt86 = dfa86.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:364:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(364, 40);
						// SugarCpp.g:364:40: ( NEWLINE )*
						try { DebugEnterSubRule(84);
						while (true)
						{
							int alt84=2;
							try { DebugEnterDecision(84, false);
							int LA84_0 = input.LA(1);

							if ((LA84_0==NEWLINE))
							{
								alt84 = 1;
							}


							} finally { DebugExitDecision(84); }
							switch ( alt84 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:364:40: NEWLINE
								{
								DebugLocation(364, 40);
								NEWLINE203=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2270);  
								stream_NEWLINE.Add(NEWLINE203);


								}
								break;

							default:
								goto loop84;
							}
						}

						loop84:
							;

						} finally { DebugExitSubRule(84); }

						DebugLocation(364, 49);
						string_literal204=(IToken)Match(input,129,Follow._129_in_stmt_if2273);  
						stream_129.Add(string_literal204);

						DebugLocation(364, 56);
						// SugarCpp.g:364:56: ( NEWLINE )+
						int cnt85=0;
						try { DebugEnterSubRule(85);
						while (true)
						{
							int alt85=2;
							try { DebugEnterDecision(85, false);
							int LA85_0 = input.LA(1);

							if ((LA85_0==NEWLINE))
							{
								alt85 = 1;
							}


							} finally { DebugExitDecision(85); }
							switch (alt85)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:364:56: NEWLINE
								{
								DebugLocation(364, 56);
								NEWLINE205=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2275);  
								stream_NEWLINE.Add(NEWLINE205);


								}
								break;

							default:
								if (cnt85 >= 1)
									goto loop85;

								EarlyExitException eee85 = new EarlyExitException( 85, input );
								DebugRecognitionException(eee85);
								throw eee85;
							}
							cnt85++;
						}
						loop85:
							;

						} finally { DebugExitSubRule(85); }

						DebugLocation(364, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2278);
						stmt_block206=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block206.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 364:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(364, 81);
						// SugarCpp.g:364:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(364, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(364, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(364, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(364, 111);
						// SugarCpp.g:364:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(364, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:365:20: 'then' stmt
					{
					DebugLocation(365, 20);
					string_literal207=(IToken)Match(input,142,Follow._142_in_stmt_if2314);  
					stream_142.Add(string_literal207);

					DebugLocation(365, 27);
					PushFollow(Follow._stmt_in_stmt_if2316);
					stmt208=stmt();
					PopFollow();

					stream_stmt.Add(stmt208.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(365, 35);
						// SugarCpp.g:365:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(365, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(365, 54);
						// SugarCpp.g:365:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(365, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 32);
			LeaveRule("stmt_if", 32);
			LeaveRule_stmt_if();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:369:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 33);
		TraceIn("stmt_while", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal209 = default(IToken);
		IToken NEWLINE211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken NEWLINE217 = default(IToken);
		IToken string_literal219 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken NEWLINE223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree NEWLINE211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree NEWLINE217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree NEWLINE223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt95=3;
			try { DebugEnterDecision(95, false);
			switch (input.LA(1))
			{
			case 150:
				{
				alt95 = 1;
				}
				break;
			case 148:
				{
				alt95 = 2;
				}
				break;
			case 137:
				{
				alt95 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(370, 4);
				string_literal209=(IToken)Match(input,150,Follow._150_in_stmt_while2351);  
				stream_150.Add(string_literal209);

				DebugLocation(370, 12);
				PushFollow(Follow._expr_in_stmt_while2353);
				expr210=expr();
				PopFollow();

				stream_expr.Add(expr210.Tree);
				DebugLocation(370, 17);
				// SugarCpp.g:370:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==NEWLINE))
				{
					alt90 = 1;
				}
				else if ((LA90_0==142))
				{
					alt90 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(370, 19);
					// SugarCpp.g:370:19: ( NEWLINE )+
					int cnt89=0;
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==NEWLINE))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:370:19: NEWLINE
							{
							DebugLocation(370, 19);
							NEWLINE211=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2357);  
							stream_NEWLINE.Add(NEWLINE211);


							}
							break;

						default:
							if (cnt89 >= 1)
								goto loop89;

							EarlyExitException eee89 = new EarlyExitException( 89, input );
							DebugRecognitionException(eee89);
							throw eee89;
						}
						cnt89++;
					}
					loop89:
						;

					} finally { DebugExitSubRule(89); }

					DebugLocation(370, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2360);
					stmt_block212=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block212.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(370, 42);
						// SugarCpp.g:370:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(370, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(370, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:371:13: 'then' stmt
					{
					DebugLocation(371, 13);
					string_literal213=(IToken)Match(input,142,Follow._142_in_stmt_while2384);  
					stream_142.Add(string_literal213);

					DebugLocation(371, 20);
					PushFollow(Follow._stmt_in_stmt_while2386);
					stmt214=stmt();
					PopFollow();

					stream_stmt.Add(stmt214.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(371, 28);
						// SugarCpp.g:371:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(371, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(371, 46);
						// SugarCpp.g:371:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(371, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:373:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(373, 4);
				string_literal215=(IToken)Match(input,148,Follow._148_in_stmt_while2414);  
				stream_148.Add(string_literal215);

				DebugLocation(373, 12);
				PushFollow(Follow._expr_in_stmt_while2416);
				expr216=expr();
				PopFollow();

				stream_expr.Add(expr216.Tree);
				DebugLocation(373, 17);
				// SugarCpp.g:373:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==NEWLINE))
				{
					alt92 = 1;
				}
				else if ((LA92_0==142))
				{
					alt92 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(373, 19);
					// SugarCpp.g:373:19: ( NEWLINE )+
					int cnt91=0;
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==NEWLINE))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:373:19: NEWLINE
							{
							DebugLocation(373, 19);
							NEWLINE217=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2420);  
							stream_NEWLINE.Add(NEWLINE217);


							}
							break;

						default:
							if (cnt91 >= 1)
								goto loop91;

							EarlyExitException eee91 = new EarlyExitException( 91, input );
							DebugRecognitionException(eee91);
							throw eee91;
						}
						cnt91++;
					}
					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(373, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2423);
					stmt_block218=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block218.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 373:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(373, 42);
						// SugarCpp.g:373:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(373, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(373, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:374:13: 'then' stmt
					{
					DebugLocation(374, 13);
					string_literal219=(IToken)Match(input,142,Follow._142_in_stmt_while2447);  
					stream_142.Add(string_literal219);

					DebugLocation(374, 20);
					PushFollow(Follow._stmt_in_stmt_while2449);
					stmt220=stmt();
					PopFollow();

					stream_stmt.Add(stmt220.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 374:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(374, 28);
						// SugarCpp.g:374:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(374, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(374, 46);
						// SugarCpp.g:374:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(374, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(92); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:376:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(376, 4);
				string_literal221=(IToken)Match(input,137,Follow._137_in_stmt_while2477);  
				stream_137.Add(string_literal221);

				DebugLocation(376, 11);
				// SugarCpp.g:376:11: ( expr )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==74||LA93_0==79||LA93_0==81||LA93_0==83||(LA93_0>=85 && LA93_0<=86)||(LA93_0>=89 && LA93_0<=90)||(LA93_0>=115 && LA93_0<=116)||LA93_0==139||LA93_0==154))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:11: expr
					{
					DebugLocation(376, 11);
					PushFollow(Follow._expr_in_stmt_while2479);
					expr222=expr();
					PopFollow();

					stream_expr.Add(expr222.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(376, 17);
				// SugarCpp.g:376:17: ( NEWLINE )+
				int cnt94=0;
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==NEWLINE))
					{
						alt94 = 1;
					}


					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:17: NEWLINE
						{
						DebugLocation(376, 17);
						NEWLINE223=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2482);  
						stream_NEWLINE.Add(NEWLINE223);


						}
						break;

					default:
						if (cnt94 >= 1)
							goto loop94;

						EarlyExitException eee94 = new EarlyExitException( 94, input );
						DebugRecognitionException(eee94);
						throw eee94;
					}
					cnt94++;
				}
				loop94:
					;

				} finally { DebugExitSubRule(94); }

				DebugLocation(376, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2485);
				stmt_block224=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block224.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 376:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(376, 40);
					// SugarCpp.g:376:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(376, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(376, 52);
					// SugarCpp.g:376:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(376, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(376, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 33);
			LeaveRule("stmt_while", 33);
			LeaveRule_stmt_while();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:379:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 34);
		TraceIn("for_range", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal226 = default(IToken);
		IToken string_literal227 = default(IToken);
		IToken string_literal228 = default(IToken);
		IToken string_literal229 = default(IToken);
		IToken string_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree string_literal229_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(380, 4);
			PushFollow(Follow._ident_in_for_range2507);
			ident225=ident();
			PopFollow();

			stream_ident.Add(ident225.Tree);
			DebugLocation(380, 10);
			string_literal226=(IToken)Match(input,102,Follow._102_in_for_range2509);  
			stream_102.Add(string_literal226);

			DebugLocation(380, 16);
			PushFollow(Follow._expr_in_for_range2513);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(380, 22);
			// SugarCpp.g:380:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt98=3;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case 143:
				{
				alt98 = 1;
				}
				break;
			case 128:
				{
				alt98 = 2;
				}
				break;
			case NEWLINE:
			case 88:
			case 132:
			case 133:
			case 146:
			case 148:
			case 150:
				{
				alt98 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:380:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(380, 23);
				string_literal227=(IToken)Match(input,143,Follow._143_in_for_range2516);  
				stream_143.Add(string_literal227);

				DebugLocation(380, 29);
				PushFollow(Follow._expr_in_for_range2520);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(380, 35);
				// SugarCpp.g:380:35: ( 'by' c= expr )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==123))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:36: 'by' c= expr
					{
					DebugLocation(380, 36);
					string_literal228=(IToken)Match(input,123,Follow._123_in_for_range2523);  
					stream_123.Add(string_literal228);

					DebugLocation(380, 42);
					PushFollow(Follow._expr_in_for_range2527);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(96); }



				{
				// AST REWRITE
				// elements: b, c, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(380, 53);
					// SugarCpp.g:380:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(380, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(380, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(380, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(380, 80);
					// SugarCpp.g:380:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(380, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:381:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(381, 8);
				string_literal229=(IToken)Match(input,128,Follow._128_in_for_range2556);  
				stream_128.Add(string_literal229);

				DebugLocation(381, 18);
				PushFollow(Follow._expr_in_for_range2560);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(381, 24);
				// SugarCpp.g:381:24: ( 'by' c= expr )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==123))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:381:25: 'by' c= expr
					{
					DebugLocation(381, 25);
					string_literal230=(IToken)Match(input,123,Follow._123_in_for_range2563);  
					stream_123.Add(string_literal230);

					DebugLocation(381, 31);
					PushFollow(Follow._expr_in_for_range2567);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(97); }



				{
				// AST REWRITE
				// elements: a, c, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 381:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(381, 42);
					// SugarCpp.g:381:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(381, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(381, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(381, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(381, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(381, 74);
					// SugarCpp.g:381:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(381, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:382:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 382:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(382, 12);
					// SugarCpp.g:382:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(382, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(382, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(382, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 34);
			LeaveRule("for_range", 34);
			LeaveRule_for_range();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:386:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 35);
		TraceIn("for_when", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(386, 1);
		try
		{
			// SugarCpp.g:387:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:387:4: expr
			{
			DebugLocation(387, 4);
			PushFollow(Follow._expr_in_for_when2625);
			expr231=expr();
			PopFollow();

			stream_expr.Add(expr231.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 387:9: -> ^( For_Item_When expr )
			{
				DebugLocation(387, 12);
				// SugarCpp.g:387:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(387, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(387, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 35);
			LeaveRule("for_when", 35);
			LeaveRule_for_when();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:390:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 36);
		TraceIn("for_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when233 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( for_range | for_when )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			try
			{
				alt99 = dfa99.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:391:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(391, 4);
				PushFollow(Follow._for_range_in_for_item2644);
				for_range232=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range232.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:392:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(392, 4);
				PushFollow(Follow._for_when_in_for_item2649);
				for_when233=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when233.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 36);
			LeaveRule("for_item", 36);
			LeaveRule_for_item();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:395:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 37);
		TraceIn("stmt_for", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal234 = default(IToken);
		IToken char_literal236 = default(IToken);
		IToken NEWLINE238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		CommonTree NEWLINE238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(395, 1);
		try
		{
			// SugarCpp.g:396:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:396:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(396, 4);
			string_literal234=(IToken)Match(input,132,Follow._132_in_stmt_for2660);  
			stream_132.Add(string_literal234);

			DebugLocation(396, 10);
			// SugarCpp.g:396:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:396:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(396, 12);
			PushFollow(Follow._for_item_in_stmt_for2664);
			for_item235=for_item();
			PopFollow();

			stream_for_item.Add(for_item235.Tree);
			DebugLocation(396, 21);
			// SugarCpp.g:396:21: ( ',' for_item )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==88))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:22: ',' for_item
					{
					DebugLocation(396, 22);
					char_literal236=(IToken)Match(input,88,Follow._88_in_stmt_for2667);  
					stream_88.Add(char_literal236);

					DebugLocation(396, 26);
					PushFollow(Follow._for_item_in_stmt_for2669);
					for_item237=for_item();
					PopFollow();

					stream_for_item.Add(for_item237.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }

			DebugLocation(396, 37);
			// SugarCpp.g:396:37: ( NEWLINE )+
			int cnt101=0;
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==NEWLINE))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:37: NEWLINE
					{
					DebugLocation(396, 37);
					NEWLINE238=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2673);  
					stream_NEWLINE.Add(NEWLINE238);


					}
					break;

				default:
					if (cnt101 >= 1)
						goto loop101;

					EarlyExitException eee101 = new EarlyExitException( 101, input );
					DebugRecognitionException(eee101);
					throw eee101;
				}
				cnt101++;
			}
			loop101:
				;

			} finally { DebugExitSubRule(101); }

			DebugLocation(396, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2676);
			stmt_block239=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block239.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 396:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(396, 60);
				// SugarCpp.g:396:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(396, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(396, 71);
				// SugarCpp.g:396:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(396, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(396, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 37);
			LeaveRule("stmt_for", 37);
			LeaveRule_stmt_for();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:401:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 38);
		TraceIn("stmt_try", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal240 = default(IToken);
		IToken NEWLINE241 = default(IToken);
		IToken NEWLINE243 = default(IToken);
		IToken string_literal244 = default(IToken);
		IToken NEWLINE246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal240_tree = default(CommonTree);
		CommonTree NEWLINE241_tree = default(CommonTree);
		CommonTree NEWLINE243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		CommonTree NEWLINE246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(402, 4);
			string_literal240=(IToken)Match(input,144,Follow._144_in_stmt_try2707);  
			stream_144.Add(string_literal240);

			DebugLocation(402, 10);
			// SugarCpp.g:402:10: ( NEWLINE )+
			int cnt102=0;
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==NEWLINE))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:10: NEWLINE
					{
					DebugLocation(402, 10);
					NEWLINE241=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2709);  
					stream_NEWLINE.Add(NEWLINE241);


					}
					break;

				default:
					if (cnt102 >= 1)
						goto loop102;

					EarlyExitException eee102 = new EarlyExitException( 102, input );
					DebugRecognitionException(eee102);
					throw eee102;
				}
				cnt102++;
			}
			loop102:
				;

			} finally { DebugExitSubRule(102); }

			DebugLocation(402, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2712);
			stmt_block242=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block242.Tree);
			DebugLocation(402, 30);
			// SugarCpp.g:402:30: ( NEWLINE )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==NEWLINE))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:30: NEWLINE
					{
					DebugLocation(402, 30);
					NEWLINE243=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2714);  
					stream_NEWLINE.Add(NEWLINE243);


					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }

			DebugLocation(402, 39);
			string_literal244=(IToken)Match(input,124,Follow._124_in_stmt_try2717);  
			stream_124.Add(string_literal244);

			DebugLocation(402, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2719);
			stmt_alloc245=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc245.Tree);
			DebugLocation(402, 58);
			// SugarCpp.g:402:58: ( NEWLINE )+
			int cnt104=0;
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:58: NEWLINE
					{
					DebugLocation(402, 58);
					NEWLINE246=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2721);  
					stream_NEWLINE.Add(NEWLINE246);


					}
					break;

				default:
					if (cnt104 >= 1)
						goto loop104;

					EarlyExitException eee104 = new EarlyExitException( 104, input );
					DebugRecognitionException(eee104);
					throw eee104;
				}
				cnt104++;
			}
			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(402, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2724);
			stmt_block247=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block247.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 402:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(402, 81);
				// SugarCpp.g:402:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(402, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(402, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(402, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(402, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 38);
			LeaveRule("stmt_try", 38);
			LeaveRule_stmt_try();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:405:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 39);
		TraceIn("ident_list", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:406:4: ident ( ',' ident )*
			{
			DebugLocation(406, 4);
			PushFollow(Follow._ident_in_ident_list2747);
			ident248=ident();
			PopFollow();

			stream_ident.Add(ident248.Tree);
			DebugLocation(406, 10);
			// SugarCpp.g:406:10: ( ',' ident )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==88))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:11: ',' ident
					{
					DebugLocation(406, 11);
					char_literal249=(IToken)Match(input,88,Follow._88_in_ident_list2750);  
					stream_88.Add(char_literal249);

					DebugLocation(406, 15);
					PushFollow(Follow._ident_in_ident_list2752);
					ident250=ident();
					PopFollow();

					stream_ident.Add(ident250.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(406, 26);
				// SugarCpp.g:406:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(406, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(406, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(406, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 39);
			LeaveRule("ident_list", 39);
			LeaveRule_ident_list();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:409:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 40);
		TraceIn("stmt_alloc", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal252 = default(IToken);
		IToken char_literal254 = default(IToken);
		IToken string_literal255 = default(IToken);
		IToken char_literal257 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken char_literal262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal252_tree = default(CommonTree);
		CommonTree char_literal254_tree = default(CommonTree);
		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree char_literal257_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(410, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2774);
			ident_list251=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list251.Tree);
			DebugLocation(410, 15);
			// SugarCpp.g:410:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==98))
			{
				alt110 = 1;
			}
			else if ((LA110_0==100))
			{
				alt110 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:410:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(410, 17);
				char_literal252=(IToken)Match(input,98,Follow._98_in_stmt_alloc2778);  
				stream_98.Add(char_literal252);

				DebugLocation(410, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2780);
				type_name253=type_name();
				PopFollow();

				stream_type_name.Add(type_name253.Tree);
				DebugLocation(410, 31);
				// SugarCpp.g:410:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt108=3;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				switch (input.LA(1))
				{
				case 100:
				case 106:
					{
					alt108 = 1;
					}
					break;
				case 81:
					{
					alt108 = 2;
					}
					break;
				case NEWLINE:
				case 132:
				case 133:
				case 146:
				case 148:
				case 150:
					{
					alt108 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 108, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:33: ( '=' | ':=' ) expr
					{
					DebugLocation(410, 33);
					// SugarCpp.g:410:33: ( '=' | ':=' )
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==106))
					{
						alt106 = 1;
					}
					else if ((LA106_0==100))
					{
						alt106 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:410:34: '='
						{
						DebugLocation(410, 34);
						char_literal254=(IToken)Match(input,106,Follow._106_in_stmt_alloc2785);  
						stream_106.Add(char_literal254);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:410:40: ':='
						{
						DebugLocation(410, 40);
						string_literal255=(IToken)Match(input,100,Follow._100_in_stmt_alloc2789);  
						stream_100.Add(string_literal255);


						}
						break;

					}
					} finally { DebugExitSubRule(106); }

					DebugLocation(410, 46);
					PushFollow(Follow._expr_in_stmt_alloc2792);
					expr256=expr();
					PopFollow();

					stream_expr.Add(expr256.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 410:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(410, 55);
						// SugarCpp.g:410:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(410, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(410, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(410, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(410, 95);
						// SugarCpp.g:410:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(410, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:411:33: '(' ( expr_list )? ')'
					{
					DebugLocation(411, 33);
					char_literal257=(IToken)Match(input,81,Follow._81_in_stmt_alloc2840);  
					stream_81.Add(char_literal257);

					DebugLocation(411, 37);
					// SugarCpp.g:411:37: ( expr_list )?
					int alt107=2;
					try { DebugEnterSubRule(107);
					try { DebugEnterDecision(107, false);
					int LA107_0 = input.LA(1);

					if ((LA107_0==IDENT||LA107_0==NUMBER||LA107_0==STRING||LA107_0==74||LA107_0==79||LA107_0==81||LA107_0==83||(LA107_0>=85 && LA107_0<=86)||(LA107_0>=89 && LA107_0<=90)||(LA107_0>=115 && LA107_0<=116)||LA107_0==139||LA107_0==154))
					{
						alt107 = 1;
					}
					} finally { DebugExitDecision(107); }
					switch (alt107)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:411:37: expr_list
						{
						DebugLocation(411, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2842);
						expr_list258=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list258.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(107); }

					DebugLocation(411, 48);
					char_literal259=(IToken)Match(input,82,Follow._82_in_stmt_alloc2845);  
					stream_82.Add(char_literal259);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 411:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(411, 56);
						// SugarCpp.g:411:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(411, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(411, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(411, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(411, 98);
						// SugarCpp.g:411:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(411, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:412:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(412, 18);
						// SugarCpp.g:412:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(412, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(412, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(108); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:414:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(414, 8);
				string_literal260=(IToken)Match(input,100,Follow._100_in_stmt_alloc2906);  
				stream_100.Add(string_literal260);

				DebugLocation(414, 14);
				// SugarCpp.g:414:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:414:15: expr ( ',' expr )*
				{
				DebugLocation(414, 15);
				PushFollow(Follow._expr_in_stmt_alloc2910);
				expr261=expr();
				PopFollow();

				stream_expr.Add(expr261.Tree);
				DebugLocation(414, 20);
				// SugarCpp.g:414:20: ( ',' expr )*
				try { DebugEnterSubRule(109);
				while (true)
				{
					int alt109=2;
					try { DebugEnterDecision(109, false);
					int LA109_0 = input.LA(1);

					if ((LA109_0==88))
					{
						alt109 = 1;
					}


					} finally { DebugExitDecision(109); }
					switch ( alt109 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:414:21: ',' expr
						{
						DebugLocation(414, 21);
						char_literal262=(IToken)Match(input,88,Follow._88_in_stmt_alloc2913);  
						stream_88.Add(char_literal262);

						DebugLocation(414, 25);
						PushFollow(Follow._expr_in_stmt_alloc2915);
						expr263=expr();
						PopFollow();

						stream_expr.Add(expr263.Tree);

						}
						break;

					default:
						goto loop109;
					}
				}

				loop109:
					;

				} finally { DebugExitSubRule(109); }


				}



				{
				// AST REWRITE
				// elements: expr, ident_list, 100
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 414:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(414, 36);
					// SugarCpp.g:414:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(414, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_100.NextNode(), root_1);

					DebugLocation(414, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(414, 54);
					// SugarCpp.g:414:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(414, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 40);
			LeaveRule("stmt_alloc", 40);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:417:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 41);
		TraceIn("stmt_modify", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal267_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(418, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2941);
			lvalue264=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue264.Tree);
			DebugLocation(418, 11);
			// SugarCpp.g:418:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt111=3;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==77||LA111_0==80||LA111_0==84||LA111_0==87||LA111_0==91||LA111_0==97||LA111_0==104||LA111_0==106||LA111_0==112||LA111_0==119||LA111_0==152))
			{
				alt111 = 1;
			}
			else if ((LA111_0==114))
			{
				alt111 = 2;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:13: modify_expr_op ^ expr
				{
				DebugLocation(418, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2945);
				modify_expr_op265=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op265.Tree, root_0);
				DebugLocation(418, 29);
				PushFollow(Follow._expr_in_stmt_modify2948);
				expr266=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr266.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:419:13: '?=' ^ modify_expr
				{
				DebugLocation(419, 17);
				string_literal267=(IToken)Match(input,114,Follow._114_in_stmt_modify2962); 
				string_literal267_tree = (CommonTree)adaptor.Create(string_literal267);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal267_tree, root_0);
				DebugLocation(419, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2965);
				modify_expr268=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr268.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 41);
			LeaveRule("stmt_modify", 41);
			LeaveRule_stmt_modify();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:422:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 42);
		TraceIn("expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 4);
			PushFollow(Follow._list_expr_in_expr2978);
			list_expr269=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr269.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 42);
			LeaveRule("expr", 42);
			LeaveRule_expr();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:426:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 43);
		TraceIn("list_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal270 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		IToken INDENT273 = default(IToken);
		IToken DEDENT274 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken NEWLINE277 = default(IToken);
		IToken INDENT278 = default(IToken);
		IToken DEDENT279 = default(IToken);
		IToken char_literal281 = default(IToken);
		IToken NEWLINE282 = default(IToken);
		IToken INDENT283 = default(IToken);
		IToken DEDENT284 = default(IToken);
		IToken char_literal285 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal270_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		CommonTree INDENT273_tree = default(CommonTree);
		CommonTree DEDENT274_tree = default(CommonTree);
		CommonTree char_literal276_tree = default(CommonTree);
		CommonTree NEWLINE277_tree = default(CommonTree);
		CommonTree INDENT278_tree = default(CommonTree);
		CommonTree DEDENT279_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		CommonTree NEWLINE282_tree = default(CommonTree);
		CommonTree INDENT283_tree = default(CommonTree);
		CommonTree DEDENT284_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt117=2;
			try { DebugEnterDecision(117, false);
			int LA117_0 = input.LA(1);

			if ((LA117_0==116))
			{
				alt117 = 1;
			}
			else if ((LA117_0==IDENT||LA117_0==NUMBER||LA117_0==STRING||LA117_0==74||LA117_0==79||LA117_0==81||LA117_0==83||(LA117_0>=85 && LA117_0<=86)||(LA117_0>=89 && LA117_0<=90)||LA117_0==115||LA117_0==139||LA117_0==154))
			{
				alt117 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(427, 4);
				char_literal270=(IToken)Match(input,116,Follow._116_in_list_expr2989);  
				stream_116.Add(char_literal270);

				DebugLocation(427, 8);
				// SugarCpp.g:427:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				try
				{
					alt115 = dfa115.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(427, 9);
					// SugarCpp.g:427:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(112);
					while (true)
					{
						int alt112=5;
						try { DebugEnterDecision(112, false);
						switch (input.LA(1))
						{
						case 88:
							{
							alt112 = 1;
							}
							break;
						case NEWLINE:
							{
							alt112 = 2;
							}
							break;
						case INDENT:
							{
							alt112 = 3;
							}
							break;
						case DEDENT:
							{
							alt112 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(112); }
						switch ( alt112 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:427:10: ','
							{
							DebugLocation(427, 10);
							char_literal271=(IToken)Match(input,88,Follow._88_in_list_expr2993);  
							stream_88.Add(char_literal271);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:427:16: NEWLINE
							{
							DebugLocation(427, 16);
							NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2997);  
							stream_NEWLINE.Add(NEWLINE272);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:427:26: INDENT
							{
							DebugLocation(427, 26);
							INDENT273=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3001);  
							stream_INDENT.Add(INDENT273);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:427:35: DEDENT
							{
							DebugLocation(427, 35);
							DEDENT274=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3005);  
							stream_DEDENT.Add(DEDENT274);


							}
							break;

						default:
							goto loop112;
						}
					}

					loop112:
						;

					} finally { DebugExitSubRule(112); }

					DebugLocation(427, 44);
					PushFollow(Follow._list_expr_in_list_expr3009);
					list_expr275=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr275.Tree);
					DebugLocation(427, 54);
					// SugarCpp.g:427:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(114);
					while (true)
					{
						int alt114=2;
						try { DebugEnterDecision(114, false);
						try
						{
							alt114 = dfa114.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(114); }
						switch ( alt114 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:427:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(427, 55);
							// SugarCpp.g:427:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt113=0;
							try { DebugEnterSubRule(113);
							while (true)
							{
								int alt113=5;
								try { DebugEnterDecision(113, false);
								switch (input.LA(1))
								{
								case 88:
									{
									alt113 = 1;
									}
									break;
								case NEWLINE:
									{
									alt113 = 2;
									}
									break;
								case INDENT:
									{
									alt113 = 3;
									}
									break;
								case DEDENT:
									{
									alt113 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(113); }
								switch (alt113)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:427:56: ','
									{
									DebugLocation(427, 56);
									char_literal276=(IToken)Match(input,88,Follow._88_in_list_expr3013);  
									stream_88.Add(char_literal276);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:427:62: NEWLINE
									{
									DebugLocation(427, 62);
									NEWLINE277=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3017);  
									stream_NEWLINE.Add(NEWLINE277);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:427:72: INDENT
									{
									DebugLocation(427, 72);
									INDENT278=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3021);  
									stream_INDENT.Add(INDENT278);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:427:81: DEDENT
									{
									DebugLocation(427, 81);
									DEDENT279=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3025);  
									stream_DEDENT.Add(DEDENT279);


									}
									break;

								default:
									if (cnt113 >= 1)
										goto loop113;

									EarlyExitException eee113 = new EarlyExitException( 113, input );
									DebugRecognitionException(eee113);
									throw eee113;
								}
								cnt113++;
							}
							loop113:
								;

							} finally { DebugExitSubRule(113); }

							DebugLocation(427, 90);
							PushFollow(Follow._list_expr_in_list_expr3029);
							list_expr280=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr280.Tree);

							}
							break;

						default:
							goto loop114;
						}
					}

					loop114:
						;

					} finally { DebugExitSubRule(114); }


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(427, 104);
				// SugarCpp.g:427:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=5;
					try { DebugEnterDecision(116, false);
					switch (input.LA(1))
					{
					case 88:
						{
						alt116 = 1;
						}
						break;
					case NEWLINE:
						{
						alt116 = 2;
						}
						break;
					case INDENT:
						{
						alt116 = 3;
						}
						break;
					case DEDENT:
						{
						alt116 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(116); }
					switch ( alt116 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:427:105: ','
						{
						DebugLocation(427, 105);
						char_literal281=(IToken)Match(input,88,Follow._88_in_list_expr3036);  
						stream_88.Add(char_literal281);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:427:111: NEWLINE
						{
						DebugLocation(427, 111);
						NEWLINE282=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3040);  
						stream_NEWLINE.Add(NEWLINE282);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:427:121: INDENT
						{
						DebugLocation(427, 121);
						INDENT283=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3044);  
						stream_INDENT.Add(INDENT283);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:427:130: DEDENT
						{
						DebugLocation(427, 130);
						DEDENT284=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3048);  
						stream_DEDENT.Add(DEDENT284);


						}
						break;

					default:
						goto loop116;
					}
				}

				loop116:
					;

				} finally { DebugExitSubRule(116); }

				DebugLocation(427, 139);
				char_literal285=(IToken)Match(input,117,Follow._117_in_list_expr3052);  
				stream_117.Add(char_literal285);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 427:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(427, 146);
					// SugarCpp.g:427:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(427, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(427, 158);
					// SugarCpp.g:427:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(427, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(428, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3066);
				lambda_expr286=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr286.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 43);
			LeaveRule("list_expr", 43);
			LeaveRule_list_expr();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:431:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 44);
		TraceIn("lambda_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal287 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken string_literal292 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr294 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(431, 1);
		try
		{
			// SugarCpp.g:432:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt120=2;
			try { DebugEnterDecision(120, false);
			try
			{
				alt120 = dfa120.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:432:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(432, 4);
				char_literal287=(IToken)Match(input,81,Follow._81_in_lambda_expr3077);  
				stream_81.Add(char_literal287);

				DebugLocation(432, 8);
				// SugarCpp.g:432:8: ( func_args )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==IDENT||LA118_0==100))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:8: func_args
					{
					DebugLocation(432, 8);
					PushFollow(Follow._func_args_in_lambda_expr3079);
					func_args288=func_args();
					PopFollow();

					stream_func_args.Add(func_args288.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(432, 19);
				char_literal289=(IToken)Match(input,82,Follow._82_in_lambda_expr3082);  
				stream_82.Add(char_literal289);

				DebugLocation(432, 23);
				// SugarCpp.g:432:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==92))
				{
					alt119 = 1;
				}
				else if ((LA119_0==108))
				{
					alt119 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:25: '->' expr
					{
					DebugLocation(432, 25);
					string_literal290=(IToken)Match(input,92,Follow._92_in_lambda_expr3086);  
					stream_92.Add(string_literal290);

					DebugLocation(432, 30);
					PushFollow(Follow._expr_in_lambda_expr3088);
					expr291=expr();
					PopFollow();

					stream_expr.Add(expr291.Tree);


					{
					// AST REWRITE
					// elements: 92, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(432, 39);
						// SugarCpp.g:432:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(432, 53);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(432, 58);
						// SugarCpp.g:432:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(432, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(432, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:433:25: '=>' expr
					{
					DebugLocation(433, 25);
					string_literal292=(IToken)Match(input,108,Follow._108_in_lambda_expr3128);  
					stream_108.Add(string_literal292);

					DebugLocation(433, 30);
					PushFollow(Follow._expr_in_lambda_expr3130);
					expr293=expr();
					PopFollow();

					stream_expr.Add(expr293.Tree);


					{
					// AST REWRITE
					// elements: expr, 108, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(433, 39);
						// SugarCpp.g:433:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(433, 53);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(433, 58);
						// SugarCpp.g:433:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(433, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(433, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:434:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(434, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3150);
				modify_expr294=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr294.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 44);
			LeaveRule("lambda_expr", 44);
			LeaveRule_lambda_expr();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:437:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 45);
		TraceIn("modify_expr_op", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set295 = default(IToken);

		CommonTree set295_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(437, 91);
		try
		{
			// SugarCpp.g:437:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(437, 15);

			set295=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==80||input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==97||input.LA(1)==104||input.LA(1)==106||input.LA(1)==112||input.LA(1)==119||input.LA(1)==152)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set295));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 45);
			LeaveRule("modify_expr_op", 45);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(437, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:438:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 46);
		TraceIn("modify_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set297 = default(IToken);
		IToken char_literal299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:439:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(439, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3207);
			cond_expr296=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr296.Tree);
			DebugLocation(439, 14);
			// SugarCpp.g:439:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt122=3;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==77||LA122_0==80||LA122_0==84||LA122_0==87||LA122_0==91||LA122_0==97||LA122_0==100||LA122_0==104||LA122_0==112||LA122_0==119||LA122_0==152))
			{
				alt122 = 1;
			}
			else if ((LA122_0==106))
			{
				alt122 = 2;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(439, 94);

				set297=(IToken)input.LT(1);
				set297=(IToken)input.LT(1);
				if (input.LA(1)==77||input.LA(1)==80||input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==97||input.LA(1)==100||input.LA(1)==104||input.LA(1)==112||input.LA(1)==119||input.LA(1)==152)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set297), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(439, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3256);
				cond_expr298=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr298.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(440, 7);
				// SugarCpp.g:440:7: ( '=' ^ cond_expr )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==106))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:440:8: '=' ^ cond_expr
						{
						DebugLocation(440, 11);
						char_literal299=(IToken)Match(input,106,Follow._106_in_modify_expr3265); 
						char_literal299_tree = (CommonTree)adaptor.Create(char_literal299);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal299_tree, root_0);
						DebugLocation(440, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3268);
						cond_expr300=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr300.Tree);

						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }


				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 46);
			LeaveRule("modify_expr", 46);
			LeaveRule_modify_expr();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:443:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 47);
		TraceIn("cond_expr_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr301 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(443, 24);
		try
		{
			// SugarCpp.g:443:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:443:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(443, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3281);
			or_expr301=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr301.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 47);
			LeaveRule("cond_expr_item", 47);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(443, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:444:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 48);
		TraceIn("cond_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal302 = default(IToken);
		IToken char_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree char_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(444, 1);
		try
		{
			// SugarCpp.g:445:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:445:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(445, 4);
			// SugarCpp.g:445:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:445:5: a= or_expr
			{
			DebugLocation(445, 6);
			PushFollow(Follow._or_expr_in_cond_expr3293);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 445:15: -> $a
			{
				DebugLocation(445, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(445, 22);
			// SugarCpp.g:445:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_0 = input.LA(1);

			if ((LA125_0==113))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:445:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(445, 23);
				char_literal302=(IToken)Match(input,113,Follow._113_in_cond_expr3302);  
				stream_113.Add(char_literal302);

				DebugLocation(445, 27);
				// SugarCpp.g:445:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==IDENT||LA124_0==NUMBER||LA124_0==STRING||LA124_0==74||LA124_0==79||LA124_0==81||LA124_0==83||(LA124_0>=85 && LA124_0<=86)||(LA124_0>=89 && LA124_0<=90)||LA124_0==115||LA124_0==139||LA124_0==154))
				{
					alt124 = 1;
				}
				else if ((LA124_0==DEDENT||LA124_0==INDENT||LA124_0==NEWLINE||LA124_0==77||LA124_0==80||LA124_0==82||LA124_0==84||(LA124_0>=87 && LA124_0<=88)||LA124_0==91||LA124_0==97||LA124_0==100||LA124_0==104||LA124_0==106||LA124_0==112||LA124_0==117||LA124_0==119||LA124_0==123||LA124_0==128||(LA124_0>=132 && LA124_0<=133)||(LA124_0>=142 && LA124_0<=143)||LA124_0==146||LA124_0==148||LA124_0==150||LA124_0==152))
				{
					alt124 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(445, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3308);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(445, 46);
					// SugarCpp.g:445:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt123=2;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, false);
					int LA123_0 = input.LA(1);

					if ((LA123_0==98))
					{
						alt123 = 1;
					}
					else if ((LA123_0==DEDENT||LA123_0==INDENT||LA123_0==NEWLINE||LA123_0==77||LA123_0==80||LA123_0==82||LA123_0==84||(LA123_0>=87 && LA123_0<=88)||LA123_0==91||LA123_0==97||LA123_0==100||LA123_0==104||LA123_0==106||LA123_0==112||LA123_0==117||LA123_0==119||LA123_0==123||LA123_0==128||(LA123_0>=132 && LA123_0<=133)||(LA123_0>=142 && LA123_0<=143)||LA123_0==146||LA123_0==148||LA123_0==150||LA123_0==152))
					{
						alt123 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:48: ':' b= cond_expr_item
						{
						DebugLocation(445, 48);
						char_literal303=(IToken)Match(input,98,Follow._98_in_cond_expr3312);  
						stream_98.Add(char_literal303);

						DebugLocation(445, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3316);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, b, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 445:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(445, 72);
							// SugarCpp.g:445:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(445, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(445, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(445, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(445, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:446:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 446:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(446, 20);
							// SugarCpp.g:446:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(446, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(446, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(446, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(123); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:448:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 448:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(448, 14);
						// SugarCpp.g:448:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(448, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(448, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(124); }


				}
				break;

			}
			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 48);
			LeaveRule("cond_expr", 48);
			LeaveRule_cond_expr();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:452:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 49);
		TraceIn("or_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set304 = default(IToken);

		CommonTree set304_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(452, 19);
		try
		{
			// SugarCpp.g:452:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(452, 6);

			set304=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==153)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set304));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 49);
			LeaveRule("or_op", 49);
			LeaveRule_or_op();
		}
		DebugLocation(452, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:453:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 50);
		TraceIn("or_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(453, 1);
		try
		{
			// SugarCpp.g:454:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:454:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(454, 4);
			// SugarCpp.g:454:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:454:5: a= and_expr
			{
			DebugLocation(454, 6);
			PushFollow(Follow._and_expr_in_or_expr3430);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 454:16: -> $a
			{
				DebugLocation(454, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(454, 23);
			// SugarCpp.g:454:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==140||LA126_0==153))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:24: op= or_op b= and_expr
					{
					DebugLocation(454, 26);
					PushFollow(Follow._or_op_in_or_expr3441);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(454, 34);
					PushFollow(Follow._and_expr_in_or_expr3445);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, or_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(454, 47);
						// SugarCpp.g:454:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(454, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(454, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(454, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 50);
			LeaveRule("or_expr", 50);
			LeaveRule_or_expr();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:457:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 51);
		TraceIn("and_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set305 = default(IToken);

		CommonTree set305_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(457, 21);
		try
		{
			// SugarCpp.g:457:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(457, 7);

			set305=(IToken)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==121)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set305));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 51);
			LeaveRule("and_op", 51);
			LeaveRule_and_op();
		}
		DebugLocation(457, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:458:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 52);
		TraceIn("and_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(458, 1);
		try
		{
			// SugarCpp.g:459:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:459:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(459, 4);
			// SugarCpp.g:459:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:459:5: a= bit_or
			{
			DebugLocation(459, 6);
			PushFollow(Follow._bit_or_in_and_expr3487);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 459:14: -> $a
			{
				DebugLocation(459, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(459, 21);
			// SugarCpp.g:459:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==78||LA127_0==121))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:22: op= and_op b= bit_or
					{
					DebugLocation(459, 24);
					PushFollow(Follow._and_op_in_and_expr3498);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(459, 33);
					PushFollow(Follow._bit_or_in_and_expr3502);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(459, 44);
						// SugarCpp.g:459:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(459, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(459, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(459, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 52);
			LeaveRule("and_expr", 52);
			LeaveRule_and_expr();
		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:462:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 53);
		TraceIn("bit_or", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal306 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal306_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(462, 1);
		try
		{
			// SugarCpp.g:463:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:463:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(463, 4);
			// SugarCpp.g:463:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:463:5: a= bit_xor
			{
			DebugLocation(463, 6);
			PushFollow(Follow._bit_xor_in_bit_or3533);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 463:15: -> $a
			{
				DebugLocation(463, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(463, 22);
			// SugarCpp.g:463:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==151))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:23: '|' b= bit_xor
					{
					DebugLocation(463, 23);
					char_literal306=(IToken)Match(input,151,Follow._151_in_bit_or3542);  
					stream_151.Add(char_literal306);

					DebugLocation(463, 28);
					PushFollow(Follow._bit_xor_in_bit_or3546);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 151
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 463:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(463, 40);
						// SugarCpp.g:463:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(463, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(463, 51);
						adaptor.AddChild(root_1, stream_151.NextNode());
						DebugLocation(463, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(463, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 53);
			LeaveRule("bit_or", 53);
			LeaveRule_bit_or();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:466:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 54);
		TraceIn("bit_xor", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal307 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal307_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(466, 1);
		try
		{
			// SugarCpp.g:467:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:467:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(467, 4);
			// SugarCpp.g:467:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:467:5: a= bit_and
			{
			DebugLocation(467, 6);
			PushFollow(Follow._bit_and_in_bit_xor3576);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 467:15: -> $a
			{
				DebugLocation(467, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(467, 22);
			// SugarCpp.g:467:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==118))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:467:23: '^' b= bit_and
					{
					DebugLocation(467, 23);
					char_literal307=(IToken)Match(input,118,Follow._118_in_bit_xor3585);  
					stream_118.Add(char_literal307);

					DebugLocation(467, 28);
					PushFollow(Follow._bit_and_in_bit_xor3589);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 118
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 467:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(467, 40);
						// SugarCpp.g:467:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(467, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(467, 51);
						adaptor.AddChild(root_1, stream_118.NextNode());
						DebugLocation(467, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(467, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 54);
			LeaveRule("bit_xor", 54);
			LeaveRule_bit_xor();
		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:470:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 55);
		TraceIn("bit_and", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(470, 1);
		try
		{
			// SugarCpp.g:471:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:471:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(471, 4);
			// SugarCpp.g:471:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:471:5: a= cmp_expr
			{
			DebugLocation(471, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3619);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 471:16: -> $a
			{
				DebugLocation(471, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(471, 23);
			// SugarCpp.g:471:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==79))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:24: '&' b= cmp_expr
					{
					DebugLocation(471, 24);
					char_literal308=(IToken)Match(input,79,Follow._79_in_bit_and3628);  
					stream_79.Add(char_literal308);

					DebugLocation(471, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3632);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 79
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(471, 42);
						// SugarCpp.g:471:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(471, 53);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(471, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(471, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 55);
			LeaveRule("bit_and", 55);
			LeaveRule_bit_and();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:474:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 56);
		TraceIn("chain_op", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set309 = default(IToken);

		CommonTree set309_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(474, 64);
		try
		{
			// SugarCpp.g:474:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(474, 9);

			set309=(IToken)input.LT(1);
			if (input.LA(1)==75||input.LA(1)==101||input.LA(1)==105||input.LA(1)==107||(input.LA(1)>=109 && input.LA(1)<=110)||(input.LA(1)>=135 && input.LA(1)<=136))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set309));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 56);
			LeaveRule("chain_op", 56);
			LeaveRule_chain_op();
		}
		DebugLocation(474, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:475:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 57);
		TraceIn("no_less_op", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set310 = default(IToken);

		CommonTree set310_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(475, 60);
		try
		{
			// SugarCpp.g:475:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(475, 11);

			set310=(IToken)input.LT(1);
			if (input.LA(1)==75||input.LA(1)==105||input.LA(1)==107||(input.LA(1)>=109 && input.LA(1)<=110)||(input.LA(1)>=135 && input.LA(1)<=136))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set310));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 57);
			LeaveRule("no_less_op", 57);
			LeaveRule_no_less_op();
		}
		DebugLocation(475, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:476:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 58);
		TraceIn("chain_list", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr312 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(476, 35);
		try
		{
			// SugarCpp.g:476:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:476:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(476, 13);
			// SugarCpp.g:476:13: ( chain_op infix_expr )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==75||LA131_0==101||LA131_0==105||LA131_0==107||(LA131_0>=109 && LA131_0<=110)||(LA131_0>=135 && LA131_0<=136)))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:476:14: chain_op infix_expr
					{
					DebugLocation(476, 14);
					PushFollow(Follow._chain_op_in_chain_list3724);
					chain_op311=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op311.Tree);
					DebugLocation(476, 23);
					PushFollow(Follow._infix_expr_in_chain_list3726);
					infix_expr312=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr312.Tree);

					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 58);
			LeaveRule("chain_list", 58);
			LeaveRule_chain_list();
		}
		DebugLocation(476, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:477:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 59);
		TraceIn("cmp_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal313 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list320 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal313_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(477, 1);
		try
		{
			// SugarCpp.g:478:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:478:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(478, 4);
			// SugarCpp.g:478:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:478:5: a= infix_expr
			{
			DebugLocation(478, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3740);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 478:18: -> $a
			{
				DebugLocation(478, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(478, 25);
			// SugarCpp.g:478:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt136=3;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_0 = input.LA(1);

			if ((LA136_0==101))
			{
				alt136 = 1;
			}
			else if ((LA136_0==75||LA136_0==105||LA136_0==107||(LA136_0>=109 && LA136_0<=110)||(LA136_0>=135 && LA136_0<=136)))
			{
				alt136 = 2;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:478:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(478, 27);
				char_literal313=(IToken)Match(input,101,Follow._101_in_cmp_expr3750);  
				stream_101.Add(char_literal313);

				DebugLocation(478, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3754);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(478, 44);
				// SugarCpp.g:478:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt134=3;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt134 = 1;
					}
					break;
				case 109:
					{
					int LA134_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt134 = 1;
					}
					else if ((true))
					{
						alt134 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 134, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 75:
				case 101:
				case 105:
				case 107:
				case 110:
				case 135:
				case 136:
					{
					alt134 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 77:
				case 78:
				case 79:
				case 80:
				case 82:
				case 84:
				case 87:
				case 88:
				case 91:
				case 97:
				case 98:
				case 100:
				case 104:
				case 106:
				case 112:
				case 113:
				case 117:
				case 118:
				case 119:
				case 121:
				case 123:
				case 128:
				case 132:
				case 133:
				case 140:
				case 142:
				case 143:
				case 146:
				case 148:
				case 150:
				case 151:
				case 152:
				case 153:
					{
					alt134 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:478:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(478, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(478, 76);
					// SugarCpp.g:478:76: ( ident )*
					try { DebugEnterSubRule(132);
					while (true)
					{
						int alt132=2;
						try { DebugEnterDecision(132, false);
						int LA132_0 = input.LA(1);

						if ((LA132_0==IDENT))
						{
							alt132 = 1;
						}


						} finally { DebugExitDecision(132); }
						switch ( alt132 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:478:76: ident
							{
							DebugLocation(478, 76);
							PushFollow(Follow._ident_in_cmp_expr3760);
							ident314=ident();
							PopFollow();

							stream_ident.Add(ident314.Tree);

							}
							break;

						default:
							goto loop132;
						}
					}

					loop132:
						;

					} finally { DebugExitSubRule(132); }

					DebugLocation(478, 83);
					char_literal315=(IToken)Match(input,109,Follow._109_in_cmp_expr3763);  
					stream_109.Add(char_literal315);

					DebugLocation(478, 87);
					char_literal316=(IToken)Match(input,81,Follow._81_in_cmp_expr3765);  
					stream_81.Add(char_literal316);

					DebugLocation(478, 91);
					// SugarCpp.g:478:91: ( expr_list )?
					int alt133=2;
					try { DebugEnterSubRule(133);
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==IDENT||LA133_0==NUMBER||LA133_0==STRING||LA133_0==74||LA133_0==79||LA133_0==81||LA133_0==83||(LA133_0>=85 && LA133_0<=86)||(LA133_0>=89 && LA133_0<=90)||(LA133_0>=115 && LA133_0<=116)||LA133_0==139||LA133_0==154))
					{
						alt133 = 1;
					}
					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:478:91: expr_list
						{
						DebugLocation(478, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3767);
						expr_list317=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list317.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(133); }

					DebugLocation(478, 102);
					char_literal318=(IToken)Match(input,82,Follow._82_in_cmp_expr3770);  
					stream_82.Add(char_literal318);



					{
					// AST REWRITE
					// elements: b, expr_list, ident, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 478:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(478, 109);
						// SugarCpp.g:478:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(478, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(478, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(478, 131);
						// SugarCpp.g:478:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(478, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(478, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(478, 155);
						// SugarCpp.g:478:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(478, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(478, 163);
						// SugarCpp.g:478:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(478, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:479:46: chain_list
					{
					DebugLocation(479, 46);
					PushFollow(Follow._chain_list_in_cmp_expr3839);
					chain_list319=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list319.Tree);


					{
					// AST REWRITE
					// elements: 101, cmp_expr, b, chain_list
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(479, 60);
						// SugarCpp.g:479:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(479, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(479, 84);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(479, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(479, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:480:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 101
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 480:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(480, 19);
						// SugarCpp.g:480:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(480, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(480, 30);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(480, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(480, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(134); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(481, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr3916);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(481, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr3920);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(481, 54);
				// SugarCpp.g:481:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==75||LA135_0==101||LA135_0==105||LA135_0==107||(LA135_0>=109 && LA135_0<=110)||(LA135_0>=135 && LA135_0<=136)))
				{
					alt135 = 1;
				}
				else if ((LA135_0==DEDENT||LA135_0==INDENT||LA135_0==NEWLINE||(LA135_0>=77 && LA135_0<=80)||LA135_0==82||LA135_0==84||(LA135_0>=87 && LA135_0<=88)||LA135_0==91||(LA135_0>=97 && LA135_0<=98)||LA135_0==100||LA135_0==104||LA135_0==106||(LA135_0>=112 && LA135_0<=113)||(LA135_0>=117 && LA135_0<=119)||LA135_0==121||LA135_0==123||LA135_0==128||(LA135_0>=132 && LA135_0<=133)||LA135_0==140||(LA135_0>=142 && LA135_0<=143)||LA135_0==146||LA135_0==148||(LA135_0>=150 && LA135_0<=153)))
				{
					alt135 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:56: chain_list
					{
					DebugLocation(481, 56);
					PushFollow(Follow._chain_list_in_cmp_expr3924);
					chain_list320=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list320.Tree);


					{
					// AST REWRITE
					// elements: chain_list, op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(481, 70);
						// SugarCpp.g:481:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(481, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(481, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(481, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(481, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:482:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 482:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(482, 20);
						// SugarCpp.g:482:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(482, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(482, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(482, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(482, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;

			}
			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 59);
			LeaveRule("cmp_expr", 59);
			LeaveRule_cmp_expr();
		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:487:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 60);
		TraceIn("infix_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(487, 1);
		try
		{
			// SugarCpp.g:488:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:488:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(488, 4);
			// SugarCpp.g:488:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:488:5: a= shift_expr
			{
			DebugLocation(488, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4015);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 488:18: -> $a
			{
				DebugLocation(488, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(488, 25);
			// SugarCpp.g:488:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==120))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:27: infix_func b= shift_expr
					{
					DebugLocation(488, 27);
					PushFollow(Follow._infix_func_in_infix_expr4025);
					infix_func321=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func321.Tree);
					DebugLocation(488, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4029);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 488:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(488, 55);
						// SugarCpp.g:488:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(488, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(488, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(488, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(488, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 60);
			LeaveRule("infix_expr", 60);
			LeaveRule_infix_expr();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:491:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 61);
		TraceIn("shift_expr_op", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set322 = default(IToken);

		CommonTree set322_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(491, 27);
		try
		{
			// SugarCpp.g:491:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(491, 14);

			set322=(IToken)input.LT(1);
			if (input.LA(1)==103||input.LA(1)==111)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set322));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 61);
			LeaveRule("shift_expr_op", 61);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(491, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:492:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 62);
		TraceIn("shift_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op323 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(492, 1);
		try
		{
			// SugarCpp.g:493:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:493:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(493, 4);
			// SugarCpp.g:493:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:493:5: a= add_expr
			{
			DebugLocation(493, 6);
			PushFollow(Follow._add_expr_in_shift_expr4072);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 493:16: -> $a
			{
				DebugLocation(493, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(493, 23);
			// SugarCpp.g:493:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==103||LA138_0==111))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:493:24: shift_expr_op b= add_expr
					{
					DebugLocation(493, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4081);
					shift_expr_op323=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op323.Tree);
					DebugLocation(493, 39);
					PushFollow(Follow._add_expr_in_shift_expr4085);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, shift_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(493, 52);
						// SugarCpp.g:493:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(493, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(493, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(493, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 62);
			LeaveRule("shift_expr", 62);
			LeaveRule_shift_expr();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:496:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 63);
		TraceIn("add_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal324 = default(IToken);
		IToken char_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal324_tree = default(CommonTree);
		CommonTree char_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(497, 4);
			// SugarCpp.g:497:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:497:5: a= mul_expr
			{
			DebugLocation(497, 6);
			PushFollow(Follow._mul_expr_in_add_expr4115);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 497:16: -> $a
			{
				DebugLocation(497, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(497, 23);
			// SugarCpp.g:497:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=3;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==85))
				{
					alt139 = 1;
				}
				else if ((LA139_0==89))
				{
					alt139 = 2;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:497:25: '+' b= mul_expr
					{
					DebugLocation(497, 25);
					char_literal324=(IToken)Match(input,85,Follow._85_in_add_expr4125);  
					stream_85.Add(char_literal324);

					DebugLocation(497, 30);
					PushFollow(Follow._mul_expr_in_add_expr4129);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 85
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 497:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(497, 43);
						// SugarCpp.g:497:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(497, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(497, 54);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(497, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(497, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:498:10: '-' b= mul_expr
					{
					DebugLocation(498, 10);
					char_literal325=(IToken)Match(input,89,Follow._89_in_add_expr4154);  
					stream_89.Add(char_literal325);

					DebugLocation(498, 15);
					PushFollow(Follow._mul_expr_in_add_expr4158);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 89, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 498:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(498, 28);
						// SugarCpp.g:498:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(498, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(498, 39);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(498, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(498, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 63);
			LeaveRule("add_expr", 63);
			LeaveRule_add_expr();
		}
		DebugLocation(500, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:502:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 64);
		TraceIn("mul_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal326 = default(IToken);
		IToken char_literal327 = default(IToken);
		IToken char_literal328 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree char_literal327_tree = default(CommonTree);
		CommonTree char_literal328_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(502, 1);
		try
		{
			// SugarCpp.g:503:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:503:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(503, 4);
			// SugarCpp.g:503:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:503:5: a= selector_expr
			{
			DebugLocation(503, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4196);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 503:21: -> $a
			{
				DebugLocation(503, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(503, 28);
			// SugarCpp.g:503:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=4;
				try { DebugEnterDecision(140, false);
				switch (input.LA(1))
				{
				case 83:
					{
					alt140 = 1;
					}
					break;
				case 96:
					{
					alt140 = 2;
					}
					break;
				case 76:
					{
					alt140 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:503:30: '*' b= selector_expr
					{
					DebugLocation(503, 30);
					char_literal326=(IToken)Match(input,83,Follow._83_in_mul_expr4206);  
					stream_83.Add(char_literal326);

					DebugLocation(503, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4210);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(503, 53);
						// SugarCpp.g:503:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(503, 64);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(503, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(503, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:504:15: '/' b= selector_expr
					{
					DebugLocation(504, 15);
					char_literal327=(IToken)Match(input,96,Follow._96_in_mul_expr4240);  
					stream_96.Add(char_literal327);

					DebugLocation(504, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4244);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(504, 38);
						// SugarCpp.g:504:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(504, 49);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(504, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(504, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:505:15: '%' b= selector_expr
					{
					DebugLocation(505, 15);
					char_literal328=(IToken)Match(input,76,Follow._76_in_mul_expr4274);  
					stream_76.Add(char_literal328);

					DebugLocation(505, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4278);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 76, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(505, 38);
						// SugarCpp.g:505:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(505, 49);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(505, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(505, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 64);
			LeaveRule("mul_expr", 64);
			LeaveRule_mul_expr();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:509:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 65);
		TraceIn("selector_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal329 = default(IToken);
		IToken string_literal330 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal329_tree = default(CommonTree);
		CommonTree string_literal330_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(509, 1);
		try
		{
			// SugarCpp.g:510:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:510:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(510, 4);
			// SugarCpp.g:510:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:510:5: a= cast_expr
			{
			DebugLocation(510, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4321);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 510:17: -> $a
			{
				DebugLocation(510, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(510, 24);
			// SugarCpp.g:510:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=3;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==93))
				{
					alt141 = 1;
				}
				else if ((LA141_0==95))
				{
					alt141 = 2;
				}


				} finally { DebugExitDecision(141); }
				switch ( alt141 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:510:26: '->*' b= ident
					{
					DebugLocation(510, 26);
					string_literal329=(IToken)Match(input,93,Follow._93_in_selector_expr4331);  
					stream_93.Add(string_literal329);

					DebugLocation(510, 33);
					PushFollow(Follow._ident_in_selector_expr4335);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 93, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 510:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(510, 43);
						// SugarCpp.g:510:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(510, 57);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(510, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(510, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:511:11: '.*' b= ident
					{
					DebugLocation(511, 11);
					string_literal330=(IToken)Match(input,95,Follow._95_in_selector_expr4361);  
					stream_95.Add(string_literal330);

					DebugLocation(511, 18);
					PushFollow(Follow._ident_in_selector_expr4366);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 95, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 511:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(511, 28);
						// SugarCpp.g:511:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(511, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(511, 42);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(511, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(511, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop141;
				}
			}

			loop141:
				;

			} finally { DebugExitSubRule(141); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 65);
			LeaveRule("selector_expr", 65);
			LeaveRule_selector_expr();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:515:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 66);
		TraceIn("cast_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal331 = default(IToken);
		IToken char_literal332 = default(IToken);
		IToken char_literal334 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name333 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree char_literal332_tree = default(CommonTree);
		CommonTree char_literal334_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(515, 1);
		try
		{
			// SugarCpp.g:516:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:516:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(516, 4);
			// SugarCpp.g:516:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:516:5: a= prefix_expr
			{
			DebugLocation(516, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4406);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 516:19: -> $a
			{
				DebugLocation(516, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(516, 26);
			// SugarCpp.g:516:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==122))
			{
				alt142 = 1;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:516:27: 'as' '(' type_name ')'
				{
				DebugLocation(516, 27);
				string_literal331=(IToken)Match(input,122,Follow._122_in_cast_expr4415);  
				stream_122.Add(string_literal331);

				DebugLocation(516, 32);
				char_literal332=(IToken)Match(input,81,Follow._81_in_cast_expr4417);  
				stream_81.Add(char_literal332);

				DebugLocation(516, 36);
				PushFollow(Follow._type_name_in_cast_expr4419);
				type_name333=type_name();
				PopFollow();

				stream_type_name.Add(type_name333.Tree);
				DebugLocation(516, 46);
				char_literal334=(IToken)Match(input,82,Follow._82_in_cast_expr4421);  
				stream_82.Add(char_literal334);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 516:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(516, 53);
					// SugarCpp.g:516:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(516, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(516, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(516, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 66);
			LeaveRule("cast_expr", 66);
			LeaveRule_cast_expr();
		}
		DebugLocation(517, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:519:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 67);
		TraceIn("prefix_expr_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set335 = default(IToken);

		CommonTree set335_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(519, 63);
		try
		{
			// SugarCpp.g:519:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(519, 15);

			set335=(IToken)input.LT(1);
			if (input.LA(1)==74||input.LA(1)==79||input.LA(1)==83||(input.LA(1)>=85 && input.LA(1)<=86)||(input.LA(1)>=89 && input.LA(1)<=90)||input.LA(1)==154)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set335));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 67);
			LeaveRule("prefix_expr_op", 67);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(519, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:520:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 68);
		TraceIn("prefix_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal338 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken char_literal342 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr343 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal338_tree = default(CommonTree);
		CommonTree char_literal340_tree = default(CommonTree);
		CommonTree char_literal342_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(520, 1);
		try
		{
			// SugarCpp.g:521:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt144=3;
			try { DebugEnterDecision(144, false);
			switch (input.LA(1))
			{
			case 74:
			case 79:
			case 83:
			case 85:
			case 86:
			case 89:
			case 90:
			case 154:
				{
				alt144 = 1;
				}
				break;
			case 139:
				{
				alt144 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 81:
			case 115:
				{
				alt144 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:521:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(521, 4);
				// SugarCpp.g:521:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:521:5: prefix_expr_op prefix_expr
				{
				DebugLocation(521, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4479);
				prefix_expr_op336=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op336.Tree);
				DebugLocation(521, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4481);
				prefix_expr337=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr337.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 521:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(521, 36);
					// SugarCpp.g:521:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(521, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(521, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(521, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:522:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(522, 4);
				string_literal338=(IToken)Match(input,139,Follow._139_in_prefix_expr4497);  
				stream_139.Add(string_literal338);

				DebugLocation(522, 10);
				PushFollow(Follow._type_name_in_prefix_expr4499);
				type_name339=type_name();
				PopFollow();

				stream_type_name.Add(type_name339.Tree);
				DebugLocation(522, 20);
				char_literal340=(IToken)Match(input,81,Follow._81_in_prefix_expr4501);  
				stream_81.Add(char_literal340);

				DebugLocation(522, 24);
				// SugarCpp.g:522:24: ( expr_list )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==IDENT||LA143_0==NUMBER||LA143_0==STRING||LA143_0==74||LA143_0==79||LA143_0==81||LA143_0==83||(LA143_0>=85 && LA143_0<=86)||(LA143_0>=89 && LA143_0<=90)||(LA143_0>=115 && LA143_0<=116)||LA143_0==139||LA143_0==154))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:24: expr_list
					{
					DebugLocation(522, 24);
					PushFollow(Follow._expr_list_in_prefix_expr4503);
					expr_list341=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list341.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(522, 35);
				char_literal342=(IToken)Match(input,82,Follow._82_in_prefix_expr4506);  
				stream_82.Add(char_literal342);



				{
				// AST REWRITE
				// elements: expr_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 522:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(522, 42);
					// SugarCpp.g:522:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(522, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(522, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(522, 68);
					// SugarCpp.g:522:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(522, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:523:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(523, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4522);
				suffix_expr343=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr343.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 68);
			LeaveRule("prefix_expr", 68);
			LeaveRule_prefix_expr();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:526:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 69);
		TraceIn("expr_list", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal345_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(526, 1);
		try
		{
			// SugarCpp.g:527:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:527:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(527, 4);
			PushFollow(Follow._expr_in_expr_list4534);
			expr344=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr344.Tree);
			DebugLocation(527, 9);
			// SugarCpp.g:527:9: ( ',' ! expr )*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==88))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:527:10: ',' ! expr
					{
					DebugLocation(527, 13);
					char_literal345=(IToken)Match(input,88,Follow._88_in_expr_list4537); 
					DebugLocation(527, 15);
					PushFollow(Follow._expr_in_expr_list4540);
					expr346=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr346.Tree);

					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 69);
			LeaveRule("expr_list", 69);
			LeaveRule_expr_list();
		}
		DebugLocation(528, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:530:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 70);
		TraceIn("suffix_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal347 = default(IToken);
		IToken string_literal348 = default(IToken);
		IToken char_literal349 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken char_literal353 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken char_literal356 = default(IToken);
		IToken char_literal358 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident350 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list357 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal347_tree = default(CommonTree);
		CommonTree string_literal348_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree char_literal353_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal356_tree = default(CommonTree);
		CommonTree char_literal358_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(530, 1);
		try
		{
			// SugarCpp.g:531:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:531:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(531, 4);
			// SugarCpp.g:531:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:531:5: a= atom_expr
			{
			DebugLocation(531, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4556);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 531:17: -> $a
			{
				DebugLocation(531, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(531, 24);
			// SugarCpp.g:531:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=7;
				try { DebugEnterDecision(148, false);
				switch (input.LA(1))
				{
				case 86:
					{
					alt148 = 1;
					}
					break;
				case 90:
					{
					alt148 = 2;
					}
					break;
				case 94:
					{
					alt148 = 3;
					}
					break;
				case 92:
					{
					alt148 = 4;
					}
					break;
				case 81:
					{
					alt148 = 5;
					}
					break;
				case 116:
					{
					alt148 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:531:26: '++'
					{
					DebugLocation(531, 26);
					string_literal347=(IToken)Match(input,86,Follow._86_in_suffix_expr4566);  
					stream_86.Add(string_literal347);



					{
					// AST REWRITE
					// elements: suffix_expr, 86
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 531:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(531, 34);
						// SugarCpp.g:531:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(531, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(531, 48);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(531, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:532:14: '--'
					{
					DebugLocation(532, 14);
					string_literal348=(IToken)Match(input,90,Follow._90_in_suffix_expr4592);  
					stream_90.Add(string_literal348);



					{
					// AST REWRITE
					// elements: suffix_expr, 90
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 532:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(532, 22);
						// SugarCpp.g:532:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(532, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(532, 36);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(532, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:533:11: '.' ident
					{
					DebugLocation(533, 11);
					char_literal349=(IToken)Match(input,94,Follow._94_in_suffix_expr4615);  
					stream_94.Add(char_literal349);

					DebugLocation(533, 15);
					PushFollow(Follow._ident_in_suffix_expr4617);
					ident350=ident();
					PopFollow();

					stream_ident.Add(ident350.Tree);


					{
					// AST REWRITE
					// elements: 94, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 533:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(533, 24);
						// SugarCpp.g:533:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(533, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(533, 38);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(533, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(533, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:534:11: '->' ident
					{
					DebugLocation(534, 11);
					string_literal351=(IToken)Match(input,92,Follow._92_in_suffix_expr4642);  
					stream_92.Add(string_literal351);

					DebugLocation(534, 16);
					PushFollow(Follow._ident_in_suffix_expr4644);
					ident352=ident();
					PopFollow();

					stream_ident.Add(ident352.Tree);


					{
					// AST REWRITE
					// elements: 92, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 534:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(534, 25);
						// SugarCpp.g:534:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(534, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(534, 39);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(534, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(534, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:535:11: '(' ( expr_list )? ')'
					{
					DebugLocation(535, 11);
					char_literal353=(IToken)Match(input,81,Follow._81_in_suffix_expr4669);  
					stream_81.Add(char_literal353);

					DebugLocation(535, 15);
					// SugarCpp.g:535:15: ( expr_list )?
					int alt146=2;
					try { DebugEnterSubRule(146);
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==IDENT||LA146_0==NUMBER||LA146_0==STRING||LA146_0==74||LA146_0==79||LA146_0==81||LA146_0==83||(LA146_0>=85 && LA146_0<=86)||(LA146_0>=89 && LA146_0<=90)||(LA146_0>=115 && LA146_0<=116)||LA146_0==139||LA146_0==154))
					{
						alt146 = 1;
					}
					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:15: expr_list
						{
						DebugLocation(535, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4671);
						expr_list354=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list354.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(146); }

					DebugLocation(535, 26);
					char_literal355=(IToken)Match(input,82,Follow._82_in_suffix_expr4674);  
					stream_82.Add(char_literal355);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 535:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(535, 33);
						// SugarCpp.g:535:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(535, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(535, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(535, 58);
						// SugarCpp.g:535:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(535, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:536:11: '[' ( expr_list )? ']'
					{
					DebugLocation(536, 11);
					char_literal356=(IToken)Match(input,116,Follow._116_in_suffix_expr4698);  
					stream_116.Add(char_literal356);

					DebugLocation(536, 15);
					// SugarCpp.g:536:15: ( expr_list )?
					int alt147=2;
					try { DebugEnterSubRule(147);
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==IDENT||LA147_0==NUMBER||LA147_0==STRING||LA147_0==74||LA147_0==79||LA147_0==81||LA147_0==83||(LA147_0>=85 && LA147_0<=86)||(LA147_0>=89 && LA147_0<=90)||(LA147_0>=115 && LA147_0<=116)||LA147_0==139||LA147_0==154))
					{
						alt147 = 1;
					}
					} finally { DebugExitDecision(147); }
					switch (alt147)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:15: expr_list
						{
						DebugLocation(536, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4700);
						expr_list357=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list357.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(147); }

					DebugLocation(536, 26);
					char_literal358=(IToken)Match(input,117,Follow._117_in_suffix_expr4703);  
					stream_117.Add(char_literal358);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 536:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(536, 33);
						// SugarCpp.g:536:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(536, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(536, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(536, 58);
						// SugarCpp.g:536:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(536, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 70);
			LeaveRule("suffix_expr", 70);
			LeaveRule_suffix_expr();
		}
		DebugLocation(539, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:541:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 71);
		TraceIn("atom_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER359 = default(IToken);
		IToken STRING361 = default(IToken);
		IToken char_literal362 = default(IToken);
		IToken char_literal364 = default(IToken);
		IToken char_literal366 = default(IToken);
		IToken char_literal368 = default(IToken);
		IToken char_literal369 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident363 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER359_tree = default(CommonTree);
		CommonTree STRING361_tree = default(CommonTree);
		CommonTree char_literal362_tree = default(CommonTree);
		CommonTree char_literal364_tree = default(CommonTree);
		CommonTree char_literal366_tree = default(CommonTree);
		CommonTree char_literal368_tree = default(CommonTree);
		CommonTree char_literal369_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(541, 1);
		try
		{
			// SugarCpp.g:542:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt151=5;
			try { DebugEnterDecision(151, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt151 = 1;
				}
				break;
			case IDENT:
				{
				alt151 = 2;
				}
				break;
			case STRING:
				{
				alt151 = 3;
				}
				break;
			case 115:
				{
				alt151 = 4;
				}
				break;
			case 81:
				{
				alt151 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:542:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(542, 4);
				NUMBER359=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4749); 
				NUMBER359_tree = (CommonTree)adaptor.Create(NUMBER359);
				adaptor.AddChild(root_0, NUMBER359_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:543:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._ident_in_atom_expr4754);
				ident360=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident360.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:544:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(544, 4);
				STRING361=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4759); 
				STRING361_tree = (CommonTree)adaptor.Create(STRING361);
				adaptor.AddChild(root_0, STRING361_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:545:4: '@' ident
				{
				DebugLocation(545, 4);
				char_literal362=(IToken)Match(input,115,Follow._115_in_atom_expr4764);  
				stream_115.Add(char_literal362);

				DebugLocation(545, 8);
				PushFollow(Follow._ident_in_atom_expr4766);
				ident363=ident();
				PopFollow();

				stream_ident.Add(ident363.Tree);


				{
				// AST REWRITE
				// elements: ident, 115
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 545:14: -> ^( '@' ident )
				{
					DebugLocation(545, 17);
					// SugarCpp.g:545:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(545, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_115.NextNode(), root_1);

					DebugLocation(545, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:546:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(546, 4);
				char_literal364=(IToken)Match(input,81,Follow._81_in_atom_expr4779);  
				stream_81.Add(char_literal364);

				DebugLocation(546, 8);
				PushFollow(Follow._expr_in_atom_expr4781);
				expr365=expr();
				PopFollow();

				stream_expr.Add(expr365.Tree);
				DebugLocation(546, 13);
				// SugarCpp.g:546:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				int LA150_0 = input.LA(1);

				if ((LA150_0==88))
				{
					alt150 = 1;
				}
				else if ((LA150_0==82))
				{
					alt150 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:546:15: ( ',' expr )+ ')'
					{
					DebugLocation(546, 15);
					// SugarCpp.g:546:15: ( ',' expr )+
					int cnt149=0;
					try { DebugEnterSubRule(149);
					while (true)
					{
						int alt149=2;
						try { DebugEnterDecision(149, false);
						int LA149_0 = input.LA(1);

						if ((LA149_0==88))
						{
							alt149 = 1;
						}


						} finally { DebugExitDecision(149); }
						switch (alt149)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:546:16: ',' expr
							{
							DebugLocation(546, 16);
							char_literal366=(IToken)Match(input,88,Follow._88_in_atom_expr4786);  
							stream_88.Add(char_literal366);

							DebugLocation(546, 20);
							PushFollow(Follow._expr_in_atom_expr4788);
							expr367=expr();
							PopFollow();

							stream_expr.Add(expr367.Tree);

							}
							break;

						default:
							if (cnt149 >= 1)
								goto loop149;

							EarlyExitException eee149 = new EarlyExitException( 149, input );
							DebugRecognitionException(eee149);
							throw eee149;
						}
						cnt149++;
					}
					loop149:
						;

					} finally { DebugExitSubRule(149); }

					DebugLocation(546, 27);
					char_literal368=(IToken)Match(input,82,Follow._82_in_atom_expr4792);  
					stream_82.Add(char_literal368);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(546, 34);
						// SugarCpp.g:546:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(546, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(546, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:547:15: ')'
					{
					DebugLocation(547, 15);
					char_literal369=(IToken)Match(input,82,Follow._82_in_atom_expr4817);  
					stream_82.Add(char_literal369);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 547:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(547, 22);
						// SugarCpp.g:547:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(547, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(547, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(150); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 71);
			LeaveRule("atom_expr", 71);
			LeaveRule_atom_expr();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:551:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 72);
		TraceIn("lvalue_item", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal370 = default(IToken);
		IToken string_literal371 = default(IToken);
		IToken char_literal372 = default(IToken);
		IToken string_literal374 = default(IToken);
		IToken char_literal377 = default(IToken);
		IToken char_literal379 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken char_literal382 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident373 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter376 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list378 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal370_tree = default(CommonTree);
		CommonTree string_literal371_tree = default(CommonTree);
		CommonTree char_literal372_tree = default(CommonTree);
		CommonTree string_literal374_tree = default(CommonTree);
		CommonTree char_literal377_tree = default(CommonTree);
		CommonTree char_literal379_tree = default(CommonTree);
		CommonTree char_literal380_tree = default(CommonTree);
		CommonTree char_literal382_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(551, 1);
		try
		{
			// SugarCpp.g:552:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:552:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(552, 4);
			// SugarCpp.g:552:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:552:5: a= lvalue_atom
			{
			DebugLocation(552, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4847);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 552:19: -> $a
			{
				DebugLocation(552, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(552, 26);
			// SugarCpp.g:552:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=7;
				try { DebugEnterDecision(155, false);
				switch (input.LA(1))
				{
				case 86:
					{
					alt155 = 1;
					}
					break;
				case 90:
					{
					alt155 = 2;
					}
					break;
				case 94:
					{
					alt155 = 3;
					}
					break;
				case 92:
					{
					alt155 = 4;
					}
					break;
				case 81:
				case 101:
					{
					alt155 = 5;
					}
					break;
				case 116:
					{
					alt155 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:552:28: '++'
					{
					DebugLocation(552, 28);
					string_literal370=(IToken)Match(input,86,Follow._86_in_lvalue_item4857);  
					stream_86.Add(string_literal370);



					{
					// AST REWRITE
					// elements: lvalue_item, 86
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 552:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(552, 36);
						// SugarCpp.g:552:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(552, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(552, 50);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(552, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:553:16: '--'
					{
					DebugLocation(553, 16);
					string_literal371=(IToken)Match(input,90,Follow._90_in_lvalue_item4885);  
					stream_90.Add(string_literal371);



					{
					// AST REWRITE
					// elements: 90, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 553:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(553, 24);
						// SugarCpp.g:553:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(553, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(553, 38);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(553, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:554:13: '.' ident
					{
					DebugLocation(554, 13);
					char_literal372=(IToken)Match(input,94,Follow._94_in_lvalue_item4910);  
					stream_94.Add(char_literal372);

					DebugLocation(554, 17);
					PushFollow(Follow._ident_in_lvalue_item4912);
					ident373=ident();
					PopFollow();

					stream_ident.Add(ident373.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 94, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 554:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(554, 26);
						// SugarCpp.g:554:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(554, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(554, 40);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(554, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(554, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:555:13: '->' ident
					{
					DebugLocation(555, 13);
					string_literal374=(IToken)Match(input,92,Follow._92_in_lvalue_item4939);  
					stream_92.Add(string_literal374);

					DebugLocation(555, 18);
					PushFollow(Follow._ident_in_lvalue_item4941);
					ident375=ident();
					PopFollow();

					stream_ident.Add(ident375.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 555:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(555, 27);
						// SugarCpp.g:555:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(555, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(555, 41);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(555, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(555, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:556:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(556, 13);
					// SugarCpp.g:556:13: ( generic_parameter )?
					int alt152=2;
					try { DebugEnterSubRule(152);
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==101))
					{
						alt152 = 1;
					}
					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:556:13: generic_parameter
						{
						DebugLocation(556, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4968);
						generic_parameter376=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter376.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(152); }

					DebugLocation(556, 32);
					char_literal377=(IToken)Match(input,81,Follow._81_in_lvalue_item4971);  
					stream_81.Add(char_literal377);

					DebugLocation(556, 36);
					// SugarCpp.g:556:36: ( expr_list )?
					int alt153=2;
					try { DebugEnterSubRule(153);
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==IDENT||LA153_0==NUMBER||LA153_0==STRING||LA153_0==74||LA153_0==79||LA153_0==81||LA153_0==83||(LA153_0>=85 && LA153_0<=86)||(LA153_0>=89 && LA153_0<=90)||(LA153_0>=115 && LA153_0<=116)||LA153_0==139||LA153_0==154))
					{
						alt153 = 1;
					}
					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:556:36: expr_list
						{
						DebugLocation(556, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4973);
						expr_list378=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list378.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(153); }

					DebugLocation(556, 47);
					char_literal379=(IToken)Match(input,82,Follow._82_in_lvalue_item4976);  
					stream_82.Add(char_literal379);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 556:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(556, 54);
						// SugarCpp.g:556:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(556, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(556, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(556, 79);
						// SugarCpp.g:556:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(556, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(556, 98);
						// SugarCpp.g:556:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(556, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:557:13: '[' ( expr_list )? ']'
					{
					DebugLocation(557, 13);
					char_literal380=(IToken)Match(input,116,Follow._116_in_lvalue_item5005);  
					stream_116.Add(char_literal380);

					DebugLocation(557, 17);
					// SugarCpp.g:557:17: ( expr_list )?
					int alt154=2;
					try { DebugEnterSubRule(154);
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==IDENT||LA154_0==NUMBER||LA154_0==STRING||LA154_0==74||LA154_0==79||LA154_0==81||LA154_0==83||(LA154_0>=85 && LA154_0<=86)||(LA154_0>=89 && LA154_0<=90)||(LA154_0>=115 && LA154_0<=116)||LA154_0==139||LA154_0==154))
					{
						alt154 = 1;
					}
					} finally { DebugExitDecision(154); }
					switch (alt154)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:557:17: expr_list
						{
						DebugLocation(557, 17);
						PushFollow(Follow._expr_list_in_lvalue_item5007);
						expr_list381=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list381.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(154); }

					DebugLocation(557, 28);
					char_literal382=(IToken)Match(input,117,Follow._117_in_lvalue_item5010);  
					stream_117.Add(char_literal382);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 557:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(557, 35);
						// SugarCpp.g:557:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(557, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(557, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(557, 60);
						// SugarCpp.g:557:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(557, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 72);
			LeaveRule("lvalue_item", 72);
			LeaveRule_lvalue_item();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:561:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 73);
		TraceIn("lvalue_atom", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal384 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident385 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal384_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(561, 1);
		try
		{
			// SugarCpp.g:562:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt156=2;
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==IDENT))
			{
				alt156 = 1;
			}
			else if ((LA156_0==115))
			{
				alt156 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:562:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(562, 4);
				PushFollow(Follow._ident_in_lvalue_atom5049);
				ident383=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident383.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:563:4: '@' ident
				{
				DebugLocation(563, 4);
				char_literal384=(IToken)Match(input,115,Follow._115_in_lvalue_atom5054);  
				stream_115.Add(char_literal384);

				DebugLocation(563, 8);
				PushFollow(Follow._ident_in_lvalue_atom5056);
				ident385=ident();
				PopFollow();

				stream_ident.Add(ident385.Tree);


				{
				// AST REWRITE
				// elements: 115, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 563:14: -> ^( '@' ident )
				{
					DebugLocation(563, 17);
					// SugarCpp.g:563:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(563, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_115.NextNode(), root_1);

					DebugLocation(563, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 73);
			LeaveRule("lvalue_atom", 73);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:566:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 74);
		TraceIn("lvalue", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal386 = default(IToken);
		IToken char_literal388 = default(IToken);
		IToken char_literal390 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item389 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item391 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal386_tree = default(CommonTree);
		CommonTree char_literal388_tree = default(CommonTree);
		CommonTree char_literal390_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(566, 1);
		try
		{
			// SugarCpp.g:567:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt158=2;
			try { DebugEnterDecision(158, false);
			int LA158_0 = input.LA(1);

			if ((LA158_0==81))
			{
				alt158 = 1;
			}
			else if ((LA158_0==IDENT||LA158_0==115))
			{
				alt158 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:567:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(567, 4);
				char_literal386=(IToken)Match(input,81,Follow._81_in_lvalue5075);  
				stream_81.Add(char_literal386);

				DebugLocation(567, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5077);
				lvalue_item387=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item387.Tree);
				DebugLocation(567, 20);
				// SugarCpp.g:567:20: ( ',' lvalue_item )+
				int cnt157=0;
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==88))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:567:21: ',' lvalue_item
						{
						DebugLocation(567, 21);
						char_literal388=(IToken)Match(input,88,Follow._88_in_lvalue5080);  
						stream_88.Add(char_literal388);

						DebugLocation(567, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5082);
						lvalue_item389=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item389.Tree);

						}
						break;

					default:
						if (cnt157 >= 1)
							goto loop157;

						EarlyExitException eee157 = new EarlyExitException( 157, input );
						DebugRecognitionException(eee157);
						throw eee157;
					}
					cnt157++;
				}
				loop157:
					;

				} finally { DebugExitSubRule(157); }

				DebugLocation(567, 39);
				char_literal390=(IToken)Match(input,82,Follow._82_in_lvalue5086);  
				stream_82.Add(char_literal390);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 567:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(567, 46);
					// SugarCpp.g:567:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(567, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(567, 60);
					// SugarCpp.g:567:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(567, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:568:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(568, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5100);
				lvalue_item391=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item391.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 74);
			LeaveRule("lvalue", 74);
			LeaveRule_lvalue();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:571:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 75);
		TraceIn("ident", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT392 = default(IToken);
		IToken string_literal393 = default(IToken);
		IToken IDENT394 = default(IToken);

		CommonTree IDENT392_tree = default(CommonTree);
		CommonTree string_literal393_tree = default(CommonTree);
		CommonTree IDENT394_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:572:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(572, 4);
			IDENT392=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5111); 
			IDENT392_tree = (CommonTree)adaptor.Create(IDENT392);
			adaptor.AddChild(root_0, IDENT392_tree);
			DebugLocation(572, 10);
			// SugarCpp.g:572:10: ( '::' IDENT )*
			try { DebugEnterSubRule(159);
			while (true)
			{
				int alt159=2;
				try { DebugEnterDecision(159, false);
				int LA159_0 = input.LA(1);

				if ((LA159_0==99))
				{
					alt159 = 1;
				}


				} finally { DebugExitDecision(159); }
				switch ( alt159 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:11: '::' IDENT
					{
					DebugLocation(572, 11);
					string_literal393=(IToken)Match(input,99,Follow._99_in_ident5114); 
					string_literal393_tree = (CommonTree)adaptor.Create(string_literal393);
					adaptor.AddChild(root_0, string_literal393_tree);
					DebugLocation(572, 16);
					IDENT394=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5116); 
					IDENT394_tree = (CommonTree)adaptor.Create(IDENT394);
					adaptor.AddChild(root_0, IDENT394_tree);

					}
					break;

				default:
					goto loop159;
				}
			}

			loop159:
				;

			} finally { DebugExitSubRule(159); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 75);
			LeaveRule("ident", 75);
			LeaveRule_ident();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:575:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 76);
		TraceIn("infix_func", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal395 = default(IToken);
		IToken char_literal397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident396 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal395_tree = default(CommonTree);
		CommonTree char_literal397_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(575, 1);
		try
		{
			// SugarCpp.g:576:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:576:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(576, 7);
			char_literal395=(IToken)Match(input,120,Follow._120_in_infix_func5129); 
			DebugLocation(576, 9);
			PushFollow(Follow._ident_in_infix_func5132);
			ident396=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident396.Tree);
			DebugLocation(576, 18);
			char_literal397=(IToken)Match(input,120,Follow._120_in_infix_func5134); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 76);
			LeaveRule("infix_func", 76);
			LeaveRule_infix_func();
		}
		DebugLocation(577, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA61 dfa61;
	private DFA73 dfa73;
	private DFA81 dfa81;
	private DFA86 dfa86;
	private DFA99 dfa99;
	private DFA115 dfa115;
	private DFA114 dfa114;
	private DFA120 dfa120;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa61 = new DFA61( this );
		dfa73 = new DFA73( this );
		dfa81 = new DFA81( this );
		dfa86 = new DFA86( this );
		dfa99 = new DFA99( this );
		dfa115 = new DFA115( this );
		dfa114 = new DFA114( this );
		dfa120 = new DFA120( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x29\x1\xFFFF\x1\x29\x6\xFFFF\x2\x51\x1\x29\x1\xFFFF\x3\x29\x1\x30"+
			"\x2\x29\x1\x51\x3\x52\x2\x51\x1\x29\x3\x52\x1\x29\x1\x58\x5\x29\x1\x58"+
			"\x1\x29\x4\x52\x1\x51\xA\x52\x2\x29\x1\x58\x2\x29\x1\x58\x2\x29\xA\x52"+
			"\x2\x29\x2\x52";
		private const string DFA4_maxS =
			"\x1\x9A\x1\x7E\x1\xFFFF\x1\x9A\x6\xFFFF\x2\x75\x1\x29\x1\xFFFF\x1\x29"+
			"\x1\x36\x1\x7E\x1\x30\x1\x36\x1\x9A\x1\x75\x2\x58\x1\x63\x2\x75\x1\x9A"+
			"\x2\x58\x1\x63\x1\x36\x1\x75\x2\x29\x3\x36\x1\x75\x1\x29\x2\x58\x2\x63"+
			"\x1\x75\x2\x58\x1\x63\x2\x58\x1\x63\x2\x58\x2\x63\x1\x29\x1\x36\x1\x75"+
			"\x1\x29\x1\x36\x1\x75\x2\x29\x1\x63\x2\x58\x2\x63\x2\x58\x3\x63\x2\x29"+
			"\x2\x63";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4A\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x4"+
				"\xFFFF\x1\x2",
				"\x1\xA\x54\xFFFF\x1\xB",
				"",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x54\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x43\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x3\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "205:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x30\x1\x9A\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x43\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "249:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x30\x1\x9A\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x43\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "257:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x30\x1\x9A\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x43\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "261:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA61 : DFA
	{
		private const string DFA61_eotS =
			"\xF\xFFFF";
		private const string DFA61_eofS =
			"\xF\xFFFF";
		private const string DFA61_minS =
			"\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF\x3\x29\x1\x4F\x3\x29\x2\x4F\x1\x29\x1"+
			"\x4F";
		private const string DFA61_maxS =
			"\x1\x9A\x1\xFFFF\x1\x9A\x1\xFFFF\x1\x29\x1\x93\x1\x9A\x1\x74\x1\x29\x1"+
			"\x93\x1\x9A\x2\x74\x1\x29\x1\x74";
		private const string DFA61_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA61_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA61_transitionS =
			{
				"\x1\x2\x54\xFFFF\x1\x1\x14\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x43\xFFFF\x1\x1\x10\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x54\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA61_eot = DFA.UnpackEncodedString(DFA61_eotS);
		private static readonly short[] DFA61_eof = DFA.UnpackEncodedString(DFA61_eofS);
		private static readonly char[] DFA61_min = DFA.UnpackEncodedStringToUnsignedChars(DFA61_minS);
		private static readonly char[] DFA61_max = DFA.UnpackEncodedStringToUnsignedChars(DFA61_maxS);
		private static readonly short[] DFA61_accept = DFA.UnpackEncodedString(DFA61_acceptS);
		private static readonly short[] DFA61_special = DFA.UnpackEncodedString(DFA61_specialS);
		private static readonly short[][] DFA61_transition;

		static DFA61()
		{
			int numStates = DFA61_transitionS.Length;
			DFA61_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA61_transition[i] = DFA.UnpackEncodedString(DFA61_transitionS[i]);
			}
		}

		public DFA61( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}

		public override string Description { get { return "308:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA73 : DFA
	{
		private const string DFA73_eotS =
			"\x9\xFFFF";
		private const string DFA73_eofS =
			"\x9\xFFFF";
		private const string DFA73_minS =
			"\x1\x29\x1\x30\x4\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA73_maxS =
			"\x1\x95\x1\x98\x4\xFFFF\x1\x29\x1\xFFFF\x1\x98";
		private const string DFA73_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA73_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA73_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x5\x21\xFFFF\x1\x5\x19\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x3\xFFFF\x1\x3",
				"\x1\x5\x1C\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1C\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA73_eot = DFA.UnpackEncodedString(DFA73_eotS);
		private static readonly short[] DFA73_eof = DFA.UnpackEncodedString(DFA73_eofS);
		private static readonly char[] DFA73_min = DFA.UnpackEncodedStringToUnsignedChars(DFA73_minS);
		private static readonly char[] DFA73_max = DFA.UnpackEncodedStringToUnsignedChars(DFA73_maxS);
		private static readonly short[] DFA73_accept = DFA.UnpackEncodedString(DFA73_acceptS);
		private static readonly short[] DFA73_special = DFA.UnpackEncodedString(DFA73_specialS);
		private static readonly short[][] DFA73_transition;

		static DFA73()
		{
			int numStates = DFA73_transitionS.Length;
			DFA73_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA73_transition[i] = DFA.UnpackEncodedString(DFA73_transitionS[i]);
			}
		}

		public DFA73( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 73;
			this.eot = DFA73_eot;
			this.eof = DFA73_eof;
			this.min = DFA73_min;
			this.max = DFA73_max;
			this.accept = DFA73_accept;
			this.special = DFA73_special;
			this.transition = DFA73_transition;
		}

		public override string Description { get { return "334:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x4\xFFFF";
		private const string DFA81_eofS =
			"\x4\xFFFF";
		private const string DFA81_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA81_maxS =
			"\x1\x81\x1\x96\x2\xFFFF";
		private const string DFA81_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA81_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x1\x50\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x20\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "361:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA86 : DFA
	{
		private const string DFA86_eotS =
			"\x4\xFFFF";
		private const string DFA86_eofS =
			"\x4\xFFFF";
		private const string DFA86_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA86_maxS =
			"\x1\x81\x1\x96\x2\xFFFF";
		private const string DFA86_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA86_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA86_transitionS =
			{
				"\x1\x1\x50\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x20\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
		private static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
		private static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
		private static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
		private static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
		private static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
		private static readonly short[][] DFA86_transition;

		static DFA86()
		{
			int numStates = DFA86_transitionS.Length;
			DFA86_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA86_transition[i] = DFA.UnpackEncodedString(DFA86_transitionS[i]);
			}
		}

		public DFA86( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}

		public override string Description { get { return "364:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x6\xFFFF";
		private const string DFA99_eofS =
			"\x6\xFFFF";
		private const string DFA99_minS =
			"\x1\x29\x1\x30\x1\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA99_maxS =
			"\x1\x9A\x1\x99\x1\xFFFF\x1\x29\x1\xFFFF\x1\x99";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA99_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x13\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x2\x1A\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x1A\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "390:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA115 : DFA
	{
		private const string DFA115_eotS =
			"\x7\xFFFF";
		private const string DFA115_eofS =
			"\x7\xFFFF";
		private const string DFA115_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA115_maxS =
			"\x5\x9A\x2\xFFFF";
		private const string DFA115_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA115_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA115_transitionS =
			{
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x13"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x13"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x13"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x13"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x13"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA115_eot = DFA.UnpackEncodedString(DFA115_eotS);
		private static readonly short[] DFA115_eof = DFA.UnpackEncodedString(DFA115_eofS);
		private static readonly char[] DFA115_min = DFA.UnpackEncodedStringToUnsignedChars(DFA115_minS);
		private static readonly char[] DFA115_max = DFA.UnpackEncodedStringToUnsignedChars(DFA115_maxS);
		private static readonly short[] DFA115_accept = DFA.UnpackEncodedString(DFA115_acceptS);
		private static readonly short[] DFA115_special = DFA.UnpackEncodedString(DFA115_specialS);
		private static readonly short[][] DFA115_transition;

		static DFA115()
		{
			int numStates = DFA115_transitionS.Length;
			DFA115_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA115_transition[i] = DFA.UnpackEncodedString(DFA115_transitionS[i]);
			}
		}

		public DFA115( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}

		public override string Description { get { return "427:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA114 : DFA
	{
		private const string DFA114_eotS =
			"\x7\xFFFF";
		private const string DFA114_eofS =
			"\x7\xFFFF";
		private const string DFA114_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA114_maxS =
			"\x1\x75\x4\x9A\x2\xFFFF";
		private const string DFA114_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA114_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA114_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x3\x5\xFFFF\x1\x2\x27\xFFFF\x1\x1\x1C\xFFFF\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x13"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x13"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x13"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x13"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA114_eot = DFA.UnpackEncodedString(DFA114_eotS);
		private static readonly short[] DFA114_eof = DFA.UnpackEncodedString(DFA114_eofS);
		private static readonly char[] DFA114_min = DFA.UnpackEncodedStringToUnsignedChars(DFA114_minS);
		private static readonly char[] DFA114_max = DFA.UnpackEncodedStringToUnsignedChars(DFA114_maxS);
		private static readonly short[] DFA114_accept = DFA.UnpackEncodedString(DFA114_acceptS);
		private static readonly short[] DFA114_special = DFA.UnpackEncodedString(DFA114_specialS);
		private static readonly short[][] DFA114_transition;

		static DFA114()
		{
			int numStates = DFA114_transitionS.Length;
			DFA114_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA114_transition[i] = DFA.UnpackEncodedString(DFA114_transitionS[i]);
			}
		}

		public DFA114( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 114;
			this.eot = DFA114_eot;
			this.eof = DFA114_eof;
			this.min = DFA114_min;
			this.max = DFA114_max;
			this.accept = DFA114_accept;
			this.special = DFA114_special;
			this.transition = DFA114_transition;
		}

		public override string Description { get { return "()* loopback of 427:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA120 : DFA
	{
		private const string DFA120_eotS =
			"\xB\xFFFF";
		private const string DFA120_eofS =
			"\xB\xFFFF";
		private const string DFA120_minS =
			"\x2\x29\x1\xFFFF\x1\x4B\x1\xFFFF\x2\x29\x2\x4B\x1\x29\x1\x4B";
		private const string DFA120_maxS =
			"\x2\x9A\x1\xFFFF\x1\x99\x1\xFFFF\x1\x29\x1\x9A\x2\x99\x1\x29\x1\x99";
		private const string DFA120_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA120_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA120_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x13\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x17\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x13\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x13\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
		private static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
		private static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
		private static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
		private static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
		private static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
		private static readonly short[][] DFA120_transition;

		static DFA120()
		{
			int numStates = DFA120_transitionS.Length;
			DFA120_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA120_transition[i] = DFA.UnpackEncodedString(DFA120_transitionS[i]);
			}
		}

		public DFA120( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 120;
			this.eot = DFA120_eot;
			this.eof = DFA120_eof;
			this.min = DFA120_min;
			this.max = DFA120_max;
			this.accept = DFA120_accept;
			this.special = DFA120_special;
			this.transition = DFA120_transition;
		}

		public override string Description { get { return "431:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root515 = new BitSet(new ulong[]{0x1020000000000UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _global_block_in_root518 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block540 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block542 = new BitSet(new ulong[]{0x1020000000002UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _func_def_in_node565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item633 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_attribute_item636 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item638 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _88_in_attribute_item641 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item643 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _82_in_attribute_item647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_attribute_item665 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_attribute_item668 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item670 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _88_in_attribute_item673 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item675 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _82_in_attribute_item679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_attribute704 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute706 = new BitSet(new ulong[]{0x0UL,0x20000001000000UL});
		public static readonly BitSet _88_in_attribute709 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute711 = new BitSet(new ulong[]{0x0UL,0x20000001000000UL});
		public static readonly BitSet _117_in_attribute715 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute717 = new BitSet(new ulong[]{0x1000000000002UL,0x10000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc736 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc739 = new BitSet(new ulong[]{0x0UL,0x1400000000UL});
		public static readonly BitSet _98_in_global_alloc743 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_global_alloc745 = new BitSet(new ulong[]{0x2UL,0x41000020000UL});
		public static readonly BitSet _106_in_global_alloc750 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _100_in_global_alloc754 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_global_alloc757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_global_alloc817 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_global_alloc819 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_global_alloc822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_global_alloc895 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_global_alloc898 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_global_alloc901 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_global_alloc903 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _attribute_in_global_using940 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_global_using943 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _stmt_using_item_in_global_using945 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _attribute_in_global_typedef969 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_global_typedef972 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_global_typedef974 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_global_typedef976 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_global_typedef978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1002 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_import_def1005 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def1007 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1011 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_import_def1014 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1016 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def1021 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1023 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_enum_def1056 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1058 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_enum_def1060 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _ident_in_enum_def1063 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_enum_def1066 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1068 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _attribute_in_namespace_def1101 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_namespace_def1104 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def1106 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1109 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1112 = new BitSet(new ulong[]{0x1020000000100UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1114 = new BitSet(new ulong[]{0x1020000000100UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _global_block_in_namespace_def1117 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1147 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_class_def1150 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1152 = new BitSet(new ulong[]{0x1000000000002UL,0x2400020000UL});
		public static readonly BitSet _generic_parameter_in_class_def1155 = new BitSet(new ulong[]{0x1000000000002UL,0x400020000UL});
		public static readonly BitSet _81_in_class_def1160 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000UL});
		public static readonly BitSet _func_args_in_class_def1162 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_class_def1164 = new BitSet(new ulong[]{0x1000000000002UL,0x400000000UL});
		public static readonly BitSet _98_in_class_def1169 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1171 = new BitSet(new ulong[]{0x1000000000002UL,0x1000000UL});
		public static readonly BitSet _88_in_class_def1174 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1176 = new BitSet(new ulong[]{0x1000000000002UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1183 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_class_def1186 = new BitSet(new ulong[]{0x1020000000100UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _NEWLINE_in_class_def1188 = new BitSet(new ulong[]{0x1020000000100UL,0x6010000000000000UL,0x42A0444UL});
		public static readonly BitSet _global_block_in_class_def1191 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1236 = new BitSet(new ulong[]{0x2UL,0x10000000008000UL});
		public static readonly BitSet _79_in_type_name1240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_type_name1256 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_type_name1258 = new BitSet(new ulong[]{0x0UL,0x20000001000000UL});
		public static readonly BitSet _88_in_type_name1261 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_type_name1263 = new BitSet(new ulong[]{0x0UL,0x20000001000000UL});
		public static readonly BitSet _117_in_type_name1267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1305 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _83_in_type_star1309 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _type_ident_in_type_template_type1355 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_template_type1359 = new BitSet(new ulong[]{0x20000000000UL,0x4000200000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_type_template_type1362 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _88_in_type_template_type1365 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_type_template_type1367 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _109_in_type_template_type1373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_type_ident1413 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_type_ident1416 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_ident1419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1444 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_generic_parameter_inside1447 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1449 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _101_in_generic_parameter1471 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1473 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_generic_parameter1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1490 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_func_args1493 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1495 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1517 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_func_args_item1519 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_func_args_item1521 = new BitSet(new ulong[]{0x2UL,0x41000020000UL});
		public static readonly BitSet _106_in_func_args_item1526 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _100_in_func_args_item1530 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_func_args_item1533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_func_args_item1581 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_func_args_item1583 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_func_args_item1586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_func_args_item1643 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _modify_expr_in_func_args_item1647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1658 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x4080000UL});
		public static readonly BitSet _type_name_in_func_def1661 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_func_def1664 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1667 = new BitSet(new ulong[]{0x0UL,0x2000020000UL});
		public static readonly BitSet _generic_parameter_in_func_def1669 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_func_def1672 = new BitSet(new ulong[]{0x20000000000UL,0x1000040000UL});
		public static readonly BitSet _func_args_in_func_def1674 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_func_def1677 = new BitSet(new ulong[]{0x1000000000000UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1680 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_func_def1732 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_func_def1734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1775 = new BitSet(new ulong[]{0x1020000000100UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1777 = new BitSet(new ulong[]{0x1020000000100UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_block1782 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1784 = new BitSet(new ulong[]{0x1020000000100UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _DEDENT_in_stmt_block1789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1848 = new BitSet(new ulong[]{0x2UL,0x0UL,0x540030UL});
		public static readonly BitSet _133_in_stmt_expr1858 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_expr1860 = new BitSet(new ulong[]{0x2UL,0x0UL,0x540030UL});
		public static readonly BitSet _146_in_stmt_expr1889 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_expr1891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x540030UL});
		public static readonly BitSet _150_in_stmt_expr1920 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_expr1922 = new BitSet(new ulong[]{0x2UL,0x0UL,0x540030UL});
		public static readonly BitSet _148_in_stmt_expr1951 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_expr1953 = new BitSet(new ulong[]{0x2UL,0x0UL,0x540030UL});
		public static readonly BitSet _132_in_stmt_expr1982 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _for_item_in_stmt_expr1984 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x540030UL});
		public static readonly BitSet _88_in_stmt_expr1987 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _for_item_in_stmt_expr1989 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x540030UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_defer2062 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_defer2064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_defer2077 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_defer2079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_typedef2098 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2100 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_stmt_typedef2102 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_using_item2127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_using2135 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2137 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _141_in_stmt_return2158 = new BitSet(new ulong[]{0x42020000000002UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_return2160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_if2181 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_if2183 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2186 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2189 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2192 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_stmt_if2195 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2197 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_if2232 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_if2234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_if2259 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_if2261 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2264 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2267 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2270 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_stmt_if2273 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2275 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_if2314 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_if2316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_stmt_while2351 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_while2353 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2357 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_while2384 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_while2386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2414 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_while2416 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2420 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_while2447 = new BitSet(new ulong[]{0x20000000000UL,0x8008000000020000UL,0x772238UL});
		public static readonly BitSet _stmt_in_stmt_while2449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_stmt_while2477 = new BitSet(new ulong[]{0x43020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_while2479 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2482 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2507 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_for_range2509 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_for_range2513 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8001UL});
		public static readonly BitSet _143_in_for_range2516 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_for_range2520 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _123_in_for_range2523 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_for_range2527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_for_range2556 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_for_range2560 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _123_in_for_range2563 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_for_range2567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_stmt_for2660 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _for_item_in_stmt_for2664 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_for2667 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _for_item_in_stmt_for2669 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2673 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_try2707 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2709 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2712 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2714 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_stmt_try2717 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2719 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2721 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2747 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_ident_list2750 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2752 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2774 = new BitSet(new ulong[]{0x0UL,0x1400000000UL});
		public static readonly BitSet _98_in_stmt_alloc2778 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2780 = new BitSet(new ulong[]{0x2UL,0x41000020000UL});
		public static readonly BitSet _106_in_stmt_alloc2785 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _100_in_stmt_alloc2789 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_alloc2792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_stmt_alloc2840 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2842 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_stmt_alloc2845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_stmt_alloc2906 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_alloc2910 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_alloc2913 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_alloc2915 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2941 = new BitSet(new ulong[]{0x2UL,0x85050208912000UL,0x1000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2945 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_stmt_modify2948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_stmt_modify2962 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_list_expr2989 = new BitSet(new ulong[]{0x43060000000100UL,0x380000076A8400UL,0x4000800UL});
		public static readonly BitSet _88_in_list_expr2993 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _NEWLINE_in_list_expr2997 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _INDENT_in_list_expr3001 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _DEDENT_in_list_expr3005 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _list_expr_in_list_expr3009 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _88_in_list_expr3013 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _NEWLINE_in_list_expr3017 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _INDENT_in_list_expr3021 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _DEDENT_in_list_expr3025 = new BitSet(new ulong[]{0x43060000000100UL,0x180000076A8400UL,0x4000800UL});
		public static readonly BitSet _list_expr_in_list_expr3029 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _88_in_list_expr3036 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3040 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _INDENT_in_list_expr3044 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3048 = new BitSet(new ulong[]{0x1040000000100UL,0x20000001000000UL});
		public static readonly BitSet _117_in_list_expr3052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_lambda_expr3077 = new BitSet(new ulong[]{0x20000000000UL,0x1000040000UL});
		public static readonly BitSet _func_args_in_lambda_expr3079 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_lambda_expr3082 = new BitSet(new ulong[]{0x0UL,0x100010000000UL});
		public static readonly BitSet _92_in_lambda_expr3086 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_lambda_expr3088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_lambda_expr3128 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_lambda_expr3130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3207 = new BitSet(new ulong[]{0x2UL,0x81051208912000UL,0x1000000UL});
		public static readonly BitSet _set_in_modify_expr3211 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _cond_expr_in_modify_expr3256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_modify_expr3265 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _cond_expr_in_modify_expr3268 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3293 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_cond_expr3302 = new BitSet(new ulong[]{0x42020000000002UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3308 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_cond_expr3312 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3430 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2001000UL});
		public static readonly BitSet _or_op_in_or_expr3441 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _and_expr_in_or_expr3445 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2001000UL});
		public static readonly BitSet _bit_or_in_and_expr3487 = new BitSet(new ulong[]{0x2UL,0x200000000004000UL});
		public static readonly BitSet _and_op_in_and_expr3498 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _bit_or_in_and_expr3502 = new BitSet(new ulong[]{0x2UL,0x200000000004000UL});
		public static readonly BitSet _bit_xor_in_bit_or3533 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_bit_or3542 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _bit_xor_in_bit_or3546 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _bit_and_in_bit_xor3576 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _118_in_bit_xor3585 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _bit_and_in_bit_xor3589 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3619 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_bit_and3628 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _cmp_expr_in_bit_and3632 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _chain_op_in_chain_list3724 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _infix_expr_in_chain_list3726 = new BitSet(new ulong[]{0x2UL,0x6A2000000800UL,0x180UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3740 = new BitSet(new ulong[]{0x2UL,0x6A2000000800UL,0x180UL});
		public static readonly BitSet _101_in_cmp_expr3750 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3754 = new BitSet(new ulong[]{0x20000000002UL,0x6A2000000800UL,0x180UL});
		public static readonly BitSet _ident_in_cmp_expr3760 = new BitSet(new ulong[]{0x20000000000UL,0x200000000000UL});
		public static readonly BitSet _109_in_cmp_expr3763 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_cmp_expr3765 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_cmp_expr3767 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_cmp_expr3770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr3839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr3916 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3920 = new BitSet(new ulong[]{0x2UL,0x6A2000000800UL,0x180UL});
		public static readonly BitSet _chain_list_in_cmp_expr3924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4015 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4025 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _shift_expr_in_infix_expr4029 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4072 = new BitSet(new ulong[]{0x2UL,0x808000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4081 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _add_expr_in_shift_expr4085 = new BitSet(new ulong[]{0x2UL,0x808000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4115 = new BitSet(new ulong[]{0x2UL,0x2200000UL});
		public static readonly BitSet _85_in_add_expr4125 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _mul_expr_in_add_expr4129 = new BitSet(new ulong[]{0x2UL,0x2200000UL});
		public static readonly BitSet _89_in_add_expr4154 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _mul_expr_in_add_expr4158 = new BitSet(new ulong[]{0x2UL,0x2200000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4196 = new BitSet(new ulong[]{0x2UL,0x100081000UL});
		public static readonly BitSet _83_in_mul_expr4206 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr4210 = new BitSet(new ulong[]{0x2UL,0x100081000UL});
		public static readonly BitSet _96_in_mul_expr4240 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr4244 = new BitSet(new ulong[]{0x2UL,0x100081000UL});
		public static readonly BitSet _76_in_mul_expr4274 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr4278 = new BitSet(new ulong[]{0x2UL,0x100081000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4321 = new BitSet(new ulong[]{0x2UL,0xA0000000UL});
		public static readonly BitSet _93_in_selector_expr4331 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4335 = new BitSet(new ulong[]{0x2UL,0xA0000000UL});
		public static readonly BitSet _95_in_selector_expr4361 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4366 = new BitSet(new ulong[]{0x2UL,0xA0000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4406 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _122_in_cast_expr4415 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_cast_expr4417 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_cast_expr4419 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_cast_expr4421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4479 = new BitSet(new ulong[]{0x42020000000000UL,0x80000066A8400UL,0x4000800UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_prefix_expr4497 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_prefix_expr4499 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_prefix_expr4501 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_prefix_expr4503 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_prefix_expr4506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4534 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_expr_list4537 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_expr_list4540 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4556 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _86_in_suffix_expr4566 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _90_in_suffix_expr4592 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _94_in_suffix_expr4615 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4617 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _92_in_suffix_expr4642 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4644 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _81_in_suffix_expr4669 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_suffix_expr4671 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_suffix_expr4674 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _116_in_suffix_expr4698 = new BitSet(new ulong[]{0x42020000000000UL,0x380000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_suffix_expr4700 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_suffix_expr4703 = new BitSet(new ulong[]{0x2UL,0x10000054420000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_atom_expr4764 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_atom_expr4766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_atom_expr4779 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_atom_expr4781 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _88_in_atom_expr4786 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_in_atom_expr4788 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _82_in_atom_expr4792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_atom_expr4817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4847 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _86_in_lvalue_item4857 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _90_in_lvalue_item4885 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _94_in_lvalue_item4910 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4912 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _92_in_lvalue_item4939 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4941 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4968 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_lvalue_item4971 = new BitSet(new ulong[]{0x42020000000000UL,0x180000066E8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_lvalue_item4973 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_lvalue_item4976 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _116_in_lvalue_item5005 = new BitSet(new ulong[]{0x42020000000000UL,0x380000066A8400UL,0x4000800UL});
		public static readonly BitSet _expr_list_in_lvalue_item5007 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_lvalue_item5010 = new BitSet(new ulong[]{0x2UL,0x10002054420000UL});
		public static readonly BitSet _ident_in_lvalue_atom5049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_lvalue_atom5054 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_lvalue5075 = new BitSet(new ulong[]{0x20000000000UL,0x8000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5077 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lvalue5080 = new BitSet(new ulong[]{0x20000000000UL,0x8000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5082 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _82_in_lvalue5086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5111 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_ident5114 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident5116 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _120_in_infix_func5129 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func5132 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_infix_func5134 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
