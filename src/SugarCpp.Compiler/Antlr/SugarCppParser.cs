//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-06-07 18:49:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Def=43;
	public const int Generic_Patameters=44;
	public const int Global_Block=45;
	public const int IDENT=46;
	public const int INDENT=47;
	public const int Ident_List=48;
	public const int Import=49;
	public const int Left_Bracket=50;
	public const int LineComment=51;
	public const int Match_Expr=52;
	public const int Match_Expr_Item=53;
	public const int Match_Tuple=54;
	public const int NEWLINE=55;
	public const int NUMBER=56;
	public const int Namespace=57;
	public const int Right_Bracket=58;
	public const int Root=59;
	public const int SP=60;
	public const int STRING=61;
	public const int Stmt_Block=62;
	public const int Stmt_Defer=63;
	public const int Stmt_Finally=64;
	public const int Stmt_For=65;
	public const int Stmt_If=66;
	public const int Stmt_Loop=67;
	public const int Stmt_Return=68;
	public const int Stmt_Switch=69;
	public const int Stmt_Try=70;
	public const int Stmt_Typedef=71;
	public const int Stmt_Unless=72;
	public const int Stmt_Until=73;
	public const int Stmt_Using=74;
	public const int Stmt_While=75;
	public const int Switch_Item=76;
	public const int Type_Array=77;
	public const int Type_Func=78;
	public const int Type_Ident=79;
	public const int Type_List=80;
	public const int Type_Ref=81;
	public const int Type_Star=82;
	public const int Type_Template=83;
	public const int White_Space=84;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:212:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(212, 1);
		try
		{
			// SugarCpp.g:213:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(213, 4);
			// SugarCpp.g:213:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:4: NEWLINE
					{
					DebugLocation(213, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root587); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(213, 13);
			PushFollow(Follow._global_block_in_root590);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(213, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:30: -> ^( Root global_block )
			{
				DebugLocation(213, 33);
				// SugarCpp.g:213:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(213, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:216:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(216, 1);
		try
		{
			// SugarCpp.g:217:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(217, 4);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==92||LA3_0==131||LA3_0==138||(LA3_0>=140 && LA3_0<=141)||LA3_0==145||LA3_0==149||LA3_0==154||LA3_0==157||LA3_0==161||(LA3_0>=163 && LA3_0<=164)||LA3_0==170||(LA3_0>=173 && LA3_0<=174)||LA3_0==182))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:217:5: node ( NEWLINE )+
					{
					DebugLocation(217, 5);
					PushFollow(Follow._node_in_global_block612);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(217, 10);
					// SugarCpp.g:217:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:217:10: NEWLINE
							{
							DebugLocation(217, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(217, 24);
				// SugarCpp.g:217:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(217, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(217, 39);
				// SugarCpp.g:217:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(217, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(220, 1);
		try
		{
			// SugarCpp.g:221:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:221:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._func_def_in_node637);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:222:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._class_def_in_node642);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:223:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._enum_def_in_node647);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:224:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._global_alloc_in_node652);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:225:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._global_using_in_node657);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:226:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_typedef_in_node662);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:227:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._import_def_in_node667);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:228:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._namespace_def_in_node672);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:231:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args684); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args689); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:234:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._ident_in_attribute_args694);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:237:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) )
			int alt16=5;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt16 = 1;
				}
				break;
			case 141:
				{
				alt16 = 2;
				}
				break;
			case 163:
				{
				alt16 = 3;
				}
				break;
			case 161:
				{
				alt16 = 4;
				}
				break;
			case 174:
				{
				alt16 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(238, 4);
				PushFollow(Follow._ident_in_attribute_item705);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(238, 10);
				// SugarCpp.g:238:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==92))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(238, 11);
					char_literal18=(IToken)Match(input,92,Follow._92_in_attribute_item708); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal18);

					DebugLocation(238, 15);
					PushFollow(Follow._attribute_args_in_attribute_item710);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(238, 30);
					// SugarCpp.g:238:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==99))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:238:31: ',' attribute_args
							{
							DebugLocation(238, 31);
							char_literal20=(IToken)Match(input,99,Follow._99_in_attribute_item713); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal20);

							DebugLocation(238, 35);
							PushFollow(Follow._attribute_args_in_attribute_item715);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(238, 52);
					char_literal22=(IToken)Match(input,93,Follow._93_in_attribute_item719); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(238, 61);
					// SugarCpp.g:238:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(238, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(238, 79);
					// SugarCpp.g:238:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(238, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(239, 4);
				string_literal23=(IToken)Match(input,141,Follow._141_in_attribute_item737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal23);

				DebugLocation(239, 12);
				// SugarCpp.g:239:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==92))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:239:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(239, 13);
					char_literal24=(IToken)Match(input,92,Follow._92_in_attribute_item740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal24);

					DebugLocation(239, 17);
					PushFollow(Follow._attribute_args_in_attribute_item742);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(239, 32);
					// SugarCpp.g:239:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==99))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:239:33: ',' attribute_args
							{
							DebugLocation(239, 33);
							char_literal26=(IToken)Match(input,99,Follow._99_in_attribute_item745); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal26);

							DebugLocation(239, 37);
							PushFollow(Follow._attribute_args_in_attribute_item747);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(239, 54);
					char_literal28=(IToken)Match(input,93,Follow._93_in_attribute_item751); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 141, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(239, 63);
					// SugarCpp.g:239:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(239, 75);
					adaptor.AddChild(root_1, stream_141.NextNode());
					DebugLocation(239, 83);
					// SugarCpp.g:239:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(239, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:240:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(240, 4);
				string_literal29=(IToken)Match(input,163,Follow._163_in_attribute_item769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal29);

				DebugLocation(240, 13);
				// SugarCpp.g:240:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==92))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(240, 14);
					char_literal30=(IToken)Match(input,92,Follow._92_in_attribute_item772); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal30);

					DebugLocation(240, 18);
					PushFollow(Follow._attribute_args_in_attribute_item774);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(240, 33);
					// SugarCpp.g:240:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==99))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:34: ',' attribute_args
							{
							DebugLocation(240, 34);
							char_literal32=(IToken)Match(input,99,Follow._99_in_attribute_item777); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal32);

							DebugLocation(240, 38);
							PushFollow(Follow._attribute_args_in_attribute_item779);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(240, 55);
					char_literal34=(IToken)Match(input,93,Follow._93_in_attribute_item783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: attribute_args, 163
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(240, 64);
					// SugarCpp.g:240:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(240, 76);
					adaptor.AddChild(root_1, stream_163.NextNode());
					DebugLocation(240, 85);
					// SugarCpp.g:240:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(240, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:241:4: 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(241, 4);
				string_literal35=(IToken)Match(input,161,Follow._161_in_attribute_item801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal35);

				DebugLocation(241, 13);
				// SugarCpp.g:241:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==92))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(241, 14);
					char_literal36=(IToken)Match(input,92,Follow._92_in_attribute_item804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal36);

					DebugLocation(241, 18);
					PushFollow(Follow._attribute_args_in_attribute_item806);
					attribute_args37=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args37.Tree);
					DebugLocation(241, 33);
					// SugarCpp.g:241:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==99))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:241:34: ',' attribute_args
							{
							DebugLocation(241, 34);
							char_literal38=(IToken)Match(input,99,Follow._99_in_attribute_item809); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal38);

							DebugLocation(241, 38);
							PushFollow(Follow._attribute_args_in_attribute_item811);
							attribute_args39=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args39.Tree);

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(241, 55);
					char_literal40=(IToken)Match(input,93,Follow._93_in_attribute_item815); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal40);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: 161, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:61: -> ^( Attribute 'public' ( attribute_args )* )
				{
					DebugLocation(241, 64);
					// SugarCpp.g:241:64: ^( Attribute 'public' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(241, 76);
					adaptor.AddChild(root_1, stream_161.NextNode());
					DebugLocation(241, 85);
					// SugarCpp.g:241:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(241, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:242:4: 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(242, 4);
				string_literal41=(IToken)Match(input,174,Follow._174_in_attribute_item833); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal41);

				DebugLocation(242, 14);
				// SugarCpp.g:242:14: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==92))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:15: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(242, 15);
					char_literal42=(IToken)Match(input,92,Follow._92_in_attribute_item836); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal42);

					DebugLocation(242, 19);
					PushFollow(Follow._attribute_args_in_attribute_item838);
					attribute_args43=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args43.Tree);
					DebugLocation(242, 34);
					// SugarCpp.g:242:34: ( ',' attribute_args )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==99))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:35: ',' attribute_args
							{
							DebugLocation(242, 35);
							char_literal44=(IToken)Match(input,99,Follow._99_in_attribute_item841); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal44);

							DebugLocation(242, 39);
							PushFollow(Follow._attribute_args_in_attribute_item843);
							attribute_args45=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args45.Tree);

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(242, 56);
					char_literal46=(IToken)Match(input,93,Follow._93_in_attribute_item847); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal46);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: attribute_args, 174
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:62: -> ^( Attribute 'virtual' ( attribute_args )* )
				{
					DebugLocation(242, 65);
					// SugarCpp.g:242:65: ^( Attribute 'virtual' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 67);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(242, 77);
					adaptor.AddChild(root_1, stream_174.NextNode());
					DebugLocation(242, 87);
					// SugarCpp.g:242:87: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(242, 87);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:245:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken NEWLINE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree NEWLINE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(245, 1);
		try
		{
			// SugarCpp.g:246:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(246, 4);
			// SugarCpp.g:246:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==131))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(246, 5);
					char_literal47=(IToken)Match(input,131,Follow._131_in_attribute872); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal47);

					DebugLocation(246, 9);
					PushFollow(Follow._attribute_item_in_attribute874);
					attribute_item48=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item48.Tree);
					DebugLocation(246, 24);
					// SugarCpp.g:246:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==99))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch ( alt17 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:246:25: ',' attribute_item
							{
							DebugLocation(246, 25);
							char_literal49=(IToken)Match(input,99,Follow._99_in_attribute877); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal49);

							DebugLocation(246, 29);
							PushFollow(Follow._attribute_item_in_attribute879);
							attribute_item50=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item50.Tree);

							}
							break;

						default:
							goto loop17;
						}
					}

					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(246, 46);
					char_literal51=(IToken)Match(input,132,Follow._132_in_attribute883); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal51);

					DebugLocation(246, 50);
					// SugarCpp.g:246:50: ( NEWLINE )+
					int cnt18=0;
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==NEWLINE))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch (alt18)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:246:50: NEWLINE
							{
							DebugLocation(246, 50);
							NEWLINE52=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute885); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


							}
							break;

						default:
							if (cnt18 >= 1)
								goto loop18;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee18 = new EarlyExitException( 18, input );
							DebugRecognitionException(eee18);
							throw eee18;
						}
						cnt18++;
					}
					loop18:
						;

					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:61: -> ( attribute_item )+
			{
				DebugLocation(246, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(246, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:249:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken string_literal58 = default(IToken);
		IToken string_literal61 = default(IToken);
		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree char_literal57_tree = default(CommonTree);
		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree string_literal61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==131))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_alloc904);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			PushFollow(Follow._ident_list_in_global_alloc907);
			ident_list54=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list54.Tree);
			DebugLocation(250, 26);
			// SugarCpp.g:250:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==110))
			{
				alt24 = 1;
			}
			else if ((LA24_0==112))
			{
				alt24 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(250, 28);
				char_literal55=(IToken)Match(input,110,Follow._110_in_global_alloc911); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal55);

				DebugLocation(250, 32);
				PushFollow(Follow._type_name_in_global_alloc913);
				type_name56=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name56.Tree);
				DebugLocation(250, 42);
				// SugarCpp.g:250:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt22=3;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt22 = 1;
					}
					break;
				case 92:
					{
					alt22 = 2;
					}
					break;
				case NEWLINE:
					{
					alt22 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:44: ( '=' | ':=' ) expr
					{
					DebugLocation(250, 44);
					// SugarCpp.g:250:44: ( '=' | ':=' )
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==120))
					{
						alt21 = 1;
					}
					else if ((LA21_0==112))
					{
						alt21 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:250:45: '='
						{
						DebugLocation(250, 45);
						char_literal57=(IToken)Match(input,120,Follow._120_in_global_alloc918); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal57);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:250:51: ':='
						{
						DebugLocation(250, 51);
						string_literal58=(IToken)Match(input,112,Follow._112_in_global_alloc922); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal58);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(250, 57);
					PushFollow(Follow._expr_in_global_alloc925);
					expr59=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr59.Tree);


					{
					// AST REWRITE
					// elements: attribute, ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(250, 65);
						// SugarCpp.g:250:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(250, 84);
						// SugarCpp.g:250:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(250, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(250, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(250, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(250, 116);
						// SugarCpp.g:250:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(250, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:251:43: bracket_expr_list
					{
					DebugLocation(251, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc988);
					bracket_expr_list60=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list60.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, attribute, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 251:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(251, 64);
						// SugarCpp.g:251:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(251, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(251, 85);
						// SugarCpp.g:251:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(251, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(251, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(251, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(251, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:252:17: 
					{

					{
					// AST REWRITE
					// elements: type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(252, 20);
						// SugarCpp.g:252:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(252, 39);
						// SugarCpp.g:252:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(252, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(252, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(252, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(252, 71);
						// SugarCpp.g:252:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:254:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(254, 10);
				string_literal61=(IToken)Match(input,112,Follow._112_in_global_alloc1064); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal61);

				DebugLocation(254, 15);
				// SugarCpp.g:254:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:254:16: expr ( ',' expr )*
				{
				DebugLocation(254, 16);
				PushFollow(Follow._expr_in_global_alloc1067);
				expr62=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr62.Tree);
				DebugLocation(254, 21);
				// SugarCpp.g:254:21: ( ',' expr )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==99))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:254:22: ',' expr
						{
						DebugLocation(254, 22);
						char_literal63=(IToken)Match(input,99,Follow._99_in_global_alloc1070); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal63);

						DebugLocation(254, 26);
						PushFollow(Follow._expr_in_global_alloc1072);
						expr64=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr64.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}



				{
				// AST REWRITE
				// elements: attribute, expr, ident_list, 112
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 254:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(254, 37);
					// SugarCpp.g:254:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(254, 44);
					// SugarCpp.g:254:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(254, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(254, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(254, 66);
					// SugarCpp.g:254:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(254, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(254, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:258:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(259, 4);
			// SugarCpp.g:259:4: ( attribute )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==131))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:4: attribute
				{
				DebugLocation(259, 4);
				PushFollow(Follow._attribute_in_global_using1113);
				attribute65=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(259, 15);
			string_literal66=(IToken)Match(input,173,Follow._173_in_global_using1116); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(string_literal66);

			DebugLocation(259, 23);
			// SugarCpp.g:259:23: ( stmt_using_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IDENT||LA26_0==157))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:259:23: stmt_using_item
					{
					DebugLocation(259, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1118);
					stmt_using_item67=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item67.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(259, 43);
				// SugarCpp.g:259:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(259, 56);
				// SugarCpp.g:259:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 67);
				// SugarCpp.g:259:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(259, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:262:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==131))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: attribute
				{
				DebugLocation(263, 4);
				PushFollow(Follow._attribute_in_global_typedef1142);
				attribute68=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(263, 15);
			string_literal69=(IToken)Match(input,170,Follow._170_in_global_typedef1145); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(string_literal69);

			DebugLocation(263, 22);
			PushFollow(Follow._ident_in_global_typedef1147);
			ident70=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident70.Tree);
			DebugLocation(263, 28);
			char_literal71=(IToken)Match(input,120,Follow._120_in_global_typedef1149); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal71);

			DebugLocation(263, 32);
			PushFollow(Follow._type_name_in_global_typedef1151);
			type_name72=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name72.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(263, 45);
				// SugarCpp.g:263:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(263, 60);
				// SugarCpp.g:263:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(263, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(263, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(263, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:266:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken STRING75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken STRING79 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken DEDENT81 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree STRING75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree STRING79_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree DEDENT81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:267:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(267, 4);
			// SugarCpp.g:267:4: ( attribute )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==131))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:4: attribute
				{
				DebugLocation(267, 4);
				PushFollow(Follow._attribute_in_import_def1175);
				attribute73=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(267, 15);
			string_literal74=(IToken)Match(input,149,Follow._149_in_import_def1178); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_149.Add(string_literal74);

			DebugLocation(267, 24);
			// SugarCpp.g:267:24: ( STRING )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==STRING))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:24: STRING
				{
				DebugLocation(267, 24);
				STRING75=(IToken)Match(input,STRING,Follow._STRING_in_import_def1180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING75);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(267, 32);
			// SugarCpp.g:267:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			try
			{
				alt34 = dfa34.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(267, 33);
				// SugarCpp.g:267:33: ( NEWLINE )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==NEWLINE))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:33: NEWLINE
						{
						DebugLocation(267, 33);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(267, 42);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1187); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT77);

				DebugLocation(267, 49);
				// SugarCpp.g:267:49: ( NEWLINE )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==NEWLINE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:49: NEWLINE
						{
						DebugLocation(267, 49);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1189); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(267, 59);
				// SugarCpp.g:267:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==STRING))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:60: STRING ( NEWLINE )+
						{
						DebugLocation(267, 60);
						STRING79=(IToken)Match(input,STRING,Follow._STRING_in_import_def1194); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING79);

						DebugLocation(267, 67);
						// SugarCpp.g:267:67: ( NEWLINE )+
						int cnt32=0;
						try { DebugEnterSubRule(32);
						while (true)
						{
							int alt32=2;
							try { DebugEnterDecision(32, false);
							int LA32_0 = input.LA(1);

							if ((LA32_0==NEWLINE))
							{
								alt32 = 1;
							}


							} finally { DebugExitDecision(32); }
							switch (alt32)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:267:67: NEWLINE
								{
								DebugLocation(267, 67);
								NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1196); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


								}
								break;

							default:
								if (cnt32 >= 1)
									goto loop32;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee32 = new EarlyExitException( 32, input );
								DebugRecognitionException(eee32);
								throw eee32;
							}
							cnt32++;
						}
						loop32:
							;

						} finally { DebugExitSubRule(32); }


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(267, 78);
				DEDENT81=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1201); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT81);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(267, 90);
				// SugarCpp.g:267:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(267, 99);
				// SugarCpp.g:267:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(267, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(267, 110);
				// SugarCpp.g:267:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(267, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:270:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident88 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(271, 4);
			// SugarCpp.g:271:4: ( attribute )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==131))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:4: attribute
				{
				DebugLocation(271, 4);
				PushFollow(Follow._attribute_in_enum_def1226);
				attribute82=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(271, 15);
			string_literal83=(IToken)Match(input,145,Follow._145_in_enum_def1229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_145.Add(string_literal83);

			DebugLocation(271, 22);
			PushFollow(Follow._ident_in_enum_def1231);
			ident84=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident84.Tree);
			DebugLocation(271, 28);
			char_literal85=(IToken)Match(input,120,Follow._120_in_enum_def1233); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal85);

			DebugLocation(271, 32);
			// SugarCpp.g:271:32: ( ident ( '|' ident )* )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==IDENT))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:33: ident ( '|' ident )*
				{
				DebugLocation(271, 33);
				PushFollow(Follow._ident_in_enum_def1236);
				ident86=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident86.Tree);
				DebugLocation(271, 39);
				// SugarCpp.g:271:39: ( '|' ident )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==178))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:271:40: '|' ident
						{
						DebugLocation(271, 40);
						char_literal87=(IToken)Match(input,178,Follow._178_in_enum_def1239); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_178.Add(char_literal87);

						DebugLocation(271, 44);
						PushFollow(Follow._ident_in_enum_def1241);
						ident88=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident88.Tree);

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }


				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(271, 57);
				// SugarCpp.g:271:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(271, 64);
				// SugarCpp.g:271:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(271, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(271, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(271, 81);
				// SugarCpp.g:271:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(271, 94);
				// SugarCpp.g:271:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(271, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:274:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(275, 4);
			// SugarCpp.g:275:4: ( attribute )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==131))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:4: attribute
				{
				DebugLocation(275, 4);
				PushFollow(Follow._attribute_in_namespace_def1274);
				attribute89=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute89.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(275, 15);
			string_literal90=(IToken)Match(input,157,Follow._157_in_namespace_def1277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_157.Add(string_literal90);

			DebugLocation(275, 27);
			PushFollow(Follow._ident_in_namespace_def1279);
			ident91=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident91.Tree);
			DebugLocation(275, 33);
			// SugarCpp.g:275:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			try
			{
				alt41 = dfa41.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(275, 34);
				// SugarCpp.g:275:34: ( NEWLINE )+
				int cnt39=0;
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_0 = input.LA(1);

					if ((LA39_0==NEWLINE))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:34: NEWLINE
						{
						DebugLocation(275, 34);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1282); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt39 >= 1)
							goto loop39;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee39 = new EarlyExitException( 39, input );
						DebugRecognitionException(eee39);
						throw eee39;
					}
					cnt39++;
				}
				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(275, 43);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1285); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT93);

				DebugLocation(275, 50);
				// SugarCpp.g:275:50: ( NEWLINE )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==NEWLINE))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:50: NEWLINE
						{
						DebugLocation(275, 50);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1287); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(275, 59);
				PushFollow(Follow._global_block_in_namespace_def1290);
				global_block95=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block95.Tree);
				DebugLocation(275, 72);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1292); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(275, 84);
				// SugarCpp.g:275:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(275, 96);
				// SugarCpp.g:275:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(275, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(275, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(275, 113);
				// SugarCpp.g:275:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(275, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:278:1: class_def : ( attribute )? ( ( 'public' )? 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | ( 'public' )? 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal98 = default(IToken);
		IToken string_literal99 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken NEWLINE106 = default(IToken);
		IToken INDENT107 = default(IToken);
		IToken NEWLINE108 = default(IToken);
		IToken DEDENT110 = default(IToken);
		IToken string_literal111 = default(IToken);
		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken NEWLINE123 = default(IToken);
		IToken INDENT124 = default(IToken);
		IToken NEWLINE125 = default(IToken);
		IToken DEDENT127 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree string_literal99_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree NEWLINE106_tree = default(CommonTree);
		CommonTree INDENT107_tree = default(CommonTree);
		CommonTree NEWLINE108_tree = default(CommonTree);
		CommonTree DEDENT110_tree = default(CommonTree);
		CommonTree string_literal111_tree = default(CommonTree);
		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree NEWLINE123_tree = default(CommonTree);
		CommonTree INDENT124_tree = default(CommonTree);
		CommonTree NEWLINE125_tree = default(CommonTree);
		CommonTree DEDENT127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( ( attribute )? ( ( 'public' )? 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | ( 'public' )? 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:279:5: ( attribute )? ( ( 'public' )? 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | ( 'public' )? 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(279, 5);
			// SugarCpp.g:279:5: ( attribute )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==131))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:279:5: attribute
				{
				DebugLocation(279, 5);
				PushFollow(Follow._attribute_in_class_def1320);
				attribute97=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute97.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(279, 16);
			// SugarCpp.g:279:16: ( ( 'public' )? 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | ( 'public' )? 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case 161:
				{
				int LA58_1 = input.LA(2);

				if ((LA58_1==140))
				{
					alt58 = 1;
				}
				else if ((LA58_1==138))
				{
					alt58 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 140:
				{
				alt58 = 1;
				}
				break;
			case 138:
				{
				alt58 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:279:18: ( 'public' )? 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(279, 18);
				// SugarCpp.g:279:18: ( 'public' )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==161))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:18: 'public'
					{
					DebugLocation(279, 18);
					string_literal98=(IToken)Match(input,161,Follow._161_in_class_def1325); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_161.Add(string_literal98);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(279, 28);
				string_literal99=(IToken)Match(input,140,Follow._140_in_class_def1328); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal99);

				DebugLocation(279, 36);
				PushFollow(Follow._ident_in_class_def1330);
				ident100=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident100.Tree);
				DebugLocation(279, 42);
				// SugarCpp.g:279:42: ( generic_parameter )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==114))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:43: generic_parameter
					{
					DebugLocation(279, 43);
					PushFollow(Follow._generic_parameter_in_class_def1333);
					generic_parameter101=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter101.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(279, 63);
				// SugarCpp.g:279:63: ( ':' ident ( ',' ident )* )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==110))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:64: ':' ident ( ',' ident )*
					{
					DebugLocation(279, 64);
					char_literal102=(IToken)Match(input,110,Follow._110_in_class_def1338); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal102);

					DebugLocation(279, 68);
					PushFollow(Follow._ident_in_class_def1340);
					ident103=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident103.Tree);
					DebugLocation(279, 74);
					// SugarCpp.g:279:74: ( ',' ident )*
					try { DebugEnterSubRule(45);
					while (true)
					{
						int alt45=2;
						try { DebugEnterDecision(45, false);
						int LA45_0 = input.LA(1);

						if ((LA45_0==99))
						{
							alt45 = 1;
						}


						} finally { DebugExitDecision(45); }
						switch ( alt45 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:279:75: ',' ident
							{
							DebugLocation(279, 75);
							char_literal104=(IToken)Match(input,99,Follow._99_in_class_def1343); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal104);

							DebugLocation(279, 79);
							PushFollow(Follow._ident_in_class_def1345);
							ident105=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident105.Tree);

							}
							break;

						default:
							goto loop45;
						}
					}

					loop45:
						;

					} finally { DebugExitSubRule(45); }


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(279, 89);
				// SugarCpp.g:279:89: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:90: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(279, 90);
					// SugarCpp.g:279:90: ( NEWLINE )+
					int cnt47=0;
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==NEWLINE))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:279:90: NEWLINE
							{
							DebugLocation(279, 90);
							NEWLINE106=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1352); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE106);


							}
							break;

						default:
							if (cnt47 >= 1)
								goto loop47;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee47 = new EarlyExitException( 47, input );
							DebugRecognitionException(eee47);
							throw eee47;
						}
						cnt47++;
					}
					loop47:
						;

					} finally { DebugExitSubRule(47); }

					DebugLocation(279, 99);
					INDENT107=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1355); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT107);

					DebugLocation(279, 106);
					// SugarCpp.g:279:106: ( NEWLINE )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:279:106: NEWLINE
							{
							DebugLocation(279, 106);
							NEWLINE108=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1357); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE108);


							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(279, 115);
					PushFollow(Follow._global_block_in_class_def1360);
					global_block109=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block109.Tree);
					DebugLocation(279, 128);
					DEDENT110=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1362); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT110);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: ident, global_block, attribute, ident, generic_parameter, 161
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:137: -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(279, 140);
					// SugarCpp.g:279:140: ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 142);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(279, 148);
					// SugarCpp.g:279:148: ( 'public' )?
					if (stream_161.HasNext)
					{
						DebugLocation(279, 148);
						adaptor.AddChild(root_1, stream_161.NextNode());

					}
					stream_161.Reset();
					DebugLocation(279, 158);
					// SugarCpp.g:279:158: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(279, 158);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(279, 169);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(279, 175);
					// SugarCpp.g:279:175: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(279, 175);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(279, 194);
					// SugarCpp.g:279:194: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(279, 195);
						// SugarCpp.g:279:195: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(279, 197);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(279, 208);
						// SugarCpp.g:279:208: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(279, 208);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(279, 218);
					// SugarCpp.g:279:218: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(279, 218);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:280:12: ( 'public' )? 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(280, 12);
				// SugarCpp.g:280:12: ( 'public' )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==161))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:12: 'public'
					{
					DebugLocation(280, 12);
					string_literal111=(IToken)Match(input,161,Follow._161_in_class_def1407); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_161.Add(string_literal111);


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(280, 22);
				string_literal112=(IToken)Match(input,138,Follow._138_in_class_def1410); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_138.Add(string_literal112);

				DebugLocation(280, 29);
				string_literal113=(IToken)Match(input,140,Follow._140_in_class_def1412); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal113);

				DebugLocation(280, 37);
				PushFollow(Follow._ident_in_class_def1414);
				ident114=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident114.Tree);
				DebugLocation(280, 43);
				// SugarCpp.g:280:43: ( generic_parameter )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==114))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:44: generic_parameter
					{
					DebugLocation(280, 44);
					PushFollow(Follow._generic_parameter_in_class_def1417);
					generic_parameter115=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter115.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }

				DebugLocation(280, 64);
				// SugarCpp.g:280:64: ( '(' func_args ')' )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==92))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:65: '(' func_args ')'
					{
					DebugLocation(280, 65);
					char_literal116=(IToken)Match(input,92,Follow._92_in_class_def1422); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal116);

					DebugLocation(280, 69);
					PushFollow(Follow._func_args_in_class_def1424);
					func_args117=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args117.Tree);
					DebugLocation(280, 79);
					char_literal118=(IToken)Match(input,93,Follow._93_in_class_def1426); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal118);


					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(280, 85);
				// SugarCpp.g:280:85: ( ':' ident ( ',' ident )* )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==110))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:86: ':' ident ( ',' ident )*
					{
					DebugLocation(280, 86);
					char_literal119=(IToken)Match(input,110,Follow._110_in_class_def1431); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal119);

					DebugLocation(280, 90);
					PushFollow(Follow._ident_in_class_def1433);
					ident120=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident120.Tree);
					DebugLocation(280, 96);
					// SugarCpp.g:280:96: ( ',' ident )*
					try { DebugEnterSubRule(53);
					while (true)
					{
						int alt53=2;
						try { DebugEnterDecision(53, false);
						int LA53_0 = input.LA(1);

						if ((LA53_0==99))
						{
							alt53 = 1;
						}


						} finally { DebugExitDecision(53); }
						switch ( alt53 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:280:97: ',' ident
							{
							DebugLocation(280, 97);
							char_literal121=(IToken)Match(input,99,Follow._99_in_class_def1436); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal121);

							DebugLocation(280, 101);
							PushFollow(Follow._ident_in_class_def1438);
							ident122=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident122.Tree);

							}
							break;

						default:
							goto loop53;
						}
					}

					loop53:
						;

					} finally { DebugExitSubRule(53); }


					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(280, 111);
				// SugarCpp.g:280:111: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				try
				{
					alt57 = dfa57.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:112: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(280, 112);
					// SugarCpp.g:280:112: ( NEWLINE )+
					int cnt55=0;
					try { DebugEnterSubRule(55);
					while (true)
					{
						int alt55=2;
						try { DebugEnterDecision(55, false);
						int LA55_0 = input.LA(1);

						if ((LA55_0==NEWLINE))
						{
							alt55 = 1;
						}


						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:280:112: NEWLINE
							{
							DebugLocation(280, 112);
							NEWLINE123=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1445); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE123);


							}
							break;

						default:
							if (cnt55 >= 1)
								goto loop55;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee55 = new EarlyExitException( 55, input );
							DebugRecognitionException(eee55);
							throw eee55;
						}
						cnt55++;
					}
					loop55:
						;

					} finally { DebugExitSubRule(55); }

					DebugLocation(280, 121);
					INDENT124=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1448); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT124);

					DebugLocation(280, 128);
					// SugarCpp.g:280:128: ( NEWLINE )*
					try { DebugEnterSubRule(56);
					while (true)
					{
						int alt56=2;
						try { DebugEnterDecision(56, false);
						int LA56_0 = input.LA(1);

						if ((LA56_0==NEWLINE))
						{
							alt56 = 1;
						}


						} finally { DebugExitDecision(56); }
						switch ( alt56 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:280:128: NEWLINE
							{
							DebugLocation(280, 128);
							NEWLINE125=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1450); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE125);


							}
							break;

						default:
							goto loop56;
						}
					}

					loop56:
						;

					} finally { DebugExitSubRule(56); }

					DebugLocation(280, 137);
					PushFollow(Follow._global_block_in_class_def1453);
					global_block126=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block126.Tree);
					DebugLocation(280, 150);
					DEDENT127=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1455); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT127);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }



				{
				// AST REWRITE
				// elements: 138, attribute, global_block, func_args, ident, generic_parameter, ident, 161
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:159: -> ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(280, 162);
					// SugarCpp.g:280:162: ^( Class ( 'public' )? 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 164);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(280, 170);
					// SugarCpp.g:280:170: ( 'public' )?
					if (stream_161.HasNext)
					{
						DebugLocation(280, 170);
						adaptor.AddChild(root_1, stream_161.NextNode());

					}
					stream_161.Reset();
					DebugLocation(280, 180);
					adaptor.AddChild(root_1, stream_138.NextNode());
					DebugLocation(280, 187);
					// SugarCpp.g:280:187: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(280, 187);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(280, 198);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(280, 204);
					// SugarCpp.g:280:204: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(280, 204);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(280, 223);
					// SugarCpp.g:280:223: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(280, 223);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(280, 234);
					// SugarCpp.g:280:234: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(280, 235);
						// SugarCpp.g:280:235: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 237);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(280, 248);
						// SugarCpp.g:280:248: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(280, 248);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(280, 258);
					// SugarCpp.g:280:258: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(280, 258);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:284:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal129 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal129_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: type_name ( ',' type_name )*
			{
			DebugLocation(285, 4);
			PushFollow(Follow._type_name_in_type_list1511);
			type_name128=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name128.Tree);
			DebugLocation(285, 14);
			// SugarCpp.g:285:14: ( ',' type_name )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==99))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:285:15: ',' type_name
					{
					DebugLocation(285, 15);
					char_literal129=(IToken)Match(input,99,Follow._99_in_type_list1514); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal129);

					DebugLocation(285, 19);
					PushFollow(Follow._type_name_in_type_list1516);
					type_name130=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name130.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(285, 34);
				// SugarCpp.g:285:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(285, 46);
				// SugarCpp.g:285:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(285, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:288:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal132 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken string_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal142 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal132_tree = default(CommonTree);
		CommonTree char_literal134_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree string_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(288, 1);
		try
		{
			// SugarCpp.g:289:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==IDENT||LA64_0==141||LA64_0==154||(LA64_0>=163 && LA64_0<=164)))
			{
				alt64 = 1;
			}
			else if ((LA64_0==92))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:289:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(289, 4);
				PushFollow(Follow._type_single_in_type_name1538);
				type_single131=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single131.Tree);
				DebugLocation(289, 16);
				// SugarCpp.g:289:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==104))
				{
					alt61 = 1;
				}
				else if ((LA61_0==DEDENT||(LA61_0>=IDENT && LA61_0<=INDENT)||LA61_0==NEWLINE||(LA61_0>=92 && LA61_0<=93)||LA61_0==99||(LA61_0>=112 && LA61_0<=113)||LA61_0==120||(LA61_0>=123 && LA61_0<=124)||LA61_0==132||LA61_0==137||LA61_0==143||(LA61_0>=147 && LA61_0<=148)||LA61_0==150||(LA61_0>=166 && LA61_0<=168)||(LA61_0>=171 && LA61_0<=172)||(LA61_0>=176 && LA61_0<=177)||LA61_0==182))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:289:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(289, 18);
					string_literal132=(IToken)Match(input,104,Follow._104_in_type_name1542); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal132);

					DebugLocation(289, 23);
					// SugarCpp.g:289:23: ( type_name | '(' ')' )
					int alt60=2;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==IDENT||LA60_0==141||LA60_0==154||(LA60_0>=163 && LA60_0<=164)))
					{
						alt60 = 1;
					}
					else if ((LA60_0==92))
					{
						int LA60_2 = input.LA(2);

						if ((LA60_2==93))
						{
							int LA60_3 = input.LA(3);

							if ((LA60_3==104))
							{
								alt60 = 1;
							}
							else if ((LA60_3==DEDENT||(LA60_3>=IDENT && LA60_3<=INDENT)||LA60_3==NEWLINE||(LA60_3>=92 && LA60_3<=93)||LA60_3==99||(LA60_3>=112 && LA60_3<=113)||LA60_3==120||(LA60_3>=123 && LA60_3<=124)||LA60_3==132||LA60_3==137||LA60_3==143||(LA60_3>=147 && LA60_3<=148)||LA60_3==150||(LA60_3>=166 && LA60_3<=168)||(LA60_3>=171 && LA60_3<=172)||(LA60_3>=176 && LA60_3<=177)||LA60_3==182))
							{
								alt60 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 60, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA60_2==IDENT||LA60_2==92||LA60_2==141||LA60_2==154||(LA60_2>=163 && LA60_2<=164)))
						{
							alt60 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 60, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:289:24: type_name
						{
						DebugLocation(289, 24);
						PushFollow(Follow._type_name_in_type_name1545);
						type_name133=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name133.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:289:36: '(' ')'
						{
						DebugLocation(289, 36);
						char_literal134=(IToken)Match(input,92,Follow._92_in_type_name1549); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal134);

						DebugLocation(289, 40);
						char_literal135=(IToken)Match(input,93,Follow._93_in_type_name1551); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal135);


						}
						break;

					}
					} finally { DebugExitSubRule(60); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 289:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(289, 48);
						// SugarCpp.g:289:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(289, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(289, 60);
						// SugarCpp.g:289:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(289, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(289, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(289, 85);
						// SugarCpp.g:289:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(289, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:290:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 290:9: -> type_single
					{
						DebugLocation(290, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:292:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(292, 4);
				char_literal136=(IToken)Match(input,92,Follow._92_in_type_name1592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal136);

				DebugLocation(292, 8);
				// SugarCpp.g:292:8: ( type_list )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==IDENT||LA62_0==92||LA62_0==141||LA62_0==154||(LA62_0>=163 && LA62_0<=164)))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:8: type_list
					{
					DebugLocation(292, 8);
					PushFollow(Follow._type_list_in_type_name1594);
					type_list137=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list137.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(292, 19);
				char_literal138=(IToken)Match(input,93,Follow._93_in_type_name1597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal138);

				DebugLocation(292, 23);
				string_literal139=(IToken)Match(input,104,Follow._104_in_type_name1599); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(string_literal139);

				DebugLocation(292, 28);
				// SugarCpp.g:292:28: ( type_name | '(' ')' )
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==IDENT||LA63_0==141||LA63_0==154||(LA63_0>=163 && LA63_0<=164)))
				{
					alt63 = 1;
				}
				else if ((LA63_0==92))
				{
					int LA63_2 = input.LA(2);

					if ((LA63_2==93))
					{
						int LA63_3 = input.LA(3);

						if ((LA63_3==104))
						{
							alt63 = 1;
						}
						else if ((LA63_3==DEDENT||(LA63_3>=IDENT && LA63_3<=INDENT)||LA63_3==NEWLINE||(LA63_3>=92 && LA63_3<=93)||LA63_3==99||(LA63_3>=112 && LA63_3<=113)||LA63_3==120||(LA63_3>=123 && LA63_3<=124)||LA63_3==132||LA63_3==137||LA63_3==143||(LA63_3>=147 && LA63_3<=148)||LA63_3==150||(LA63_3>=166 && LA63_3<=168)||(LA63_3>=171 && LA63_3<=172)||(LA63_3>=176 && LA63_3<=177)||LA63_3==182))
						{
							alt63 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 63, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA63_2==IDENT||LA63_2==92||LA63_2==141||LA63_2==154||(LA63_2>=163 && LA63_2<=164)))
					{
						alt63 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 63, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:29: type_name
					{
					DebugLocation(292, 29);
					PushFollow(Follow._type_name_in_type_name1602);
					type_name140=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name140.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:292:41: '(' ')'
					{
					DebugLocation(292, 41);
					char_literal141=(IToken)Match(input,92,Follow._92_in_type_name1606); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal141);

					DebugLocation(292, 45);
					char_literal142=(IToken)Match(input,93,Follow._93_in_type_name1608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal142);


					}
					break;

				}
				} finally { DebugExitSubRule(63); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(292, 53);
					// SugarCpp.g:292:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(292, 65);
					// SugarCpp.g:292:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(292, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(292, 76);
					// SugarCpp.g:292:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(292, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:295:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		IToken char_literal149 = default(IToken);
		IToken char_literal150 = default(IToken);
		IToken char_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(295, 1);
		try
		{
			// SugarCpp.g:296:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:296:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(296, 4);
			PushFollow(Follow._type_star_in_type_single1632);
			type_star143=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star143.Tree);
			DebugLocation(296, 14);
			// SugarCpp.g:296:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt68=3;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case 90:
				{
				alt68 = 1;
				}
				break;
			case 131:
				{
				alt68 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 92:
			case 93:
			case 99:
			case 104:
			case 112:
			case 113:
			case 120:
			case 123:
			case 124:
			case 132:
			case 137:
			case 143:
			case 147:
			case 148:
			case 150:
			case 166:
			case 167:
			case 168:
			case 171:
			case 172:
			case 176:
			case 177:
			case 182:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:296:16: '&'
				{
				DebugLocation(296, 16);
				char_literal144=(IToken)Match(input,90,Follow._90_in_type_single1636); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal144);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(296, 23);
					// SugarCpp.g:296:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(296, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:297:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(297, 7);
				char_literal145=(IToken)Match(input,131,Follow._131_in_type_single1652); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal145);

				DebugLocation(297, 11);
				// SugarCpp.g:297:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==NUMBER||LA67_0==STRING||LA67_0==85||LA67_0==90||LA67_0==92||LA67_0==94||(LA67_0>=96 && LA67_0<=97)||(LA67_0>=100 && LA67_0<=101)||(LA67_0>=130 && LA67_0<=131)||LA67_0==153||LA67_0==156||(LA67_0>=158 && LA67_0<=159)||LA67_0==182))
				{
					alt67 = 1;
				}
				else if ((LA67_0==99||LA67_0==132))
				{
					alt67 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:297:13: expr ( ',' expr )* ']'
					{
					DebugLocation(297, 13);
					PushFollow(Follow._expr_in_type_single1656);
					expr146=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr146.Tree);
					DebugLocation(297, 18);
					// SugarCpp.g:297:18: ( ',' expr )*
					try { DebugEnterSubRule(65);
					while (true)
					{
						int alt65=2;
						try { DebugEnterDecision(65, false);
						int LA65_0 = input.LA(1);

						if ((LA65_0==99))
						{
							alt65 = 1;
						}


						} finally { DebugExitDecision(65); }
						switch ( alt65 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:297:19: ',' expr
							{
							DebugLocation(297, 19);
							char_literal147=(IToken)Match(input,99,Follow._99_in_type_single1659); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal147);

							DebugLocation(297, 23);
							PushFollow(Follow._expr_in_type_single1661);
							expr148=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr148.Tree);

							}
							break;

						default:
							goto loop65;
						}
					}

					loop65:
						;

					} finally { DebugExitSubRule(65); }

					DebugLocation(297, 30);
					char_literal149=(IToken)Match(input,132,Follow._132_in_type_single1665); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal149);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 297:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(297, 37);
						// SugarCpp.g:297:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(297, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(297, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(297, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(297, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:298:13: ( ',' )* ']'
					{
					DebugLocation(298, 13);
					// SugarCpp.g:298:13: ( ',' )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==99))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:298:13: ','
							{
							DebugLocation(298, 13);
							char_literal150=(IToken)Match(input,99,Follow._99_in_type_single1690); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal150);


							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }

					DebugLocation(298, 18);
					char_literal151=(IToken)Match(input,132,Follow._132_in_type_single1693); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal151);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 298:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(298, 25);
						// SugarCpp.g:298:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(298, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(298, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(298, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(298, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(67); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:300:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 300:7: -> type_star
				{
					DebugLocation(300, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:304:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(304, 1);
		try
		{
			// SugarCpp.g:305:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:305:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(305, 4);
			PushFollow(Follow._type_star_in_type_no_array1740);
			type_star152=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star152.Tree);
			DebugLocation(305, 14);
			// SugarCpp.g:305:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==90))
			{
				alt69 = 1;
			}
			else if ((LA69_0==92||LA69_0==131))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:16: '&'
				{
				DebugLocation(305, 16);
				char_literal153=(IToken)Match(input,90,Follow._90_in_type_no_array1744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal153);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(305, 23);
					// SugarCpp.g:305:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(305, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(305, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:306:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:7: -> type_star
				{
					DebugLocation(306, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:310:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(311, 4);
			PushFollow(Follow._type_template_type_in_type_star1779);
			type_template_type154=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type154.Tree);
			DebugLocation(311, 23);
			// SugarCpp.g:311:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==94))
			{
				alt71 = 1;
			}
			else if ((LA71_0==DEDENT||(LA71_0>=IDENT && LA71_0<=INDENT)||LA71_0==NEWLINE||LA71_0==90||(LA71_0>=92 && LA71_0<=93)||LA71_0==99||LA71_0==104||(LA71_0>=112 && LA71_0<=113)||LA71_0==120||(LA71_0>=123 && LA71_0<=124)||(LA71_0>=131 && LA71_0<=132)||LA71_0==137||LA71_0==143||(LA71_0>=147 && LA71_0<=148)||LA71_0==150||(LA71_0>=166 && LA71_0<=168)||(LA71_0>=171 && LA71_0<=172)||(LA71_0>=176 && LA71_0<=177)||LA71_0==182))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:25: ( '*' )+
				{
				DebugLocation(311, 25);
				// SugarCpp.g:311:25: ( '*' )+
				int cnt70=0;
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if ((LA70_0==94))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:25: '*'
						{
						DebugLocation(311, 25);
						char_literal155=(IToken)Match(input,94,Follow._94_in_type_star1783); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal155);


						}
						break;

					default:
						if (cnt70 >= 1)
							goto loop70;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee70 = new EarlyExitException( 70, input );
						DebugRecognitionException(eee70);
						throw eee70;
					}
					cnt70++;
				}
				loop70:
					;

				} finally { DebugExitSubRule(70); }



				{
				// AST REWRITE
				// elements: 94, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(311, 33);
					// SugarCpp.g:311:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(311, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(311, 64);
					if (!(stream_94.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_94.HasNext )
					{
						DebugLocation(311, 64);
						adaptor.AddChild(root_1, stream_94.NextNode());

					}
					stream_94.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:10: -> type_template_type
				{
					DebugLocation(312, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:316:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(317, 4);
			PushFollow(Follow._type_ident_in_type_template_type1829);
			type_ident156=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident156.Tree);
			DebugLocation(317, 15);
			// SugarCpp.g:317:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==114))
			{
				alt74 = 1;
			}
			else if ((LA74_0==DEDENT||(LA74_0>=IDENT && LA74_0<=INDENT)||LA74_0==NEWLINE||LA74_0==90||(LA74_0>=92 && LA74_0<=94)||LA74_0==99||LA74_0==104||(LA74_0>=112 && LA74_0<=113)||LA74_0==120||(LA74_0>=123 && LA74_0<=124)||(LA74_0>=131 && LA74_0<=132)||LA74_0==137||LA74_0==143||(LA74_0>=147 && LA74_0<=148)||LA74_0==150||(LA74_0>=166 && LA74_0<=168)||(LA74_0>=171 && LA74_0<=172)||(LA74_0>=176 && LA74_0<=177)||LA74_0==182))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(317, 17);
				char_literal157=(IToken)Match(input,114,Follow._114_in_type_template_type1833); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal157);

				DebugLocation(317, 21);
				// SugarCpp.g:317:21: ( type_name ( ',' type_name )* )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==IDENT||LA73_0==92||LA73_0==141||LA73_0==154||(LA73_0>=163 && LA73_0<=164)))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:22: type_name ( ',' type_name )*
					{
					DebugLocation(317, 22);
					PushFollow(Follow._type_name_in_type_template_type1836);
					type_name158=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name158.Tree);
					DebugLocation(317, 32);
					// SugarCpp.g:317:32: ( ',' type_name )*
					try { DebugEnterSubRule(72);
					while (true)
					{
						int alt72=2;
						try { DebugEnterDecision(72, false);
						int LA72_0 = input.LA(1);

						if ((LA72_0==99))
						{
							alt72 = 1;
						}


						} finally { DebugExitDecision(72); }
						switch ( alt72 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:33: ',' type_name
							{
							DebugLocation(317, 33);
							char_literal159=(IToken)Match(input,99,Follow._99_in_type_template_type1839); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal159);

							DebugLocation(317, 37);
							PushFollow(Follow._type_name_in_type_template_type1841);
							type_name160=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name160.Tree);

							}
							break;

						default:
							goto loop72;
						}
					}

					loop72:
						;

					} finally { DebugExitSubRule(72); }


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(317, 51);
				char_literal161=(IToken)Match(input,124,Follow._124_in_type_template_type1847); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal161);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(317, 58);
					// SugarCpp.g:317:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(317, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(317, 85);
					// SugarCpp.g:317:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(317, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:318:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:8: -> type_ident
				{
					DebugLocation(318, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:322:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal162 = default(IToken);
		IToken string_literal163 = default(IToken);
		IToken string_literal164 = default(IToken);
		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree string_literal163_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(323, 4);
			// SugarCpp.g:323:4: ( 'static' )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==163))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:4: 'static'
				{
				DebugLocation(323, 4);
				string_literal162=(IToken)Match(input,163,Follow._163_in_type_ident1887); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal162);


				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(323, 14);
			// SugarCpp.g:323:14: ( 'const' )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==141))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:14: 'const'
				{
				DebugLocation(323, 14);
				string_literal163=(IToken)Match(input,141,Follow._141_in_type_ident1890); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal163);


				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(323, 23);
			// SugarCpp.g:323:23: ( 'struct' )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==164))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:23: 'struct'
				{
				DebugLocation(323, 23);
				string_literal164=(IToken)Match(input,164,Follow._164_in_type_ident1893); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal164);


				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(323, 33);
			// SugarCpp.g:323:33: ( 'long' )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==154))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:33: 'long'
				{
				DebugLocation(323, 33);
				string_literal165=(IToken)Match(input,154,Follow._154_in_type_ident1896); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal165);


				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(323, 41);
			PushFollow(Follow._ident_in_type_ident1899);
			ident166=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident166.Tree);


			{
			// AST REWRITE
			// elements: 163, 141, 154, ident, 164
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(323, 50);
				// SugarCpp.g:323:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(323, 63);
				// SugarCpp.g:323:63: ( 'static' )?
				if (stream_163.HasNext)
				{
					DebugLocation(323, 63);
					adaptor.AddChild(root_1, stream_163.NextNode());

				}
				stream_163.Reset();
				DebugLocation(323, 73);
				// SugarCpp.g:323:73: ( 'const' )?
				if (stream_141.HasNext)
				{
					DebugLocation(323, 73);
					adaptor.AddChild(root_1, stream_141.NextNode());

				}
				stream_141.Reset();
				DebugLocation(323, 82);
				// SugarCpp.g:323:82: ( 'struct' )?
				if (stream_164.HasNext)
				{
					DebugLocation(323, 82);
					adaptor.AddChild(root_1, stream_164.NextNode());

				}
				stream_164.Reset();
				DebugLocation(323, 92);
				// SugarCpp.g:323:92: ( 'long' )?
				if (stream_154.HasNext)
				{
					DebugLocation(323, 92);
					adaptor.AddChild(root_1, stream_154.NextNode());

				}
				stream_154.Reset();
				DebugLocation(323, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:326:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(326, 1);
		try
		{
			// SugarCpp.g:327:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: ident ( ',' ident )*
			{
			DebugLocation(327, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1930);
			ident167=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident167.Tree);
			DebugLocation(327, 10);
			// SugarCpp.g:327:10: ( ',' ident )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==99))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:327:11: ',' ident
					{
					DebugLocation(327, 11);
					char_literal168=(IToken)Match(input,99,Follow._99_in_generic_parameter_inside1933); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal168);

					DebugLocation(327, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1935);
					ident169=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident169.Tree);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(327, 26);
				// SugarCpp.g:327:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(327, 47);
				// SugarCpp.g:327:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(327, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:330:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(330, 1);
		try
		{
			// SugarCpp.g:331:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(331, 4);
			char_literal170=(IToken)Match(input,114,Follow._114_in_generic_parameter1957); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal170);

			DebugLocation(331, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1959);
			generic_parameter_inside171=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside171.Tree);
			DebugLocation(331, 33);
			char_literal172=(IToken)Match(input,124,Follow._124_in_generic_parameter1961); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(char_literal172);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:37: -> generic_parameter_inside
			{
				DebugLocation(331, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:334:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(335, 4);
			PushFollow(Follow._func_args_item_in_func_args1976);
			func_args_item173=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item173.Tree);
			DebugLocation(335, 19);
			// SugarCpp.g:335:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==99))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:335:20: ',' func_args_item
					{
					DebugLocation(335, 20);
					char_literal174=(IToken)Match(input,99,Follow._99_in_func_args1979); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal174);

					DebugLocation(335, 24);
					PushFollow(Follow._func_args_item_in_func_args1981);
					func_args_item175=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item175.Tree);

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(335, 44);
				// SugarCpp.g:335:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(335, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(335, 56);
				// SugarCpp.g:335:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(335, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:338:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal177 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken string_literal180 = default(IToken);
		IToken string_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree string_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT))
			{
				alt83 = 1;
			}
			else if ((LA83_0==112))
			{
				alt83 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:339:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(339, 4);
				PushFollow(Follow._ident_list_in_func_args_item2003);
				ident_list176=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list176.Tree);
				DebugLocation(339, 15);
				char_literal177=(IToken)Match(input,110,Follow._110_in_func_args_item2005); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal177);

				DebugLocation(339, 19);
				PushFollow(Follow._type_name_in_func_args_item2007);
				type_name178=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name178.Tree);
				DebugLocation(339, 29);
				// SugarCpp.g:339:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt82=3;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt82 = 1;
					}
					break;
				case 92:
					{
					alt82 = 2;
					}
					break;
				case 93:
				case 99:
					{
					alt82 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:31: ( '=' | ':=' ) expr
					{
					DebugLocation(339, 31);
					// SugarCpp.g:339:31: ( '=' | ':=' )
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==120))
					{
						alt81 = 1;
					}
					else if ((LA81_0==112))
					{
						alt81 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:339:32: '='
						{
						DebugLocation(339, 32);
						char_literal179=(IToken)Match(input,120,Follow._120_in_func_args_item2012); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal179);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:339:38: ':='
						{
						DebugLocation(339, 38);
						string_literal180=(IToken)Match(input,112,Follow._112_in_func_args_item2016); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal180);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(339, 44);
					PushFollow(Follow._expr_in_func_args_item2019);
					expr181=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr181.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(339, 53);
						// SugarCpp.g:339:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(339, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(339, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(339, 93);
						// SugarCpp.g:339:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(339, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:340:33: bracket_expr_list
					{
					DebugLocation(340, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item2070);
					bracket_expr_list182=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list182.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 340:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(340, 55);
						// SugarCpp.g:340:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(340, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(340, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(340, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(340, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:341:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(341, 18);
						// SugarCpp.g:341:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(341, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(341, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(341, 58);
						// SugarCpp.g:341:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:343:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 8);
				string_literal183=(IToken)Match(input,112,Follow._112_in_func_args_item2130); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal183_tree = (CommonTree)adaptor.Create(string_literal183);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal183_tree, root_0);
				}
				DebugLocation(343, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2134);
				modify_expr184=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr184.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:346:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set185 = default(IToken);

		CommonTree set185_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 2);

			set185=(IToken)input.LT(1);
			if (input.LA(1)==94||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set185));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:350:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal187 = default(IToken);
		IToken char_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt84=2;
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==IDENT))
			{
				alt84 = 1;
			}
			else if ((LA84_0==92))
			{
				alt84 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:4: ident
				{
				DebugLocation(351, 4);
				PushFollow(Follow._ident_in_func_name2168);
				ident186=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident186.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 351:10: -> ident
				{
					DebugLocation(351, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:352:4: '(' operator ')'
				{
				DebugLocation(352, 4);
				char_literal187=(IToken)Match(input,92,Follow._92_in_func_name2177); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal187);

				DebugLocation(352, 8);
				PushFollow(Follow._operator_in_func_name2179);
				operator188=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator188.Tree);
				DebugLocation(352, 17);
				char_literal189=(IToken)Match(input,93,Follow._93_in_func_name2181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal189);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 352:21: -> operator
				{
					DebugLocation(352, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:355:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(355, 1);
		try
		{
			// SugarCpp.g:356:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(356, 4);
			PushFollow(Follow._type_name_in_func_type2196);
			type_name190=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name190.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:359:1: func_def : ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal192 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken NEWLINE201 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken NEWLINE205 = default(IToken);
		IToken INDENT206 = default(IToken);
		IToken NEWLINE207 = default(IToken);
		IToken NEWLINE209 = default(IToken);
		IToken DEDENT210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree NEWLINE201_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree NEWLINE205_tree = default(CommonTree);
		CommonTree INDENT206_tree = default(CommonTree);
		CommonTree NEWLINE207_tree = default(CommonTree);
		CommonTree NEWLINE209_tree = default(CommonTree);
		CommonTree DEDENT210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(359, 4);
		try
		{
			// SugarCpp.g:360:2: ( ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(360, 4);
			// SugarCpp.g:360:4: ( attribute )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==131))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:4: attribute
				{
				DebugLocation(360, 4);
				PushFollow(Follow._attribute_in_func_def2207);
				attribute191=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute191.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(360, 15);
			// SugarCpp.g:360:15: ( 'public' )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==161))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:15: 'public'
				{
				DebugLocation(360, 15);
				string_literal192=(IToken)Match(input,161,Follow._161_in_func_def2210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal192);


				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(360, 25);
			// SugarCpp.g:360:25: ( 'virtual' )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==174))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:25: 'virtual'
				{
				DebugLocation(360, 25);
				string_literal193=(IToken)Match(input,174,Follow._174_in_func_def2213); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal193);


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(360, 36);
			// SugarCpp.g:360:36: ( func_type )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			try
			{
				alt88 = dfa88.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:36: func_type
				{
				DebugLocation(360, 36);
				PushFollow(Follow._func_type_in_func_def2216);
				func_type194=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(360, 47);
			// SugarCpp.g:360:47: ( '~' )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_0 = input.LA(1);

			if ((LA89_0==182))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:47: '~'
				{
				DebugLocation(360, 47);
				char_literal195=(IToken)Match(input,182,Follow._182_in_func_def2219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal195);


				}
				break;

			}
			} finally { DebugExitSubRule(89); }

			DebugLocation(360, 52);
			PushFollow(Follow._func_name_in_func_def2222);
			func_name196=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name196.Tree);
			DebugLocation(360, 62);
			// SugarCpp.g:360:62: ( generic_parameter )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==114))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:62: generic_parameter
				{
				DebugLocation(360, 62);
				PushFollow(Follow._generic_parameter_in_func_def2224);
				generic_parameter197=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter197.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(90); }

			DebugLocation(360, 81);
			char_literal198=(IToken)Match(input,92,Follow._92_in_func_def2227); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal198);

			DebugLocation(360, 85);
			// SugarCpp.g:360:85: ( func_args )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==IDENT||LA91_0==112))
			{
				alt91 = 1;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:85: func_args
				{
				DebugLocation(360, 85);
				PushFollow(Follow._func_args_in_func_def2229);
				func_args199=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args199.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(91); }

			DebugLocation(360, 96);
			char_literal200=(IToken)Match(input,93,Follow._93_in_func_def2232); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal200);

			DebugLocation(360, 100);
			// SugarCpp.g:360:100: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==NEWLINE))
			{
				alt98 = 1;
			}
			else if ((LA98_0==120))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:102: ( NEWLINE )+ stmt_block
				{
				DebugLocation(360, 102);
				// SugarCpp.g:360:102: ( NEWLINE )+
				int cnt92=0;
				try { DebugEnterSubRule(92);
				while (true)
				{
					int alt92=2;
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==NEWLINE))
					{
						alt92 = 1;
					}


					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:360:102: NEWLINE
						{
						DebugLocation(360, 102);
						NEWLINE201=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2236); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE201);


						}
						break;

					default:
						if (cnt92 >= 1)
							goto loop92;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee92 = new EarlyExitException( 92, input );
						DebugRecognitionException(eee92);
						throw eee92;
					}
					cnt92++;
				}
				loop92:
					;

				} finally { DebugExitSubRule(92); }

				DebugLocation(360, 111);
				PushFollow(Follow._stmt_block_in_func_def2239);
				stmt_block202=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block202.Tree);


				{
				// AST REWRITE
				// elements: attribute, func_type, 174, generic_parameter, func_args, 182, stmt_block, func_name, 161
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 360:122: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(360, 125);
					// SugarCpp.g:360:125: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(360, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(360, 136);
					// SugarCpp.g:360:136: ( 'public' )?
					if (stream_161.HasNext)
					{
						DebugLocation(360, 136);
						adaptor.AddChild(root_1, stream_161.NextNode());

					}
					stream_161.Reset();
					DebugLocation(360, 146);
					// SugarCpp.g:360:146: ( 'virtual' )?
					if (stream_174.HasNext)
					{
						DebugLocation(360, 146);
						adaptor.AddChild(root_1, stream_174.NextNode());

					}
					stream_174.Reset();
					DebugLocation(360, 157);
					// SugarCpp.g:360:157: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(360, 157);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(360, 168);
					// SugarCpp.g:360:168: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(360, 168);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(360, 179);
					// SugarCpp.g:360:179: ( '~' )?
					if (stream_182.HasNext)
					{
						DebugLocation(360, 179);
						adaptor.AddChild(root_1, stream_182.NextNode());

					}
					stream_182.Reset();
					DebugLocation(360, 184);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(360, 194);
					// SugarCpp.g:360:194: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(360, 194);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(360, 213);
					// SugarCpp.g:360:213: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(360, 213);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(360, 224);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:361:30: '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(361, 30);
				char_literal203=(IToken)Match(input,120,Follow._120_in_func_def2301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_120.Add(char_literal203);

				DebugLocation(361, 34);
				// SugarCpp.g:361:34: ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==NUMBER||LA97_0==STRING||LA97_0==85||LA97_0==90||LA97_0==92||LA97_0==94||(LA97_0>=96 && LA97_0<=97)||(LA97_0>=100 && LA97_0<=101)||(LA97_0>=130 && LA97_0<=131)||LA97_0==153||LA97_0==156||(LA97_0>=158 && LA97_0<=159)||LA97_0==182))
				{
					alt97 = 1;
				}
				else if ((LA97_0==NEWLINE))
				{
					alt97 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:361:36: where_expr
					{
					DebugLocation(361, 36);
					PushFollow(Follow._where_expr_in_func_def2305);
					where_expr204=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr204.Tree);


					{
					// AST REWRITE
					// elements: 161, generic_parameter, func_name, 182, where_expr, func_type, 174, func_args, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 361:48: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(361, 51);
						// SugarCpp.g:361:51: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(361, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(361, 62);
						// SugarCpp.g:361:62: ( 'public' )?
						if (stream_161.HasNext)
						{
							DebugLocation(361, 62);
							adaptor.AddChild(root_1, stream_161.NextNode());

						}
						stream_161.Reset();
						DebugLocation(361, 72);
						// SugarCpp.g:361:72: ( 'virtual' )?
						if (stream_174.HasNext)
						{
							DebugLocation(361, 72);
							adaptor.AddChild(root_1, stream_174.NextNode());

						}
						stream_174.Reset();
						DebugLocation(361, 83);
						// SugarCpp.g:361:83: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(361, 83);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(361, 94);
						// SugarCpp.g:361:94: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(361, 94);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(361, 105);
						// SugarCpp.g:361:105: ( '~' )?
						if (stream_182.HasNext)
						{
							DebugLocation(361, 105);
							adaptor.AddChild(root_1, stream_182.NextNode());

						}
						stream_182.Reset();
						DebugLocation(361, 110);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(361, 120);
						// SugarCpp.g:361:120: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(361, 120);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(361, 139);
						// SugarCpp.g:361:139: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(361, 139);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(361, 150);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:362:30: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(362, 30);
					// SugarCpp.g:362:30: ( NEWLINE )+
					int cnt93=0;
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==NEWLINE))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch (alt93)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:362:30: NEWLINE
							{
							DebugLocation(362, 30);
							NEWLINE205=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2368); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE205);


							}
							break;

						default:
							if (cnt93 >= 1)
								goto loop93;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee93 = new EarlyExitException( 93, input );
							DebugRecognitionException(eee93);
							throw eee93;
						}
						cnt93++;
					}
					loop93:
						;

					} finally { DebugExitSubRule(93); }

					DebugLocation(362, 39);
					INDENT206=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2371); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT206);

					DebugLocation(362, 46);
					// SugarCpp.g:362:46: ( NEWLINE )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==NEWLINE))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:362:46: NEWLINE
							{
							DebugLocation(362, 46);
							NEWLINE207=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2373); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE207);


							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }

					DebugLocation(362, 55);
					// SugarCpp.g:362:55: ( match_item ( NEWLINE )+ )+
					int cnt96=0;
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==178))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch (alt96)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:362:56: match_item ( NEWLINE )+
							{
							DebugLocation(362, 56);
							PushFollow(Follow._match_item_in_func_def2377);
							match_item208=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item208.Tree);
							DebugLocation(362, 67);
							// SugarCpp.g:362:67: ( NEWLINE )+
							int cnt95=0;
							try { DebugEnterSubRule(95);
							while (true)
							{
								int alt95=2;
								try { DebugEnterDecision(95, false);
								int LA95_0 = input.LA(1);

								if ((LA95_0==NEWLINE))
								{
									alt95 = 1;
								}


								} finally { DebugExitDecision(95); }
								switch (alt95)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:362:67: NEWLINE
									{
									DebugLocation(362, 67);
									NEWLINE209=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2379); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE209);


									}
									break;

								default:
									if (cnt95 >= 1)
										goto loop95;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee95 = new EarlyExitException( 95, input );
									DebugRecognitionException(eee95);
									throw eee95;
								}
								cnt95++;
							}
							loop95:
								;

							} finally { DebugExitSubRule(95); }


							}
							break;

						default:
							if (cnt96 >= 1)
								goto loop96;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee96 = new EarlyExitException( 96, input );
							DebugRecognitionException(eee96);
							throw eee96;
						}
						cnt96++;
					}
					loop96:
						;

					} finally { DebugExitSubRule(96); }

					DebugLocation(362, 78);
					DEDENT210=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2384); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT210);



					{
					// AST REWRITE
					// elements: func_type, 174, generic_parameter, match_item, 182, 161, func_name, func_args, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 362:85: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(362, 88);
						// SugarCpp.g:362:88: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(362, 90);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(362, 99);
						// SugarCpp.g:362:99: ( 'public' )?
						if (stream_161.HasNext)
						{
							DebugLocation(362, 99);
							adaptor.AddChild(root_1, stream_161.NextNode());

						}
						stream_161.Reset();
						DebugLocation(362, 109);
						// SugarCpp.g:362:109: ( 'virtual' )?
						if (stream_174.HasNext)
						{
							DebugLocation(362, 109);
							adaptor.AddChild(root_1, stream_174.NextNode());

						}
						stream_174.Reset();
						DebugLocation(362, 120);
						// SugarCpp.g:362:120: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(362, 120);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(362, 131);
						// SugarCpp.g:362:131: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(362, 131);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(362, 142);
						// SugarCpp.g:362:142: ( '~' )?
						if (stream_182.HasNext)
						{
							DebugLocation(362, 142);
							adaptor.AddChild(root_1, stream_182.NextNode());

						}
						stream_182.Reset();
						DebugLocation(362, 147);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(362, 157);
						// SugarCpp.g:362:157: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(362, 157);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(362, 176);
						// SugarCpp.g:362:176: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(362, 176);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(362, 187);
						// SugarCpp.g:362:187: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(362, 189);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(362, 200);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(362, 200);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }


				}
				break;

			}
			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(365, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:367:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE212 = default(IToken);
		IToken NEWLINE214 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken NEWLINE216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE212_tree = default(CommonTree);
		CommonTree NEWLINE214_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree NEWLINE216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(367, 1);
		try
		{
			// SugarCpp.g:368:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==142||(LA103_0>=146 && LA103_0<=148)||LA103_0==155||LA103_0==165||LA103_0==169||(LA103_0>=171 && LA103_0<=172)||LA103_0==177))
			{
				alt103 = 1;
			}
			else if ((LA103_0==IDENT||LA103_0==85||LA103_0==90||LA103_0==92||LA103_0==94||(LA103_0>=96 && LA103_0<=97)||(LA103_0>=100 && LA103_0<=101)||LA103_0==130||LA103_0==159||LA103_0==162||LA103_0==170||LA103_0==173||LA103_0==182))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:368:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(368, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2492);
				stmt_complex211=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex211.Tree);
				DebugLocation(368, 17);
				// SugarCpp.g:368:17: ( NEWLINE )+
				int cnt99=0;
				try { DebugEnterSubRule(99);
				while (true)
				{
					int alt99=2;
					try { DebugEnterDecision(99, false);
					int LA99_0 = input.LA(1);

					if ((LA99_0==NEWLINE))
					{
						alt99 = 1;
					}


					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:17: NEWLINE
						{
						DebugLocation(368, 17);
						NEWLINE212=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2494); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE212);


						}
						break;

					default:
						if (cnt99 >= 1)
							goto loop99;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee99 = new EarlyExitException( 99, input );
						DebugRecognitionException(eee99);
						throw eee99;
					}
					cnt99++;
				}
				loop99:
					;

				} finally { DebugExitSubRule(99); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 368:26: -> stmt_complex
				{
					DebugLocation(368, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:369:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(369, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2504);
				stmt_simple213=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple213.Tree);
				DebugLocation(369, 16);
				// SugarCpp.g:369:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==NEWLINE))
				{
					alt102 = 1;
				}
				else if ((LA102_0==113))
				{
					alt102 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:369:17: ( NEWLINE )+
					{
					DebugLocation(369, 17);
					// SugarCpp.g:369:17: ( NEWLINE )+
					int cnt100=0;
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==NEWLINE))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch (alt100)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:369:17: NEWLINE
							{
							DebugLocation(369, 17);
							NEWLINE214=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2507); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE214);


							}
							break;

						default:
							if (cnt100 >= 1)
								goto loop100;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee100 = new EarlyExitException( 100, input );
							DebugRecognitionException(eee100);
							throw eee100;
						}
						cnt100++;
					}
					loop100:
						;

					} finally { DebugExitSubRule(100); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:28: ';' ( NEWLINE )*
					{
					DebugLocation(369, 28);
					char_literal215=(IToken)Match(input,113,Follow._113_in_stmt_block_item2512); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal215);

					DebugLocation(369, 32);
					// SugarCpp.g:369:32: ( NEWLINE )*
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==NEWLINE))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch ( alt101 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:369:32: NEWLINE
							{
							DebugLocation(369, 32);
							NEWLINE216=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2514); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE216);


							}
							break;

						default:
							goto loop101;
						}
					}

					loop101:
						;

					} finally { DebugExitSubRule(101); }


					}
					break;

				}
				} finally { DebugExitSubRule(102); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 369:42: -> stmt_simple
				{
					DebugLocation(369, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:372:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT217 = default(IToken);
		IToken NEWLINE218 = default(IToken);
		IToken DEDENT220 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT217_tree = default(CommonTree);
		CommonTree NEWLINE218_tree = default(CommonTree);
		CommonTree DEDENT220_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(373, 4);
			INDENT217=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2531); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT217);

			DebugLocation(373, 11);
			// SugarCpp.g:373:11: ( NEWLINE )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:11: NEWLINE
					{
					DebugLocation(373, 11);
					NEWLINE218=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE218);


					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(373, 20);
			// SugarCpp.g:373:20: ( stmt_block_item )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==IDENT||LA105_0==85||LA105_0==90||LA105_0==92||LA105_0==94||(LA105_0>=96 && LA105_0<=97)||(LA105_0>=100 && LA105_0<=101)||LA105_0==130||LA105_0==142||(LA105_0>=146 && LA105_0<=148)||LA105_0==155||LA105_0==159||LA105_0==162||LA105_0==165||(LA105_0>=169 && LA105_0<=173)||LA105_0==177||LA105_0==182))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:20: stmt_block_item
					{
					DebugLocation(373, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2536);
					stmt_block_item219=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item219.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }

			DebugLocation(373, 37);
			DEDENT220=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2539); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT220);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 373:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(373, 47);
				// SugarCpp.g:373:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(373, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(373, 60);
				// SugarCpp.g:373:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(373, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:376:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( stmt_simple | stmt_complex )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			int LA106_0 = input.LA(1);

			if ((LA106_0==IDENT||LA106_0==85||LA106_0==90||LA106_0==92||LA106_0==94||(LA106_0>=96 && LA106_0<=97)||(LA106_0>=100 && LA106_0<=101)||LA106_0==130||LA106_0==159||LA106_0==162||LA106_0==170||LA106_0==173||LA106_0==182))
			{
				alt106 = 1;
			}
			else if ((LA106_0==142||(LA106_0>=146 && LA106_0<=148)||LA106_0==155||LA106_0==165||LA106_0==169||(LA106_0>=171 && LA106_0<=172)||LA106_0==177))
			{
				alt106 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:377:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(377, 4);
				PushFollow(Follow._stmt_simple_in_stmt2559);
				stmt_simple221=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple221.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:378:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._stmt_complex_in_stmt2564);
				stmt_complex222=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex222.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:381:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(381, 1);
		try
		{
			// SugarCpp.g:382:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:382:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(382, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2575);
			stmt_expr223=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr223.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:385:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt107=6;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case 148:
			case 171:
				{
				alt107 = 1;
				}
				break;
			case 147:
				{
				alt107 = 2;
				}
				break;
			case 155:
			case 172:
			case 177:
				{
				alt107 = 3;
				}
				break;
			case 169:
				{
				alt107 = 4;
				}
				break;
			case 165:
				{
				alt107 = 5;
				}
				break;
			case 142:
			case 146:
				{
				alt107 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:386:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2586);
				stmt_if224=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if224.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:387:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2591);
				stmt_for225=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for225.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:388:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2596);
				stmt_while226=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while226.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:389:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(389, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2601);
				stmt_try227=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try227.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:390:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(390, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2606);
				stmt_switch228=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch228.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:391:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(391, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2611);
				stmt_defer229=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer229.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:394:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal230 = default(IToken);
		IToken string_literal232 = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken string_literal236 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(394, 1);
		try
		{
			// SugarCpp.g:395:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:395:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(395, 4);
			// SugarCpp.g:395:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:395:5: a= stmt_expr_item
			{
			DebugLocation(395, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2625);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 395:22: -> $a
			{
				DebugLocation(395, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(395, 29);
			// SugarCpp.g:395:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=6;
				try { DebugEnterDecision(109, false);
				switch (input.LA(1))
				{
				case 148:
					{
					alt109 = 1;
					}
					break;
				case 171:
					{
					alt109 = 2;
					}
					break;
				case 177:
					{
					alt109 = 3;
					}
					break;
				case 172:
					{
					alt109 = 4;
					}
					break;
				case 147:
					{
					alt109 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:395:31: 'if' expr
					{
					DebugLocation(395, 31);
					string_literal230=(IToken)Match(input,148,Follow._148_in_stmt_expr2635); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_148.Add(string_literal230);

					DebugLocation(395, 36);
					PushFollow(Follow._expr_in_stmt_expr2637);
					expr231=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr231.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(395, 44);
						// SugarCpp.g:395:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 59);
						// SugarCpp.g:395:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(395, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:396:13: 'unless' expr
					{
					DebugLocation(396, 13);
					string_literal232=(IToken)Match(input,171,Follow._171_in_stmt_expr2666); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(string_literal232);

					DebugLocation(396, 22);
					PushFollow(Follow._expr_in_stmt_expr2668);
					expr233=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr233.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(396, 30);
						// SugarCpp.g:396:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(396, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(396, 49);
						// SugarCpp.g:396:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(396, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:397:13: 'while' expr
					{
					DebugLocation(397, 13);
					string_literal234=(IToken)Match(input,177,Follow._177_in_stmt_expr2697); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_177.Add(string_literal234);

					DebugLocation(397, 21);
					PushFollow(Follow._expr_in_stmt_expr2699);
					expr235=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr235.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(397, 29);
						// SugarCpp.g:397:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(397, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(397, 47);
						// SugarCpp.g:397:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(397, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:398:13: 'until' expr
					{
					DebugLocation(398, 13);
					string_literal236=(IToken)Match(input,172,Follow._172_in_stmt_expr2728); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_172.Add(string_literal236);

					DebugLocation(398, 21);
					PushFollow(Follow._expr_in_stmt_expr2730);
					expr237=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr237.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(398, 29);
						// SugarCpp.g:398:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(398, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(398, 47);
						// SugarCpp.g:398:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(398, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:399:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(399, 13);
					string_literal238=(IToken)Match(input,147,Follow._147_in_stmt_expr2759); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_147.Add(string_literal238);

					DebugLocation(399, 19);
					PushFollow(Follow._for_item_in_stmt_expr2761);
					for_item239=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item239.Tree);
					DebugLocation(399, 28);
					// SugarCpp.g:399:28: ( ',' for_item )*
					try { DebugEnterSubRule(108);
					while (true)
					{
						int alt108=2;
						try { DebugEnterDecision(108, false);
						int LA108_0 = input.LA(1);

						if ((LA108_0==99))
						{
							alt108 = 1;
						}


						} finally { DebugExitDecision(108); }
						switch ( alt108 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:399:29: ',' for_item
							{
							DebugLocation(399, 29);
							char_literal240=(IToken)Match(input,99,Follow._99_in_stmt_expr2764); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal240);

							DebugLocation(399, 33);
							PushFollow(Follow._for_item_in_stmt_expr2766);
							for_item241=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item241.Tree);

							}
							break;

						default:
							goto loop108;
						}
					}

					loop108:
						;

					} finally { DebugExitSubRule(108); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(399, 47);
						// SugarCpp.g:399:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(399, 58);
						// SugarCpp.g:399:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(399, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(399, 68);
						// SugarCpp.g:399:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(399, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:403:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(403, 1);
		try
		{
			// SugarCpp.g:404:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt110=5;
			try { DebugEnterDecision(110, false);
			try
			{
				alt110 = dfa110.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:404:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2808);
				stmt_alloc242=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc242.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:405:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2813);
				stmt_return243=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return243.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:406:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2818);
				stmt_using244=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using244.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:407:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(407, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2823);
				stmt_typedef245=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef245.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:408:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2828);
				stmt_modify246=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify246.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:411:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal247 = default(IToken);
		IToken string_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt111=2;
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==142))
			{
				alt111 = 1;
			}
			else if ((LA111_0==146))
			{
				alt111 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:412:4: 'defer' stmt
				{
				DebugLocation(412, 4);
				string_literal247=(IToken)Match(input,142,Follow._142_in_stmt_defer2839); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal247);

				DebugLocation(412, 12);
				PushFollow(Follow._stmt_in_stmt_defer2841);
				stmt248=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt248.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(412, 20);
					// SugarCpp.g:412:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(412, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(412, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:413:4: 'finally' stmt
				{
				DebugLocation(413, 4);
				string_literal249=(IToken)Match(input,146,Follow._146_in_stmt_defer2854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal249);

				DebugLocation(413, 14);
				PushFollow(Follow._stmt_in_stmt_defer2856);
				stmt250=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt250.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 413:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(413, 22);
					// SugarCpp.g:413:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(413, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(413, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:416:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(416, 1);
		try
		{
			// SugarCpp.g:417:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:417:4: 'type' ident '=' type_name
			{
			DebugLocation(417, 4);
			string_literal251=(IToken)Match(input,170,Follow._170_in_stmt_typedef2875); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(string_literal251);

			DebugLocation(417, 11);
			PushFollow(Follow._ident_in_stmt_typedef2877);
			ident252=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident252.Tree);
			DebugLocation(417, 17);
			char_literal253=(IToken)Match(input,120,Follow._120_in_stmt_typedef2879); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal253);

			DebugLocation(417, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2881);
			type_name254=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name254.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(417, 34);
				// SugarCpp.g:417:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(417, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(417, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(417, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:420:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal256 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident255 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal256_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(420, 36);
		try
		{
			// SugarCpp.g:420:16: ( ident | 'namespace' )
			int alt112=2;
			try { DebugEnterDecision(112, false);
			int LA112_0 = input.LA(1);

			if ((LA112_0==IDENT))
			{
				alt112 = 1;
			}
			else if ((LA112_0==157))
			{
				alt112 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:420:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(420, 18);
				PushFollow(Follow._ident_in_stmt_using_item2900);
				ident255=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident255.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:420:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(420, 26);
				string_literal256=(IToken)Match(input,157,Follow._157_in_stmt_using_item2904); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal256_tree = (CommonTree)adaptor.Create(string_literal256);
				adaptor.AddChild(root_0, string_literal256_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(420, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:421:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal257 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal257_tree = default(CommonTree);
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(421, 1);
		try
		{
			// SugarCpp.g:422:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:422:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(422, 4);
			string_literal257=(IToken)Match(input,173,Follow._173_in_stmt_using2912); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(string_literal257);

			DebugLocation(422, 12);
			// SugarCpp.g:422:12: ( stmt_using_item )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==IDENT||LA113_0==157))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:422:12: stmt_using_item
					{
					DebugLocation(422, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2914);
					stmt_using_item258=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item258.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 422:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(422, 32);
				// SugarCpp.g:422:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(422, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(422, 45);
				// SugarCpp.g:422:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(422, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:425:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(425, 1);
		try
		{
			// SugarCpp.g:426:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:426:4: 'return' ( expr )?
			{
			DebugLocation(426, 4);
			string_literal259=(IToken)Match(input,162,Follow._162_in_stmt_return2935); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_162.Add(string_literal259);

			DebugLocation(426, 13);
			// SugarCpp.g:426:13: ( expr )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==IDENT||LA114_0==NUMBER||LA114_0==STRING||LA114_0==85||LA114_0==90||LA114_0==92||LA114_0==94||(LA114_0>=96 && LA114_0<=97)||(LA114_0>=100 && LA114_0<=101)||(LA114_0>=130 && LA114_0<=131)||LA114_0==153||LA114_0==156||(LA114_0>=158 && LA114_0<=159)||LA114_0==182))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:426:13: expr
				{
				DebugLocation(426, 13);
				PushFollow(Follow._expr_in_stmt_return2937);
				expr260=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr260.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 426:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(426, 22);
				// SugarCpp.g:426:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(426, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(426, 36);
				// SugarCpp.g:426:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(426, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:429:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple263 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:430:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(430, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2958);
			stmt_simple261=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple261.Tree);
			DebugLocation(430, 16);
			// SugarCpp.g:430:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==113))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:430:17: ';' stmt_simple
					{
					DebugLocation(430, 17);
					char_literal262=(IToken)Match(input,113,Follow._113_in_inline_stmt_block2961); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal262);

					DebugLocation(430, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2963);
					stmt_simple263=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple263.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 430:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(430, 38);
				// SugarCpp.g:430:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(430, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(430, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(430, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:433:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal264 = default(IToken);
		IToken NEWLINE266 = default(IToken);
		IToken NEWLINE268 = default(IToken);
		IToken string_literal269 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken string_literal272 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken NEWLINE276 = default(IToken);
		IToken NEWLINE278 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken NEWLINE280 = default(IToken);
		IToken string_literal282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal264_tree = default(CommonTree);
		CommonTree NEWLINE266_tree = default(CommonTree);
		CommonTree NEWLINE268_tree = default(CommonTree);
		CommonTree string_literal269_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree NEWLINE276_tree = default(CommonTree);
		CommonTree NEWLINE278_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		CommonTree NEWLINE280_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt126=2;
			try { DebugEnterDecision(126, false);
			int LA126_0 = input.LA(1);

			if ((LA126_0==148))
			{
				alt126 = 1;
			}
			else if ((LA126_0==171))
			{
				alt126 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:434:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(434, 4);
				string_literal264=(IToken)Match(input,148,Follow._148_in_stmt_if2985); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal264);

				DebugLocation(434, 9);
				PushFollow(Follow._expr_in_stmt_if2987);
				expr265=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr265.Tree);
				DebugLocation(434, 14);
				// SugarCpp.g:434:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==NEWLINE))
				{
					alt120 = 1;
				}
				else if ((LA120_0==166))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(434, 15);
					// SugarCpp.g:434:15: ( NEWLINE )+
					int cnt116=0;
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==NEWLINE))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch (alt116)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:434:15: NEWLINE
							{
							DebugLocation(434, 15);
							NEWLINE266=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2990); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE266);


							}
							break;

						default:
							if (cnt116 >= 1)
								goto loop116;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee116 = new EarlyExitException( 116, input );
							DebugRecognitionException(eee116);
							throw eee116;
						}
						cnt116++;
					}
					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(434, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2993);
					stmt_block267=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block267.Tree);
					DebugLocation(434, 35);
					// SugarCpp.g:434:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt119=2;
					try { DebugEnterSubRule(119);
					try { DebugEnterDecision(119, false);
					try
					{
						alt119 = dfa119.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:434:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(434, 36);
						// SugarCpp.g:434:36: ( NEWLINE )*
						try { DebugEnterSubRule(117);
						while (true)
						{
							int alt117=2;
							try { DebugEnterDecision(117, false);
							int LA117_0 = input.LA(1);

							if ((LA117_0==NEWLINE))
							{
								alt117 = 1;
							}


							} finally { DebugExitDecision(117); }
							switch ( alt117 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:434:36: NEWLINE
								{
								DebugLocation(434, 36);
								NEWLINE268=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2996); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE268);


								}
								break;

							default:
								goto loop117;
							}
						}

						loop117:
							;

						} finally { DebugExitSubRule(117); }

						DebugLocation(434, 45);
						string_literal269=(IToken)Match(input,144,Follow._144_in_stmt_if2999); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal269);

						DebugLocation(434, 52);
						// SugarCpp.g:434:52: ( NEWLINE )+
						int cnt118=0;
						try { DebugEnterSubRule(118);
						while (true)
						{
							int alt118=2;
							try { DebugEnterDecision(118, false);
							int LA118_0 = input.LA(1);

							if ((LA118_0==NEWLINE))
							{
								alt118 = 1;
							}


							} finally { DebugExitDecision(118); }
							switch (alt118)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:434:52: NEWLINE
								{
								DebugLocation(434, 52);
								NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3001); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE270);


								}
								break;

							default:
								if (cnt118 >= 1)
									goto loop118;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee118 = new EarlyExitException( 118, input );
								DebugRecognitionException(eee118);
								throw eee118;
							}
							cnt118++;
						}
						loop118:
							;

						} finally { DebugExitSubRule(118); }

						DebugLocation(434, 61);
						PushFollow(Follow._stmt_block_in_stmt_if3004);
						stmt_block271=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block271.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(119); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(434, 77);
						// SugarCpp.g:434:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(434, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(434, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(434, 103);
						// SugarCpp.g:434:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(434, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:435:16: 'then' inline_stmt_block
					{
					DebugLocation(435, 16);
					string_literal272=(IToken)Match(input,166,Follow._166_in_stmt_if3036); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_166.Add(string_literal272);

					DebugLocation(435, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3038);
					inline_stmt_block273=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block273.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(435, 44);
						// SugarCpp.g:435:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(435, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(435, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:437:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(437, 4);
				string_literal274=(IToken)Match(input,171,Follow._171_in_stmt_if3059); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal274);

				DebugLocation(437, 13);
				PushFollow(Follow._expr_in_stmt_if3061);
				expr275=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr275.Tree);
				DebugLocation(437, 18);
				// SugarCpp.g:437:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}
				else if ((LA125_0==166))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(437, 19);
					// SugarCpp.g:437:19: ( NEWLINE )+
					int cnt121=0;
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						int LA121_0 = input.LA(1);

						if ((LA121_0==NEWLINE))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch (alt121)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:437:19: NEWLINE
							{
							DebugLocation(437, 19);
							NEWLINE276=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3064); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE276);


							}
							break;

						default:
							if (cnt121 >= 1)
								goto loop121;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee121 = new EarlyExitException( 121, input );
							DebugRecognitionException(eee121);
							throw eee121;
						}
						cnt121++;
					}
					loop121:
						;

					} finally { DebugExitSubRule(121); }

					DebugLocation(437, 28);
					PushFollow(Follow._stmt_block_in_stmt_if3067);
					stmt_block277=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block277.Tree);
					DebugLocation(437, 39);
					// SugarCpp.g:437:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt124=2;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					try
					{
						alt124 = dfa124.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:437:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(437, 40);
						// SugarCpp.g:437:40: ( NEWLINE )*
						try { DebugEnterSubRule(122);
						while (true)
						{
							int alt122=2;
							try { DebugEnterDecision(122, false);
							int LA122_0 = input.LA(1);

							if ((LA122_0==NEWLINE))
							{
								alt122 = 1;
							}


							} finally { DebugExitDecision(122); }
							switch ( alt122 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:437:40: NEWLINE
								{
								DebugLocation(437, 40);
								NEWLINE278=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3070); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE278);


								}
								break;

							default:
								goto loop122;
							}
						}

						loop122:
							;

						} finally { DebugExitSubRule(122); }

						DebugLocation(437, 49);
						string_literal279=(IToken)Match(input,144,Follow._144_in_stmt_if3073); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal279);

						DebugLocation(437, 56);
						// SugarCpp.g:437:56: ( NEWLINE )+
						int cnt123=0;
						try { DebugEnterSubRule(123);
						while (true)
						{
							int alt123=2;
							try { DebugEnterDecision(123, false);
							int LA123_0 = input.LA(1);

							if ((LA123_0==NEWLINE))
							{
								alt123 = 1;
							}


							} finally { DebugExitDecision(123); }
							switch (alt123)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:437:56: NEWLINE
								{
								DebugLocation(437, 56);
								NEWLINE280=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3075); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE280);


								}
								break;

							default:
								if (cnt123 >= 1)
									goto loop123;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee123 = new EarlyExitException( 123, input );
								DebugRecognitionException(eee123);
								throw eee123;
							}
							cnt123++;
						}
						loop123:
							;

						} finally { DebugExitSubRule(123); }

						DebugLocation(437, 65);
						PushFollow(Follow._stmt_block_in_stmt_if3078);
						stmt_block281=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block281.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(124); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 437:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(437, 81);
						// SugarCpp.g:437:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(437, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(437, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(437, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(437, 111);
						// SugarCpp.g:437:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(437, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:438:20: 'then' inline_stmt_block
					{
					DebugLocation(438, 20);
					string_literal282=(IToken)Match(input,166,Follow._166_in_stmt_if3114); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_166.Add(string_literal282);

					DebugLocation(438, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3116);
					inline_stmt_block283=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block283.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(438, 48);
						// SugarCpp.g:438:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(438, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(438, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(125); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:442:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal284 = default(IToken);
		IToken NEWLINE286 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken string_literal296 = default(IToken);
		IToken NEWLINE298 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block299 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree NEWLINE286_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree NEWLINE298_tree = default(CommonTree);
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(442, 1);
		try
		{
			// SugarCpp.g:443:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt133=3;
			try { DebugEnterDecision(133, false);
			switch (input.LA(1))
			{
			case 177:
				{
				alt133 = 1;
				}
				break;
			case 172:
				{
				alt133 = 2;
				}
				break;
			case 155:
				{
				alt133 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:443:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(443, 4);
				string_literal284=(IToken)Match(input,177,Follow._177_in_stmt_while3147); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(string_literal284);

				DebugLocation(443, 12);
				PushFollow(Follow._expr_in_stmt_while3149);
				expr285=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr285.Tree);
				DebugLocation(443, 17);
				// SugarCpp.g:443:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==NEWLINE))
				{
					alt128 = 1;
				}
				else if ((LA128_0==166))
				{
					alt128 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(443, 19);
					// SugarCpp.g:443:19: ( NEWLINE )+
					int cnt127=0;
					try { DebugEnterSubRule(127);
					while (true)
					{
						int alt127=2;
						try { DebugEnterDecision(127, false);
						int LA127_0 = input.LA(1);

						if ((LA127_0==NEWLINE))
						{
							alt127 = 1;
						}


						} finally { DebugExitDecision(127); }
						switch (alt127)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:443:19: NEWLINE
							{
							DebugLocation(443, 19);
							NEWLINE286=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3153); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE286);


							}
							break;

						default:
							if (cnt127 >= 1)
								goto loop127;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee127 = new EarlyExitException( 127, input );
							DebugRecognitionException(eee127);
							throw eee127;
						}
						cnt127++;
					}
					loop127:
						;

					} finally { DebugExitSubRule(127); }

					DebugLocation(443, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3156);
					stmt_block287=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block287.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(443, 42);
						// SugarCpp.g:443:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(443, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(443, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:444:13: 'then' inline_stmt_block
					{
					DebugLocation(444, 13);
					string_literal288=(IToken)Match(input,166,Follow._166_in_stmt_while3180); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_166.Add(string_literal288);

					DebugLocation(444, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3182);
					inline_stmt_block289=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block289.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(444, 41);
						// SugarCpp.g:444:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(444, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(444, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(128); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:446:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(446, 4);
				string_literal290=(IToken)Match(input,172,Follow._172_in_stmt_while3206); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(string_literal290);

				DebugLocation(446, 12);
				PushFollow(Follow._expr_in_stmt_while3208);
				expr291=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr291.Tree);
				DebugLocation(446, 17);
				// SugarCpp.g:446:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==NEWLINE))
				{
					alt130 = 1;
				}
				else if ((LA130_0==166))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:446:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(446, 19);
					// SugarCpp.g:446:19: ( NEWLINE )+
					int cnt129=0;
					try { DebugEnterSubRule(129);
					while (true)
					{
						int alt129=2;
						try { DebugEnterDecision(129, false);
						int LA129_0 = input.LA(1);

						if ((LA129_0==NEWLINE))
						{
							alt129 = 1;
						}


						} finally { DebugExitDecision(129); }
						switch (alt129)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:446:19: NEWLINE
							{
							DebugLocation(446, 19);
							NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3212); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE292);


							}
							break;

						default:
							if (cnt129 >= 1)
								goto loop129;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee129 = new EarlyExitException( 129, input );
							DebugRecognitionException(eee129);
							throw eee129;
						}
						cnt129++;
					}
					loop129:
						;

					} finally { DebugExitSubRule(129); }

					DebugLocation(446, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3215);
					stmt_block293=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block293.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(446, 42);
						// SugarCpp.g:446:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(446, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(446, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:447:13: 'then' inline_stmt_block
					{
					DebugLocation(447, 13);
					string_literal294=(IToken)Match(input,166,Follow._166_in_stmt_while3239); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_166.Add(string_literal294);

					DebugLocation(447, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3241);
					inline_stmt_block295=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block295.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(447, 41);
						// SugarCpp.g:447:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(447, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(447, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:449:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(449, 4);
				string_literal296=(IToken)Match(input,155,Follow._155_in_stmt_while3265); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(string_literal296);

				DebugLocation(449, 11);
				// SugarCpp.g:449:11: ( expr )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==IDENT||LA131_0==NUMBER||LA131_0==STRING||LA131_0==85||LA131_0==90||LA131_0==92||LA131_0==94||(LA131_0>=96 && LA131_0<=97)||(LA131_0>=100 && LA131_0<=101)||(LA131_0>=130 && LA131_0<=131)||LA131_0==153||LA131_0==156||(LA131_0>=158 && LA131_0<=159)||LA131_0==182))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:11: expr
					{
					DebugLocation(449, 11);
					PushFollow(Follow._expr_in_stmt_while3267);
					expr297=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr297.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(449, 17);
				// SugarCpp.g:449:17: ( NEWLINE )+
				int cnt132=0;
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==NEWLINE))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:449:17: NEWLINE
						{
						DebugLocation(449, 17);
						NEWLINE298=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3270); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE298);


						}
						break;

					default:
						if (cnt132 >= 1)
							goto loop132;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee132 = new EarlyExitException( 132, input );
						DebugRecognitionException(eee132);
						throw eee132;
					}
					cnt132++;
				}
				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(449, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3273);
				stmt_block299=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block299.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 449:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(449, 40);
					// SugarCpp.g:449:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(449, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(449, 52);
					// SugarCpp.g:449:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(449, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(449, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:452:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal301 = default(IToken);
		IToken string_literal302 = default(IToken);
		IToken string_literal303 = default(IToken);
		IToken string_literal304 = default(IToken);
		IToken string_literal305 = default(IToken);
		IToken string_literal306 = default(IToken);
		IToken string_literal307 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal301_tree = default(CommonTree);
		CommonTree string_literal302_tree = default(CommonTree);
		CommonTree string_literal303_tree = default(CommonTree);
		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree string_literal305_tree = default(CommonTree);
		CommonTree string_literal306_tree = default(CommonTree);
		CommonTree string_literal307_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(452, 1);
		try
		{
			// SugarCpp.g:453:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(453, 4);
			PushFollow(Follow._ident_in_for_range3295);
			ident300=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident300.Tree);
			DebugLocation(453, 10);
			string_literal301=(IToken)Match(input,115,Follow._115_in_for_range3297); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(string_literal301);

			DebugLocation(453, 16);
			PushFollow(Follow._expr_in_for_range3301);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(453, 22);
			// SugarCpp.g:453:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt137=4;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case 168:
				{
				alt137 = 1;
				}
				break;
			case 167:
				{
				alt137 = 2;
				}
				break;
			case 143:
				{
				alt137 = 3;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 99:
			case 113:
			case 132:
			case 147:
			case 148:
			case 150:
			case 171:
			case 172:
			case 177:
				{
				alt137 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:453:24: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(453, 24);
				string_literal302=(IToken)Match(input,168,Follow._168_in_for_range3305); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal302);

				DebugLocation(453, 30);
				PushFollow(Follow._expr_in_for_range3309);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(453, 36);
				// SugarCpp.g:453:36: ( 'by' c= expr )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==137))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:37: 'by' c= expr
					{
					DebugLocation(453, 37);
					string_literal303=(IToken)Match(input,137,Follow._137_in_for_range3312); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal303);

					DebugLocation(453, 43);
					PushFollow(Follow._expr_in_for_range3316);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(134); }



				{
				// AST REWRITE
				// elements: c, b, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 453:51: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(453, 54);
					// SugarCpp.g:453:54: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(453, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(453, 68);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(453, 75);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(453, 78);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(453, 81);
					// SugarCpp.g:453:81: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(453, 81);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:454:9: 'til' b= expr ( 'by' c= expr )?
				{
				DebugLocation(454, 9);
				string_literal304=(IToken)Match(input,167,Follow._167_in_for_range3346); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal304);

				DebugLocation(454, 16);
				PushFollow(Follow._expr_in_for_range3350);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(454, 22);
				// SugarCpp.g:454:22: ( 'by' c= expr )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==137))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:23: 'by' c= expr
					{
					DebugLocation(454, 23);
					string_literal305=(IToken)Match(input,137,Follow._137_in_for_range3353); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal305);

					DebugLocation(454, 29);
					PushFollow(Follow._expr_in_for_range3357);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(135); }



				{
				// AST REWRITE
				// elements: c, b, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 454:37: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(454, 40);
					// SugarCpp.g:454:40: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(454, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(454, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(454, 62);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(454, 65);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(454, 68);
					// SugarCpp.g:454:68: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(454, 68);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:455:9: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(455, 9);
				string_literal306=(IToken)Match(input,143,Follow._143_in_for_range3387); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal306);

				DebugLocation(455, 19);
				PushFollow(Follow._expr_in_for_range3391);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(455, 25);
				// SugarCpp.g:455:25: ( 'by' c= expr )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==137))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:26: 'by' c= expr
					{
					DebugLocation(455, 26);
					string_literal307=(IToken)Match(input,137,Follow._137_in_for_range3394); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal307);

					DebugLocation(455, 32);
					PushFollow(Follow._expr_in_for_range3398);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(136); }



				{
				// AST REWRITE
				// elements: ident, b, a, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 455:40: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(455, 43);
					// SugarCpp.g:455:43: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(455, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(455, 62);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(455, 69);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(455, 72);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(455, 75);
					// SugarCpp.g:455:75: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(455, 75);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:456:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 456:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(456, 12);
					// SugarCpp.g:456:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(456, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(456, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(456, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:460:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr308 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:461:4: expr
			{
			DebugLocation(461, 4);
			PushFollow(Follow._expr_in_for_when3456);
			expr308=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr308.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 461:9: -> ^( For_Item_When expr )
			{
				DebugLocation(461, 12);
				// SugarCpp.g:461:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(461, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(461, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:464:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal310 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal310_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: ident '=>' expr
			{
			DebugLocation(465, 4);
			PushFollow(Follow._ident_in_for_map3475);
			ident309=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident309.Tree);
			DebugLocation(465, 10);
			string_literal310=(IToken)Match(input,123,Follow._123_in_for_map3477); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal310);

			DebugLocation(465, 15);
			PushFollow(Follow._expr_in_for_map3479);
			expr311=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr311.Tree);


			{
			// AST REWRITE
			// elements: expr, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 465:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(465, 23);
				// SugarCpp.g:465:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(465, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(465, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(465, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:468:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map314 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( for_range | for_when | for_map )
			int alt138=3;
			try { DebugEnterDecision(138, false);
			try
			{
				alt138 = dfa138.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:469:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 4);
				PushFollow(Follow._for_range_in_for_item3500);
				for_range312=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range312.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:470:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(470, 4);
				PushFollow(Follow._for_when_in_for_item3505);
				for_when313=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when313.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:471:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(471, 4);
				PushFollow(Follow._for_map_in_for_item3510);
				for_map314=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map314.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:474:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal315 = default(IToken);
		IToken char_literal317 = default(IToken);
		IToken NEWLINE319 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block320 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal315_tree = default(CommonTree);
		CommonTree char_literal317_tree = default(CommonTree);
		CommonTree NEWLINE319_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(475, 4);
			string_literal315=(IToken)Match(input,147,Follow._147_in_stmt_for3521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_147.Add(string_literal315);

			DebugLocation(475, 10);
			// SugarCpp.g:475:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:475:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(475, 12);
			PushFollow(Follow._for_item_in_stmt_for3525);
			for_item316=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item316.Tree);
			DebugLocation(475, 21);
			// SugarCpp.g:475:21: ( ',' for_item )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==99))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:22: ',' for_item
					{
					DebugLocation(475, 22);
					char_literal317=(IToken)Match(input,99,Follow._99_in_stmt_for3528); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal317);

					DebugLocation(475, 26);
					PushFollow(Follow._for_item_in_stmt_for3530);
					for_item318=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item318.Tree);

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(475, 37);
			// SugarCpp.g:475:37: ( NEWLINE )+
			int cnt140=0;
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==NEWLINE))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:37: NEWLINE
					{
					DebugLocation(475, 37);
					NEWLINE319=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3534); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE319);


					}
					break;

				default:
					if (cnt140 >= 1)
						goto loop140;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee140 = new EarlyExitException( 140, input );
					DebugRecognitionException(eee140);
					throw eee140;
				}
				cnt140++;
			}
			loop140:
				;

			} finally { DebugExitSubRule(140); }

			DebugLocation(475, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3537);
			stmt_block320=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block320.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 475:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(475, 60);
				// SugarCpp.g:475:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(475, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(475, 71);
				// SugarCpp.g:475:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(475, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(475, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:480:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal321 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken NEWLINE324 = default(IToken);
		IToken string_literal325 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree NEWLINE324_tree = default(CommonTree);
		CommonTree string_literal325_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(481, 4);
			string_literal321=(IToken)Match(input,169,Follow._169_in_stmt_try3568); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal321);

			DebugLocation(481, 10);
			// SugarCpp.g:481:10: ( NEWLINE )+
			int cnt141=0;
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==NEWLINE))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:10: NEWLINE
					{
					DebugLocation(481, 10);
					NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


					}
					break;

				default:
					if (cnt141 >= 1)
						goto loop141;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee141 = new EarlyExitException( 141, input );
					DebugRecognitionException(eee141);
					throw eee141;
				}
				cnt141++;
			}
			loop141:
				;

			} finally { DebugExitSubRule(141); }

			DebugLocation(481, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3573);
			stmt_block323=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block323.Tree);
			DebugLocation(481, 30);
			// SugarCpp.g:481:30: ( NEWLINE )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==NEWLINE))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:30: NEWLINE
					{
					DebugLocation(481, 30);
					NEWLINE324=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3575); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE324);


					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }

			DebugLocation(481, 39);
			string_literal325=(IToken)Match(input,139,Follow._139_in_stmt_try3578); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal325);

			DebugLocation(481, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3580);
			stmt_alloc326=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc326.Tree);
			DebugLocation(481, 58);
			// SugarCpp.g:481:58: ( NEWLINE )+
			int cnt143=0;
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==NEWLINE))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:58: NEWLINE
					{
					DebugLocation(481, 58);
					NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3582); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE327);


					}
					break;

				default:
					if (cnt143 >= 1)
						goto loop143;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee143 = new EarlyExitException( 143, input );
					DebugRecognitionException(eee143);
					throw eee143;
				}
				cnt143++;
			}
			loop143:
				;

			} finally { DebugExitSubRule(143); }

			DebugLocation(481, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3585);
			stmt_block328=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block328.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 481:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(481, 81);
				// SugarCpp.g:481:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(481, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(481, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(481, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(481, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:484:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal329 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken string_literal335 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block336 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal329_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree string_literal335_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:485:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(485, 4);
			string_literal329=(IToken)Match(input,175,Follow._175_in_switch_item3608); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(string_literal329);

			DebugLocation(485, 11);
			PushFollow(Follow._expr_in_switch_item3610);
			expr330=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr330.Tree);
			DebugLocation(485, 16);
			// SugarCpp.g:485:16: ( ',' expr )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==99))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:17: ',' expr
					{
					DebugLocation(485, 17);
					char_literal331=(IToken)Match(input,99,Follow._99_in_switch_item3613); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal331);

					DebugLocation(485, 21);
					PushFollow(Follow._expr_in_switch_item3615);
					expr332=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr332.Tree);

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }

			DebugLocation(485, 28);
			// SugarCpp.g:485:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_0 = input.LA(1);

			if ((LA146_0==NEWLINE))
			{
				alt146 = 1;
			}
			else if ((LA146_0==166))
			{
				alt146 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:485:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(485, 30);
				// SugarCpp.g:485:30: ( NEWLINE )+
				int cnt145=0;
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==NEWLINE))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:485:30: NEWLINE
						{
						DebugLocation(485, 30);
						NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3621); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE333);


						}
						break;

					default:
						if (cnt145 >= 1)
							goto loop145;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee145 = new EarlyExitException( 145, input );
						DebugRecognitionException(eee145);
						throw eee145;
					}
					cnt145++;
				}
				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(485, 39);
				PushFollow(Follow._stmt_block_in_switch_item3624);
				stmt_block334=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block334.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 485:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(485, 53);
					// SugarCpp.g:485:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(485, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(485, 67);
					// SugarCpp.g:485:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(485, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(485, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(485, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(485, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:486:30: 'then' inline_stmt_block
				{
				DebugLocation(486, 30);
				string_literal335=(IToken)Match(input,166,Follow._166_in_switch_item3670); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal335);

				DebugLocation(486, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3672);
				inline_stmt_block336=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block336.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 486:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(486, 58);
					// SugarCpp.g:486:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(486, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(486, 72);
					// SugarCpp.g:486:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(486, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(486, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(486, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(486, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(146); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:490:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal337 = default(IToken);
		IToken NEWLINE339 = default(IToken);
		IToken INDENT340 = default(IToken);
		IToken NEWLINE341 = default(IToken);
		IToken NEWLINE343 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken NEWLINE345 = default(IToken);
		IToken NEWLINE347 = default(IToken);
		IToken DEDENT348 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal337_tree = default(CommonTree);
		CommonTree NEWLINE339_tree = default(CommonTree);
		CommonTree INDENT340_tree = default(CommonTree);
		CommonTree NEWLINE341_tree = default(CommonTree);
		CommonTree NEWLINE343_tree = default(CommonTree);
		CommonTree string_literal344_tree = default(CommonTree);
		CommonTree NEWLINE345_tree = default(CommonTree);
		CommonTree NEWLINE347_tree = default(CommonTree);
		CommonTree DEDENT348_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(490, 1);
		try
		{
			// SugarCpp.g:491:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:491:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(491, 4);
			string_literal337=(IToken)Match(input,165,Follow._165_in_stmt_switch3712); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_165.Add(string_literal337);

			DebugLocation(491, 13);
			// SugarCpp.g:491:13: ( expr )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==IDENT||LA147_0==NUMBER||LA147_0==STRING||LA147_0==85||LA147_0==90||LA147_0==92||LA147_0==94||(LA147_0>=96 && LA147_0<=97)||(LA147_0>=100 && LA147_0<=101)||(LA147_0>=130 && LA147_0<=131)||LA147_0==153||LA147_0==156||(LA147_0>=158 && LA147_0<=159)||LA147_0==182))
			{
				alt147 = 1;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:491:13: expr
				{
				DebugLocation(491, 13);
				PushFollow(Follow._expr_in_stmt_switch3714);
				expr338=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr338.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(147); }

			DebugLocation(491, 19);
			// SugarCpp.g:491:19: ( NEWLINE )+
			int cnt148=0;
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==NEWLINE))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:491:19: NEWLINE
					{
					DebugLocation(491, 19);
					NEWLINE339=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3717); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE339);


					}
					break;

				default:
					if (cnt148 >= 1)
						goto loop148;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee148 = new EarlyExitException( 148, input );
					DebugRecognitionException(eee148);
					throw eee148;
				}
				cnt148++;
			}
			loop148:
				;

			} finally { DebugExitSubRule(148); }

			DebugLocation(491, 28);
			INDENT340=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3720); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT340);

			DebugLocation(491, 35);
			// SugarCpp.g:491:35: ( NEWLINE )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==NEWLINE))
				{
					alt149 = 1;
				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:491:35: NEWLINE
					{
					DebugLocation(491, 35);
					NEWLINE341=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3722); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE341);


					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }

			DebugLocation(491, 44);
			// SugarCpp.g:491:44: ( switch_item ( NEWLINE )+ )+
			int cnt151=0;
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==175))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:491:45: switch_item ( NEWLINE )+
					{
					DebugLocation(491, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3726);
					switch_item342=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item342.Tree);
					DebugLocation(491, 57);
					// SugarCpp.g:491:57: ( NEWLINE )+
					int cnt150=0;
					try { DebugEnterSubRule(150);
					while (true)
					{
						int alt150=2;
						try { DebugEnterDecision(150, false);
						int LA150_0 = input.LA(1);

						if ((LA150_0==NEWLINE))
						{
							alt150 = 1;
						}


						} finally { DebugExitDecision(150); }
						switch (alt150)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:491:57: NEWLINE
							{
							DebugLocation(491, 57);
							NEWLINE343=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3728); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE343);


							}
							break;

						default:
							if (cnt150 >= 1)
								goto loop150;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee150 = new EarlyExitException( 150, input );
							DebugRecognitionException(eee150);
							throw eee150;
						}
						cnt150++;
					}
					loop150:
						;

					} finally { DebugExitSubRule(150); }


					}
					break;

				default:
					if (cnt151 >= 1)
						goto loop151;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee151 = new EarlyExitException( 151, input );
					DebugRecognitionException(eee151);
					throw eee151;
				}
				cnt151++;
			}
			loop151:
				;

			} finally { DebugExitSubRule(151); }

			DebugLocation(491, 68);
			// SugarCpp.g:491:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_0 = input.LA(1);

			if ((LA154_0==144))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:491:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(491, 69);
				string_literal344=(IToken)Match(input,144,Follow._144_in_stmt_switch3734); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal344);

				DebugLocation(491, 76);
				// SugarCpp.g:491:76: ( NEWLINE )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==NEWLINE))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:491:76: NEWLINE
						{
						DebugLocation(491, 76);
						NEWLINE345=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3736); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE345);


						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(491, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3739);
				stmt_block346=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block346.Tree);
				DebugLocation(491, 96);
				// SugarCpp.g:491:96: ( NEWLINE )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:491:96: NEWLINE
						{
						DebugLocation(491, 96);
						NEWLINE347=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3741); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE347);


						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }


				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(491, 107);
			DEDENT348=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3746); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT348);



			{
			// AST REWRITE
			// elements: expr, switch_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 491:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(491, 117);
				// SugarCpp.g:491:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(491, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(491, 131);
				// SugarCpp.g:491:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(491, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(491, 137);
				// SugarCpp.g:491:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(491, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(491, 150);
				// SugarCpp.g:491:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(491, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:494:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:495:4: ident ( ',' ident )*
			{
			DebugLocation(495, 4);
			PushFollow(Follow._ident_in_ident_list3772);
			ident349=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident349.Tree);
			DebugLocation(495, 10);
			// SugarCpp.g:495:10: ( ',' ident )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=2;
				try { DebugEnterDecision(155, false);
				int LA155_0 = input.LA(1);

				if ((LA155_0==99))
				{
					alt155 = 1;
				}


				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:11: ',' ident
					{
					DebugLocation(495, 11);
					char_literal350=(IToken)Match(input,99,Follow._99_in_ident_list3775); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal350);

					DebugLocation(495, 15);
					PushFollow(Follow._ident_in_ident_list3777);
					ident351=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident351.Tree);

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 495:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(495, 26);
				// SugarCpp.g:495:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(495, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(495, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(495, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:498:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal353 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken string_literal356 = default(IToken);
		IToken string_literal359 = default(IToken);
		IToken char_literal361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal353_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree string_literal356_tree = default(CommonTree);
		CommonTree string_literal359_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(498, 1);
		try
		{
			// SugarCpp.g:499:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:499:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(499, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3799);
			ident_list352=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list352.Tree);
			DebugLocation(499, 15);
			// SugarCpp.g:499:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_0 = input.LA(1);

			if ((LA159_0==110))
			{
				alt159 = 1;
			}
			else if ((LA159_0==112))
			{
				alt159 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 159, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:499:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(499, 17);
				char_literal353=(IToken)Match(input,110,Follow._110_in_stmt_alloc3803); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal353);

				DebugLocation(499, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3805);
				type_name354=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name354.Tree);
				DebugLocation(499, 31);
				// SugarCpp.g:499:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt157=3;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt157 = 1;
					}
					break;
				case 92:
					{
					alt157 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 113:
				case 147:
				case 148:
				case 150:
				case 171:
				case 172:
				case 177:
					{
					alt157 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:499:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(499, 33);
					// SugarCpp.g:499:33: ( '=' | ':=' )
					int alt156=2;
					try { DebugEnterSubRule(156);
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==120))
					{
						alt156 = 1;
					}
					else if ((LA156_0==112))
					{
						alt156 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 156, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(156); }
					switch (alt156)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:499:34: '='
						{
						DebugLocation(499, 34);
						char_literal355=(IToken)Match(input,120,Follow._120_in_stmt_alloc3810); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal355);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:499:40: ':='
						{
						DebugLocation(499, 40);
						string_literal356=(IToken)Match(input,112,Follow._112_in_stmt_alloc3814); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal356);


						}
						break;

					}
					} finally { DebugExitSubRule(156); }

					DebugLocation(499, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3817);
					where_expr357=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr357.Tree);


					{
					// AST REWRITE
					// elements: ident_list, where_expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 499:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(499, 61);
						// SugarCpp.g:499:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(499, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(499, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(499, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(499, 101);
						// SugarCpp.g:499:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(499, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(499, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:500:33: bracket_expr_list
					{
					DebugLocation(500, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3868);
					bracket_expr_list358=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list358.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 500:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(500, 55);
						// SugarCpp.g:500:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(500, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(500, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(500, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(500, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:501:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 501:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(501, 18);
						// SugarCpp.g:501:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(501, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(501, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(501, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(501, 58);
						// SugarCpp.g:501:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(501, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(157); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:503:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(503, 8);
				string_literal359=(IToken)Match(input,112,Follow._112_in_stmt_alloc3932); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal359);

				DebugLocation(503, 14);
				// SugarCpp.g:503:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:503:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(503, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3936);
				where_expr360=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr360.Tree);
				DebugLocation(503, 26);
				// SugarCpp.g:503:26: ( ',' where_expr )*
				try { DebugEnterSubRule(158);
				while (true)
				{
					int alt158=2;
					try { DebugEnterDecision(158, false);
					int LA158_0 = input.LA(1);

					if ((LA158_0==99))
					{
						alt158 = 1;
					}


					} finally { DebugExitDecision(158); }
					switch ( alt158 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:27: ',' where_expr
						{
						DebugLocation(503, 27);
						char_literal361=(IToken)Match(input,99,Follow._99_in_stmt_alloc3939); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal361);

						DebugLocation(503, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3941);
						where_expr362=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr362.Tree);

						}
						break;

					default:
						goto loop158;
					}
				}

				loop158:
					;

				} finally { DebugExitSubRule(158); }


				}



				{
				// AST REWRITE
				// elements: 112, where_expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(503, 48);
					// SugarCpp.g:503:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(503, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(503, 66);
					// SugarCpp.g:503:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(503, 78);
					// SugarCpp.g:503:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(503, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(159); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(504, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:506:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal366 = default(IToken);
		IToken string_literal368 = default(IToken);
		IToken string_literal370 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue363 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr367 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr371 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal366_tree = default(CommonTree);
		CommonTree string_literal368_tree = default(CommonTree);
		CommonTree string_literal370_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(506, 1);
		try
		{
			// SugarCpp.g:507:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:507:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(507, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3971);
			lvalue363=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue363.Tree);
			DebugLocation(507, 11);
			// SugarCpp.g:507:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt160=5;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, false);
			switch (input.LA(1))
			{
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 117:
			case 120:
			case 127:
			case 134:
			case 179:
				{
				alt160 = 1;
				}
				break;
			case 129:
				{
				alt160 = 2;
				}
				break;
			case 116:
				{
				alt160 = 3;
				}
				break;
			case 126:
				{
				alt160 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 113:
			case 147:
			case 148:
			case 150:
			case 171:
			case 172:
			case 177:
				{
				alt160 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:507:13: modify_expr_op where_expr
				{
				DebugLocation(507, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3975);
				modify_expr_op364=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op364.Tree);
				DebugLocation(507, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3977);
				where_expr365=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr365.Tree);


				{
				// AST REWRITE
				// elements: modify_expr_op, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 507:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(507, 42);
					// SugarCpp.g:507:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(507, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(507, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(507, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:508:13: '?=' where_expr
				{
				DebugLocation(508, 13);
				string_literal366=(IToken)Match(input,129,Follow._129_in_stmt_modify4001); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(string_literal366);

				DebugLocation(508, 18);
				PushFollow(Follow._where_expr_in_stmt_modify4003);
				where_expr367=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr367.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 508:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(508, 32);
					// SugarCpp.g:508:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(508, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(508, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(508, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:509:16: '<<' where_expr
				{
				DebugLocation(509, 16);
				string_literal368=(IToken)Match(input,116,Follow._116_in_stmt_modify4030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(string_literal368);

				DebugLocation(509, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4032);
				where_expr369=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr369.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 116
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 509:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(509, 35);
					// SugarCpp.g:509:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(509, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(509, 46);
					adaptor.AddChild(root_1, stream_116.NextNode());
					DebugLocation(509, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(509, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:510:16: '>>' where_expr
				{
				DebugLocation(510, 16);
				string_literal370=(IToken)Match(input,126,Follow._126_in_stmt_modify4061); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(string_literal370);

				DebugLocation(510, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4063);
				where_expr371=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr371.Tree);


				{
				// AST REWRITE
				// elements: lvalue, 126, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 510:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(510, 35);
					// SugarCpp.g:510:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(510, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(510, 46);
					adaptor.AddChild(root_1, stream_126.NextNode());
					DebugLocation(510, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(510, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:511:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 511:7: -> lvalue
				{
					DebugLocation(511, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(160); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:514:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt372 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(514, 1);
		try
		{
			// SugarCpp.g:515:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:515:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(515, 4);
			PushFollow(Follow._stmt_in_where_item4097);
			stmt372=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt372.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:518:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE373 = default(IToken);
		IToken INDENT374 = default(IToken);
		IToken NEWLINE375 = default(IToken);
		IToken string_literal376 = default(IToken);
		IToken NEWLINE378 = default(IToken);
		IToken DEDENT379 = default(IToken);
		IToken NEWLINE380 = default(IToken);
		IToken INDENT381 = default(IToken);
		IToken NEWLINE382 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken DEDENT385 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken DEDENT387 = default(IToken);
		IToken NEWLINE388 = default(IToken);
		IToken INDENT389 = default(IToken);
		IToken NEWLINE390 = default(IToken);
		IToken NEWLINE392 = default(IToken);
		IToken DEDENT393 = default(IToken);
		IToken NEWLINE394 = default(IToken);
		IToken DEDENT395 = default(IToken);
		IToken string_literal396 = default(IToken);
		IToken NEWLINE397 = default(IToken);
		IToken INDENT398 = default(IToken);
		IToken NEWLINE399 = default(IToken);
		IToken NEWLINE401 = default(IToken);
		IToken DEDENT402 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item377 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item391 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item400 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE373_tree = default(CommonTree);
		CommonTree INDENT374_tree = default(CommonTree);
		CommonTree NEWLINE375_tree = default(CommonTree);
		CommonTree string_literal376_tree = default(CommonTree);
		CommonTree NEWLINE378_tree = default(CommonTree);
		CommonTree DEDENT379_tree = default(CommonTree);
		CommonTree NEWLINE380_tree = default(CommonTree);
		CommonTree INDENT381_tree = default(CommonTree);
		CommonTree NEWLINE382_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree DEDENT385_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree DEDENT387_tree = default(CommonTree);
		CommonTree NEWLINE388_tree = default(CommonTree);
		CommonTree INDENT389_tree = default(CommonTree);
		CommonTree NEWLINE390_tree = default(CommonTree);
		CommonTree NEWLINE392_tree = default(CommonTree);
		CommonTree DEDENT393_tree = default(CommonTree);
		CommonTree NEWLINE394_tree = default(CommonTree);
		CommonTree DEDENT395_tree = default(CommonTree);
		CommonTree string_literal396_tree = default(CommonTree);
		CommonTree NEWLINE397_tree = default(CommonTree);
		CommonTree INDENT398_tree = default(CommonTree);
		CommonTree NEWLINE399_tree = default(CommonTree);
		CommonTree NEWLINE401_tree = default(CommonTree);
		CommonTree DEDENT402_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(518, 1);
		try
		{
			// SugarCpp.g:519:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:519:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(519, 4);
			// SugarCpp.g:519:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:519:5: a= expr
			{
			DebugLocation(519, 6);
			PushFollow(Follow._expr_in_where_expr4111);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 519:12: -> $a
			{
				DebugLocation(519, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(519, 19);
			// SugarCpp.g:519:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt180=3;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			try
			{
				alt180 = dfa180.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:519:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(519, 21);
				// SugarCpp.g:519:21: ( NEWLINE )+
				int cnt161=0;
				try { DebugEnterSubRule(161);
				while (true)
				{
					int alt161=2;
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==NEWLINE))
					{
						alt161 = 1;
					}


					} finally { DebugExitDecision(161); }
					switch (alt161)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:21: NEWLINE
						{
						DebugLocation(519, 21);
						NEWLINE373=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4121); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE373);


						}
						break;

					default:
						if (cnt161 >= 1)
							goto loop161;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee161 = new EarlyExitException( 161, input );
						DebugRecognitionException(eee161);
						throw eee161;
					}
					cnt161++;
				}
				loop161:
					;

				} finally { DebugExitSubRule(161); }

				DebugLocation(519, 30);
				INDENT374=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4124); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT374);

				DebugLocation(519, 37);
				// SugarCpp.g:519:37: ( NEWLINE )*
				try { DebugEnterSubRule(162);
				while (true)
				{
					int alt162=2;
					try { DebugEnterDecision(162, false);
					int LA162_0 = input.LA(1);

					if ((LA162_0==NEWLINE))
					{
						alt162 = 1;
					}


					} finally { DebugExitDecision(162); }
					switch ( alt162 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:37: NEWLINE
						{
						DebugLocation(519, 37);
						NEWLINE375=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4126); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE375);


						}
						break;

					default:
						goto loop162;
					}
				}

				loop162:
					;

				} finally { DebugExitSubRule(162); }

				DebugLocation(519, 46);
				string_literal376=(IToken)Match(input,176,Follow._176_in_where_expr4129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal376);

				DebugLocation(519, 54);
				// SugarCpp.g:519:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt175=2;
				try { DebugEnterSubRule(175);
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==IDENT||LA175_0==85||LA175_0==90||LA175_0==92||LA175_0==94||(LA175_0>=96 && LA175_0<=97)||(LA175_0>=100 && LA175_0<=101)||LA175_0==130||LA175_0==142||(LA175_0>=146 && LA175_0<=148)||LA175_0==155||LA175_0==159||LA175_0==162||LA175_0==165||(LA175_0>=169 && LA175_0<=173)||LA175_0==177||LA175_0==182))
				{
					alt175 = 1;
				}
				else if ((LA175_0==NEWLINE))
				{
					alt175 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 175, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(175); }
				switch (alt175)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:519:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(519, 56);
					PushFollow(Follow._where_item_in_where_expr4133);
					where_item377=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item377.Tree);
					DebugLocation(519, 67);
					// SugarCpp.g:519:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt169=2;
					try { DebugEnterSubRule(169);
					try { DebugEnterDecision(169, false);
					try
					{
						alt169 = dfa169.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(169); }
					switch (alt169)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(519, 69);
						// SugarCpp.g:519:69: ( NEWLINE )*
						try { DebugEnterSubRule(163);
						while (true)
						{
							int alt163=2;
							try { DebugEnterDecision(163, false);
							int LA163_0 = input.LA(1);

							if ((LA163_0==NEWLINE))
							{
								alt163 = 1;
							}


							} finally { DebugExitDecision(163); }
							switch ( alt163 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:519:69: NEWLINE
								{
								DebugLocation(519, 69);
								NEWLINE378=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4137); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE378);


								}
								break;

							default:
								goto loop163;
							}
						}

						loop163:
							;

						} finally { DebugExitSubRule(163); }

						DebugLocation(519, 78);
						DEDENT379=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4140); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT379);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 519:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(519, 88);
							// SugarCpp.g:519:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(519, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(519, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(519, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:520:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(520, 21);
						// SugarCpp.g:520:21: ( NEWLINE )+
						int cnt164=0;
						try { DebugEnterSubRule(164);
						while (true)
						{
							int alt164=2;
							try { DebugEnterDecision(164, false);
							int LA164_0 = input.LA(1);

							if ((LA164_0==NEWLINE))
							{
								alt164 = 1;
							}


							} finally { DebugExitDecision(164); }
							switch (alt164)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:21: NEWLINE
								{
								DebugLocation(520, 21);
								NEWLINE380=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4173); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE380);


								}
								break;

							default:
								if (cnt164 >= 1)
									goto loop164;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee164 = new EarlyExitException( 164, input );
								DebugRecognitionException(eee164);
								throw eee164;
							}
							cnt164++;
						}
						loop164:
							;

						} finally { DebugExitSubRule(164); }

						DebugLocation(520, 30);
						INDENT381=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4176); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT381);

						DebugLocation(520, 37);
						// SugarCpp.g:520:37: ( NEWLINE )*
						try { DebugEnterSubRule(165);
						while (true)
						{
							int alt165=2;
							try { DebugEnterDecision(165, false);
							int LA165_0 = input.LA(1);

							if ((LA165_0==NEWLINE))
							{
								alt165 = 1;
							}


							} finally { DebugExitDecision(165); }
							switch ( alt165 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:37: NEWLINE
								{
								DebugLocation(520, 37);
								NEWLINE382=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4178); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE382);


								}
								break;

							default:
								goto loop165;
							}
						}

						loop165:
							;

						} finally { DebugExitSubRule(165); }

						DebugLocation(520, 46);
						// SugarCpp.g:520:46: ( where_item ( NEWLINE )+ )+
						int cnt167=0;
						try { DebugEnterSubRule(167);
						while (true)
						{
							int alt167=2;
							try { DebugEnterDecision(167, false);
							int LA167_0 = input.LA(1);

							if ((LA167_0==IDENT||LA167_0==85||LA167_0==90||LA167_0==92||LA167_0==94||(LA167_0>=96 && LA167_0<=97)||(LA167_0>=100 && LA167_0<=101)||LA167_0==130||LA167_0==142||(LA167_0>=146 && LA167_0<=148)||LA167_0==155||LA167_0==159||LA167_0==162||LA167_0==165||(LA167_0>=169 && LA167_0<=173)||LA167_0==177||LA167_0==182))
							{
								alt167 = 1;
							}


							} finally { DebugExitDecision(167); }
							switch (alt167)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:47: where_item ( NEWLINE )+
								{
								DebugLocation(520, 47);
								PushFollow(Follow._where_item_in_where_expr4182);
								where_item383=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item383.Tree);
								DebugLocation(520, 58);
								// SugarCpp.g:520:58: ( NEWLINE )+
								int cnt166=0;
								try { DebugEnterSubRule(166);
								while (true)
								{
									int alt166=2;
									try { DebugEnterDecision(166, false);
									int LA166_0 = input.LA(1);

									if ((LA166_0==NEWLINE))
									{
										alt166 = 1;
									}


									} finally { DebugExitDecision(166); }
									switch (alt166)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:520:58: NEWLINE
										{
										DebugLocation(520, 58);
										NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4184); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE384);


										}
										break;

									default:
										if (cnt166 >= 1)
											goto loop166;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee166 = new EarlyExitException( 166, input );
										DebugRecognitionException(eee166);
										throw eee166;
									}
									cnt166++;
								}
								loop166:
									;

								} finally { DebugExitSubRule(166); }


								}
								break;

							default:
								if (cnt167 >= 1)
									goto loop167;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee167 = new EarlyExitException( 167, input );
								DebugRecognitionException(eee167);
								throw eee167;
							}
							cnt167++;
						}
						loop167:
							;

						} finally { DebugExitSubRule(167); }

						DebugLocation(520, 69);
						DEDENT385=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4189); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT385);

						DebugLocation(520, 76);
						// SugarCpp.g:520:76: ( NEWLINE )*
						try { DebugEnterSubRule(168);
						while (true)
						{
							int alt168=2;
							try { DebugEnterDecision(168, false);
							int LA168_0 = input.LA(1);

							if ((LA168_0==NEWLINE))
							{
								alt168 = 1;
							}


							} finally { DebugExitDecision(168); }
							switch ( alt168 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:76: NEWLINE
								{
								DebugLocation(520, 76);
								NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4191); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE386);


								}
								break;

							default:
								goto loop168;
							}
						}

						loop168:
							;

						} finally { DebugExitSubRule(168); }

						DebugLocation(520, 85);
						DEDENT387=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4194); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT387);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 520:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(520, 95);
							// SugarCpp.g:520:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(520, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(520, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(520, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(520, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(169); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:522:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(522, 17);
					// SugarCpp.g:522:17: ( NEWLINE )+
					int cnt170=0;
					try { DebugEnterSubRule(170);
					while (true)
					{
						int alt170=2;
						try { DebugEnterDecision(170, false);
						int LA170_0 = input.LA(1);

						if ((LA170_0==NEWLINE))
						{
							alt170 = 1;
						}


						} finally { DebugExitDecision(170); }
						switch (alt170)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:17: NEWLINE
							{
							DebugLocation(522, 17);
							NEWLINE388=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4244); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE388);


							}
							break;

						default:
							if (cnt170 >= 1)
								goto loop170;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee170 = new EarlyExitException( 170, input );
							DebugRecognitionException(eee170);
							throw eee170;
						}
						cnt170++;
					}
					loop170:
						;

					} finally { DebugExitSubRule(170); }

					DebugLocation(522, 26);
					INDENT389=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT389);

					DebugLocation(522, 33);
					// SugarCpp.g:522:33: ( NEWLINE )*
					try { DebugEnterSubRule(171);
					while (true)
					{
						int alt171=2;
						try { DebugEnterDecision(171, false);
						int LA171_0 = input.LA(1);

						if ((LA171_0==NEWLINE))
						{
							alt171 = 1;
						}


						} finally { DebugExitDecision(171); }
						switch ( alt171 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:33: NEWLINE
							{
							DebugLocation(522, 33);
							NEWLINE390=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4249); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE390);


							}
							break;

						default:
							goto loop171;
						}
					}

					loop171:
						;

					} finally { DebugExitSubRule(171); }

					DebugLocation(522, 42);
					// SugarCpp.g:522:42: ( where_item ( NEWLINE )+ )+
					int cnt173=0;
					try { DebugEnterSubRule(173);
					while (true)
					{
						int alt173=2;
						try { DebugEnterDecision(173, false);
						int LA173_0 = input.LA(1);

						if ((LA173_0==IDENT||LA173_0==85||LA173_0==90||LA173_0==92||LA173_0==94||(LA173_0>=96 && LA173_0<=97)||(LA173_0>=100 && LA173_0<=101)||LA173_0==130||LA173_0==142||(LA173_0>=146 && LA173_0<=148)||LA173_0==155||LA173_0==159||LA173_0==162||LA173_0==165||(LA173_0>=169 && LA173_0<=173)||LA173_0==177||LA173_0==182))
						{
							alt173 = 1;
						}


						} finally { DebugExitDecision(173); }
						switch (alt173)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:43: where_item ( NEWLINE )+
							{
							DebugLocation(522, 43);
							PushFollow(Follow._where_item_in_where_expr4253);
							where_item391=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item391.Tree);
							DebugLocation(522, 54);
							// SugarCpp.g:522:54: ( NEWLINE )+
							int cnt172=0;
							try { DebugEnterSubRule(172);
							while (true)
							{
								int alt172=2;
								try { DebugEnterDecision(172, false);
								int LA172_0 = input.LA(1);

								if ((LA172_0==NEWLINE))
								{
									alt172 = 1;
								}


								} finally { DebugExitDecision(172); }
								switch (alt172)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:522:54: NEWLINE
									{
									DebugLocation(522, 54);
									NEWLINE392=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4255); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE392);


									}
									break;

								default:
									if (cnt172 >= 1)
										goto loop172;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee172 = new EarlyExitException( 172, input );
									DebugRecognitionException(eee172);
									throw eee172;
								}
								cnt172++;
							}
							loop172:
								;

							} finally { DebugExitSubRule(172); }


							}
							break;

						default:
							if (cnt173 >= 1)
								goto loop173;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee173 = new EarlyExitException( 173, input );
							DebugRecognitionException(eee173);
							throw eee173;
						}
						cnt173++;
					}
					loop173:
						;

					} finally { DebugExitSubRule(173); }

					DebugLocation(522, 65);
					DEDENT393=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4260); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT393);

					DebugLocation(522, 72);
					// SugarCpp.g:522:72: ( NEWLINE )*
					try { DebugEnterSubRule(174);
					while (true)
					{
						int alt174=2;
						try { DebugEnterDecision(174, false);
						int LA174_0 = input.LA(1);

						if ((LA174_0==NEWLINE))
						{
							alt174 = 1;
						}


						} finally { DebugExitDecision(174); }
						switch ( alt174 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:72: NEWLINE
							{
							DebugLocation(522, 72);
							NEWLINE394=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4262); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE394);


							}
							break;

						default:
							goto loop174;
						}
					}

					loop174:
						;

					} finally { DebugExitSubRule(174); }

					DebugLocation(522, 81);
					DEDENT395=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4265); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT395);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 522:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(522, 91);
						// SugarCpp.g:522:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(522, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(522, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(522, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(522, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(175); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:524:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(524, 9);
				string_literal396=(IToken)Match(input,176,Follow._176_in_where_expr4303); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal396);

				DebugLocation(524, 17);
				// SugarCpp.g:524:17: ( NEWLINE )+
				int cnt176=0;
				try { DebugEnterSubRule(176);
				while (true)
				{
					int alt176=2;
					try { DebugEnterDecision(176, false);
					int LA176_0 = input.LA(1);

					if ((LA176_0==NEWLINE))
					{
						alt176 = 1;
					}


					} finally { DebugExitDecision(176); }
					switch (alt176)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:17: NEWLINE
						{
						DebugLocation(524, 17);
						NEWLINE397=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4305); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE397);


						}
						break;

					default:
						if (cnt176 >= 1)
							goto loop176;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee176 = new EarlyExitException( 176, input );
						DebugRecognitionException(eee176);
						throw eee176;
					}
					cnt176++;
				}
				loop176:
					;

				} finally { DebugExitSubRule(176); }

				DebugLocation(524, 26);
				INDENT398=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4308); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT398);

				DebugLocation(524, 33);
				// SugarCpp.g:524:33: ( NEWLINE )*
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==NEWLINE))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch ( alt177 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:33: NEWLINE
						{
						DebugLocation(524, 33);
						NEWLINE399=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4310); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE399);


						}
						break;

					default:
						goto loop177;
					}
				}

				loop177:
					;

				} finally { DebugExitSubRule(177); }

				DebugLocation(524, 42);
				// SugarCpp.g:524:42: ( where_item ( NEWLINE )+ )+
				int cnt179=0;
				try { DebugEnterSubRule(179);
				while (true)
				{
					int alt179=2;
					try { DebugEnterDecision(179, false);
					int LA179_0 = input.LA(1);

					if ((LA179_0==IDENT||LA179_0==85||LA179_0==90||LA179_0==92||LA179_0==94||(LA179_0>=96 && LA179_0<=97)||(LA179_0>=100 && LA179_0<=101)||LA179_0==130||LA179_0==142||(LA179_0>=146 && LA179_0<=148)||LA179_0==155||LA179_0==159||LA179_0==162||LA179_0==165||(LA179_0>=169 && LA179_0<=173)||LA179_0==177||LA179_0==182))
					{
						alt179 = 1;
					}


					} finally { DebugExitDecision(179); }
					switch (alt179)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:43: where_item ( NEWLINE )+
						{
						DebugLocation(524, 43);
						PushFollow(Follow._where_item_in_where_expr4314);
						where_item400=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item400.Tree);
						DebugLocation(524, 54);
						// SugarCpp.g:524:54: ( NEWLINE )+
						int cnt178=0;
						try { DebugEnterSubRule(178);
						while (true)
						{
							int alt178=2;
							try { DebugEnterDecision(178, false);
							int LA178_0 = input.LA(1);

							if ((LA178_0==NEWLINE))
							{
								alt178 = 1;
							}


							} finally { DebugExitDecision(178); }
							switch (alt178)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:54: NEWLINE
								{
								DebugLocation(524, 54);
								NEWLINE401=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4316); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE401);


								}
								break;

							default:
								if (cnt178 >= 1)
									goto loop178;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee178 = new EarlyExitException( 178, input );
								DebugRecognitionException(eee178);
								throw eee178;
							}
							cnt178++;
						}
						loop178:
							;

						} finally { DebugExitSubRule(178); }


						}
						break;

					default:
						if (cnt179 >= 1)
							goto loop179;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee179 = new EarlyExitException( 179, input );
						DebugRecognitionException(eee179);
						throw eee179;
					}
					cnt179++;
				}
				loop179:
					;

				} finally { DebugExitSubRule(179); }

				DebugLocation(524, 65);
				DEDENT402=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4321); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT402);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 524:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(524, 75);
					// SugarCpp.g:524:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(524, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(524, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(524, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(524, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:525:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 525:15: -> expr
				{
					DebugLocation(525, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(180); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:529:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal403 = default(IToken);
		IToken string_literal405 = default(IToken);
		IToken NEWLINE407 = default(IToken);
		IToken INDENT408 = default(IToken);
		IToken NEWLINE409 = default(IToken);
		IToken NEWLINE411 = default(IToken);
		IToken DEDENT412 = default(IToken);
		IToken NEWLINE414 = default(IToken);
		IToken INDENT415 = default(IToken);
		IToken NEWLINE416 = default(IToken);
		IToken NEWLINE418 = default(IToken);
		IToken string_literal419 = default(IToken);
		IToken NEWLINE421 = default(IToken);
		IToken DEDENT422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item404 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr420 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal403_tree = default(CommonTree);
		CommonTree string_literal405_tree = default(CommonTree);
		CommonTree NEWLINE407_tree = default(CommonTree);
		CommonTree INDENT408_tree = default(CommonTree);
		CommonTree NEWLINE409_tree = default(CommonTree);
		CommonTree NEWLINE411_tree = default(CommonTree);
		CommonTree DEDENT412_tree = default(CommonTree);
		CommonTree NEWLINE414_tree = default(CommonTree);
		CommonTree INDENT415_tree = default(CommonTree);
		CommonTree NEWLINE416_tree = default(CommonTree);
		CommonTree NEWLINE418_tree = default(CommonTree);
		CommonTree string_literal419_tree = default(CommonTree);
		CommonTree NEWLINE421_tree = default(CommonTree);
		CommonTree DEDENT422_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(529, 1);
		try
		{
			// SugarCpp.g:530:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:530:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(530, 4);
			string_literal403=(IToken)Match(input,153,Follow._153_in_let_expr4379); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_153.Add(string_literal403);

			DebugLocation(530, 10);
			PushFollow(Follow._where_item_in_let_expr4381);
			where_item404=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item404.Tree);
			DebugLocation(530, 21);
			// SugarCpp.g:530:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt191=2;
			try { DebugEnterSubRule(191);
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==150))
			{
				alt191 = 1;
			}
			else if ((LA191_0==NEWLINE))
			{
				alt191 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:530:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(530, 23);
				string_literal405=(IToken)Match(input,150,Follow._150_in_let_expr4385); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal405);

				DebugLocation(530, 28);
				// SugarCpp.g:530:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==IDENT||LA185_0==NUMBER||LA185_0==STRING||LA185_0==85||LA185_0==90||LA185_0==92||LA185_0==94||(LA185_0>=96 && LA185_0<=97)||(LA185_0>=100 && LA185_0<=101)||(LA185_0>=130 && LA185_0<=131)||LA185_0==153||LA185_0==156||(LA185_0>=158 && LA185_0<=159)||LA185_0==182))
				{
					alt185 = 1;
				}
				else if ((LA185_0==NEWLINE))
				{
					alt185 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:530:30: expr
					{
					DebugLocation(530, 30);
					PushFollow(Follow._expr_in_let_expr4389);
					expr406=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr406.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 530:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(530, 38);
						// SugarCpp.g:530:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(530, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(530, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(530, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(530, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:531:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(531, 12);
					// SugarCpp.g:531:12: ( NEWLINE )+
					int cnt181=0;
					try { DebugEnterSubRule(181);
					while (true)
					{
						int alt181=2;
						try { DebugEnterDecision(181, false);
						int LA181_0 = input.LA(1);

						if ((LA181_0==NEWLINE))
						{
							alt181 = 1;
						}


						} finally { DebugExitDecision(181); }
						switch (alt181)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:531:12: NEWLINE
							{
							DebugLocation(531, 12);
							NEWLINE407=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4413); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE407);


							}
							break;

						default:
							if (cnt181 >= 1)
								goto loop181;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee181 = new EarlyExitException( 181, input );
							DebugRecognitionException(eee181);
							throw eee181;
						}
						cnt181++;
					}
					loop181:
						;

					} finally { DebugExitSubRule(181); }

					DebugLocation(531, 21);
					// SugarCpp.g:531:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt184=2;
					try { DebugEnterSubRule(184);
					try { DebugEnterDecision(184, false);
					int LA184_0 = input.LA(1);

					if ((LA184_0==INDENT))
					{
						alt184 = 1;
					}
					else if ((LA184_0==IDENT||LA184_0==NUMBER||LA184_0==STRING||LA184_0==85||LA184_0==90||LA184_0==92||LA184_0==94||(LA184_0>=96 && LA184_0<=97)||(LA184_0>=100 && LA184_0<=101)||(LA184_0>=130 && LA184_0<=131)||LA184_0==153||LA184_0==156||(LA184_0>=158 && LA184_0<=159)||LA184_0==182))
					{
						alt184 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 184, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(531, 23);
						INDENT408=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4418); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT408);

						DebugLocation(531, 30);
						// SugarCpp.g:531:30: ( NEWLINE )*
						try { DebugEnterSubRule(182);
						while (true)
						{
							int alt182=2;
							try { DebugEnterDecision(182, false);
							int LA182_0 = input.LA(1);

							if ((LA182_0==NEWLINE))
							{
								alt182 = 1;
							}


							} finally { DebugExitDecision(182); }
							switch ( alt182 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:30: NEWLINE
								{
								DebugLocation(531, 30);
								NEWLINE409=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4420); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE409);


								}
								break;

							default:
								goto loop182;
							}
						}

						loop182:
							;

						} finally { DebugExitSubRule(182); }

						DebugLocation(531, 39);
						PushFollow(Follow._expr_in_let_expr4423);
						expr410=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr410.Tree);
						DebugLocation(531, 44);
						// SugarCpp.g:531:44: ( NEWLINE )+
						int cnt183=0;
						try { DebugEnterSubRule(183);
						while (true)
						{
							int alt183=2;
							try { DebugEnterDecision(183, false);
							int LA183_0 = input.LA(1);

							if ((LA183_0==NEWLINE))
							{
								alt183 = 1;
							}


							} finally { DebugExitDecision(183); }
							switch (alt183)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:44: NEWLINE
								{
								DebugLocation(531, 44);
								NEWLINE411=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4425); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE411);


								}
								break;

							default:
								if (cnt183 >= 1)
									goto loop183;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee183 = new EarlyExitException( 183, input );
								DebugRecognitionException(eee183);
								throw eee183;
							}
							cnt183++;
						}
						loop183:
							;

						} finally { DebugExitSubRule(183); }

						DebugLocation(531, 53);
						DEDENT412=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4428); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT412);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 531:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(531, 63);
							// SugarCpp.g:531:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(531, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(531, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(531, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(531, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:532:14: expr
						{
						DebugLocation(532, 14);
						PushFollow(Follow._expr_in_let_expr4454);
						expr413=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr413.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 532:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(532, 22);
							// SugarCpp.g:532:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(532, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(532, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(532, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(532, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(184); }


					}
					break;

				}
				} finally { DebugExitSubRule(185); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:535:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(535, 11);
				// SugarCpp.g:535:11: ( NEWLINE )+
				int cnt186=0;
				try { DebugEnterSubRule(186);
				while (true)
				{
					int alt186=2;
					try { DebugEnterDecision(186, false);
					int LA186_0 = input.LA(1);

					if ((LA186_0==NEWLINE))
					{
						alt186 = 1;
					}


					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:11: NEWLINE
						{
						DebugLocation(535, 11);
						NEWLINE414=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4501); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE414);


						}
						break;

					default:
						if (cnt186 >= 1)
							goto loop186;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee186 = new EarlyExitException( 186, input );
						DebugRecognitionException(eee186);
						throw eee186;
					}
					cnt186++;
				}
				loop186:
					;

				} finally { DebugExitSubRule(186); }

				DebugLocation(535, 20);
				INDENT415=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4504); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT415);

				DebugLocation(535, 27);
				// SugarCpp.g:535:27: ( NEWLINE )*
				try { DebugEnterSubRule(187);
				while (true)
				{
					int alt187=2;
					try { DebugEnterDecision(187, false);
					int LA187_0 = input.LA(1);

					if ((LA187_0==NEWLINE))
					{
						alt187 = 1;
					}


					} finally { DebugExitDecision(187); }
					switch ( alt187 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:27: NEWLINE
						{
						DebugLocation(535, 27);
						NEWLINE416=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4506); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE416);


						}
						break;

					default:
						goto loop187;
					}
				}

				loop187:
					;

				} finally { DebugExitSubRule(187); }

				DebugLocation(535, 36);
				// SugarCpp.g:535:36: ( where_item ( NEWLINE )+ )+
				int cnt189=0;
				try { DebugEnterSubRule(189);
				while (true)
				{
					int alt189=2;
					try { DebugEnterDecision(189, false);
					int LA189_0 = input.LA(1);

					if ((LA189_0==IDENT||LA189_0==85||LA189_0==90||LA189_0==92||LA189_0==94||(LA189_0>=96 && LA189_0<=97)||(LA189_0>=100 && LA189_0<=101)||LA189_0==130||LA189_0==142||(LA189_0>=146 && LA189_0<=148)||LA189_0==155||LA189_0==159||LA189_0==162||LA189_0==165||(LA189_0>=169 && LA189_0<=173)||LA189_0==177||LA189_0==182))
					{
						alt189 = 1;
					}


					} finally { DebugExitDecision(189); }
					switch (alt189)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:37: where_item ( NEWLINE )+
						{
						DebugLocation(535, 37);
						PushFollow(Follow._where_item_in_let_expr4510);
						where_item417=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item417.Tree);
						DebugLocation(535, 48);
						// SugarCpp.g:535:48: ( NEWLINE )+
						int cnt188=0;
						try { DebugEnterSubRule(188);
						while (true)
						{
							int alt188=2;
							try { DebugEnterDecision(188, false);
							int LA188_0 = input.LA(1);

							if ((LA188_0==NEWLINE))
							{
								alt188 = 1;
							}


							} finally { DebugExitDecision(188); }
							switch (alt188)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:535:48: NEWLINE
								{
								DebugLocation(535, 48);
								NEWLINE418=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4512); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE418);


								}
								break;

							default:
								if (cnt188 >= 1)
									goto loop188;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee188 = new EarlyExitException( 188, input );
								DebugRecognitionException(eee188);
								throw eee188;
							}
							cnt188++;
						}
						loop188:
							;

						} finally { DebugExitSubRule(188); }


						}
						break;

					default:
						if (cnt189 >= 1)
							goto loop189;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee189 = new EarlyExitException( 189, input );
						DebugRecognitionException(eee189);
						throw eee189;
					}
					cnt189++;
				}
				loop189:
					;

				} finally { DebugExitSubRule(189); }

				DebugLocation(535, 59);
				string_literal419=(IToken)Match(input,150,Follow._150_in_let_expr4517); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal419);

				DebugLocation(535, 64);
				PushFollow(Follow._expr_in_let_expr4519);
				expr420=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr420.Tree);
				DebugLocation(535, 69);
				// SugarCpp.g:535:69: ( NEWLINE )+
				int cnt190=0;
				try { DebugEnterSubRule(190);
				while (true)
				{
					int alt190=2;
					try { DebugEnterDecision(190, false);
					int LA190_0 = input.LA(1);

					if ((LA190_0==NEWLINE))
					{
						alt190 = 1;
					}


					} finally { DebugExitDecision(190); }
					switch (alt190)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:69: NEWLINE
						{
						DebugLocation(535, 69);
						NEWLINE421=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4521); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE421);


						}
						break;

					default:
						if (cnt190 >= 1)
							goto loop190;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee190 = new EarlyExitException( 190, input );
						DebugRecognitionException(eee190);
						throw eee190;
					}
					cnt190++;
				}
				loop190:
					;

				} finally { DebugExitSubRule(190); }

				DebugLocation(535, 78);
				DEDENT422=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4524); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT422);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 535:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(535, 88);
					// SugarCpp.g:535:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(535, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(535, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(535, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(535, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(191); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(537, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:539:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal423 = default(IToken);
		IToken string_literal425 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr426 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal423_tree = default(CommonTree);
		CommonTree string_literal425_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(539, 1);
		try
		{
			// SugarCpp.g:540:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:540:4: '|' expr '=>' where_expr
			{
			DebugLocation(540, 4);
			char_literal423=(IToken)Match(input,178,Follow._178_in_match_item4556); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_178.Add(char_literal423);

			DebugLocation(540, 8);
			PushFollow(Follow._expr_in_match_item4558);
			expr424=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr424.Tree);
			DebugLocation(540, 13);
			string_literal425=(IToken)Match(input,123,Follow._123_in_match_item4560); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal425);

			DebugLocation(540, 18);
			PushFollow(Follow._where_expr_in_match_item4562);
			where_expr426=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr426.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 540:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(540, 32);
				// SugarCpp.g:540:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(540, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(540, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(540, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:543:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal427 = default(IToken);
		IToken NEWLINE429 = default(IToken);
		IToken INDENT430 = default(IToken);
		IToken NEWLINE431 = default(IToken);
		IToken NEWLINE433 = default(IToken);
		IToken DEDENT434 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr428 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item432 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal427_tree = default(CommonTree);
		CommonTree NEWLINE429_tree = default(CommonTree);
		CommonTree INDENT430_tree = default(CommonTree);
		CommonTree NEWLINE431_tree = default(CommonTree);
		CommonTree NEWLINE433_tree = default(CommonTree);
		CommonTree DEDENT434_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(543, 1);
		try
		{
			// SugarCpp.g:544:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:544:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(544, 4);
			string_literal427=(IToken)Match(input,156,Follow._156_in_match_expr4583); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_156.Add(string_literal427);

			DebugLocation(544, 12);
			// SugarCpp.g:544:12: ( expr )?
			int alt192=2;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			int LA192_0 = input.LA(1);

			if ((LA192_0==IDENT||LA192_0==NUMBER||LA192_0==STRING||LA192_0==85||LA192_0==90||LA192_0==92||LA192_0==94||(LA192_0>=96 && LA192_0<=97)||(LA192_0>=100 && LA192_0<=101)||(LA192_0>=130 && LA192_0<=131)||LA192_0==153||LA192_0==156||(LA192_0>=158 && LA192_0<=159)||LA192_0==182))
			{
				alt192 = 1;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:544:12: expr
				{
				DebugLocation(544, 12);
				PushFollow(Follow._expr_in_match_expr4585);
				expr428=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr428.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(192); }

			DebugLocation(544, 18);
			// SugarCpp.g:544:18: ( NEWLINE )+
			int cnt193=0;
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==NEWLINE))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:544:18: NEWLINE
					{
					DebugLocation(544, 18);
					NEWLINE429=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4588); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE429);


					}
					break;

				default:
					if (cnt193 >= 1)
						goto loop193;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee193 = new EarlyExitException( 193, input );
					DebugRecognitionException(eee193);
					throw eee193;
				}
				cnt193++;
			}
			loop193:
				;

			} finally { DebugExitSubRule(193); }

			DebugLocation(544, 27);
			INDENT430=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4591); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT430);

			DebugLocation(544, 34);
			// SugarCpp.g:544:34: ( NEWLINE )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==NEWLINE))
				{
					alt194 = 1;
				}


				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:544:34: NEWLINE
					{
					DebugLocation(544, 34);
					NEWLINE431=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4593); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE431);


					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }

			DebugLocation(544, 43);
			// SugarCpp.g:544:43: ( match_item ( NEWLINE )+ )+
			int cnt196=0;
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==178))
				{
					alt196 = 1;
				}


				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:544:44: match_item ( NEWLINE )+
					{
					DebugLocation(544, 44);
					PushFollow(Follow._match_item_in_match_expr4597);
					match_item432=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item432.Tree);
					DebugLocation(544, 55);
					// SugarCpp.g:544:55: ( NEWLINE )+
					int cnt195=0;
					try { DebugEnterSubRule(195);
					while (true)
					{
						int alt195=2;
						try { DebugEnterDecision(195, false);
						int LA195_0 = input.LA(1);

						if ((LA195_0==NEWLINE))
						{
							alt195 = 1;
						}


						} finally { DebugExitDecision(195); }
						switch (alt195)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:544:55: NEWLINE
							{
							DebugLocation(544, 55);
							NEWLINE433=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4599); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE433);


							}
							break;

						default:
							if (cnt195 >= 1)
								goto loop195;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee195 = new EarlyExitException( 195, input );
							DebugRecognitionException(eee195);
							throw eee195;
						}
						cnt195++;
					}
					loop195:
						;

					} finally { DebugExitSubRule(195); }


					}
					break;

				default:
					if (cnt196 >= 1)
						goto loop196;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee196 = new EarlyExitException( 196, input );
					DebugRecognitionException(eee196);
					throw eee196;
				}
				cnt196++;
			}
			loop196:
				;

			} finally { DebugExitSubRule(196); }

			DebugLocation(544, 66);
			DEDENT434=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4604); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT434);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 544:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(544, 76);
				// SugarCpp.g:544:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(544, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(544, 89);
				// SugarCpp.g:544:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(544, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(544, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(544, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:547:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr437 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(547, 1);
		try
		{
			// SugarCpp.g:548:2: ( feed_expr | match_expr | let_expr )
			int alt197=3;
			try { DebugEnterDecision(197, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 85:
			case 90:
			case 92:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 130:
			case 131:
			case 158:
			case 159:
			case 182:
				{
				alt197 = 1;
				}
				break;
			case 156:
				{
				alt197 = 2;
				}
				break;
			case 153:
				{
				alt197 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 197, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:548:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(548, 4);
				PushFollow(Follow._feed_expr_in_expr4627);
				feed_expr435=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr435.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:549:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(549, 4);
				PushFollow(Follow._match_expr_in_expr4632);
				match_expr436=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr436.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:550:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(550, 4);
				PushFollow(Follow._let_expr_in_expr4637);
				let_expr437=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr437.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(551, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:553:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 61);
		TraceIn("feed_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal438 = default(IToken);
		IToken string_literal440 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr442 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal438_tree = default(CommonTree);
		CommonTree string_literal440_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(553, 1);
		try
		{
			// SugarCpp.g:554:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt199=2;
			try { DebugEnterDecision(199, false);
			switch (input.LA(1))
			{
			case 92:
				{
				int LA199_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 159:
			case 182:
				{
				int LA199_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 158:
				{
				int LA199_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA199_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA199_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA199_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA199_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				alt199 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:554:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(554, 36);
				// SugarCpp.g:554:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:554:37: a= modify_expr
				{
				DebugLocation(554, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4666);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 554:51: -> $a
				{
					DebugLocation(554, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(554, 58);
				// SugarCpp.g:554:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt198=2;
				try { DebugEnterSubRule(198);
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==119))
				{
					alt198 = 1;
				}
				else if ((LA198_0==180))
				{
					alt198 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 198, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(198); }
				switch (alt198)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:554:60: '<|' list_expr
					{
					DebugLocation(554, 60);
					string_literal438=(IToken)Match(input,119,Follow._119_in_feed_expr4676); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_119.Add(string_literal438);

					DebugLocation(554, 65);
					PushFollow(Follow._list_expr_in_feed_expr4678);
					list_expr439=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr439.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 554:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(554, 78);
						// SugarCpp.g:554:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(554, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(554, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(554, 101);
						// SugarCpp.g:554:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(554, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(554, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:555:18: '|>' list_expr
					{
					DebugLocation(555, 18);
					string_literal440=(IToken)Match(input,180,Follow._180_in_feed_expr4712); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_180.Add(string_literal440);

					DebugLocation(555, 23);
					PushFollow(Follow._list_expr_in_feed_expr4714);
					list_expr441=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr441.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 555:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(555, 36);
						// SugarCpp.g:555:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(555, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(555, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(555, 58);
						// SugarCpp.g:555:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(555, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(555, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(198); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:557:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(557, 4);
				PushFollow(Follow._list_expr_in_feed_expr4751);
				list_expr442=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr442.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 61);
			LeaveRule("feed_expr", 61);
			LeaveRule_feed_expr();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:560:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 62);
		TraceIn("list_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal443 = default(IToken);
		IToken string_literal445 = default(IToken);
		IToken char_literal447 = default(IToken);
		IToken char_literal449 = default(IToken);
		IToken char_literal450 = default(IToken);
		IToken char_literal452 = default(IToken);
		IToken char_literal453 = default(IToken);
		IToken NEWLINE454 = default(IToken);
		IToken INDENT455 = default(IToken);
		IToken DEDENT456 = default(IToken);
		IToken char_literal458 = default(IToken);
		IToken NEWLINE459 = default(IToken);
		IToken INDENT460 = default(IToken);
		IToken DEDENT461 = default(IToken);
		IToken char_literal463 = default(IToken);
		IToken NEWLINE464 = default(IToken);
		IToken INDENT465 = default(IToken);
		IToken DEDENT466 = default(IToken);
		IToken char_literal467 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item446 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name451 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr468 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal443_tree = default(CommonTree);
		CommonTree string_literal445_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		CommonTree char_literal450_tree = default(CommonTree);
		CommonTree char_literal452_tree = default(CommonTree);
		CommonTree char_literal453_tree = default(CommonTree);
		CommonTree NEWLINE454_tree = default(CommonTree);
		CommonTree INDENT455_tree = default(CommonTree);
		CommonTree DEDENT456_tree = default(CommonTree);
		CommonTree char_literal458_tree = default(CommonTree);
		CommonTree NEWLINE459_tree = default(CommonTree);
		CommonTree INDENT460_tree = default(CommonTree);
		CommonTree DEDENT461_tree = default(CommonTree);
		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree NEWLINE464_tree = default(CommonTree);
		CommonTree INDENT465_tree = default(CommonTree);
		CommonTree DEDENT466_tree = default(CommonTree);
		CommonTree char_literal467_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt206=3;
			try { DebugEnterDecision(206, false);
			int LA206_0 = input.LA(1);

			if ((LA206_0==131))
			{
				int LA206_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt206 = 1;
				}
				else if ((true))
				{
					alt206 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 206, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA206_0==IDENT||LA206_0==NUMBER||LA206_0==STRING||LA206_0==85||LA206_0==90||LA206_0==92||LA206_0==94||(LA206_0>=96 && LA206_0<=97)||(LA206_0>=100 && LA206_0<=101)||LA206_0==130||(LA206_0>=158 && LA206_0<=159)||LA206_0==182))
			{
				alt206 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:561:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(561, 29);
				char_literal443=(IToken)Match(input,131,Follow._131_in_list_expr4772); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal443);

				DebugLocation(561, 33);
				PushFollow(Follow._feed_expr_in_list_expr4774);
				feed_expr444=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr444.Tree);
				DebugLocation(561, 43);
				string_literal445=(IToken)Match(input,147,Follow._147_in_list_expr4776); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal445);

				DebugLocation(561, 49);
				PushFollow(Follow._for_item_in_list_expr4778);
				for_item446=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item446.Tree);
				DebugLocation(561, 58);
				// SugarCpp.g:561:58: ( ',' for_item )*
				try { DebugEnterSubRule(200);
				while (true)
				{
					int alt200=2;
					try { DebugEnterDecision(200, false);
					int LA200_0 = input.LA(1);

					if ((LA200_0==99))
					{
						alt200 = 1;
					}


					} finally { DebugExitDecision(200); }
					switch ( alt200 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:561:59: ',' for_item
						{
						DebugLocation(561, 59);
						char_literal447=(IToken)Match(input,99,Follow._99_in_list_expr4781); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal447);

						DebugLocation(561, 63);
						PushFollow(Follow._for_item_in_list_expr4783);
						for_item448=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item448.Tree);

						}
						break;

					default:
						goto loop200;
					}
				}

				loop200:
					;

				} finally { DebugExitSubRule(200); }

				DebugLocation(561, 74);
				char_literal449=(IToken)Match(input,132,Follow._132_in_list_expr4787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal449);

				DebugLocation(561, 78);
				char_literal450=(IToken)Match(input,110,Follow._110_in_list_expr4789); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal450);

				DebugLocation(561, 82);
				PushFollow(Follow._type_name_in_list_expr4791);
				type_name451=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name451.Tree);


				{
				// AST REWRITE
				// elements: for_item, type_name, feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 561:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(561, 96);
					// SugarCpp.g:561:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(561, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(561, 119);
					// SugarCpp.g:561:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(561, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(561, 130);
					// SugarCpp.g:561:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(561, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(561, 141);
					// SugarCpp.g:561:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(561, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(561, 151);
					// SugarCpp.g:561:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(561, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(561, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:562:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(562, 4);
				char_literal452=(IToken)Match(input,131,Follow._131_in_list_expr4819); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal452);

				DebugLocation(562, 8);
				// SugarCpp.g:562:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt204=2;
				try { DebugEnterSubRule(204);
				try { DebugEnterDecision(204, false);
				try
				{
					alt204 = dfa204.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(204); }
				switch (alt204)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:562:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(562, 9);
					// SugarCpp.g:562:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(201);
					while (true)
					{
						int alt201=5;
						try { DebugEnterDecision(201, false);
						switch (input.LA(1))
						{
						case 99:
							{
							alt201 = 1;
							}
							break;
						case NEWLINE:
							{
							alt201 = 2;
							}
							break;
						case INDENT:
							{
							alt201 = 3;
							}
							break;
						case DEDENT:
							{
							alt201 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(201); }
						switch ( alt201 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:562:10: ','
							{
							DebugLocation(562, 10);
							char_literal453=(IToken)Match(input,99,Follow._99_in_list_expr4823); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal453);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:562:16: NEWLINE
							{
							DebugLocation(562, 16);
							NEWLINE454=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4827); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE454);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:562:26: INDENT
							{
							DebugLocation(562, 26);
							INDENT455=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4831); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT455);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:562:35: DEDENT
							{
							DebugLocation(562, 35);
							DEDENT456=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4835); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT456);


							}
							break;

						default:
							goto loop201;
						}
					}

					loop201:
						;

					} finally { DebugExitSubRule(201); }

					DebugLocation(562, 44);
					PushFollow(Follow._feed_expr_in_list_expr4839);
					feed_expr457=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr457.Tree);
					DebugLocation(562, 54);
					// SugarCpp.g:562:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(203);
					while (true)
					{
						int alt203=2;
						try { DebugEnterDecision(203, false);
						try
						{
							alt203 = dfa203.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(203); }
						switch ( alt203 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:562:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(562, 55);
							// SugarCpp.g:562:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt202=0;
							try { DebugEnterSubRule(202);
							while (true)
							{
								int alt202=5;
								try { DebugEnterDecision(202, false);
								switch (input.LA(1))
								{
								case 99:
									{
									alt202 = 1;
									}
									break;
								case NEWLINE:
									{
									alt202 = 2;
									}
									break;
								case INDENT:
									{
									alt202 = 3;
									}
									break;
								case DEDENT:
									{
									alt202 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(202); }
								switch (alt202)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:562:56: ','
									{
									DebugLocation(562, 56);
									char_literal458=(IToken)Match(input,99,Follow._99_in_list_expr4843); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal458);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:562:62: NEWLINE
									{
									DebugLocation(562, 62);
									NEWLINE459=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4847); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE459);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:562:72: INDENT
									{
									DebugLocation(562, 72);
									INDENT460=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4851); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT460);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:562:81: DEDENT
									{
									DebugLocation(562, 81);
									DEDENT461=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4855); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT461);


									}
									break;

								default:
									if (cnt202 >= 1)
										goto loop202;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee202 = new EarlyExitException( 202, input );
									DebugRecognitionException(eee202);
									throw eee202;
								}
								cnt202++;
							}
							loop202:
								;

							} finally { DebugExitSubRule(202); }

							DebugLocation(562, 90);
							PushFollow(Follow._feed_expr_in_list_expr4859);
							feed_expr462=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr462.Tree);

							}
							break;

						default:
							goto loop203;
						}
					}

					loop203:
						;

					} finally { DebugExitSubRule(203); }


					}
					break;

				}
				} finally { DebugExitSubRule(204); }

				DebugLocation(562, 104);
				// SugarCpp.g:562:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(205);
				while (true)
				{
					int alt205=5;
					try { DebugEnterDecision(205, false);
					switch (input.LA(1))
					{
					case 99:
						{
						alt205 = 1;
						}
						break;
					case NEWLINE:
						{
						alt205 = 2;
						}
						break;
					case INDENT:
						{
						alt205 = 3;
						}
						break;
					case DEDENT:
						{
						alt205 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(205); }
					switch ( alt205 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:562:105: ','
						{
						DebugLocation(562, 105);
						char_literal463=(IToken)Match(input,99,Follow._99_in_list_expr4866); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal463);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:562:111: NEWLINE
						{
						DebugLocation(562, 111);
						NEWLINE464=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4870); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE464);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:562:121: INDENT
						{
						DebugLocation(562, 121);
						INDENT465=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4874); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT465);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:562:130: DEDENT
						{
						DebugLocation(562, 130);
						DEDENT466=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4878); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT466);


						}
						break;

					default:
						goto loop205;
					}
				}

				loop205:
					;

				} finally { DebugExitSubRule(205); }

				DebugLocation(562, 139);
				char_literal467=(IToken)Match(input,132,Follow._132_in_list_expr4882); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal467);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 562:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(562, 146);
					// SugarCpp.g:562:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(562, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(562, 158);
					// SugarCpp.g:562:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(562, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:563:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(563, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4896);
				lambda_expr468=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr468.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 62);
			LeaveRule("list_expr", 62);
			LeaveRule_list_expr();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:566:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 63);
		TraceIn("lambda_value", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE470 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block471 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE470_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(566, 1);
		try
		{
			// SugarCpp.g:567:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt208=2;
			try { DebugEnterDecision(208, false);
			int LA208_0 = input.LA(1);

			if ((LA208_0==IDENT||LA208_0==NUMBER||LA208_0==STRING||LA208_0==85||LA208_0==90||LA208_0==92||LA208_0==94||(LA208_0>=96 && LA208_0<=97)||(LA208_0>=100 && LA208_0<=101)||(LA208_0>=130 && LA208_0<=131)||LA208_0==153||LA208_0==156||(LA208_0>=158 && LA208_0<=159)||LA208_0==182))
			{
				alt208 = 1;
			}
			else if ((LA208_0==NEWLINE))
			{
				alt208 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(208); }
			switch (alt208)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:567:4: expr
				{
				DebugLocation(567, 4);
				PushFollow(Follow._expr_in_lambda_value4907);
				expr469=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr469.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 567:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(567, 12);
					// SugarCpp.g:567:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(567, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(567, 25);
					// SugarCpp.g:567:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(567, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(567, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:568:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(568, 4);
				// SugarCpp.g:568:4: ( NEWLINE )+
				int cnt207=0;
				try { DebugEnterSubRule(207);
				while (true)
				{
					int alt207=2;
					try { DebugEnterDecision(207, false);
					int LA207_0 = input.LA(1);

					if ((LA207_0==NEWLINE))
					{
						alt207 = 1;
					}


					} finally { DebugExitDecision(207); }
					switch (alt207)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:568:4: NEWLINE
						{
						DebugLocation(568, 4);
						NEWLINE470=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4924); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE470);


						}
						break;

					default:
						if (cnt207 >= 1)
							goto loop207;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee207 = new EarlyExitException( 207, input );
						DebugRecognitionException(eee207);
						throw eee207;
					}
					cnt207++;
				}
				loop207:
					;

				} finally { DebugExitSubRule(207); }

				DebugLocation(568, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4927);
				stmt_block471=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block471.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 568:24: -> stmt_block
				{
					DebugLocation(568, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 63);
			LeaveRule("lambda_value", 63);
			LeaveRule_lambda_value();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:571:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 64);
		TraceIn("lambda_type", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal472 = default(IToken);
		IToken char_literal474 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name473 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal472_tree = default(CommonTree);
		CommonTree char_literal474_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:572:4: '(' type_name ')'
			{
			DebugLocation(572, 4);
			char_literal472=(IToken)Match(input,92,Follow._92_in_lambda_type4942); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal472);

			DebugLocation(572, 8);
			PushFollow(Follow._type_name_in_lambda_type4944);
			type_name473=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name473.Tree);
			DebugLocation(572, 18);
			char_literal474=(IToken)Match(input,93,Follow._93_in_lambda_type4946); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal474);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 572:22: -> type_name
			{
				DebugLocation(572, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 64);
			LeaveRule("lambda_type", 64);
			LeaveRule_lambda_type();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:575:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 65);
		TraceIn("lambda_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal475 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken string_literal479 = default(IToken);
		IToken string_literal481 = default(IToken);
		IToken string_literal483 = default(IToken);
		IToken string_literal485 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type478 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr487 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal475_tree = default(CommonTree);
		CommonTree char_literal477_tree = default(CommonTree);
		CommonTree string_literal479_tree = default(CommonTree);
		CommonTree string_literal481_tree = default(CommonTree);
		CommonTree string_literal483_tree = default(CommonTree);
		CommonTree string_literal485_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(575, 1);
		try
		{
			// SugarCpp.g:576:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt212=2;
			try { DebugEnterDecision(212, false);
			try
			{
				alt212 = dfa212.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:576:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(576, 4);
				char_literal475=(IToken)Match(input,92,Follow._92_in_lambda_expr4961); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal475);

				DebugLocation(576, 8);
				// SugarCpp.g:576:8: ( func_args )?
				int alt209=2;
				try { DebugEnterSubRule(209);
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==IDENT||LA209_0==112))
				{
					alt209 = 1;
				}
				} finally { DebugExitDecision(209); }
				switch (alt209)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:576:8: func_args
					{
					DebugLocation(576, 8);
					PushFollow(Follow._func_args_in_lambda_expr4963);
					func_args476=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args476.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(209); }

				DebugLocation(576, 19);
				char_literal477=(IToken)Match(input,93,Follow._93_in_lambda_expr4966); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal477);

				DebugLocation(576, 23);
				// SugarCpp.g:576:23: ( lambda_type )?
				int alt210=2;
				try { DebugEnterSubRule(210);
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==92))
				{
					alt210 = 1;
				}
				} finally { DebugExitDecision(210); }
				switch (alt210)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:576:23: lambda_type
					{
					DebugLocation(576, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4968);
					lambda_type478=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type478.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(210); }

				DebugLocation(576, 36);
				// SugarCpp.g:576:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt211=4;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				switch (input.LA(1))
				{
				case 104:
					{
					alt211 = 1;
					}
					break;
				case 123:
					{
					alt211 = 2;
					}
					break;
				case 102:
					{
					alt211 = 3;
					}
					break;
				case 122:
					{
					alt211 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:576:38: '->' lambda_value
					{
					DebugLocation(576, 38);
					string_literal479=(IToken)Match(input,104,Follow._104_in_lambda_expr4973); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal479);

					DebugLocation(576, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4975);
					lambda_value480=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value480.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, func_args, lambda_type, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 576:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(576, 60);
						// SugarCpp.g:576:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(576, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(576, 74);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(576, 79);
						// SugarCpp.g:576:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(576, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(576, 90);
						// SugarCpp.g:576:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(576, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(576, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:577:17: '=>' lambda_value
					{
					DebugLocation(577, 17);
					string_literal481=(IToken)Match(input,123,Follow._123_in_lambda_expr5010); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(string_literal481);

					DebugLocation(577, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr5012);
					lambda_value482=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value482.Tree);


					{
					// AST REWRITE
					// elements: 123, lambda_type, func_args, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(577, 39);
						// SugarCpp.g:577:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(577, 53);
						adaptor.AddChild(root_1, stream_123.NextNode());
						DebugLocation(577, 58);
						// SugarCpp.g:577:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(577, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(577, 69);
						// SugarCpp.g:577:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(577, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(577, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:578:14: '-->' lambda_value
					{
					DebugLocation(578, 14);
					string_literal483=(IToken)Match(input,102,Follow._102_in_lambda_expr5044); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal483);

					DebugLocation(578, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr5046);
					lambda_value484=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value484.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, func_args, 102, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 578:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(578, 37);
						// SugarCpp.g:578:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(578, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(578, 51);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(578, 57);
						// SugarCpp.g:578:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(578, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(578, 68);
						// SugarCpp.g:578:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(578, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(578, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:579:17: '==>' lambda_value
					{
					DebugLocation(579, 17);
					string_literal485=(IToken)Match(input,122,Follow._122_in_lambda_expr5081); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(string_literal485);

					DebugLocation(579, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr5083);
					lambda_value486=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value486.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, func_args, lambda_type, 122
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 579:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(579, 40);
						// SugarCpp.g:579:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(579, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(579, 54);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(579, 60);
						// SugarCpp.g:579:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(579, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(579, 71);
						// SugarCpp.g:579:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(579, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(579, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(211); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:581:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(581, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr5118);
				modify_expr487=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr487.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 65);
			LeaveRule("lambda_expr", 65);
			LeaveRule_lambda_expr();
		}
		DebugLocation(582, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:584:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 66);
		TraceIn("modify_expr_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set488 = default(IToken);

		CommonTree set488_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(584, 91);
		try
		{
			// SugarCpp.g:584:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(584, 15);

			set488=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==117||input.LA(1)==120||input.LA(1)==127||input.LA(1)==134||input.LA(1)==179)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set488));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 66);
			LeaveRule("modify_expr_op", 66);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(584, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:585:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 67);
		TraceIn("modify_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set490 = default(IToken);
		IToken char_literal492 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr489 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr493 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set490_tree = default(CommonTree);
		CommonTree char_literal492_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(585, 1);
		try
		{
			// SugarCpp.g:586:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:586:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(586, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5175);
			cond_expr489=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr489.Tree);
			DebugLocation(586, 14);
			// SugarCpp.g:586:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt214=3;
			try { DebugEnterSubRule(214);
			try { DebugEnterDecision(214, false);
			int LA214_0 = input.LA(1);

			if ((LA214_0==88||LA214_0==91||LA214_0==95||LA214_0==98||LA214_0==103||LA214_0==109||LA214_0==112||LA214_0==117||LA214_0==127||LA214_0==134||LA214_0==179))
			{
				alt214 = 1;
			}
			else if ((LA214_0==120))
			{
				alt214 = 2;
			}
			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:586:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(586, 94);

				set490=(IToken)input.LT(1);
				set490=(IToken)input.LT(1);
				if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==112||input.LA(1)==117||input.LA(1)==127||input.LA(1)==134||input.LA(1)==179)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set490), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(586, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5224);
				cond_expr491=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr491.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:587:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(587, 7);
				// SugarCpp.g:587:7: ( '=' ^ cond_expr )+
				int cnt213=0;
				try { DebugEnterSubRule(213);
				while (true)
				{
					int alt213=2;
					try { DebugEnterDecision(213, false);
					int LA213_0 = input.LA(1);

					if ((LA213_0==120))
					{
						alt213 = 1;
					}


					} finally { DebugExitDecision(213); }
					switch (alt213)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:587:8: '=' ^ cond_expr
						{
						DebugLocation(587, 11);
						char_literal492=(IToken)Match(input,120,Follow._120_in_modify_expr5233); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal492_tree = (CommonTree)adaptor.Create(char_literal492);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal492_tree, root_0);
						}
						DebugLocation(587, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5236);
						cond_expr493=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr493.Tree);

						}
						break;

					default:
						if (cnt213 >= 1)
							goto loop213;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee213 = new EarlyExitException( 213, input );
						DebugRecognitionException(eee213);
						throw eee213;
					}
					cnt213++;
				}
				loop213:
					;

				} finally { DebugExitSubRule(213); }


				}
				break;

			}
			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 67);
			LeaveRule("modify_expr", 67);
			LeaveRule_modify_expr();
		}
		DebugLocation(588, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:590:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 68);
		TraceIn("cond_expr_item", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr494 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(590, 24);
		try
		{
			// SugarCpp.g:590:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:590:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(590, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5249);
			or_expr494=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr494.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 68);
			LeaveRule("cond_expr_item", 68);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(590, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:591:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 69);
		TraceIn("cond_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal495 = default(IToken);
		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal495_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(591, 1);
		try
		{
			// SugarCpp.g:592:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:592:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(592, 4);
			// SugarCpp.g:592:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:592:5: a= or_expr
			{
			DebugLocation(592, 6);
			PushFollow(Follow._or_expr_in_cond_expr5261);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 592:15: -> $a
			{
				DebugLocation(592, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(592, 22);
			// SugarCpp.g:592:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt217=2;
			try { DebugEnterSubRule(217);
			try { DebugEnterDecision(217, false);
			int LA217_0 = input.LA(1);

			if ((LA217_0==128))
			{
				alt217 = 1;
			}
			} finally { DebugExitDecision(217); }
			switch (alt217)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:592:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(592, 23);
				char_literal495=(IToken)Match(input,128,Follow._128_in_cond_expr5270); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(char_literal495);

				DebugLocation(592, 27);
				// SugarCpp.g:592:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt216=2;
				try { DebugEnterSubRule(216);
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==IDENT||LA216_0==NUMBER||LA216_0==STRING||LA216_0==85||LA216_0==90||LA216_0==92||LA216_0==94||(LA216_0>=96 && LA216_0<=97)||(LA216_0>=100 && LA216_0<=101)||LA216_0==130||(LA216_0>=158 && LA216_0<=159)||LA216_0==182))
				{
					alt216 = 1;
				}
				else if ((LA216_0==DEDENT||LA216_0==INDENT||LA216_0==NEWLINE||LA216_0==88||LA216_0==91||LA216_0==93||LA216_0==95||(LA216_0>=98 && LA216_0<=99)||LA216_0==103||LA216_0==109||(LA216_0>=112 && LA216_0<=113)||LA216_0==117||(LA216_0>=119 && LA216_0<=120)||LA216_0==123||LA216_0==127||LA216_0==132||LA216_0==134||LA216_0==137||LA216_0==143||(LA216_0>=147 && LA216_0<=148)||LA216_0==150||(LA216_0>=166 && LA216_0<=168)||(LA216_0>=171 && LA216_0<=172)||(LA216_0>=176 && LA216_0<=177)||(LA216_0>=179 && LA216_0<=180)))
				{
					alt216 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 216, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:592:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(592, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5276);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(592, 46);
					// SugarCpp.g:592:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt215=2;
					try { DebugEnterSubRule(215);
					try { DebugEnterDecision(215, false);
					int LA215_0 = input.LA(1);

					if ((LA215_0==110))
					{
						alt215 = 1;
					}
					else if ((LA215_0==DEDENT||LA215_0==INDENT||LA215_0==NEWLINE||LA215_0==88||LA215_0==91||LA215_0==93||LA215_0==95||(LA215_0>=98 && LA215_0<=99)||LA215_0==103||LA215_0==109||(LA215_0>=112 && LA215_0<=113)||LA215_0==117||(LA215_0>=119 && LA215_0<=120)||LA215_0==123||LA215_0==127||LA215_0==132||LA215_0==134||LA215_0==137||LA215_0==143||(LA215_0>=147 && LA215_0<=148)||LA215_0==150||(LA215_0>=166 && LA215_0<=168)||(LA215_0>=171 && LA215_0<=172)||(LA215_0>=176 && LA215_0<=177)||(LA215_0>=179 && LA215_0<=180)))
					{
						alt215 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(215); }
					switch (alt215)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:592:48: ':' b= cond_expr_item
						{
						DebugLocation(592, 48);
						char_literal496=(IToken)Match(input,110,Follow._110_in_cond_expr5280); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_110.Add(char_literal496);

						DebugLocation(592, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5284);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, b, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 592:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(592, 72);
							// SugarCpp.g:592:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(592, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(592, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(592, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(592, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:593:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 593:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(593, 20);
							// SugarCpp.g:593:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(593, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(593, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(593, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(215); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:595:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 595:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(595, 14);
						// SugarCpp.g:595:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(595, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(595, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(216); }


				}
				break;

			}
			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 69);
			LeaveRule("cond_expr", 69);
			LeaveRule_cond_expr();
		}
		DebugLocation(597, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:599:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 70);
		TraceIn("or_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set497 = default(IToken);

		CommonTree set497_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(599, 19);
		try
		{
			// SugarCpp.g:599:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(599, 6);

			set497=(IToken)input.LT(1);
			if (input.LA(1)==160||input.LA(1)==181)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set497));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 70);
			LeaveRule("or_op", 70);
			LeaveRule_or_op();
		}
		DebugLocation(599, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:600:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 71);
		TraceIn("or_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(600, 1);
		try
		{
			// SugarCpp.g:601:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:601:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(601, 4);
			// SugarCpp.g:601:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:601:5: a= and_expr
			{
			DebugLocation(601, 6);
			PushFollow(Follow._and_expr_in_or_expr5398);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 601:16: -> $a
			{
				DebugLocation(601, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(601, 23);
			// SugarCpp.g:601:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=2;
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==160||LA218_0==181))
				{
					alt218 = 1;
				}


				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:601:24: op= or_op b= and_expr
					{
					DebugLocation(601, 26);
					PushFollow(Follow._or_op_in_or_expr5409);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(601, 34);
					PushFollow(Follow._and_expr_in_or_expr5413);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, or_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 601:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(601, 47);
						// SugarCpp.g:601:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(601, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(601, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(601, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(601, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 71);
			LeaveRule("or_expr", 71);
			LeaveRule_or_expr();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:604:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 72);
		TraceIn("and_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set498 = default(IToken);

		CommonTree set498_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(604, 21);
		try
		{
			// SugarCpp.g:604:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(604, 7);

			set498=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set498));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 72);
			LeaveRule("and_op", 72);
			LeaveRule_and_op();
		}
		DebugLocation(604, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:605:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 73);
		TraceIn("and_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(605, 1);
		try
		{
			// SugarCpp.g:606:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:606:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(606, 4);
			// SugarCpp.g:606:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:606:5: a= bit_or
			{
			DebugLocation(606, 6);
			PushFollow(Follow._bit_or_in_and_expr5455);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 606:14: -> $a
			{
				DebugLocation(606, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(606, 21);
			// SugarCpp.g:606:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==89||LA219_0==136))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch ( alt219 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:606:22: op= and_op b= bit_or
					{
					DebugLocation(606, 24);
					PushFollow(Follow._and_op_in_and_expr5466);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(606, 33);
					PushFollow(Follow._bit_or_in_and_expr5470);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(606, 44);
						// SugarCpp.g:606:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(606, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(606, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(606, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop219;
				}
			}

			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 73);
			LeaveRule("and_expr", 73);
			LeaveRule_and_expr();
		}
		DebugLocation(607, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:609:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 74);
		TraceIn("bit_or", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal499 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal499_tree = default(CommonTree);
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(609, 1);
		try
		{
			// SugarCpp.g:610:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:610:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(610, 4);
			// SugarCpp.g:610:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:610:5: a= bit_xor
			{
			DebugLocation(610, 6);
			PushFollow(Follow._bit_xor_in_bit_or5501);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 610:15: -> $a
			{
				DebugLocation(610, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(610, 22);
			// SugarCpp.g:610:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==178))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:610:23: '|' b= bit_xor
					{
					DebugLocation(610, 23);
					char_literal499=(IToken)Match(input,178,Follow._178_in_bit_or5510); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_178.Add(char_literal499);

					DebugLocation(610, 28);
					PushFollow(Follow._bit_xor_in_bit_or5514);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 178
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(610, 40);
						// SugarCpp.g:610:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(610, 51);
						adaptor.AddChild(root_1, stream_178.NextNode());
						DebugLocation(610, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 74);
			LeaveRule("bit_or", 74);
			LeaveRule_bit_or();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:613:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 75);
		TraceIn("bit_xor", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal500 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal500_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(613, 1);
		try
		{
			// SugarCpp.g:614:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:614:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(614, 4);
			// SugarCpp.g:614:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:614:5: a= bit_and
			{
			DebugLocation(614, 6);
			PushFollow(Follow._bit_and_in_bit_xor5544);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 614:15: -> $a
			{
				DebugLocation(614, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(614, 22);
			// SugarCpp.g:614:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==133))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:614:23: '^' b= bit_and
					{
					DebugLocation(614, 23);
					char_literal500=(IToken)Match(input,133,Follow._133_in_bit_xor5553); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal500);

					DebugLocation(614, 28);
					PushFollow(Follow._bit_and_in_bit_xor5557);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 133, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 614:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(614, 40);
						// SugarCpp.g:614:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(614, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(614, 51);
						adaptor.AddChild(root_1, stream_133.NextNode());
						DebugLocation(614, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(614, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 75);
			LeaveRule("bit_xor", 75);
			LeaveRule_bit_xor();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:617:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 76);
		TraceIn("bit_and", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal501 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal501_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(617, 1);
		try
		{
			// SugarCpp.g:618:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:618:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(618, 4);
			// SugarCpp.g:618:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:618:5: a= cmp_expr
			{
			DebugLocation(618, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5587);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 618:16: -> $a
			{
				DebugLocation(618, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(618, 23);
			// SugarCpp.g:618:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=2;
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==90))
				{
					alt222 = 1;
				}


				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:618:24: '&' b= cmp_expr
					{
					DebugLocation(618, 24);
					char_literal501=(IToken)Match(input,90,Follow._90_in_bit_and5596); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal501);

					DebugLocation(618, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5600);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 90, b, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 618:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(618, 42);
						// SugarCpp.g:618:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(618, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(618, 53);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(618, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(618, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 76);
			LeaveRule("bit_and", 76);
			LeaveRule_bit_and();
		}
		DebugLocation(619, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:621:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 77);
		TraceIn("chain_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set502 = default(IToken);

		CommonTree set502_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(621, 64);
		try
		{
			// SugarCpp.g:621:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(621, 9);

			set502=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==114||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=151 && input.LA(1)<=152))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set502));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 77);
			LeaveRule("chain_op", 77);
			LeaveRule_chain_op();
		}
		DebugLocation(621, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:622:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 78);
		TraceIn("no_less_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set503 = default(IToken);

		CommonTree set503_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(622, 60);
		try
		{
			// SugarCpp.g:622:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(622, 11);

			set503=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=151 && input.LA(1)<=152))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set503));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 78);
			LeaveRule("no_less_op", 78);
			LeaveRule_no_less_op();
		}
		DebugLocation(622, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:623:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 79);
		TraceIn("chain_list", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op504 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr505 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(623, 35);
		try
		{
			// SugarCpp.g:623:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:623:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(623, 13);
			// SugarCpp.g:623:13: ( chain_op shift_expr )+
			int cnt223=0;
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==86||LA223_0==114||LA223_0==118||LA223_0==121||(LA223_0>=124 && LA223_0<=125)||(LA223_0>=151 && LA223_0<=152)))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:14: chain_op shift_expr
					{
					DebugLocation(623, 14);
					PushFollow(Follow._chain_op_in_chain_list5692);
					chain_op504=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op504.Tree);
					DebugLocation(623, 23);
					PushFollow(Follow._shift_expr_in_chain_list5694);
					shift_expr505=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr505.Tree);

					}
					break;

				default:
					if (cnt223 >= 1)
						goto loop223;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee223 = new EarlyExitException( 223, input );
					DebugRecognitionException(eee223);
					throw eee223;
				}
				cnt223++;
			}
			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 79);
			LeaveRule("chain_list", 79);
			LeaveRule_chain_list();
		}
		DebugLocation(623, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:624:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 80);
		TraceIn("cmp_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal506 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal510 = default(IToken);
		IToken char_literal512 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident507 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list511 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list513 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list514 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal506_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal510_tree = default(CommonTree);
		CommonTree char_literal512_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(624, 1);
		try
		{
			// SugarCpp.g:625:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:625:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(625, 4);
			// SugarCpp.g:625:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:625:5: a= shift_expr
			{
			DebugLocation(625, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5708);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 625:18: -> $a
			{
				DebugLocation(625, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(625, 25);
			// SugarCpp.g:625:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt227=4;
			try { DebugEnterSubRule(227);
			try { DebugEnterDecision(227, false);
			int LA227_0 = input.LA(1);

			if ((LA227_0==114))
			{
				int LA227_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt227 = 1;
				}
				else if ((true))
				{
					alt227 = 2;
				}
			}
			else if ((LA227_0==86||LA227_0==118||LA227_0==121||(LA227_0>=124 && LA227_0<=125)||(LA227_0>=151 && LA227_0<=152)))
			{
				alt227 = 3;
			}
			} finally { DebugExitDecision(227); }
			switch (alt227)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:625:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(625, 77);
				char_literal506=(IToken)Match(input,114,Follow._114_in_cmp_expr5737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal506);

				DebugLocation(625, 81);
				PushFollow(Follow._ident_in_cmp_expr5739);
				ident507=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident507.Tree);
				DebugLocation(625, 87);
				// SugarCpp.g:625:87: ( ',' ident )*
				try { DebugEnterSubRule(224);
				while (true)
				{
					int alt224=2;
					try { DebugEnterDecision(224, false);
					int LA224_0 = input.LA(1);

					if ((LA224_0==99))
					{
						alt224 = 1;
					}


					} finally { DebugExitDecision(224); }
					switch ( alt224 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:625:88: ',' ident
						{
						DebugLocation(625, 88);
						char_literal508=(IToken)Match(input,99,Follow._99_in_cmp_expr5742); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal508);

						DebugLocation(625, 92);
						PushFollow(Follow._ident_in_cmp_expr5744);
						ident509=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident509.Tree);

						}
						break;

					default:
						goto loop224;
					}
				}

				loop224:
					;

				} finally { DebugExitSubRule(224); }

				DebugLocation(625, 100);
				char_literal510=(IToken)Match(input,124,Follow._124_in_cmp_expr5748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal510);

				DebugLocation(625, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5750);
				bracket_expr_list511=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list511.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, ident, bracket_expr_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 625:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(625, 125);
					// SugarCpp.g:625:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(625, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(625, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(625, 147);
					// SugarCpp.g:625:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(625, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(625, 168);
					// SugarCpp.g:625:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(625, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(625, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:626:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(626, 12);
				char_literal512=(IToken)Match(input,114,Follow._114_in_cmp_expr5781); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal512);

				DebugLocation(626, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5785);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(626, 29);
				// SugarCpp.g:626:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt225=2;
				try { DebugEnterSubRule(225);
				try { DebugEnterDecision(225, false);
				int LA225_0 = input.LA(1);

				if ((LA225_0==86||LA225_0==114||LA225_0==118||LA225_0==121||(LA225_0>=124 && LA225_0<=125)||(LA225_0>=151 && LA225_0<=152)))
				{
					alt225 = 1;
				}
				else if ((LA225_0==DEDENT||LA225_0==INDENT||LA225_0==NEWLINE||(LA225_0>=88 && LA225_0<=91)||LA225_0==93||LA225_0==95||(LA225_0>=98 && LA225_0<=99)||LA225_0==103||(LA225_0>=109 && LA225_0<=110)||(LA225_0>=112 && LA225_0<=113)||LA225_0==117||(LA225_0>=119 && LA225_0<=120)||LA225_0==123||(LA225_0>=127 && LA225_0<=128)||(LA225_0>=132 && LA225_0<=134)||(LA225_0>=136 && LA225_0<=137)||LA225_0==143||(LA225_0>=147 && LA225_0<=148)||LA225_0==150||LA225_0==160||(LA225_0>=166 && LA225_0<=168)||(LA225_0>=171 && LA225_0<=172)||(LA225_0>=176 && LA225_0<=181)))
				{
					alt225 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 225, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(225); }
				switch (alt225)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:626:31: chain_list
					{
					DebugLocation(626, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5789);
					chain_list513=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list513.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, 114, chain_list, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(626, 45);
						// SugarCpp.g:626:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(626, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(626, 69);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(626, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(626, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:627:16: 
					{

					{
					// AST REWRITE
					// elements: 114, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 627:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(627, 19);
						// SugarCpp.g:627:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(627, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(627, 30);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(627, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(627, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(225); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:628:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(628, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5866);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(628, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5870);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(628, 54);
				// SugarCpp.g:628:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt226=2;
				try { DebugEnterSubRule(226);
				try { DebugEnterDecision(226, false);
				int LA226_0 = input.LA(1);

				if ((LA226_0==86||LA226_0==114||LA226_0==118||LA226_0==121||(LA226_0>=124 && LA226_0<=125)||(LA226_0>=151 && LA226_0<=152)))
				{
					alt226 = 1;
				}
				else if ((LA226_0==DEDENT||LA226_0==INDENT||LA226_0==NEWLINE||(LA226_0>=88 && LA226_0<=91)||LA226_0==93||LA226_0==95||(LA226_0>=98 && LA226_0<=99)||LA226_0==103||(LA226_0>=109 && LA226_0<=110)||(LA226_0>=112 && LA226_0<=113)||LA226_0==117||(LA226_0>=119 && LA226_0<=120)||LA226_0==123||(LA226_0>=127 && LA226_0<=128)||(LA226_0>=132 && LA226_0<=134)||(LA226_0>=136 && LA226_0<=137)||LA226_0==143||(LA226_0>=147 && LA226_0<=148)||LA226_0==150||LA226_0==160||(LA226_0>=166 && LA226_0<=168)||(LA226_0>=171 && LA226_0<=172)||(LA226_0>=176 && LA226_0<=181)))
				{
					alt226 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(226); }
				switch (alt226)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:628:56: chain_list
					{
					DebugLocation(628, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5874);
					chain_list514=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list514.Tree);


					{
					// AST REWRITE
					// elements: chain_list, op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 628:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(628, 70);
						// SugarCpp.g:628:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(628, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(628, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(628, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(628, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(628, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:629:17: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 629:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(629, 20);
						// SugarCpp.g:629:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(629, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(629, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(629, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(629, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(226); }


				}
				break;

			}
			} finally { DebugExitSubRule(227); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 80);
			LeaveRule("cmp_expr", 80);
			LeaveRule_cmp_expr();
		}
		DebugLocation(632, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:634:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 81);
		TraceIn("shift_expr_op", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set515 = default(IToken);

		CommonTree set515_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(634, 27);
		try
		{
			// SugarCpp.g:634:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(634, 14);

			set515=(IToken)input.LT(1);
			if (input.LA(1)==116||input.LA(1)==126)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set515));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 81);
			LeaveRule("shift_expr_op", 81);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(634, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:635:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 82);
		TraceIn("shift_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op516 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(635, 1);
		try
		{
			// SugarCpp.g:636:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:636:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(636, 4);
			// SugarCpp.g:636:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:636:5: a= add_expr
			{
			DebugLocation(636, 6);
			PushFollow(Follow._add_expr_in_shift_expr5976);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 636:16: -> $a
			{
				DebugLocation(636, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(636, 23);
			// SugarCpp.g:636:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(228);
			while (true)
			{
				int alt228=2;
				try { DebugEnterDecision(228, false);
				int LA228_0 = input.LA(1);

				if ((LA228_0==116||LA228_0==126))
				{
					alt228 = 1;
				}


				} finally { DebugExitDecision(228); }
				switch ( alt228 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:636:24: shift_expr_op b= add_expr
					{
					DebugLocation(636, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5985);
					shift_expr_op516=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op516.Tree);
					DebugLocation(636, 39);
					PushFollow(Follow._add_expr_in_shift_expr5989);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(636, 52);
						// SugarCpp.g:636:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(636, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(636, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop228;
				}
			}

			loop228:
				;

			} finally { DebugExitSubRule(228); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 82);
			LeaveRule("shift_expr", 82);
			LeaveRule_shift_expr();
		}
		DebugLocation(637, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:639:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 83);
		TraceIn("add_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal517 = default(IToken);
		IToken char_literal518 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal517_tree = default(CommonTree);
		CommonTree char_literal518_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(639, 1);
		try
		{
			// SugarCpp.g:640:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:640:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(640, 4);
			// SugarCpp.g:640:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:640:5: a= mul_expr
			{
			DebugLocation(640, 6);
			PushFollow(Follow._mul_expr_in_add_expr6019);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 640:16: -> $a
			{
				DebugLocation(640, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(640, 23);
			// SugarCpp.g:640:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(229);
			while (true)
			{
				int alt229=3;
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==96))
				{
					alt229 = 1;
				}
				else if ((LA229_0==100))
				{
					alt229 = 2;
				}


				} finally { DebugExitDecision(229); }
				switch ( alt229 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:640:25: '+' b= mul_expr
					{
					DebugLocation(640, 25);
					char_literal517=(IToken)Match(input,96,Follow._96_in_add_expr6029); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal517);

					DebugLocation(640, 30);
					PushFollow(Follow._mul_expr_in_add_expr6033);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 96
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 640:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(640, 43);
						// SugarCpp.g:640:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(640, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(640, 54);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(640, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(640, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:641:10: '-' b= mul_expr
					{
					DebugLocation(641, 10);
					char_literal518=(IToken)Match(input,100,Follow._100_in_add_expr6058); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal518);

					DebugLocation(641, 15);
					PushFollow(Follow._mul_expr_in_add_expr6062);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 100, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 641:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(641, 28);
						// SugarCpp.g:641:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(641, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(641, 39);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(641, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(641, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop229;
				}
			}

			loop229:
				;

			} finally { DebugExitSubRule(229); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 83);
			LeaveRule("add_expr", 83);
			LeaveRule_add_expr();
		}
		DebugLocation(643, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:645:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 84);
		TraceIn("mul_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal519 = default(IToken);
		IToken char_literal520 = default(IToken);
		IToken char_literal521 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal519_tree = default(CommonTree);
		CommonTree char_literal520_tree = default(CommonTree);
		CommonTree char_literal521_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(645, 1);
		try
		{
			// SugarCpp.g:646:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:646:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(646, 4);
			// SugarCpp.g:646:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:646:5: a= infix_expr
			{
			DebugLocation(646, 6);
			PushFollow(Follow._infix_expr_in_mul_expr6100);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 646:18: -> $a
			{
				DebugLocation(646, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(646, 25);
			// SugarCpp.g:646:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(230);
			while (true)
			{
				int alt230=4;
				try { DebugEnterDecision(230, false);
				switch (input.LA(1))
				{
				case 94:
					{
					alt230 = 1;
					}
					break;
				case 108:
					{
					alt230 = 2;
					}
					break;
				case 87:
					{
					alt230 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(230); }
				switch ( alt230 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:646:27: '*' b= infix_expr
					{
					DebugLocation(646, 27);
					char_literal519=(IToken)Match(input,94,Follow._94_in_mul_expr6110); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal519);

					DebugLocation(646, 32);
					PushFollow(Follow._infix_expr_in_mul_expr6114);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 646:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(646, 47);
						// SugarCpp.g:646:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(646, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(646, 58);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(646, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(646, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:647:12: '/' b= infix_expr
					{
					DebugLocation(647, 12);
					char_literal520=(IToken)Match(input,108,Follow._108_in_mul_expr6141); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(char_literal520);

					DebugLocation(647, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6145);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 108, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 647:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(647, 32);
						// SugarCpp.g:647:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(647, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(647, 43);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(647, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(647, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:648:12: '%' b= infix_expr
					{
					DebugLocation(648, 12);
					char_literal521=(IToken)Match(input,87,Follow._87_in_mul_expr6172); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_87.Add(char_literal521);

					DebugLocation(648, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6176);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 87, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(648, 32);
						// SugarCpp.g:648:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(648, 43);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(648, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(648, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop230;
				}
			}

			loop230:
				;

			} finally { DebugExitSubRule(230); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 84);
			LeaveRule("mul_expr", 84);
			LeaveRule_mul_expr();
		}
		DebugLocation(650, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:652:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 85);
		TraceIn("infix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func522 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(652, 1);
		try
		{
			// SugarCpp.g:653:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:653:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(653, 4);
			// SugarCpp.g:653:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:653:5: a= selector_expr
			{
			DebugLocation(653, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6216);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 653:21: -> $a
			{
				DebugLocation(653, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(653, 28);
			// SugarCpp.g:653:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(231);
			while (true)
			{
				int alt231=2;
				try { DebugEnterDecision(231, false);
				int LA231_0 = input.LA(1);

				if ((LA231_0==135))
				{
					alt231 = 1;
				}


				} finally { DebugExitDecision(231); }
				switch ( alt231 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:653:30: infix_func b= selector_expr
					{
					DebugLocation(653, 30);
					PushFollow(Follow._infix_func_in_infix_expr6226);
					infix_func522=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func522.Tree);
					DebugLocation(653, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6230);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 653:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(653, 61);
						// SugarCpp.g:653:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(653, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(653, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(653, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(653, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop231;
				}
			}

			loop231:
				;

			} finally { DebugExitSubRule(231); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 85);
			LeaveRule("infix_expr", 85);
			LeaveRule_infix_expr();
		}
		DebugLocation(654, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:656:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 86);
		TraceIn("selector_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal523 = default(IToken);
		IToken string_literal524 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal523_tree = default(CommonTree);
		CommonTree string_literal524_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(656, 1);
		try
		{
			// SugarCpp.g:657:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:657:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(657, 4);
			// SugarCpp.g:657:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:657:5: a= cast_expr
			{
			DebugLocation(657, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6262);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 657:17: -> $a
			{
				DebugLocation(657, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(657, 24);
			// SugarCpp.g:657:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(232);
			while (true)
			{
				int alt232=3;
				try { DebugEnterDecision(232, false);
				int LA232_0 = input.LA(1);

				if ((LA232_0==105))
				{
					alt232 = 1;
				}
				else if ((LA232_0==107))
				{
					alt232 = 2;
				}


				} finally { DebugExitDecision(232); }
				switch ( alt232 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:657:26: '->*' b= ident
					{
					DebugLocation(657, 26);
					string_literal523=(IToken)Match(input,105,Follow._105_in_selector_expr6272); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal523);

					DebugLocation(657, 33);
					PushFollow(Follow._ident_in_selector_expr6276);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 105
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 657:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(657, 43);
						// SugarCpp.g:657:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(657, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(657, 57);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(657, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(657, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:658:11: '.*' b= ident
					{
					DebugLocation(658, 11);
					string_literal524=(IToken)Match(input,107,Follow._107_in_selector_expr6302); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(string_literal524);

					DebugLocation(658, 18);
					PushFollow(Follow._ident_in_selector_expr6307);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 107, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 658:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(658, 28);
						// SugarCpp.g:658:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(658, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(658, 42);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(658, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(658, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop232;
				}
			}

			loop232:
				;

			} finally { DebugExitSubRule(232); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 86);
			LeaveRule("selector_expr", 86);
			LeaveRule_selector_expr();
		}
		DebugLocation(660, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:662:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 87);
		TraceIn("cast_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal525 = default(IToken);
		IToken char_literal527 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr529 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal525_tree = default(CommonTree);
		CommonTree char_literal527_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(662, 1);
		try
		{
			// SugarCpp.g:663:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt233=2;
			try { DebugEnterDecision(233, false);
			int LA233_0 = input.LA(1);

			if ((LA233_0==92))
			{
				int LA233_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt233 = 1;
				}
				else if ((true))
				{
					alt233 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 233, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA233_0==IDENT||LA233_0==NUMBER||LA233_0==STRING||LA233_0==85||LA233_0==90||LA233_0==94||(LA233_0>=96 && LA233_0<=97)||(LA233_0>=100 && LA233_0<=101)||LA233_0==130||(LA233_0>=158 && LA233_0<=159)||LA233_0==182))
			{
				alt233 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 233, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:663:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(663, 39);
				char_literal525=(IToken)Match(input,92,Follow._92_in_cast_expr6356); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal525);

				DebugLocation(663, 43);
				PushFollow(Follow._type_name_in_cast_expr6358);
				type_name526=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name526.Tree);
				DebugLocation(663, 53);
				char_literal527=(IToken)Match(input,93,Follow._93_in_cast_expr6360); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal527);

				DebugLocation(663, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6362);
				prefix_expr528=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr528.Tree);


				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 663:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(663, 72);
					// SugarCpp.g:663:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(663, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(663, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(663, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:664:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(664, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6377);
				prefix_expr529=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr529.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 87);
			LeaveRule("cast_expr", 87);
			LeaveRule_cast_expr();
		}
		DebugLocation(665, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:667:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 88);
		TraceIn("prefix_expr_op", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set530 = default(IToken);

		CommonTree set530_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(667, 71);
		try
		{
			// SugarCpp.g:667:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(667, 15);

			set530=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==90||input.LA(1)==94||(input.LA(1)>=96 && input.LA(1)<=97)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==159||input.LA(1)==182)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set530));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 88);
			LeaveRule("prefix_expr_op", 88);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(667, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:668:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 89);
		TraceIn("prefix_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal533 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op531 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr532 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array534 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list536 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr537 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal533_tree = default(CommonTree);
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(668, 1);
		try
		{
			// SugarCpp.g:669:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt235=3;
			try { DebugEnterDecision(235, false);
			switch (input.LA(1))
			{
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 159:
			case 182:
				{
				alt235 = 1;
				}
				break;
			case 158:
				{
				alt235 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 92:
			case 130:
				{
				alt235 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 235, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(235); }
			switch (alt235)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:669:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(669, 4);
				// SugarCpp.g:669:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:669:5: prefix_expr_op prefix_expr
				{
				DebugLocation(669, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6427);
				prefix_expr_op531=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op531.Tree);
				DebugLocation(669, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6429);
				prefix_expr532=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr532.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 669:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(669, 36);
					// SugarCpp.g:669:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(669, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(669, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(669, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:670:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(670, 4);
				string_literal533=(IToken)Match(input,158,Follow._158_in_prefix_expr6445); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_158.Add(string_literal533);

				DebugLocation(670, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6447);
				type_no_array534=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array534.Tree);
				DebugLocation(670, 24);
				// SugarCpp.g:670:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt234=2;
				try { DebugEnterSubRule(234);
				try { DebugEnterDecision(234, false);
				int LA234_0 = input.LA(1);

				if ((LA234_0==92))
				{
					alt234 = 1;
				}
				else if ((LA234_0==131))
				{
					alt234 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 234, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(234); }
				switch (alt234)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:670:26: bracket_expr_list
					{
					DebugLocation(670, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6451);
					bracket_expr_list535=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list535.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 670:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(670, 47);
						// SugarCpp.g:670:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(670, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(670, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(670, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:671:11: square_expr_list
					{
					DebugLocation(671, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6473);
					square_expr_list536=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list536.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 671:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(671, 31);
						// SugarCpp.g:671:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(671, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(671, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(671, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(234); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:673:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(673, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6498);
				suffix_expr537=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr537.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 89);
			LeaveRule("prefix_expr", 89);
			LeaveRule_prefix_expr();
		}
		DebugLocation(674, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:676:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 90);
		TraceIn("square_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal538 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken char_literal542 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr539 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr541 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree char_literal540_tree = default(CommonTree);
		CommonTree char_literal542_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(676, 1);
		try
		{
			// SugarCpp.g:677:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:677:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(677, 4);
			char_literal538=(IToken)Match(input,131,Follow._131_in_square_expr_list6510); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(char_literal538);

			DebugLocation(677, 8);
			PushFollow(Follow._expr_in_square_expr_list6512);
			expr539=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr539.Tree);
			DebugLocation(677, 13);
			// SugarCpp.g:677:13: ( ',' expr )*
			try { DebugEnterSubRule(236);
			while (true)
			{
				int alt236=2;
				try { DebugEnterDecision(236, false);
				int LA236_0 = input.LA(1);

				if ((LA236_0==99))
				{
					alt236 = 1;
				}


				} finally { DebugExitDecision(236); }
				switch ( alt236 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:677:14: ',' expr
					{
					DebugLocation(677, 14);
					char_literal540=(IToken)Match(input,99,Follow._99_in_square_expr_list6515); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal540);

					DebugLocation(677, 18);
					PushFollow(Follow._expr_in_square_expr_list6517);
					expr541=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr541.Tree);

					}
					break;

				default:
					goto loop236;
				}
			}

			loop236:
				;

			} finally { DebugExitSubRule(236); }

			DebugLocation(677, 25);
			char_literal542=(IToken)Match(input,132,Follow._132_in_square_expr_list6521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal542);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 677:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(677, 32);
				// SugarCpp.g:677:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(677, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(677, 44);
				// SugarCpp.g:677:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(677, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 90);
			LeaveRule("square_expr_list", 90);
			LeaveRule_square_expr_list();
		}
		DebugLocation(678, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:680:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 91);
		TraceIn("bracket_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal543 = default(IToken);
		IToken char_literal545 = default(IToken);
		IToken char_literal547 = default(IToken);
		IToken NEWLINE548 = default(IToken);
		IToken INDENT549 = default(IToken);
		IToken NEWLINE550 = default(IToken);
		IToken char_literal552 = default(IToken);
		IToken NEWLINE553 = default(IToken);
		IToken NEWLINE555 = default(IToken);
		IToken char_literal556 = default(IToken);
		IToken NEWLINE557 = default(IToken);
		IToken DEDENT558 = default(IToken);
		IToken DEDENT559 = default(IToken);
		IToken NEWLINE560 = default(IToken);
		IToken char_literal561 = default(IToken);
		IToken char_literal563 = default(IToken);
		IToken NEWLINE564 = default(IToken);
		IToken char_literal566 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr551 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr562 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr565 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal543_tree = default(CommonTree);
		CommonTree char_literal545_tree = default(CommonTree);
		CommonTree char_literal547_tree = default(CommonTree);
		CommonTree NEWLINE548_tree = default(CommonTree);
		CommonTree INDENT549_tree = default(CommonTree);
		CommonTree NEWLINE550_tree = default(CommonTree);
		CommonTree char_literal552_tree = default(CommonTree);
		CommonTree NEWLINE553_tree = default(CommonTree);
		CommonTree NEWLINE555_tree = default(CommonTree);
		CommonTree char_literal556_tree = default(CommonTree);
		CommonTree NEWLINE557_tree = default(CommonTree);
		CommonTree DEDENT558_tree = default(CommonTree);
		CommonTree DEDENT559_tree = default(CommonTree);
		CommonTree NEWLINE560_tree = default(CommonTree);
		CommonTree char_literal561_tree = default(CommonTree);
		CommonTree char_literal563_tree = default(CommonTree);
		CommonTree NEWLINE564_tree = default(CommonTree);
		CommonTree char_literal566_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(680, 1);
		try
		{
			// SugarCpp.g:681:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:681:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(681, 4);
			char_literal543=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6541); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal543);

			DebugLocation(681, 8);
			// SugarCpp.g:681:8: ( expr ( ',' expr )* )?
			int alt238=2;
			try { DebugEnterSubRule(238);
			try { DebugEnterDecision(238, false);
			int LA238_0 = input.LA(1);

			if ((LA238_0==IDENT||LA238_0==NUMBER||LA238_0==STRING||LA238_0==85||LA238_0==90||LA238_0==92||LA238_0==94||(LA238_0>=96 && LA238_0<=97)||(LA238_0>=100 && LA238_0<=101)||(LA238_0>=130 && LA238_0<=131)||LA238_0==153||LA238_0==156||(LA238_0>=158 && LA238_0<=159)||LA238_0==182))
			{
				alt238 = 1;
			}
			} finally { DebugExitDecision(238); }
			switch (alt238)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:681:9: expr ( ',' expr )*
				{
				DebugLocation(681, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6544);
				expr544=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr544.Tree);
				DebugLocation(681, 14);
				// SugarCpp.g:681:14: ( ',' expr )*
				try { DebugEnterSubRule(237);
				while (true)
				{
					int alt237=2;
					try { DebugEnterDecision(237, false);
					int LA237_0 = input.LA(1);

					if ((LA237_0==99))
					{
						alt237 = 1;
					}


					} finally { DebugExitDecision(237); }
					switch ( alt237 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:681:15: ',' expr
						{
						DebugLocation(681, 15);
						char_literal545=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6547); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal545);

						DebugLocation(681, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6549);
						expr546=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr546.Tree);

						}
						break;

					default:
						goto loop237;
					}
				}

				loop237:
					;

				} finally { DebugExitSubRule(237); }


				}
				break;

			}
			} finally { DebugExitSubRule(238); }

			DebugLocation(681, 28);
			// SugarCpp.g:681:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt251=2;
			try { DebugEnterSubRule(251);
			try { DebugEnterDecision(251, false);
			int LA251_0 = input.LA(1);

			if ((LA251_0==93))
			{
				alt251 = 1;
			}
			else if ((LA251_0==NEWLINE))
			{
				alt251 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 251, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:681:30: ')'
				{
				DebugLocation(681, 30);
				char_literal547=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6557); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal547);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 681:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(681, 37);
					// SugarCpp.g:681:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(681, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(681, 49);
					// SugarCpp.g:681:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(681, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:682:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(682, 12);
				// SugarCpp.g:682:12: ( NEWLINE )+
				int cnt239=0;
				try { DebugEnterSubRule(239);
				while (true)
				{
					int alt239=2;
					try { DebugEnterDecision(239, false);
					int LA239_0 = input.LA(1);

					if ((LA239_0==NEWLINE))
					{
						alt239 = 1;
					}


					} finally { DebugExitDecision(239); }
					switch (alt239)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:682:12: NEWLINE
						{
						DebugLocation(682, 12);
						NEWLINE548=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6579); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE548);


						}
						break;

					default:
						if (cnt239 >= 1)
							goto loop239;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee239 = new EarlyExitException( 239, input );
						DebugRecognitionException(eee239);
						throw eee239;
					}
					cnt239++;
				}
				loop239:
					;

				} finally { DebugExitSubRule(239); }

				DebugLocation(682, 21);
				// SugarCpp.g:682:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt250=2;
				try { DebugEnterSubRule(250);
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==INDENT))
				{
					alt250 = 1;
				}
				else if ((LA250_0==IDENT||LA250_0==NUMBER||LA250_0==STRING||LA250_0==85||LA250_0==90||(LA250_0>=92 && LA250_0<=94)||(LA250_0>=96 && LA250_0<=97)||(LA250_0>=100 && LA250_0<=101)||(LA250_0>=130 && LA250_0<=131)||LA250_0==153||LA250_0==156||(LA250_0>=158 && LA250_0<=159)||LA250_0==182))
				{
					alt250 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 250, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(250); }
				switch (alt250)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:682:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(682, 23);
					INDENT549=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6584); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT549);

					DebugLocation(682, 30);
					// SugarCpp.g:682:30: ( NEWLINE )*
					try { DebugEnterSubRule(240);
					while (true)
					{
						int alt240=2;
						try { DebugEnterDecision(240, false);
						int LA240_0 = input.LA(1);

						if ((LA240_0==NEWLINE))
						{
							alt240 = 1;
						}


						} finally { DebugExitDecision(240); }
						switch ( alt240 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:682:30: NEWLINE
							{
							DebugLocation(682, 30);
							NEWLINE550=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6586); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE550);


							}
							break;

						default:
							goto loop240;
						}
					}

					loop240:
						;

					} finally { DebugExitSubRule(240); }

					DebugLocation(682, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6589);
					expr551=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr551.Tree);
					DebugLocation(682, 44);
					// SugarCpp.g:682:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(242);
					while (true)
					{
						int alt242=2;
						try { DebugEnterDecision(242, false);
						try
						{
							alt242 = dfa242.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(242); }
						switch ( alt242 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:682:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(682, 45);
							// SugarCpp.g:682:45: ( ',' | NEWLINE )+
							int cnt241=0;
							try { DebugEnterSubRule(241);
							while (true)
							{
								int alt241=3;
								try { DebugEnterDecision(241, false);
								int LA241_0 = input.LA(1);

								if ((LA241_0==99))
								{
									alt241 = 1;
								}
								else if ((LA241_0==NEWLINE))
								{
									alt241 = 2;
								}


								} finally { DebugExitDecision(241); }
								switch (alt241)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:682:46: ','
									{
									DebugLocation(682, 46);
									char_literal552=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6593); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal552);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:682:52: NEWLINE
									{
									DebugLocation(682, 52);
									NEWLINE553=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6597); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE553);


									}
									break;

								default:
									if (cnt241 >= 1)
										goto loop241;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee241 = new EarlyExitException( 241, input );
									DebugRecognitionException(eee241);
									throw eee241;
								}
								cnt241++;
							}
							loop241:
								;

							} finally { DebugExitSubRule(241); }

							DebugLocation(682, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6601);
							expr554=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr554.Tree);

							}
							break;

						default:
							goto loop242;
						}
					}

					loop242:
						;

					} finally { DebugExitSubRule(242); }

					DebugLocation(682, 69);
					// SugarCpp.g:682:69: ( NEWLINE )*
					try { DebugEnterSubRule(243);
					while (true)
					{
						int alt243=2;
						try { DebugEnterDecision(243, false);
						int LA243_0 = input.LA(1);

						if ((LA243_0==NEWLINE))
						{
							alt243 = 1;
						}


						} finally { DebugExitDecision(243); }
						switch ( alt243 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:682:69: NEWLINE
							{
							DebugLocation(682, 69);
							NEWLINE555=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6605); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE555);


							}
							break;

						default:
							goto loop243;
						}
					}

					loop243:
						;

					} finally { DebugExitSubRule(243); }

					DebugLocation(682, 78);
					// SugarCpp.g:682:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt246=2;
					try { DebugEnterSubRule(246);
					try { DebugEnterDecision(246, false);
					int LA246_0 = input.LA(1);

					if ((LA246_0==93))
					{
						alt246 = 1;
					}
					else if ((LA246_0==DEDENT))
					{
						alt246 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(246); }
					switch (alt246)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:682:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(682, 80);
						char_literal556=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6610); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal556);

						DebugLocation(682, 84);
						// SugarCpp.g:682:84: ( NEWLINE )*
						try { DebugEnterSubRule(244);
						while (true)
						{
							int alt244=2;
							try { DebugEnterDecision(244, false);
							int LA244_0 = input.LA(1);

							if ((LA244_0==NEWLINE))
							{
								alt244 = 1;
							}


							} finally { DebugExitDecision(244); }
							switch ( alt244 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:682:84: NEWLINE
								{
								DebugLocation(682, 84);
								NEWLINE557=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6612); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE557);


								}
								break;

							default:
								goto loop244;
							}
						}

						loop244:
							;

						} finally { DebugExitSubRule(244); }

						DebugLocation(682, 93);
						DEDENT558=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6615); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT558);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:682:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(682, 102);
						DEDENT559=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6619); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT559);

						DebugLocation(682, 109);
						// SugarCpp.g:682:109: ( NEWLINE )*
						try { DebugEnterSubRule(245);
						while (true)
						{
							int alt245=2;
							try { DebugEnterDecision(245, false);
							int LA245_0 = input.LA(1);

							if ((LA245_0==NEWLINE))
							{
								alt245 = 1;
							}


							} finally { DebugExitDecision(245); }
							switch ( alt245 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:682:109: NEWLINE
								{
								DebugLocation(682, 109);
								NEWLINE560=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6621); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE560);


								}
								break;

							default:
								goto loop245;
							}
						}

						loop245:
							;

						} finally { DebugExitSubRule(245); }

						DebugLocation(682, 118);
						char_literal561=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6624); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal561);


						}
						break;

					}
					} finally { DebugExitSubRule(246); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 682:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(682, 127);
						// SugarCpp.g:682:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(682, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(682, 139);
						// SugarCpp.g:682:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(682, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:683:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(683, 14);
					// SugarCpp.g:683:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt249=2;
					try { DebugEnterSubRule(249);
					try { DebugEnterDecision(249, false);
					int LA249_0 = input.LA(1);

					if ((LA249_0==IDENT||LA249_0==NUMBER||LA249_0==STRING||LA249_0==85||LA249_0==90||LA249_0==92||LA249_0==94||(LA249_0>=96 && LA249_0<=97)||(LA249_0>=100 && LA249_0<=101)||(LA249_0>=130 && LA249_0<=131)||LA249_0==153||LA249_0==156||(LA249_0>=158 && LA249_0<=159)||LA249_0==182))
					{
						alt249 = 1;
					}
					} finally { DebugExitDecision(249); }
					switch (alt249)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:683:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(683, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6651);
						expr562=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr562.Tree);
						DebugLocation(683, 20);
						// SugarCpp.g:683:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(248);
						while (true)
						{
							int alt248=2;
							try { DebugEnterDecision(248, false);
							int LA248_0 = input.LA(1);

							if ((LA248_0==NEWLINE||LA248_0==99))
							{
								alt248 = 1;
							}


							} finally { DebugExitDecision(248); }
							switch ( alt248 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:683:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(683, 21);
								// SugarCpp.g:683:21: ( ',' | NEWLINE )+
								int cnt247=0;
								try { DebugEnterSubRule(247);
								while (true)
								{
									int alt247=3;
									try { DebugEnterDecision(247, false);
									int LA247_0 = input.LA(1);

									if ((LA247_0==99))
									{
										alt247 = 1;
									}
									else if ((LA247_0==NEWLINE))
									{
										alt247 = 2;
									}


									} finally { DebugExitDecision(247); }
									switch (alt247)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:683:22: ','
										{
										DebugLocation(683, 22);
										char_literal563=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6655); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_99.Add(char_literal563);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:683:28: NEWLINE
										{
										DebugLocation(683, 28);
										NEWLINE564=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6659); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE564);


										}
										break;

									default:
										if (cnt247 >= 1)
											goto loop247;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee247 = new EarlyExitException( 247, input );
										DebugRecognitionException(eee247);
										throw eee247;
									}
									cnt247++;
								}
								loop247:
									;

								} finally { DebugExitSubRule(247); }

								DebugLocation(683, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6663);
								expr565=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr565.Tree);

								}
								break;

							default:
								goto loop248;
							}
						}

						loop248:
							;

						} finally { DebugExitSubRule(248); }


						}
						break;

					}
					} finally { DebugExitSubRule(249); }

					DebugLocation(683, 47);
					char_literal566=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6669); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal566);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 683:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(683, 54);
						// SugarCpp.g:683:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(683, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(683, 66);
						// SugarCpp.g:683:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(683, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(250); }


				}
				break;

			}
			} finally { DebugExitSubRule(251); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 91);
			LeaveRule("bracket_expr_list", 91);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(686, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:688:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 92);
		TraceIn("suffix_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal567 = default(IToken);
		IToken string_literal568 = default(IToken);
		IToken char_literal569 = default(IToken);
		IToken string_literal571 = default(IToken);
		IToken char_literal575 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident570 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list573 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list574 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident576 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list577 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal567_tree = default(CommonTree);
		CommonTree string_literal568_tree = default(CommonTree);
		CommonTree char_literal569_tree = default(CommonTree);
		CommonTree string_literal571_tree = default(CommonTree);
		CommonTree char_literal575_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(688, 1);
		try
		{
			// SugarCpp.g:689:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:689:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(689, 4);
			// SugarCpp.g:689:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:689:5: a= atom_expr
			{
			DebugLocation(689, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6716);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 689:17: -> $a
			{
				DebugLocation(689, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(689, 24);
			// SugarCpp.g:689:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(252);
			while (true)
			{
				int alt252=8;
				try { DebugEnterDecision(252, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt252 = 1;
					}
					break;
				case 101:
					{
					alt252 = 2;
					}
					break;
				case 106:
					{
					alt252 = 3;
					}
					break;
				case 104:
					{
					alt252 = 4;
					}
					break;
				case 92:
					{
					alt252 = 5;
					}
					break;
				case 131:
					{
					alt252 = 6;
					}
					break;
				case 130:
					{
					alt252 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(252); }
				switch ( alt252 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:689:26: '++'
					{
					DebugLocation(689, 26);
					string_literal567=(IToken)Match(input,97,Follow._97_in_suffix_expr6726); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal567);



					{
					// AST REWRITE
					// elements: suffix_expr, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 689:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(689, 34);
						// SugarCpp.g:689:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(689, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(689, 48);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(689, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:690:14: '--'
					{
					DebugLocation(690, 14);
					string_literal568=(IToken)Match(input,101,Follow._101_in_suffix_expr6752); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal568);



					{
					// AST REWRITE
					// elements: 101, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(690, 22);
						// SugarCpp.g:690:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(690, 36);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(690, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:691:11: '.' ident
					{
					DebugLocation(691, 11);
					char_literal569=(IToken)Match(input,106,Follow._106_in_suffix_expr6775); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal569);

					DebugLocation(691, 15);
					PushFollow(Follow._ident_in_suffix_expr6777);
					ident570=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident570.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 106
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 691:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(691, 24);
						// SugarCpp.g:691:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(691, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(691, 38);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(691, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(691, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:692:11: '->' ident
					{
					DebugLocation(692, 11);
					string_literal571=(IToken)Match(input,104,Follow._104_in_suffix_expr6802); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal571);

					DebugLocation(692, 16);
					PushFollow(Follow._ident_in_suffix_expr6804);
					ident572=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident572.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 692:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(692, 25);
						// SugarCpp.g:692:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(692, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(692, 39);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(692, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(692, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:693:11: bracket_expr_list
					{
					DebugLocation(693, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6829);
					bracket_expr_list573=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list573.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 693:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(693, 32);
						// SugarCpp.g:693:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(693, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(693, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(693, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:694:11: square_expr_list
					{
					DebugLocation(694, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6852);
					square_expr_list574=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list574.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 694:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(694, 31);
						// SugarCpp.g:694:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(694, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(694, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(694, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:695:11: '@' ident bracket_expr_list
					{
					DebugLocation(695, 11);
					char_literal575=(IToken)Match(input,130,Follow._130_in_suffix_expr6875); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal575);

					DebugLocation(695, 15);
					PushFollow(Follow._ident_in_suffix_expr6877);
					ident576=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident576.Tree);
					DebugLocation(695, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6879);
					bracket_expr_list577=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list577.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 695:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(695, 42);
						// SugarCpp.g:695:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(695, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(695, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(695, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(695, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop252;
				}
			}

			loop252:
				;

			} finally { DebugExitSubRule(252); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 92);
			LeaveRule("suffix_expr", 92);
			LeaveRule_suffix_expr();
		}
		DebugLocation(697, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:699:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 93);
		TraceIn("atom_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER578 = default(IToken);
		IToken STRING580 = default(IToken);
		IToken char_literal581 = default(IToken);
		IToken char_literal583 = default(IToken);
		IToken char_literal584 = default(IToken);
		IToken char_literal586 = default(IToken);
		IToken char_literal587 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident579 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr585 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER578_tree = default(CommonTree);
		CommonTree STRING580_tree = default(CommonTree);
		CommonTree char_literal581_tree = default(CommonTree);
		CommonTree char_literal583_tree = default(CommonTree);
		CommonTree char_literal584_tree = default(CommonTree);
		CommonTree char_literal586_tree = default(CommonTree);
		CommonTree char_literal587_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(699, 1);
		try
		{
			// SugarCpp.g:700:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt255=5;
			try { DebugEnterDecision(255, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt255 = 1;
				}
				break;
			case IDENT:
				{
				alt255 = 2;
				}
				break;
			case STRING:
				{
				alt255 = 3;
				}
				break;
			case 130:
				{
				alt255 = 4;
				}
				break;
			case 92:
				{
				alt255 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 255, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(255); }
			switch (alt255)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:700:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 4);
				NUMBER578=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER578_tree = (CommonTree)adaptor.Create(NUMBER578);
				adaptor.AddChild(root_0, NUMBER578_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:701:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(701, 4);
				PushFollow(Follow._ident_in_atom_expr6922);
				ident579=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident579.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:702:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 4);
				STRING580=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING580_tree = (CommonTree)adaptor.Create(STRING580);
				adaptor.AddChild(root_0, STRING580_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:703:4: '@' ident
				{
				DebugLocation(703, 4);
				char_literal581=(IToken)Match(input,130,Follow._130_in_atom_expr6932); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal581);

				DebugLocation(703, 8);
				PushFollow(Follow._ident_in_atom_expr6934);
				ident582=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident582.Tree);


				{
				// AST REWRITE
				// elements: 130, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 703:14: -> ^( '@' ident )
				{
					DebugLocation(703, 17);
					// SugarCpp.g:703:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(703, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(703, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:704:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(704, 4);
				char_literal583=(IToken)Match(input,92,Follow._92_in_atom_expr6947); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal583);

				DebugLocation(704, 9);
				PushFollow(Follow._expr_in_atom_expr6951);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(704, 15);
				// SugarCpp.g:704:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt254=2;
				try { DebugEnterSubRule(254);
				try { DebugEnterDecision(254, false);
				int LA254_0 = input.LA(1);

				if ((LA254_0==99))
				{
					alt254 = 1;
				}
				else if ((LA254_0==93))
				{
					alt254 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 254, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(254); }
				switch (alt254)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:704:17: ( ',' expr )+ ')'
					{
					DebugLocation(704, 17);
					// SugarCpp.g:704:17: ( ',' expr )+
					int cnt253=0;
					try { DebugEnterSubRule(253);
					while (true)
					{
						int alt253=2;
						try { DebugEnterDecision(253, false);
						int LA253_0 = input.LA(1);

						if ((LA253_0==99))
						{
							alt253 = 1;
						}


						} finally { DebugExitDecision(253); }
						switch (alt253)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:704:18: ',' expr
							{
							DebugLocation(704, 18);
							char_literal584=(IToken)Match(input,99,Follow._99_in_atom_expr6956); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal584);

							DebugLocation(704, 22);
							PushFollow(Follow._expr_in_atom_expr6958);
							expr585=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr585.Tree);

							}
							break;

						default:
							if (cnt253 >= 1)
								goto loop253;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee253 = new EarlyExitException( 253, input );
							DebugRecognitionException(eee253);
							throw eee253;
						}
						cnt253++;
					}
					loop253:
						;

					} finally { DebugExitSubRule(253); }

					DebugLocation(704, 29);
					char_literal586=(IToken)Match(input,93,Follow._93_in_atom_expr6962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal586);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 704:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(704, 36);
						// SugarCpp.g:704:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(704, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(704, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(704, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:705:17: ')' {...}?
					{
					DebugLocation(705, 17);
					char_literal587=(IToken)Match(input,93,Follow._93_in_atom_expr6989); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal587);

					DebugLocation(705, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 705:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(705, 40);
						// SugarCpp.g:705:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(705, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(705, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(254); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 93);
			LeaveRule("atom_expr", 93);
			LeaveRule_atom_expr();
		}
		DebugLocation(707, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:709:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 94);
		TraceIn("lvalue_item", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix588 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(709, 1);
		try
		{
			// SugarCpp.g:710:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:710:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(710, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item7020);
			lvalue_prefix588=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix588.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 94);
			LeaveRule("lvalue_item", 94);
			LeaveRule_lvalue_item();
		}
		DebugLocation(711, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:713:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 95);
		TraceIn("lvalue_prefix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix590 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix591 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(713, 1);
		try
		{
			// SugarCpp.g:714:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt256=2;
			try { DebugEnterDecision(256, false);
			int LA256_0 = input.LA(1);

			if ((LA256_0==85||LA256_0==90||LA256_0==94||(LA256_0>=96 && LA256_0<=97)||(LA256_0>=100 && LA256_0<=101)||LA256_0==159||LA256_0==182))
			{
				alt256 = 1;
			}
			else if ((LA256_0==IDENT||LA256_0==130))
			{
				alt256 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 256, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:714:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(714, 4);
				// SugarCpp.g:714:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:714:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(714, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix7032);
				prefix_expr_op589=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op589.Tree);
				DebugLocation(714, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix7034);
				lvalue_prefix590=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix590.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 714:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(714, 38);
					// SugarCpp.g:714:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(714, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(714, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(714, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:715:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(715, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix7050);
				lvalue_suffix591=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix591.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 95);
			LeaveRule("lvalue_prefix", 95);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(716, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:718:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 96);
		TraceIn("lvalue_suffix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal592 = default(IToken);
		IToken string_literal593 = default(IToken);
		IToken char_literal594 = default(IToken);
		IToken string_literal596 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident595 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident597 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter598 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list599 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list600 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal592_tree = default(CommonTree);
		CommonTree string_literal593_tree = default(CommonTree);
		CommonTree char_literal594_tree = default(CommonTree);
		CommonTree string_literal596_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(718, 1);
		try
		{
			// SugarCpp.g:719:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:719:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(719, 4);
			// SugarCpp.g:719:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:719:5: a= lvalue_atom
			{
			DebugLocation(719, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix7064);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 719:19: -> $a
			{
				DebugLocation(719, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(719, 26);
			// SugarCpp.g:719:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(258);
			while (true)
			{
				int alt258=7;
				try { DebugEnterDecision(258, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt258 = 1;
					}
					break;
				case 101:
					{
					alt258 = 2;
					}
					break;
				case 106:
					{
					alt258 = 3;
					}
					break;
				case 104:
					{
					alt258 = 4;
					}
					break;
				case 92:
				case 114:
					{
					alt258 = 5;
					}
					break;
				case 131:
					{
					alt258 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(258); }
				switch ( alt258 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:719:28: '++'
					{
					DebugLocation(719, 28);
					string_literal592=(IToken)Match(input,97,Follow._97_in_lvalue_suffix7074); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal592);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 719:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(719, 36);
						// SugarCpp.g:719:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(719, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(719, 50);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(719, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:720:16: '--'
					{
					DebugLocation(720, 16);
					string_literal593=(IToken)Match(input,101,Follow._101_in_lvalue_suffix7102); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal593);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 720:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(720, 24);
						// SugarCpp.g:720:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(720, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(720, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(720, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:721:13: '.' ident
					{
					DebugLocation(721, 13);
					char_literal594=(IToken)Match(input,106,Follow._106_in_lvalue_suffix7127); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal594);

					DebugLocation(721, 17);
					PushFollow(Follow._ident_in_lvalue_suffix7129);
					ident595=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident595.Tree);


					{
					// AST REWRITE
					// elements: 106, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 721:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(721, 26);
						// SugarCpp.g:721:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(721, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(721, 40);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(721, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(721, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:722:13: '->' ident
					{
					DebugLocation(722, 13);
					string_literal596=(IToken)Match(input,104,Follow._104_in_lvalue_suffix7156); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal596);

					DebugLocation(722, 18);
					PushFollow(Follow._ident_in_lvalue_suffix7158);
					ident597=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident597.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_suffix, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 722:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(722, 27);
						// SugarCpp.g:722:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(722, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(722, 41);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(722, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(722, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:723:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(723, 13);
					// SugarCpp.g:723:13: ( generic_parameter )?
					int alt257=2;
					try { DebugEnterSubRule(257);
					try { DebugEnterDecision(257, false);
					int LA257_0 = input.LA(1);

					if ((LA257_0==114))
					{
						alt257 = 1;
					}
					} finally { DebugExitDecision(257); }
					switch (alt257)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:723:13: generic_parameter
						{
						DebugLocation(723, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix7185);
						generic_parameter598=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter598.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(257); }

					DebugLocation(723, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7188);
					bracket_expr_list599=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list599.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, bracket_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 723:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(723, 53);
						// SugarCpp.g:723:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(723, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(723, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(723, 80);
						// SugarCpp.g:723:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(723, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(723, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:724:13: square_expr_list
					{
					DebugLocation(724, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7216);
					square_expr_list600=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list600.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 724:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(724, 33);
						// SugarCpp.g:724:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(724, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(724, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(724, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop258;
				}
			}

			loop258:
				;

			} finally { DebugExitSubRule(258); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 96);
			LeaveRule("lvalue_suffix", 96);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(726, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:728:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 97);
		TraceIn("lvalue_atom", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal602 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident601 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident603 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal602_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(728, 1);
		try
		{
			// SugarCpp.g:729:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt259=2;
			try { DebugEnterDecision(259, false);
			int LA259_0 = input.LA(1);

			if ((LA259_0==IDENT))
			{
				alt259 = 1;
			}
			else if ((LA259_0==130))
			{
				alt259 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 259, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(259); }
			switch (alt259)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:729:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(729, 4);
				PushFollow(Follow._ident_in_lvalue_atom7254);
				ident601=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident601.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:730:4: '@' ident
				{
				DebugLocation(730, 4);
				char_literal602=(IToken)Match(input,130,Follow._130_in_lvalue_atom7259); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal602);

				DebugLocation(730, 8);
				PushFollow(Follow._ident_in_lvalue_atom7261);
				ident603=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident603.Tree);


				{
				// AST REWRITE
				// elements: ident, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 730:14: -> ^( '@' ident )
				{
					DebugLocation(730, 17);
					// SugarCpp.g:730:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(730, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(730, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 97);
			LeaveRule("lvalue_atom", 97);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(731, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:733:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 98);
		TraceIn("lvalue", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal604 = default(IToken);
		IToken char_literal606 = default(IToken);
		IToken char_literal608 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item605 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item607 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item609 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal604_tree = default(CommonTree);
		CommonTree char_literal606_tree = default(CommonTree);
		CommonTree char_literal608_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(733, 1);
		try
		{
			// SugarCpp.g:734:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt261=2;
			try { DebugEnterDecision(261, false);
			int LA261_0 = input.LA(1);

			if ((LA261_0==92))
			{
				alt261 = 1;
			}
			else if ((LA261_0==IDENT||LA261_0==85||LA261_0==90||LA261_0==94||(LA261_0>=96 && LA261_0<=97)||(LA261_0>=100 && LA261_0<=101)||LA261_0==130||LA261_0==159||LA261_0==182))
			{
				alt261 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 261, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(261); }
			switch (alt261)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:734:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(734, 4);
				char_literal604=(IToken)Match(input,92,Follow._92_in_lvalue7280); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal604);

				DebugLocation(734, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7282);
				lvalue_item605=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item605.Tree);
				DebugLocation(734, 20);
				// SugarCpp.g:734:20: ( ',' lvalue_item )+
				int cnt260=0;
				try { DebugEnterSubRule(260);
				while (true)
				{
					int alt260=2;
					try { DebugEnterDecision(260, false);
					int LA260_0 = input.LA(1);

					if ((LA260_0==99))
					{
						alt260 = 1;
					}


					} finally { DebugExitDecision(260); }
					switch (alt260)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:734:21: ',' lvalue_item
						{
						DebugLocation(734, 21);
						char_literal606=(IToken)Match(input,99,Follow._99_in_lvalue7285); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal606);

						DebugLocation(734, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7287);
						lvalue_item607=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item607.Tree);

						}
						break;

					default:
						if (cnt260 >= 1)
							goto loop260;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee260 = new EarlyExitException( 260, input );
						DebugRecognitionException(eee260);
						throw eee260;
					}
					cnt260++;
				}
				loop260:
					;

				} finally { DebugExitSubRule(260); }

				DebugLocation(734, 39);
				char_literal608=(IToken)Match(input,93,Follow._93_in_lvalue7291); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal608);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 734:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(734, 46);
					// SugarCpp.g:734:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(734, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(734, 60);
					// SugarCpp.g:734:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(734, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:735:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(735, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7305);
				lvalue_item609=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item609.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 98);
			LeaveRule("lvalue", 98);
			LeaveRule_lvalue();
		}
		DebugLocation(736, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:738:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 99);
		TraceIn("ident", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT610 = default(IToken);
		IToken string_literal611 = default(IToken);
		IToken IDENT612 = default(IToken);

		CommonTree IDENT610_tree = default(CommonTree);
		CommonTree string_literal611_tree = default(CommonTree);
		CommonTree IDENT612_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(738, 1);
		try
		{
			// SugarCpp.g:739:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:739:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(739, 4);
			IDENT610=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7316); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT610_tree = (CommonTree)adaptor.Create(IDENT610);
			adaptor.AddChild(root_0, IDENT610_tree);
			}
			DebugLocation(739, 10);
			// SugarCpp.g:739:10: ( '::' IDENT )*
			try { DebugEnterSubRule(262);
			while (true)
			{
				int alt262=2;
				try { DebugEnterDecision(262, false);
				int LA262_0 = input.LA(1);

				if ((LA262_0==111))
				{
					alt262 = 1;
				}


				} finally { DebugExitDecision(262); }
				switch ( alt262 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:739:11: '::' IDENT
					{
					DebugLocation(739, 11);
					string_literal611=(IToken)Match(input,111,Follow._111_in_ident7319); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal611_tree = (CommonTree)adaptor.Create(string_literal611);
					adaptor.AddChild(root_0, string_literal611_tree);
					}
					DebugLocation(739, 16);
					IDENT612=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7321); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT612_tree = (CommonTree)adaptor.Create(IDENT612);
					adaptor.AddChild(root_0, IDENT612_tree);
					}

					}
					break;

				default:
					goto loop262;
				}
			}

			loop262:
				;

			} finally { DebugExitSubRule(262); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 99);
			LeaveRule("ident", 99);
			LeaveRule_ident();
		}
		DebugLocation(740, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:742:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 100);
		TraceIn("infix_func", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal613 = default(IToken);
		IToken char_literal615 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident614 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal613_tree = default(CommonTree);
		CommonTree char_literal615_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(742, 1);
		try
		{
			// SugarCpp.g:743:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:743:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(743, 7);
			char_literal613=(IToken)Match(input,135,Follow._135_in_infix_func7334); if (state.failed) return retval;
			DebugLocation(743, 9);
			PushFollow(Follow._ident_in_infix_func7337);
			ident614=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident614.Tree);
			DebugLocation(743, 18);
			char_literal615=(IToken)Match(input,135,Follow._135_in_infix_func7339); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 100);
			LeaveRule("infix_func", 100);
			LeaveRule_infix_func();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 101);
		TraceIn("synpred1_SugarCpp_fragment", 101);
		try
		{
			// SugarCpp.g:554:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:554:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(554, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4649);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(554, 17);
			if (input.LA(1)==119||input.LA(1)==180)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 101);
			LeaveRule("synpred1_SugarCpp_fragment", 101);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 102);
		TraceIn("synpred2_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:561:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:561:5: '[' feed_expr 'for'
			{
			DebugLocation(561, 5);
			Match(input,131,Follow._131_in_synpred2_SugarCpp4763); if (state.failed) return;
			DebugLocation(561, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4765);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(561, 19);
			Match(input,147,Follow._147_in_synpred2_SugarCpp4767); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 102);
			LeaveRule("synpred2_SugarCpp_fragment", 102);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 103);
		TraceIn("synpred3_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:625:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:625:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(625, 28);
			Match(input,114,Follow._114_in_synpred3_SugarCpp5719); if (state.failed) return;
			DebugLocation(625, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5721);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(625, 38);
			// SugarCpp.g:625:38: ( ',' ident )*
			try { DebugEnterSubRule(263);
			while (true)
			{
				int alt263=2;
				try { DebugEnterDecision(263, false);
				int LA263_0 = input.LA(1);

				if ((LA263_0==99))
				{
					alt263 = 1;
				}


				} finally { DebugExitDecision(263); }
				switch ( alt263 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:625:39: ',' ident
					{
					DebugLocation(625, 39);
					Match(input,99,Follow._99_in_synpred3_SugarCpp5724); if (state.failed) return;
					DebugLocation(625, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5726);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop263;
				}
			}

			loop263:
				;

			} finally { DebugExitSubRule(263); }

			DebugLocation(625, 51);
			Match(input,124,Follow._124_in_synpred3_SugarCpp5730); if (state.failed) return;
			DebugLocation(625, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5732);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 103);
			LeaveRule("synpred3_SugarCpp_fragment", 103);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 104);
		TraceIn("synpred4_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:663:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:663:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(663, 5);
			Match(input,92,Follow._92_in_synpred4_SugarCpp6345); if (state.failed) return;
			DebugLocation(663, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6347);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(663, 19);
			Match(input,93,Follow._93_in_synpred4_SugarCpp6349); if (state.failed) return;
			DebugLocation(663, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6351);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 104);
			LeaveRule("synpred4_SugarCpp_fragment", 104);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA34 dfa34;
	private DFA41 dfa41;
	private DFA49 dfa49;
	private DFA57 dfa57;
	private DFA88 dfa88;
	private DFA110 dfa110;
	private DFA119 dfa119;
	private DFA124 dfa124;
	private DFA138 dfa138;
	private DFA180 dfa180;
	private DFA169 dfa169;
	private DFA204 dfa204;
	private DFA203 dfa203;
	private DFA212 dfa212;
	private DFA242 dfa242;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa34 = new DFA34( this );
		dfa41 = new DFA41( this );
		dfa49 = new DFA49( this );
		dfa57 = new DFA57( this );
		dfa88 = new DFA88( this );
		dfa110 = new DFA110( this );
		dfa119 = new DFA119( this );
		dfa124 = new DFA124( this );
		dfa138 = new DFA138( this );
		dfa180 = new DFA180( this );
		dfa169 = new DFA169( this );
		dfa204 = new DFA204( this );
		dfa203 = new DFA203( this );
		dfa212 = new DFA212( this );
		dfa242 = new DFA242( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xA1\xFFFF";
		private const string DFA4_eofS =
			"\xA1\xFFFF";
		private const string DFA4_minS =
			"\x3\x2E\x1\xFFFF\x1\x2E\x6\xFFFF\x5\x5C\x1\x2E\x1\xFFFF\x3\x2E\x1\x37"+
			"\x5\x2E\x1\x5C\x3\x5D\x5\x5C\x1\x2E\xC\x5D\x1\x2E\x1\x63\x8\x2E\x1\x63"+
			"\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x1\x2E\x4\x5D\x1\x5C\x1F\x5D"+
			"\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63"+
			"\x5\x2E\x19\x5D\x5\x2E\x5\x5D";
		private const string DFA4_maxS =
			"\x1\xB6\x1\xAE\x1\xB6\x1\xFFFF\x1\xB6\x6\xFFFF\x5\x84\x1\x2E\x1\xFFFF"+
			"\x1\x2E\x1\x3D\x1\xAE\x1\x37\x4\x3D\x1\xB6\x1\x84\x2\x63\x1\x6F\x5\x84"+
			"\x1\xB6\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x1\x3D"+
			"\x1\x84\x2\x2E\x6\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84"+
			"\x1\x2E\x1\x3D\x1\x84\x1\x2E\x2\x63\x2\x6F\x1\x84\x2\x63\x1\x6F\x2\x63"+
			"\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x2\x6F\x2\x63"+
			"\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D"+
			"\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84"+
			"\x5\x2E\x1\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F"+
			"\x2\x63\x6\x6F\x5\x2E\x5\x6F";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x6\xFFFF"+
			"\x1\x4\x8F\xFFFF";
		private const string DFA4_specialS =
			"\xA1\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x2D\xFFFF\x1\x3\x26\xFFFF\x1\x1\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\x3\x3\xFFFF\x1\x6\x3\xFFFF\x1\x9\x4\xFFFF\x1\x3\x2\xFFFF\x1\xA\x3"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x3\x5\xFFFF\x1\x8\x2\xFFFF\x1\x7\x1\x3\x7\xFFFF"+
				"\x1\x3",
				"\x1\xB\x5E\xFFFF\x1\xC\x13\xFFFF\x1\xE\x1\xFFFF\x1\xD\xA\xFFFF\x1\xF",
				"\x1\x3\x2D\xFFFF\x1\x3\x2D\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\x3\xC\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x9\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x11"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x11\x1\x10\x1\x11\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x32\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x16\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x17\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x18\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x19\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x1A",
				"",
				"\x1\x1B",
				"\x1\x1E\x9\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x1F\x5E\xFFFF\x1\x20\x13\xFFFF\x1\x22\x1\xFFFF\x1\x21\xA\xFFFF"+
				"\x1\x23",
				"\x1\x24",
				"\x1\x27\x9\xFFFF\x1\x25\x4\xFFFF\x1\x26",
				"\x1\x2A\x9\xFFFF\x1\x28\x4\xFFFF\x1\x29",
				"\x1\x2D\x9\xFFFF\x1\x2B\x4\xFFFF\x1\x2C",
				"\x1\x30\x9\xFFFF\x1\x2E\x4\xFFFF\x1\x2F",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x11"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x11\x1\x10\x1\x11\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x32\xFFFF\x1\x3",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x36\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x37\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x38\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x39\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x4\x8\xFFFF\x1\x24\x24\xFFFF\x1\x3\x26\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\x3\x3\xFFFF\x1\x6\x3\xFFFF\x1\x9\x4\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\xA\x3\xFFFF\x1\x2\x1\xFFFF\x2\x3\x5\xFFFF\x1\x8\x2\xFFFF"+
				"\x1\x7\x1\x3\x7\xFFFF\x1\x3",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x48\x9\xFFFF\x1\x46\x4\xFFFF\x1\x47",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4D\x9\xFFFF\x1\x4B\x4\xFFFF\x1\x4C",
				"\x1\x50\x9\xFFFF\x1\x4E\x4\xFFFF\x1\x4F",
				"\x1\x53\x9\xFFFF\x1\x51\x4\xFFFF\x1\x52",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x59\x9\xFFFF\x1\x57\x4\xFFFF\x1\x58",
				"\x1\x5C\x9\xFFFF\x1\x5A\x4\xFFFF\x1\x5B",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x5D",
				"\x1\x60\x9\xFFFF\x1\x5E\x4\xFFFF\x1\x5F",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x61",
				"\x1\x64\x9\xFFFF\x1\x62\x4\xFFFF\x1\x63",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x65",
				"\x1\x68\x9\xFFFF\x1\x66\x4\xFFFF\x1\x67",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x69",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x7E",
				"\x1\x81\x9\xFFFF\x1\x7F\x4\xFFFF\x1\x80",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x82",
				"\x1\x85\x9\xFFFF\x1\x83\x4\xFFFF\x1\x84",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x86",
				"\x1\x89\x9\xFFFF\x1\x87\x4\xFFFF\x1\x88",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8A",
				"\x1\x8D\x9\xFFFF\x1\x8B\x4\xFFFF\x1\x8C",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8E",
				"\x1\x91\x9\xFFFF\x1\x8F\x4\xFFFF\x1\x90",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA34_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x37\x1\xB6\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "267:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x4\xFFFF";
		private const string DFA41_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA41_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA41_maxS =
			"\x1\x37\x1\xB6\x2\xFFFF";
		private const string DFA41_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA41_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "275:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x4\xFFFF";
		private const string DFA49_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA49_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA49_maxS =
			"\x1\x37\x1\xB6\x2\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA49_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "279:89: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA57 : DFA
	{
		private const string DFA57_eotS =
			"\x4\xFFFF";
		private const string DFA57_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA57_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA57_maxS =
			"\x1\x37\x1\xB6\x2\xFFFF";
		private const string DFA57_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA57_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA57_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
		private static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
		private static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
		private static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
		private static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
		private static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
		private static readonly short[][] DFA57_transition;

		static DFA57()
		{
			int numStates = DFA57_transitionS.Length;
			DFA57_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA57_transition[i] = DFA.UnpackEncodedString(DFA57_transitionS[i]);
			}
		}

		public DFA57( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}

		public override string Description { get { return "280:111: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x11\xFFFF";
		private const string DFA88_eofS =
			"\x11\xFFFF";
		private const string DFA88_minS =
			"\x1\x2E\x1\xFFFF\x2\x2E\x1\xFFFF\x4\x2E\x1\x5A\x3\x2E\x2\x5A\x1\x2E\x1"+
			"\x5A";
		private const string DFA88_maxS =
			"\x1\xB6\x1\xFFFF\x1\xB6\x1\xA4\x1\xFFFF\x1\x2E\x1\xA4\x1\x70\x1\xB6\x1"+
			"\x83\x1\x2E\x1\xA4\x1\xB6\x2\x83\x1\x2E\x1\x83";
		private const string DFA88_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA88_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1"+
				"\x11\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x32\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x20\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x8\xFFFF\x2\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x32\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x32\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "360:36: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA110 : DFA
	{
		private const string DFA110_eotS =
			"\x9\xFFFF";
		private const string DFA110_eofS =
			"\x9\xFFFF";
		private const string DFA110_minS =
			"\x1\x2E\x1\x8\x4\xFFFF\x1\x2E\x1\xFFFF\x1\x8";
		private const string DFA110_maxS =
			"\x1\xB6\x1\xB3\x4\xFFFF\x1\x2E\x1\xFFFF\x1\xB3";
		private const string DFA110_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA110_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA110_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x4\x2\xFFFF\x1\x3\x8\xFFFF\x1\x5",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x14\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x14\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
		private static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
		private static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
		private static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
		private static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
		private static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
		private static readonly short[][] DFA110_transition;

		static DFA110()
		{
			int numStates = DFA110_transitionS.Length;
			DFA110_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA110_transition[i] = DFA.UnpackEncodedString(DFA110_transitionS[i]);
			}
		}

		public DFA110( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 110;
			this.eot = DFA110_eot;
			this.eof = DFA110_eof;
			this.min = DFA110_min;
			this.max = DFA110_max;
			this.accept = DFA110_accept;
			this.special = DFA110_special;
			this.transition = DFA110_transition;
		}

		public override string Description { get { return "403:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA119 : DFA
	{
		private const string DFA119_eotS =
			"\x4\xFFFF";
		private const string DFA119_eofS =
			"\x4\xFFFF";
		private const string DFA119_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA119_maxS =
			"\x1\x96\x1\xB6\x2\xFFFF";
		private const string DFA119_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA119_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA119_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
		private static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
		private static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
		private static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
		private static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
		private static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
		private static readonly short[][] DFA119_transition;

		static DFA119()
		{
			int numStates = DFA119_transitionS.Length;
			DFA119_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA119_transition[i] = DFA.UnpackEncodedString(DFA119_transitionS[i]);
			}
		}

		public DFA119( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 119;
			this.eot = DFA119_eot;
			this.eof = DFA119_eof;
			this.min = DFA119_min;
			this.max = DFA119_max;
			this.accept = DFA119_accept;
			this.special = DFA119_special;
			this.transition = DFA119_transition;
		}

		public override string Description { get { return "434:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA124 : DFA
	{
		private const string DFA124_eotS =
			"\x4\xFFFF";
		private const string DFA124_eofS =
			"\x4\xFFFF";
		private const string DFA124_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA124_maxS =
			"\x1\x96\x1\xB6\x2\xFFFF";
		private const string DFA124_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA124_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA124_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA124_eot = DFA.UnpackEncodedString(DFA124_eotS);
		private static readonly short[] DFA124_eof = DFA.UnpackEncodedString(DFA124_eofS);
		private static readonly char[] DFA124_min = DFA.UnpackEncodedStringToUnsignedChars(DFA124_minS);
		private static readonly char[] DFA124_max = DFA.UnpackEncodedStringToUnsignedChars(DFA124_maxS);
		private static readonly short[] DFA124_accept = DFA.UnpackEncodedString(DFA124_acceptS);
		private static readonly short[] DFA124_special = DFA.UnpackEncodedString(DFA124_specialS);
		private static readonly short[][] DFA124_transition;

		static DFA124()
		{
			int numStates = DFA124_transitionS.Length;
			DFA124_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA124_transition[i] = DFA.UnpackEncodedString(DFA124_transitionS[i]);
			}
		}

		public DFA124( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 124;
			this.eot = DFA124_eot;
			this.eof = DFA124_eof;
			this.min = DFA124_min;
			this.max = DFA124_max;
			this.accept = DFA124_accept;
			this.special = DFA124_special;
			this.transition = DFA124_transition;
		}

		public override string Description { get { return "437:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA138 : DFA
	{
		private const string DFA138_eotS =
			"\x7\xFFFF";
		private const string DFA138_eofS =
			"\x7\xFFFF";
		private const string DFA138_minS =
			"\x1\x2E\x1\x8\x1\xFFFF\x1\x2E\x2\xFFFF\x1\x8";
		private const string DFA138_maxS =
			"\x1\xB6\x1\xB5\x1\xFFFF\x1\x2E\x2\xFFFF\x1\xB5";
		private const string DFA138_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA138_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA138_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xA\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xA\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA138_eot = DFA.UnpackEncodedString(DFA138_eotS);
		private static readonly short[] DFA138_eof = DFA.UnpackEncodedString(DFA138_eofS);
		private static readonly char[] DFA138_min = DFA.UnpackEncodedStringToUnsignedChars(DFA138_minS);
		private static readonly char[] DFA138_max = DFA.UnpackEncodedStringToUnsignedChars(DFA138_maxS);
		private static readonly short[] DFA138_accept = DFA.UnpackEncodedString(DFA138_acceptS);
		private static readonly short[] DFA138_special = DFA.UnpackEncodedString(DFA138_specialS);
		private static readonly short[][] DFA138_transition;

		static DFA138()
		{
			int numStates = DFA138_transitionS.Length;
			DFA138_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA138_transition[i] = DFA.UnpackEncodedString(DFA138_transitionS[i]);
			}
		}

		public DFA138( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}

		public override string Description { get { return "468:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA180 : DFA
	{
		private const string DFA180_eotS =
			"\x7\xFFFF";
		private const string DFA180_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA180_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA180_maxS =
			"\x1\xB1\x1\xB6\x2\xFFFF\x2\xB6\x1\xFFFF";
		private const string DFA180_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA180_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA180_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x14\xFFFF\x2\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x6\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x3\xFFFF\x7\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA180_eot = DFA.UnpackEncodedString(DFA180_eotS);
		private static readonly short[] DFA180_eof = DFA.UnpackEncodedString(DFA180_eofS);
		private static readonly char[] DFA180_min = DFA.UnpackEncodedStringToUnsignedChars(DFA180_minS);
		private static readonly char[] DFA180_max = DFA.UnpackEncodedStringToUnsignedChars(DFA180_maxS);
		private static readonly short[] DFA180_accept = DFA.UnpackEncodedString(DFA180_acceptS);
		private static readonly short[] DFA180_special = DFA.UnpackEncodedString(DFA180_specialS);
		private static readonly short[][] DFA180_transition;

		static DFA180()
		{
			int numStates = DFA180_transitionS.Length;
			DFA180_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA180_transition[i] = DFA.UnpackEncodedString(DFA180_transitionS[i]);
			}
		}

		public DFA180( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 180;
			this.eot = DFA180_eot;
			this.eof = DFA180_eof;
			this.min = DFA180_min;
			this.max = DFA180_max;
			this.accept = DFA180_accept;
			this.special = DFA180_special;
			this.transition = DFA180_transition;
		}

		public override string Description { get { return "519:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA169 : DFA
	{
		private const string DFA169_eotS =
			"\x4\xFFFF";
		private const string DFA169_eofS =
			"\x4\xFFFF";
		private const string DFA169_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA169_maxS =
			"\x2\x37\x2\xFFFF";
		private const string DFA169_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA169_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA169_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1",
				"\x1\x2\x26\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA169_eot = DFA.UnpackEncodedString(DFA169_eotS);
		private static readonly short[] DFA169_eof = DFA.UnpackEncodedString(DFA169_eofS);
		private static readonly char[] DFA169_min = DFA.UnpackEncodedStringToUnsignedChars(DFA169_minS);
		private static readonly char[] DFA169_max = DFA.UnpackEncodedStringToUnsignedChars(DFA169_maxS);
		private static readonly short[] DFA169_accept = DFA.UnpackEncodedString(DFA169_acceptS);
		private static readonly short[] DFA169_special = DFA.UnpackEncodedString(DFA169_specialS);
		private static readonly short[][] DFA169_transition;

		static DFA169()
		{
			int numStates = DFA169_transitionS.Length;
			DFA169_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA169_transition[i] = DFA.UnpackEncodedString(DFA169_transitionS[i]);
			}
		}

		public DFA169( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 169;
			this.eot = DFA169_eot;
			this.eof = DFA169_eof;
			this.min = DFA169_min;
			this.max = DFA169_max;
			this.accept = DFA169_accept;
			this.special = DFA169_special;
			this.transition = DFA169_transition;
		}

		public override string Description { get { return "519:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA204 : DFA
	{
		private const string DFA204_eotS =
			"\x7\xFFFF";
		private const string DFA204_eofS =
			"\x7\xFFFF";
		private const string DFA204_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA204_maxS =
			"\x5\xB6\x2\xFFFF";
		private const string DFA204_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA204_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA204_transitionS =
			{
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA204_eot = DFA.UnpackEncodedString(DFA204_eotS);
		private static readonly short[] DFA204_eof = DFA.UnpackEncodedString(DFA204_eofS);
		private static readonly char[] DFA204_min = DFA.UnpackEncodedStringToUnsignedChars(DFA204_minS);
		private static readonly char[] DFA204_max = DFA.UnpackEncodedStringToUnsignedChars(DFA204_maxS);
		private static readonly short[] DFA204_accept = DFA.UnpackEncodedString(DFA204_acceptS);
		private static readonly short[] DFA204_special = DFA.UnpackEncodedString(DFA204_specialS);
		private static readonly short[][] DFA204_transition;

		static DFA204()
		{
			int numStates = DFA204_transitionS.Length;
			DFA204_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA204_transition[i] = DFA.UnpackEncodedString(DFA204_transitionS[i]);
			}
		}

		public DFA204( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 204;
			this.eot = DFA204_eot;
			this.eof = DFA204_eof;
			this.min = DFA204_min;
			this.max = DFA204_max;
			this.accept = DFA204_accept;
			this.special = DFA204_special;
			this.transition = DFA204_transition;
		}

		public override string Description { get { return "562:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA203 : DFA
	{
		private const string DFA203_eotS =
			"\x7\xFFFF";
		private const string DFA203_eofS =
			"\x7\xFFFF";
		private const string DFA203_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA203_maxS =
			"\x1\x84\x4\xB6\x2\xFFFF";
		private const string DFA203_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA203_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA203_transitionS =
			{
				"\x1\x4\x26\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA203_eot = DFA.UnpackEncodedString(DFA203_eotS);
		private static readonly short[] DFA203_eof = DFA.UnpackEncodedString(DFA203_eofS);
		private static readonly char[] DFA203_min = DFA.UnpackEncodedStringToUnsignedChars(DFA203_minS);
		private static readonly char[] DFA203_max = DFA.UnpackEncodedStringToUnsignedChars(DFA203_maxS);
		private static readonly short[] DFA203_accept = DFA.UnpackEncodedString(DFA203_acceptS);
		private static readonly short[] DFA203_special = DFA.UnpackEncodedString(DFA203_specialS);
		private static readonly short[][] DFA203_transition;

		static DFA203()
		{
			int numStates = DFA203_transitionS.Length;
			DFA203_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA203_transition[i] = DFA.UnpackEncodedString(DFA203_transitionS[i]);
			}
		}

		public DFA203( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}

		public override string Description { get { return "()* loopback of 562:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA212 : DFA
	{
		private const string DFA212_eotS =
			"\xB\xFFFF";
		private const string DFA212_eofS =
			"\xB\xFFFF";
		private const string DFA212_minS =
			"\x2\x2E\x1\xFFFF\x1\x56\x1\xFFFF\x2\x2E\x2\x56\x1\x2E\x1\x56";
		private const string DFA212_maxS =
			"\x2\xB6\x1\xFFFF\x1\xB5\x1\xFFFF\x1\x2E\x1\xB6\x2\xB5\x1\x2E\x1\xB5";
		private const string DFA212_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA212_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA212_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x9\xFFFF\x1\x2\xB\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x3\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2"
			};

		private static readonly short[] DFA212_eot = DFA.UnpackEncodedString(DFA212_eotS);
		private static readonly short[] DFA212_eof = DFA.UnpackEncodedString(DFA212_eofS);
		private static readonly char[] DFA212_min = DFA.UnpackEncodedStringToUnsignedChars(DFA212_minS);
		private static readonly char[] DFA212_max = DFA.UnpackEncodedStringToUnsignedChars(DFA212_maxS);
		private static readonly short[] DFA212_accept = DFA.UnpackEncodedString(DFA212_acceptS);
		private static readonly short[] DFA212_special = DFA.UnpackEncodedString(DFA212_specialS);
		private static readonly short[][] DFA212_transition;

		static DFA212()
		{
			int numStates = DFA212_transitionS.Length;
			DFA212_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA212_transition[i] = DFA.UnpackEncodedString(DFA212_transitionS[i]);
			}
		}

		public DFA212( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}

		public override string Description { get { return "575:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA242 : DFA
	{
		private const string DFA242_eotS =
			"\x4\xFFFF";
		private const string DFA242_eofS =
			"\x4\xFFFF";
		private const string DFA242_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA242_maxS =
			"\x1\x63\x1\xB6\x2\xFFFF";
		private const string DFA242_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA242_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA242_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x16\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA242_eot = DFA.UnpackEncodedString(DFA242_eotS);
		private static readonly short[] DFA242_eof = DFA.UnpackEncodedString(DFA242_eofS);
		private static readonly char[] DFA242_min = DFA.UnpackEncodedStringToUnsignedChars(DFA242_minS);
		private static readonly char[] DFA242_max = DFA.UnpackEncodedStringToUnsignedChars(DFA242_maxS);
		private static readonly short[] DFA242_accept = DFA.UnpackEncodedString(DFA242_acceptS);
		private static readonly short[] DFA242_special = DFA.UnpackEncodedString(DFA242_specialS);
		private static readonly short[][] DFA242_transition;

		static DFA242()
		{
			int numStates = DFA242_transitionS.Length;
			DFA242_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA242_transition[i] = DFA.UnpackEncodedString(DFA242_transitionS[i]);
			}
		}

		public DFA242( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 242;
			this.eot = DFA242_eot;
			this.eof = DFA242_eof;
			this.min = DFA242_min;
			this.max = DFA242_max;
			this.accept = DFA242_accept;
			this.special = DFA242_special;
			this.transition = DFA242_transition;
		}

		public override string Description { get { return "()* loopback of 682:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root587 = new BitSet(new ulong[]{0x80400000000000UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _global_block_in_root590 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block612 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block614 = new BitSet(new ulong[]{0x80400000000002UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _func_def_in_node637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item705 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item708 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item710 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item713 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item715 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_attribute_item737 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item740 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item742 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item745 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item747 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_attribute_item769 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item772 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item774 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item777 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item779 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_attribute_item801 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item804 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item806 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item809 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item811 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_attribute_item833 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item836 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item838 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item841 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item843 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_attribute872 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400A00002000UL});
		public static readonly BitSet _attribute_item_in_attribute874 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_attribute877 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400A00002000UL});
		public static readonly BitSet _attribute_item_in_attribute879 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_attribute883 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute885 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _attribute_in_global_alloc904 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc907 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_global_alloc911 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_global_alloc913 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_global_alloc918 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _112_in_global_alloc922 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_global_alloc1064 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc1067 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_global_alloc1070 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc1072 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _attribute_in_global_using1113 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_global_using1116 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1118 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _attribute_in_global_typedef1142 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_global_typedef1145 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_global_typedef1147 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_global_typedef1149 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_global_typedef1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1175 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_import_def1178 = new BitSet(new ulong[]{0x2080000000000002UL});
		public static readonly BitSet _STRING_in_import_def1180 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1184 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_import_def1187 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1189 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _STRING_in_import_def1194 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1196 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1226 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_enum_def1229 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1231 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_enum_def1233 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _ident_in_enum_def1236 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_enum_def1239 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1241 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1274 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_namespace_def1277 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_namespace_def1279 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1282 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1285 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1287 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _global_block_in_namespace_def1290 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200001400UL});
		public static readonly BitSet _161_in_class_def1325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_class_def1328 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1330 = new BitSet(new ulong[]{0x80000000000002UL,0x4400000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1333 = new BitSet(new ulong[]{0x80000000000002UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def1338 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1340 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1343 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1345 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1352 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_class_def1355 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _NEWLINE_in_class_def1357 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _global_block_in_class_def1360 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_class_def1407 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_class_def1410 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_class_def1412 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1414 = new BitSet(new ulong[]{0x80000000000002UL,0x4400010000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1417 = new BitSet(new ulong[]{0x80000000000002UL,0x400010000000UL});
		public static readonly BitSet _92_in_class_def1422 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000UL});
		public static readonly BitSet _func_args_in_class_def1424 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_class_def1426 = new BitSet(new ulong[]{0x80000000000002UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def1431 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1433 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1436 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1438 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1445 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_class_def1448 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _NEWLINE_in_class_def1450 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x40641A24223408UL});
		public static readonly BitSet _global_block_in_class_def1453 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1511 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_list1514 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_type_list1516 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _type_single_in_type_name1538 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1542 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_type_name1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1549 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1592 = new BitSet(new ulong[]{0x400000000000UL,0x30000000UL,0x1804002000UL});
		public static readonly BitSet _type_list_in_type_name1594 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1597 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1599 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_type_name1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1606 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1632 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x8UL});
		public static readonly BitSet _90_in_type_single1636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_type_single1652 = new BitSet(new ulong[]{0x2100400000000000UL,0x3B54200000UL,0x400000D200001CUL});
		public static readonly BitSet _expr_in_type_single1656 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_type_single1659 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_type_single1661 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_type_single1690 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1740 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_no_array1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1779 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _94_in_type_star1783 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1829 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_type_template_type1833 = new BitSet(new ulong[]{0x400000000000UL,0x1000000010000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_type_template_type1836 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_type_template_type1839 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_type_template_type1841 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_type_template_type1847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_type_ident1887 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x1004002000UL});
		public static readonly BitSet _141_in_type_ident1890 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _164_in_type_ident1893 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_type_ident1896 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_type_ident1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1930 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter_inside1933 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1935 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _114_in_generic_parameter1957 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1959 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_generic_parameter1961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1976 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_func_args1979 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1981 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_func_args_item2003 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_func_args_item2005 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_func_args_item2007 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_func_args_item2012 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _112_in_func_args_item2016 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_func_args_item2019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_func_args_item2130 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _modify_expr_in_func_args_item2134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_func_name2177 = new BitSet(new ulong[]{0x0UL,0x101140000000UL});
		public static readonly BitSet _operator_in_func_name2179 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_name2181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2207 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x40401A04002000UL});
		public static readonly BitSet _161_in_func_def2210 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x40401804002000UL});
		public static readonly BitSet _174_in_func_def2213 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x40001804002000UL});
		public static readonly BitSet _func_type_in_func_def2216 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x40000000000000UL});
		public static readonly BitSet _182_in_func_def2219 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL});
		public static readonly BitSet _func_name_in_func_def2222 = new BitSet(new ulong[]{0x0UL,0x4000010000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2224 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_def2227 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_func_def2229 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_def2232 = new BitSet(new ulong[]{0x80000000000000UL,0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2236 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_func_def2301 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_func_def2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2368 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_func_def2371 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2373 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _match_item_in_func_def2377 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2379 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2492 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2494 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2504 = new BitSet(new ulong[]{0x80000000000000UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2507 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _113_in_stmt_block_item2512 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2514 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2531 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2533 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2536 = new BitSet(new ulong[]{0x400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _DEDENT_in_stmt_block2539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2625 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2180000180000UL});
		public static readonly BitSet _148_in_stmt_expr2635 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2637 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2180000180000UL});
		public static readonly BitSet _171_in_stmt_expr2666 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2180000180000UL});
		public static readonly BitSet _177_in_stmt_expr2697 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2699 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2180000180000UL});
		public static readonly BitSet _172_in_stmt_expr2728 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2730 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2180000180000UL});
		public static readonly BitSet _147_in_stmt_expr2759 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2761 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x2180000180000UL});
		public static readonly BitSet _99_in_stmt_expr2764 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2766 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x2180000180000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2839 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _stmt_in_stmt_defer2841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_defer2854 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _stmt_in_stmt_defer2856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_stmt_typedef2875 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2877 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_stmt_typedef2879 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_using_item2904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_stmt_using2912 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2914 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _162_in_stmt_return2935 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_return2937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2958 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_inline_stmt_block2961 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2963 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _148_in_stmt_if2985 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_if2987 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2990 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2993 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2996 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if2999 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3001 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_if3036 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_stmt_if3059 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_if3061 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3064 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3067 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3070 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if3073 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3075 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_if3114 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_stmt_while3147 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3149 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3153 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while3180 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_while3206 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3208 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3212 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while3239 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_while3265 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3267 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3270 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3295 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_for_range3297 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3301 = new BitSet(new ulong[]{0x2UL,0x0UL,0x18000008000UL});
		public static readonly BitSet _168_in_for_range3305 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3309 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3312 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_for_range3346 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3350 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3353 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_for_range3387 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3391 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3394 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_range3398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3475 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_for_map3477 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_for_map3479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_for3521 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_for3525 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_for3528 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_for3530 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3534 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_try3568 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3570 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3573 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3575 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_stmt_try3578 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3580 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3582 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_switch_item3608 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_switch_item3610 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x4000000000UL});
		public static readonly BitSet _99_in_switch_item3613 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_switch_item3615 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3621 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_switch_item3670 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x40240480000004UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_switch3712 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_stmt_switch3714 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3717 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3720 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3722 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3726 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3728 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x800000010000UL});
		public static readonly BitSet _144_in_stmt_switch3734 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3736 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3739 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3741 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3772 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_ident_list3775 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_ident_list3777 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3799 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_stmt_alloc3803 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3805 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_stmt_alloc3810 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _112_in_stmt_alloc3814 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_alloc3932 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3936 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_alloc3939 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3941 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3971 = new BitSet(new ulong[]{0x2UL,0xC130208489000000UL,0x8000000000042UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3975 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_modify4001 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify4003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_modify4030 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify4032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_modify4061 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify4063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item4097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr4111 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4121 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4124 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4126 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_where_expr4129 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4133 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4137 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4173 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4176 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4178 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4182 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4184 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4189 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4191 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4244 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4247 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4249 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4253 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4255 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4260 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4262 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_where_expr4303 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4305 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4308 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4310 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4314 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4316 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_let_expr4379 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_let_expr4381 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_let_expr4385 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4413 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _INDENT_in_let_expr4418 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _NEWLINE_in_let_expr4420 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4423 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4425 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4501 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4504 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _NEWLINE_in_let_expr4506 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24881C4004UL});
		public static readonly BitSet _where_item_in_let_expr4510 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4512 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x423E24885C4004UL});
		public static readonly BitSet _150_in_let_expr4517 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4519 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4521 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_match_item4556 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_match_item4558 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_match_item4560 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _where_expr_in_match_item4562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_match_expr4583 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_match_expr4585 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4588 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4591 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4593 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _match_item_in_match_expr4597 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4599 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4666 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x10000000000000UL});
		public static readonly BitSet _119_in_feed_expr4676 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_feed_expr4712 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4772 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_list_expr4776 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_list_expr4778 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4781 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _for_item_in_list_expr4783 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4787 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_list_expr4789 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_list_expr4791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4819 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000001CUL});
		public static readonly BitSet _99_in_list_expr4823 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4827 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4831 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4835 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4839 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4843 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4847 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4851 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4855 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x400000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4859 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4866 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_list_expr4870 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _INDENT_in_list_expr4874 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _DEDENT_in_list_expr4878 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4924 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_type4942 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_lambda_type4944 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_type4946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_expr4961 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4963 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_expr4966 = new BitSet(new ulong[]{0x0UL,0xC00014010000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4968 = new BitSet(new ulong[]{0x0UL,0xC00014000000000UL});
		public static readonly BitSet _104_in_lambda_expr4973 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lambda_expr5010 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr5012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_lambda_expr5044 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr5046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_lambda_expr5081 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr5083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr5118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5175 = new BitSet(new ulong[]{0x2UL,0x8121208489000000UL,0x8000000000040UL});
		public static readonly BitSet _set_in_modify_expr5179 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_modify_expr5233 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5236 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5261 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_cond_expr5270 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5276 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_cond_expr5280 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5398 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000100000000UL});
		public static readonly BitSet _or_op_in_or_expr5409 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _and_expr_in_or_expr5413 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000100000000UL});
		public static readonly BitSet _bit_or_in_and_expr5455 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _and_op_in_and_expr5466 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _bit_or_in_and_expr5470 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _bit_xor_in_bit_or5501 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_bit_or5510 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _bit_xor_in_bit_or5514 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5544 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_bit_xor5553 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _bit_and_in_bit_xor5557 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_bit_and5587 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_bit_and5596 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _cmp_expr_in_bit_and5600 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _chain_op_in_chain_list5692 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _shift_expr_in_chain_list5694 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5708 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _114_in_cmp_expr5737 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5739 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_cmp_expr5742 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5744 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_cmp_expr5748 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_cmp_expr5781 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5785 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5866 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5870 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5976 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5985 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _add_expr_in_shift_expr5989 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr6019 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _96_in_add_expr6029 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _mul_expr_in_add_expr6033 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _100_in_add_expr6058 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _mul_expr_in_add_expr6062 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr6100 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _94_in_mul_expr6110 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6114 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _108_in_mul_expr6141 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6145 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _87_in_mul_expr6172 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6176 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6216 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _infix_func_in_infix_expr6226 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _selector_expr_in_infix_expr6230 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _cast_expr_in_selector_expr6262 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _105_in_selector_expr6272 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6276 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _107_in_selector_expr6302 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6307 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _92_in_cast_expr6356 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_cast_expr6358 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_cast_expr6360 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6427 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_prefix_expr6445 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x1804002000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6447 = new BitSet(new ulong[]{0x0UL,0x10000000UL,0x8UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_square_expr_list6510 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_square_expr_list6512 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_square_expr_list6515 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_square_expr_list6517 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_square_expr_list6521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_bracket_expr_list6541 = new BitSet(new ulong[]{0x2180400000000000UL,0x3374200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6544 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6547 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6549 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6579 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3374200000UL,0x400000D200000CUL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6584 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6586 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6589 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6593 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x400000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6597 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6601 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6605 = new BitSet(new ulong[]{0x80000000000100UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6610 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6612 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6619 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6621 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6651 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6655 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x400000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6659 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6663 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6716 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _97_in_suffix_expr6726 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _101_in_suffix_expr6752 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _106_in_suffix_expr6775 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6777 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _104_in_suffix_expr6802 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6804 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6829 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6852 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _130_in_suffix_expr6875 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6877 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6879 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _NUMBER_in_atom_expr6917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_atom_expr6932 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_atom_expr6934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_atom_expr6947 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_atom_expr6951 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_atom_expr6956 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000D200000CUL});
		public static readonly BitSet _expr_in_atom_expr6958 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_atom_expr6962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr6989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item7020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix7032 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x40000080000004UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix7034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix7050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix7064 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _97_in_lvalue_suffix7074 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _101_in_lvalue_suffix7102 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _106_in_lvalue_suffix7127 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7129 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _104_in_lvalue_suffix7156 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7158 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix7185 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7188 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7216 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _ident_in_lvalue_atom7254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_lvalue_atom7259 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lvalue7280 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x40000080000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7282 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_lvalue7285 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x40000080000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7287 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_lvalue7291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7316 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_ident7319 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _IDENT_in_ident7321 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _135_in_infix_func7334 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_infix_func7337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_infix_func7339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4649 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x10000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_synpred2_SugarCpp4763 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C000000CUL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_synpred2_SugarCpp4767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_synpred3_SugarCpp5719 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5721 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_synpred3_SugarCpp5724 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5726 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_synpred3_SugarCpp5730 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_synpred4_SugarCpp6345 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x1804002000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6347 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_synpred4_SugarCpp6349 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x400000C0000004UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6351 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
