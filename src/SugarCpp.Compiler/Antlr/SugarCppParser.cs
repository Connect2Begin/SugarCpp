//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-26 16:37:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_New_Array=28;
	public const int Expr_New_Type=29;
	public const int Expr_Not_Null=30;
	public const int Expr_Prefix=31;
	public const int Expr_Suffix=32;
	public const int Expr_Tuple=33;
	public const int Expr_Where=34;
	public const int For_Item_Down_To=35;
	public const int For_Item_Each=36;
	public const int For_Item_Map=37;
	public const int For_Item_To=38;
	public const int For_Item_When=39;
	public const int Func_Args=40;
	public const int Func_Def=41;
	public const int Generic_Patameters=42;
	public const int Global_Block=43;
	public const int IDENT=44;
	public const int INDENT=45;
	public const int Ident_List=46;
	public const int Import=47;
	public const int Left_Bracket=48;
	public const int LineComment=49;
	public const int Match_Expr=50;
	public const int Match_Expr_Item=51;
	public const int Match_Tuple=52;
	public const int NEWLINE=53;
	public const int NUMBER=54;
	public const int Namespace=55;
	public const int Right_Bracket=56;
	public const int Root=57;
	public const int SP=58;
	public const int STRING=59;
	public const int Stmt_Block=60;
	public const int Stmt_Defer=61;
	public const int Stmt_Finally=62;
	public const int Stmt_For=63;
	public const int Stmt_If=64;
	public const int Stmt_Loop=65;
	public const int Stmt_Return=66;
	public const int Stmt_Switch=67;
	public const int Stmt_Try=68;
	public const int Stmt_Typedef=69;
	public const int Stmt_Unless=70;
	public const int Stmt_Until=71;
	public const int Stmt_Using=72;
	public const int Stmt_While=73;
	public const int Switch_Item=74;
	public const int Type_Array=75;
	public const int Type_Func=76;
	public const int Type_Ident=77;
	public const int Type_List=78;
	public const int Type_Ref=79;
	public const int Type_Star=80;
	public const int Type_Template=81;
	public const int White_Space=82;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:209:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(209, 1);
		try
		{
			// SugarCpp.g:210:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(210, 4);
			// SugarCpp.g:210:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:4: NEWLINE
					{
					DebugLocation(210, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root571);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(210, 13);
			PushFollow(Follow._global_block_in_root574);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(210, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root576);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 210:30: -> ^( Root global_block )
			{
				DebugLocation(210, 33);
				// SugarCpp.g:210:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(210, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(210, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:213:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(213, 1);
		try
		{
			// SugarCpp.g:214:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:214:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(214, 4);
			// SugarCpp.g:214:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==90||LA3_0==126||LA3_0==134||(LA3_0>=136 && LA3_0<=137)||LA3_0==141||LA3_0==145||LA3_0==150||LA3_0==153||LA3_0==158||LA3_0==163||LA3_0==166||LA3_0==173))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:214:5: node ( NEWLINE )+
					{
					DebugLocation(214, 5);
					PushFollow(Follow._node_in_global_block596);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(214, 10);
					// SugarCpp.g:214:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:214:10: NEWLINE
							{
							DebugLocation(214, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block598);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 214:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(214, 24);
				// SugarCpp.g:214:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(214, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(214, 39);
				// SugarCpp.g:214:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(214, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:217:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(217, 1);
		try
		{
			// SugarCpp.g:218:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:218:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._func_def_in_node621);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:219:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._class_def_in_node626);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:220:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._enum_def_in_node631);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:221:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._global_alloc_in_node636);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:222:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._global_using_in_node641);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:223:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._global_typedef_in_node646);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:224:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._import_def_in_node651);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:225:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._namespace_def_in_node656);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:228:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(228, 1);
		try
		{
			// SugarCpp.g:229:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:229:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args668); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args673); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:231:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 4);
				PushFollow(Follow._ident_in_attribute_args678);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:234:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==137))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(235, 4);
				PushFollow(Follow._ident_in_attribute_item689);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(235, 10);
				// SugarCpp.g:235:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==90))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(235, 11);
					char_literal18=(IToken)Match(input,90,Follow._90_in_attribute_item692);  
					stream_90.Add(char_literal18);

					DebugLocation(235, 15);
					PushFollow(Follow._attribute_args_in_attribute_item694);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(235, 30);
					// SugarCpp.g:235:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==97))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:235:31: ',' attribute_args
							{
							DebugLocation(235, 31);
							char_literal20=(IToken)Match(input,97,Follow._97_in_attribute_item697);  
							stream_97.Add(char_literal20);

							DebugLocation(235, 35);
							PushFollow(Follow._attribute_args_in_attribute_item699);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(235, 52);
					char_literal22=(IToken)Match(input,91,Follow._91_in_attribute_item703);  
					stream_91.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 235:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(235, 61);
					// SugarCpp.g:235:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(235, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(235, 79);
					// SugarCpp.g:235:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(235, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:236:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(236, 4);
				string_literal23=(IToken)Match(input,137,Follow._137_in_attribute_item721);  
				stream_137.Add(string_literal23);

				DebugLocation(236, 12);
				// SugarCpp.g:236:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==90))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(236, 13);
					char_literal24=(IToken)Match(input,90,Follow._90_in_attribute_item724);  
					stream_90.Add(char_literal24);

					DebugLocation(236, 17);
					PushFollow(Follow._attribute_args_in_attribute_item726);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(236, 32);
					// SugarCpp.g:236:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==97))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:236:33: ',' attribute_args
							{
							DebugLocation(236, 33);
							char_literal26=(IToken)Match(input,97,Follow._97_in_attribute_item729);  
							stream_97.Add(char_literal26);

							DebugLocation(236, 37);
							PushFollow(Follow._attribute_args_in_attribute_item731);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(236, 54);
					char_literal28=(IToken)Match(input,91,Follow._91_in_attribute_item735);  
					stream_91.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 137, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(236, 63);
					// SugarCpp.g:236:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(236, 75);
					adaptor.AddChild(root_1, stream_137.NextNode());
					DebugLocation(236, 83);
					// SugarCpp.g:236:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(236, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:239:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(240, 4);
			// SugarCpp.g:240:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==126))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(240, 5);
					char_literal29=(IToken)Match(input,126,Follow._126_in_attribute760);  
					stream_126.Add(char_literal29);

					DebugLocation(240, 9);
					PushFollow(Follow._attribute_item_in_attribute762);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(240, 24);
					// SugarCpp.g:240:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==97))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:25: ',' attribute_item
							{
							DebugLocation(240, 25);
							char_literal31=(IToken)Match(input,97,Follow._97_in_attribute765);  
							stream_97.Add(char_literal31);

							DebugLocation(240, 29);
							PushFollow(Follow._attribute_item_in_attribute767);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(240, 46);
					char_literal33=(IToken)Match(input,127,Follow._127_in_attribute771);  
					stream_127.Add(char_literal33);

					DebugLocation(240, 50);
					// SugarCpp.g:240:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:50: NEWLINE
							{
							DebugLocation(240, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute773);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:61: -> ( attribute_item )+
			{
				DebugLocation(240, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(240, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:243:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken string_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree string_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==126))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_global_alloc792);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(244, 15);
			PushFollow(Follow._ident_list_in_global_alloc795);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(244, 26);
			// SugarCpp.g:244:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==107))
			{
				alt18 = 1;
			}
			else if ((LA18_0==109))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(244, 28);
				char_literal37=(IToken)Match(input,107,Follow._107_in_global_alloc799);  
				stream_107.Add(char_literal37);

				DebugLocation(244, 32);
				PushFollow(Follow._type_name_in_global_alloc801);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(244, 42);
				// SugarCpp.g:244:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt16=3;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt16 = 1;
					}
					break;
				case 90:
					{
					alt16 = 2;
					}
					break;
				case NEWLINE:
					{
					alt16 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:44: ( '=' | ':=' ) expr
					{
					DebugLocation(244, 44);
					// SugarCpp.g:244:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==116))
					{
						alt15 = 1;
					}
					else if ((LA15_0==109))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:244:45: '='
						{
						DebugLocation(244, 45);
						char_literal39=(IToken)Match(input,116,Follow._116_in_global_alloc806);  
						stream_116.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:244:51: ':='
						{
						DebugLocation(244, 51);
						string_literal40=(IToken)Match(input,109,Follow._109_in_global_alloc810);  
						stream_109.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(244, 57);
					PushFollow(Follow._expr_in_global_alloc813);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 244:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(244, 65);
						// SugarCpp.g:244:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(244, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(244, 84);
						// SugarCpp.g:244:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(244, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(244, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(244, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(244, 116);
						// SugarCpp.g:244:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(244, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(244, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:245:43: bracket_expr_list
					{
					DebugLocation(245, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc876);
					bracket_expr_list42=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list42.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, bracket_expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 245:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(245, 64);
						// SugarCpp.g:245:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(245, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(245, 85);
						// SugarCpp.g:245:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(245, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(245, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(245, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(245, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:246:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 246:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(246, 20);
						// SugarCpp.g:246:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(246, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(246, 39);
						// SugarCpp.g:246:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(246, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(246, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(246, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:248:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(248, 10);
				string_literal43=(IToken)Match(input,109,Follow._109_in_global_alloc948);  
				stream_109.Add(string_literal43);

				DebugLocation(248, 15);
				// SugarCpp.g:248:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:248:16: expr ( ',' expr )*
				{
				DebugLocation(248, 16);
				PushFollow(Follow._expr_in_global_alloc951);
				expr44=expr();
				PopFollow();

				stream_expr.Add(expr44.Tree);
				DebugLocation(248, 21);
				// SugarCpp.g:248:21: ( ',' expr )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==97))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:248:22: ',' expr
						{
						DebugLocation(248, 22);
						char_literal45=(IToken)Match(input,97,Follow._97_in_global_alloc954);  
						stream_97.Add(char_literal45);

						DebugLocation(248, 26);
						PushFollow(Follow._expr_in_global_alloc956);
						expr46=expr();
						PopFollow();

						stream_expr.Add(expr46.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}



				{
				// AST REWRITE
				// elements: 109, ident_list, attribute, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(248, 37);
					// SugarCpp.g:248:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(248, 44);
					// SugarCpp.g:248:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(248, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(248, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(248, 66);
					// SugarCpp.g:248:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(248, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(248, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:252:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:253:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(253, 4);
			// SugarCpp.g:253:4: ( attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==126))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:4: attribute
				{
				DebugLocation(253, 4);
				PushFollow(Follow._attribute_in_global_using997);
				attribute47=attribute();
				PopFollow();

				stream_attribute.Add(attribute47.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(253, 15);
			string_literal48=(IToken)Match(input,166,Follow._166_in_global_using1000);  
			stream_166.Add(string_literal48);

			DebugLocation(253, 23);
			// SugarCpp.g:253:23: ( stmt_using_item )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENT||LA20_0==153))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:23: stmt_using_item
					{
					DebugLocation(253, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1002);
					stmt_using_item49=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item49.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(253, 43);
				// SugarCpp.g:253:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(253, 56);
				// SugarCpp.g:253:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(253, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(253, 67);
				// SugarCpp.g:253:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(253, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:256:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken char_literal53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(257, 4);
			// SugarCpp.g:257:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==126))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: attribute
				{
				DebugLocation(257, 4);
				PushFollow(Follow._attribute_in_global_typedef1026);
				attribute50=attribute();
				PopFollow();

				stream_attribute.Add(attribute50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(257, 15);
			string_literal51=(IToken)Match(input,163,Follow._163_in_global_typedef1029);  
			stream_163.Add(string_literal51);

			DebugLocation(257, 22);
			PushFollow(Follow._ident_in_global_typedef1031);
			ident52=ident();
			PopFollow();

			stream_ident.Add(ident52.Tree);
			DebugLocation(257, 28);
			char_literal53=(IToken)Match(input,116,Follow._116_in_global_typedef1033);  
			stream_116.Add(char_literal53);

			DebugLocation(257, 32);
			PushFollow(Follow._type_name_in_global_typedef1035);
			type_name54=type_name();
			PopFollow();

			stream_type_name.Add(type_name54.Tree);


			{
			// AST REWRITE
			// elements: type_name, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(257, 45);
				// SugarCpp.g:257:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(257, 60);
				// SugarCpp.g:257:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(257, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(257, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(257, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:260:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal56 = default(IToken);
		IToken STRING57 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken INDENT59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken STRING61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken DEDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree STRING57_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree INDENT59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree STRING61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree DEDENT63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==126))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_import_def1059);
				attribute55=attribute();
				PopFollow();

				stream_attribute.Add(attribute55.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(261, 15);
			string_literal56=(IToken)Match(input,145,Follow._145_in_import_def1062);  
			stream_145.Add(string_literal56);

			DebugLocation(261, 24);
			// SugarCpp.g:261:24: ( STRING )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==STRING))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:24: STRING
				{
				DebugLocation(261, 24);
				STRING57=(IToken)Match(input,STRING,Follow._STRING_in_import_def1064);  
				stream_STRING.Add(STRING57);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(261, 32);
			// SugarCpp.g:261:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			try
			{
				alt28 = dfa28.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(261, 33);
				// SugarCpp.g:261:33: ( NEWLINE )+
				int cnt24=0;
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==NEWLINE))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:33: NEWLINE
						{
						DebugLocation(261, 33);
						NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1068);  
						stream_NEWLINE.Add(NEWLINE58);


						}
						break;

					default:
						if (cnt24 >= 1)
							goto loop24;

						EarlyExitException eee24 = new EarlyExitException( 24, input );
						DebugRecognitionException(eee24);
						throw eee24;
					}
					cnt24++;
				}
				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(261, 42);
				INDENT59=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1071);  
				stream_INDENT.Add(INDENT59);

				DebugLocation(261, 49);
				// SugarCpp.g:261:49: ( NEWLINE )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:49: NEWLINE
						{
						DebugLocation(261, 49);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1073);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(261, 59);
				// SugarCpp.g:261:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==STRING))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:60: STRING ( NEWLINE )+
						{
						DebugLocation(261, 60);
						STRING61=(IToken)Match(input,STRING,Follow._STRING_in_import_def1078);  
						stream_STRING.Add(STRING61);

						DebugLocation(261, 67);
						// SugarCpp.g:261:67: ( NEWLINE )+
						int cnt26=0;
						try { DebugEnterSubRule(26);
						while (true)
						{
							int alt26=2;
							try { DebugEnterDecision(26, false);
							int LA26_0 = input.LA(1);

							if ((LA26_0==NEWLINE))
							{
								alt26 = 1;
							}


							} finally { DebugExitDecision(26); }
							switch (alt26)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:261:67: NEWLINE
								{
								DebugLocation(261, 67);
								NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1080);  
								stream_NEWLINE.Add(NEWLINE62);


								}
								break;

							default:
								if (cnt26 >= 1)
									goto loop26;

								EarlyExitException eee26 = new EarlyExitException( 26, input );
								DebugRecognitionException(eee26);
								throw eee26;
							}
							cnt26++;
						}
						loop26:
							;

						} finally { DebugExitSubRule(26); }


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(261, 78);
				DEDENT63=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1085);  
				stream_DEDENT.Add(DEDENT63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(261, 90);
				// SugarCpp.g:261:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(261, 99);
				// SugarCpp.g:261:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 110);
				// SugarCpp.g:261:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(261, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:264:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal65 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal65_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==126))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_enum_def1110);
				attribute64=attribute();
				PopFollow();

				stream_attribute.Add(attribute64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(265, 15);
			string_literal65=(IToken)Match(input,141,Follow._141_in_enum_def1113);  
			stream_141.Add(string_literal65);

			DebugLocation(265, 22);
			PushFollow(Follow._ident_in_enum_def1115);
			ident66=ident();
			PopFollow();

			stream_ident.Add(ident66.Tree);
			DebugLocation(265, 28);
			char_literal67=(IToken)Match(input,116,Follow._116_in_enum_def1117);  
			stream_116.Add(char_literal67);

			DebugLocation(265, 32);
			// SugarCpp.g:265:32: ( ident ( '|' ident )* )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==IDENT))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:33: ident ( '|' ident )*
				{
				DebugLocation(265, 33);
				PushFollow(Follow._ident_in_enum_def1120);
				ident68=ident();
				PopFollow();

				stream_ident.Add(ident68.Tree);
				DebugLocation(265, 39);
				// SugarCpp.g:265:39: ( '|' ident )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==170))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:40: '|' ident
						{
						DebugLocation(265, 40);
						char_literal69=(IToken)Match(input,170,Follow._170_in_enum_def1123);  
						stream_170.Add(char_literal69);

						DebugLocation(265, 44);
						PushFollow(Follow._ident_in_enum_def1125);
						ident70=ident();
						PopFollow();

						stream_ident.Add(ident70.Tree);

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(265, 57);
				// SugarCpp.g:265:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(265, 64);
				// SugarCpp.g:265:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(265, 81);
				// SugarCpp.g:265:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(265, 94);
				// SugarCpp.g:265:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(265, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:268:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal72 = default(IToken);
		IToken NEWLINE74 = default(IToken);
		IToken INDENT75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken DEDENT78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal72_tree = default(CommonTree);
		CommonTree NEWLINE74_tree = default(CommonTree);
		CommonTree INDENT75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree DEDENT78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==126))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_namespace_def1158);
				attribute71=attribute();
				PopFollow();

				stream_attribute.Add(attribute71.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(269, 15);
			string_literal72=(IToken)Match(input,153,Follow._153_in_namespace_def1161);  
			stream_153.Add(string_literal72);

			DebugLocation(269, 27);
			PushFollow(Follow._ident_in_namespace_def1163);
			ident73=ident();
			PopFollow();

			stream_ident.Add(ident73.Tree);
			DebugLocation(269, 33);
			// SugarCpp.g:269:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			try
			{
				alt35 = dfa35.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(269, 34);
				// SugarCpp.g:269:34: ( NEWLINE )+
				int cnt33=0;
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==NEWLINE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:34: NEWLINE
						{
						DebugLocation(269, 34);
						NEWLINE74=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1166);  
						stream_NEWLINE.Add(NEWLINE74);


						}
						break;

					default:
						if (cnt33 >= 1)
							goto loop33;

						EarlyExitException eee33 = new EarlyExitException( 33, input );
						DebugRecognitionException(eee33);
						throw eee33;
					}
					cnt33++;
				}
				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(269, 43);
				INDENT75=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1169);  
				stream_INDENT.Add(INDENT75);

				DebugLocation(269, 50);
				// SugarCpp.g:269:50: ( NEWLINE )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:50: NEWLINE
						{
						DebugLocation(269, 50);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1171);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(269, 59);
				PushFollow(Follow._global_block_in_namespace_def1174);
				global_block77=global_block();
				PopFollow();

				stream_global_block.Add(global_block77.Tree);
				DebugLocation(269, 72);
				DEDENT78=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1176);  
				stream_DEDENT.Add(DEDENT78);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(269, 84);
				// SugarCpp.g:269:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(269, 96);
				// SugarCpp.g:269:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(269, 113);
				// SugarCpp.g:269:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(269, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:272:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal80 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken NEWLINE87 = default(IToken);
		IToken INDENT88 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken DEDENT91 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken string_literal93 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken NEWLINE103 = default(IToken);
		IToken INDENT104 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken DEDENT107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal80_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree NEWLINE87_tree = default(CommonTree);
		CommonTree INDENT88_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree DEDENT91_tree = default(CommonTree);
		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree NEWLINE103_tree = default(CommonTree);
		CommonTree INDENT104_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree DEDENT107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(273, 5);
			// SugarCpp.g:273:5: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==126))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:5: attribute
				{
				DebugLocation(273, 5);
				PushFollow(Follow._attribute_in_class_def1204);
				attribute79=attribute();
				PopFollow();

				stream_attribute.Add(attribute79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(273, 16);
			// SugarCpp.g:273:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==136))
			{
				alt50 = 1;
			}
			else if ((LA50_0==134))
			{
				alt50 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(273, 18);
				string_literal80=(IToken)Match(input,136,Follow._136_in_class_def1209);  
				stream_136.Add(string_literal80);

				DebugLocation(273, 26);
				PushFollow(Follow._ident_in_class_def1211);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(273, 32);
				// SugarCpp.g:273:32: ( generic_parameter )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==111))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:33: generic_parameter
					{
					DebugLocation(273, 33);
					PushFollow(Follow._generic_parameter_in_class_def1214);
					generic_parameter82=generic_parameter();
					PopFollow();

					stream_generic_parameter.Add(generic_parameter82.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(273, 53);
				// SugarCpp.g:273:53: ( ':' ident ( ',' ident )* )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==107))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:54: ':' ident ( ',' ident )*
					{
					DebugLocation(273, 54);
					char_literal83=(IToken)Match(input,107,Follow._107_in_class_def1219);  
					stream_107.Add(char_literal83);

					DebugLocation(273, 58);
					PushFollow(Follow._ident_in_class_def1221);
					ident84=ident();
					PopFollow();

					stream_ident.Add(ident84.Tree);
					DebugLocation(273, 64);
					// SugarCpp.g:273:64: ( ',' ident )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_0 = input.LA(1);

						if ((LA38_0==97))
						{
							alt38 = 1;
						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:65: ',' ident
							{
							DebugLocation(273, 65);
							char_literal85=(IToken)Match(input,97,Follow._97_in_class_def1224);  
							stream_97.Add(char_literal85);

							DebugLocation(273, 69);
							PushFollow(Follow._ident_in_class_def1226);
							ident86=ident();
							PopFollow();

							stream_ident.Add(ident86.Tree);

							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(273, 79);
				// SugarCpp.g:273:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				try
				{
					alt42 = dfa42.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(273, 80);
					// SugarCpp.g:273:80: ( NEWLINE )+
					int cnt40=0;
					try { DebugEnterSubRule(40);
					while (true)
					{
						int alt40=2;
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==NEWLINE))
						{
							alt40 = 1;
						}


						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:80: NEWLINE
							{
							DebugLocation(273, 80);
							NEWLINE87=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1233);  
							stream_NEWLINE.Add(NEWLINE87);


							}
							break;

						default:
							if (cnt40 >= 1)
								goto loop40;

							EarlyExitException eee40 = new EarlyExitException( 40, input );
							DebugRecognitionException(eee40);
							throw eee40;
						}
						cnt40++;
					}
					loop40:
						;

					} finally { DebugExitSubRule(40); }

					DebugLocation(273, 89);
					INDENT88=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1236);  
					stream_INDENT.Add(INDENT88);

					DebugLocation(273, 96);
					// SugarCpp.g:273:96: ( NEWLINE )*
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_0 = input.LA(1);

						if ((LA41_0==NEWLINE))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch ( alt41 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:96: NEWLINE
							{
							DebugLocation(273, 96);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1238);  
							stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							goto loop41;
						}
					}

					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(273, 105);
					PushFollow(Follow._global_block_in_class_def1241);
					global_block90=global_block();
					PopFollow();

					stream_global_block.Add(global_block90.Tree);
					DebugLocation(273, 118);
					DEDENT91=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1243);  
					stream_DEDENT.Add(DEDENT91);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }



				{
				// AST REWRITE
				// elements: attribute, global_block, ident, generic_parameter, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(273, 130);
					// SugarCpp.g:273:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(273, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(273, 138);
					// SugarCpp.g:273:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(273, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(273, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(273, 155);
					// SugarCpp.g:273:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(273, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(273, 174);
					// SugarCpp.g:273:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(273, 175);
						// SugarCpp.g:273:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(273, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(273, 188);
						// SugarCpp.g:273:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(273, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(273, 198);
					// SugarCpp.g:273:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(273, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:274:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(274, 12);
				string_literal92=(IToken)Match(input,134,Follow._134_in_class_def1285);  
				stream_134.Add(string_literal92);

				DebugLocation(274, 19);
				string_literal93=(IToken)Match(input,136,Follow._136_in_class_def1287);  
				stream_136.Add(string_literal93);

				DebugLocation(274, 27);
				PushFollow(Follow._ident_in_class_def1289);
				ident94=ident();
				PopFollow();

				stream_ident.Add(ident94.Tree);
				DebugLocation(274, 33);
				// SugarCpp.g:274:33: ( generic_parameter )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==111))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:34: generic_parameter
					{
					DebugLocation(274, 34);
					PushFollow(Follow._generic_parameter_in_class_def1292);
					generic_parameter95=generic_parameter();
					PopFollow();

					stream_generic_parameter.Add(generic_parameter95.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(274, 54);
				// SugarCpp.g:274:54: ( '(' func_args ')' )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==90))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:55: '(' func_args ')'
					{
					DebugLocation(274, 55);
					char_literal96=(IToken)Match(input,90,Follow._90_in_class_def1297);  
					stream_90.Add(char_literal96);

					DebugLocation(274, 59);
					PushFollow(Follow._func_args_in_class_def1299);
					func_args97=func_args();
					PopFollow();

					stream_func_args.Add(func_args97.Tree);
					DebugLocation(274, 69);
					char_literal98=(IToken)Match(input,91,Follow._91_in_class_def1301);  
					stream_91.Add(char_literal98);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(274, 75);
				// SugarCpp.g:274:75: ( ':' ident ( ',' ident )* )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==107))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:76: ':' ident ( ',' ident )*
					{
					DebugLocation(274, 76);
					char_literal99=(IToken)Match(input,107,Follow._107_in_class_def1306);  
					stream_107.Add(char_literal99);

					DebugLocation(274, 80);
					PushFollow(Follow._ident_in_class_def1308);
					ident100=ident();
					PopFollow();

					stream_ident.Add(ident100.Tree);
					DebugLocation(274, 86);
					// SugarCpp.g:274:86: ( ',' ident )*
					try { DebugEnterSubRule(45);
					while (true)
					{
						int alt45=2;
						try { DebugEnterDecision(45, false);
						int LA45_0 = input.LA(1);

						if ((LA45_0==97))
						{
							alt45 = 1;
						}


						} finally { DebugExitDecision(45); }
						switch ( alt45 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:87: ',' ident
							{
							DebugLocation(274, 87);
							char_literal101=(IToken)Match(input,97,Follow._97_in_class_def1311);  
							stream_97.Add(char_literal101);

							DebugLocation(274, 91);
							PushFollow(Follow._ident_in_class_def1313);
							ident102=ident();
							PopFollow();

							stream_ident.Add(ident102.Tree);

							}
							break;

						default:
							goto loop45;
						}
					}

					loop45:
						;

					} finally { DebugExitSubRule(45); }


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(274, 101);
				// SugarCpp.g:274:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(274, 102);
					// SugarCpp.g:274:102: ( NEWLINE )+
					int cnt47=0;
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==NEWLINE))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:102: NEWLINE
							{
							DebugLocation(274, 102);
							NEWLINE103=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1320);  
							stream_NEWLINE.Add(NEWLINE103);


							}
							break;

						default:
							if (cnt47 >= 1)
								goto loop47;

							EarlyExitException eee47 = new EarlyExitException( 47, input );
							DebugRecognitionException(eee47);
							throw eee47;
						}
						cnt47++;
					}
					loop47:
						;

					} finally { DebugExitSubRule(47); }

					DebugLocation(274, 111);
					INDENT104=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1323);  
					stream_INDENT.Add(INDENT104);

					DebugLocation(274, 118);
					// SugarCpp.g:274:118: ( NEWLINE )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:118: NEWLINE
							{
							DebugLocation(274, 118);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1325);  
							stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(274, 127);
					PushFollow(Follow._global_block_in_class_def1328);
					global_block106=global_block();
					PopFollow();

					stream_global_block.Add(global_block106.Tree);
					DebugLocation(274, 140);
					DEDENT107=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1330);  
					stream_DEDENT.Add(DEDENT107);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: generic_parameter, global_block, ident, 134, ident, func_args, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 274:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(274, 152);
					// SugarCpp.g:274:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(274, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(274, 160);
					adaptor.AddChild(root_1, stream_134.NextNode());
					DebugLocation(274, 167);
					// SugarCpp.g:274:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(274, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(274, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(274, 184);
					// SugarCpp.g:274:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(274, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(274, 203);
					// SugarCpp.g:274:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(274, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(274, 214);
					// SugarCpp.g:274:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(274, 215);
						// SugarCpp.g:274:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(274, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(274, 228);
						// SugarCpp.g:274:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(274, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(274, 238);
					// SugarCpp.g:274:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(274, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:278:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:279:4: type_name ( ',' type_name )*
			{
			DebugLocation(279, 4);
			PushFollow(Follow._type_name_in_type_list1383);
			type_name108=type_name();
			PopFollow();

			stream_type_name.Add(type_name108.Tree);
			DebugLocation(279, 14);
			// SugarCpp.g:279:14: ( ',' type_name )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==97))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:15: ',' type_name
					{
					DebugLocation(279, 15);
					char_literal109=(IToken)Match(input,97,Follow._97_in_type_list1386);  
					stream_97.Add(char_literal109);

					DebugLocation(279, 19);
					PushFollow(Follow._type_name_in_type_list1388);
					type_name110=type_name();
					PopFollow();

					stream_type_name.Add(type_name110.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(279, 34);
				// SugarCpp.g:279:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(279, 46);
				// SugarCpp.g:279:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(279, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:282:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken string_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree string_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(282, 1);
		try
		{
			// SugarCpp.g:283:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==137||LA56_0==150||LA56_0==158))
			{
				alt56 = 1;
			}
			else if ((LA56_0==90))
			{
				alt56 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:283:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(283, 4);
				PushFollow(Follow._type_single_in_type_name1410);
				type_single111=type_single();
				PopFollow();

				stream_type_single.Add(type_single111.Tree);
				DebugLocation(283, 16);
				// SugarCpp.g:283:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==101))
				{
					alt53 = 1;
				}
				else if ((LA53_0==DEDENT||LA53_0==IDENT||LA53_0==NEWLINE||(LA53_0>=90 && LA53_0<=91)||LA53_0==97||(LA53_0>=109 && LA53_0<=110)||LA53_0==116||LA53_0==119||(LA53_0>=143 && LA53_0<=144)||LA53_0==146||(LA53_0>=164 && LA53_0<=165)||LA53_0==169||LA53_0==173))
				{
					alt53 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(283, 18);
					string_literal112=(IToken)Match(input,101,Follow._101_in_type_name1414);  
					stream_101.Add(string_literal112);

					DebugLocation(283, 23);
					// SugarCpp.g:283:23: ( type_name | '(' ')' )
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==137||LA52_0==150||LA52_0==158))
					{
						alt52 = 1;
					}
					else if ((LA52_0==90))
					{
						int LA52_2 = input.LA(2);

						if ((LA52_2==91))
						{
							int LA52_3 = input.LA(3);

							if ((LA52_3==101))
							{
								alt52 = 1;
							}
							else if ((LA52_3==DEDENT||LA52_3==IDENT||LA52_3==NEWLINE||(LA52_3>=90 && LA52_3<=91)||LA52_3==97||(LA52_3>=109 && LA52_3<=110)||LA52_3==116||LA52_3==119||(LA52_3>=143 && LA52_3<=144)||LA52_3==146||(LA52_3>=164 && LA52_3<=165)||LA52_3==169||LA52_3==173))
							{
								alt52 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA52_2==IDENT||LA52_2==90||LA52_2==137||LA52_2==150||LA52_2==158))
						{
							alt52 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 52, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:283:24: type_name
						{
						DebugLocation(283, 24);
						PushFollow(Follow._type_name_in_type_name1417);
						type_name113=type_name();
						PopFollow();

						stream_type_name.Add(type_name113.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:283:36: '(' ')'
						{
						DebugLocation(283, 36);
						char_literal114=(IToken)Match(input,90,Follow._90_in_type_name1421);  
						stream_90.Add(char_literal114);

						DebugLocation(283, 40);
						char_literal115=(IToken)Match(input,91,Follow._91_in_type_name1423);  
						stream_91.Add(char_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 283:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(283, 48);
						// SugarCpp.g:283:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(283, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(283, 60);
						// SugarCpp.g:283:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(283, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(283, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(283, 85);
						// SugarCpp.g:283:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(283, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:284:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 284:9: -> type_single
					{
						DebugLocation(284, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(286, 4);
				char_literal116=(IToken)Match(input,90,Follow._90_in_type_name1464);  
				stream_90.Add(char_literal116);

				DebugLocation(286, 8);
				// SugarCpp.g:286:8: ( type_list )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENT||LA54_0==90||LA54_0==137||LA54_0==150||LA54_0==158))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:286:8: type_list
					{
					DebugLocation(286, 8);
					PushFollow(Follow._type_list_in_type_name1466);
					type_list117=type_list();
					PopFollow();

					stream_type_list.Add(type_list117.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(286, 19);
				char_literal118=(IToken)Match(input,91,Follow._91_in_type_name1469);  
				stream_91.Add(char_literal118);

				DebugLocation(286, 23);
				string_literal119=(IToken)Match(input,101,Follow._101_in_type_name1471);  
				stream_101.Add(string_literal119);

				DebugLocation(286, 28);
				// SugarCpp.g:286:28: ( type_name | '(' ')' )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==137||LA55_0==150||LA55_0==158))
				{
					alt55 = 1;
				}
				else if ((LA55_0==90))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==91))
					{
						int LA55_3 = input.LA(3);

						if ((LA55_3==101))
						{
							alt55 = 1;
						}
						else if ((LA55_3==DEDENT||LA55_3==IDENT||LA55_3==NEWLINE||(LA55_3>=90 && LA55_3<=91)||LA55_3==97||(LA55_3>=109 && LA55_3<=110)||LA55_3==116||LA55_3==119||(LA55_3>=143 && LA55_3<=144)||LA55_3==146||(LA55_3>=164 && LA55_3<=165)||LA55_3==169||LA55_3==173))
						{
							alt55 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 55, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA55_2==IDENT||LA55_2==90||LA55_2==137||LA55_2==150||LA55_2==158))
					{
						alt55 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 55, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:286:29: type_name
					{
					DebugLocation(286, 29);
					PushFollow(Follow._type_name_in_type_name1474);
					type_name120=type_name();
					PopFollow();

					stream_type_name.Add(type_name120.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:286:41: '(' ')'
					{
					DebugLocation(286, 41);
					char_literal121=(IToken)Match(input,90,Follow._90_in_type_name1478);  
					stream_90.Add(char_literal121);

					DebugLocation(286, 45);
					char_literal122=(IToken)Match(input,91,Follow._91_in_type_name1480);  
					stream_91.Add(char_literal122);


					}
					break;

				}
				} finally { DebugExitSubRule(55); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(286, 53);
					// SugarCpp.g:286:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(286, 65);
					// SugarCpp.g:286:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(286, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(286, 76);
					// SugarCpp.g:286:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(286, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:289:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:290:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(290, 4);
			PushFollow(Follow._type_star_in_type_single1504);
			type_star123=type_star();
			PopFollow();

			stream_type_star.Add(type_star123.Tree);
			DebugLocation(290, 14);
			// SugarCpp.g:290:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt60=3;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 88:
				{
				alt60 = 1;
				}
				break;
			case 126:
				{
				alt60 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 90:
			case 91:
			case 97:
			case 101:
			case 109:
			case 110:
			case 116:
			case 119:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
			case 173:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:16: '&'
				{
				DebugLocation(290, 16);
				char_literal124=(IToken)Match(input,88,Follow._88_in_type_single1508);  
				stream_88.Add(char_literal124);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(290, 23);
					// SugarCpp.g:290:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(290, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:291:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(291, 7);
				char_literal125=(IToken)Match(input,126,Follow._126_in_type_single1524);  
				stream_126.Add(char_literal125);

				DebugLocation(291, 11);
				// SugarCpp.g:291:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==IDENT||LA59_0==NUMBER||LA59_0==STRING||LA59_0==83||LA59_0==88||LA59_0==90||LA59_0==92||(LA59_0>=94 && LA59_0<=95)||(LA59_0>=98 && LA59_0<=99)||(LA59_0>=125 && LA59_0<=126)||LA59_0==149||LA59_0==152||(LA59_0>=154 && LA59_0<=155)||LA59_0==173))
				{
					alt59 = 1;
				}
				else if ((LA59_0==97||LA59_0==127))
				{
					alt59 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:13: expr ( ',' expr )* ']'
					{
					DebugLocation(291, 13);
					PushFollow(Follow._expr_in_type_single1528);
					expr126=expr();
					PopFollow();

					stream_expr.Add(expr126.Tree);
					DebugLocation(291, 18);
					// SugarCpp.g:291:18: ( ',' expr )*
					try { DebugEnterSubRule(57);
					while (true)
					{
						int alt57=2;
						try { DebugEnterDecision(57, false);
						int LA57_0 = input.LA(1);

						if ((LA57_0==97))
						{
							alt57 = 1;
						}


						} finally { DebugExitDecision(57); }
						switch ( alt57 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:19: ',' expr
							{
							DebugLocation(291, 19);
							char_literal127=(IToken)Match(input,97,Follow._97_in_type_single1531);  
							stream_97.Add(char_literal127);

							DebugLocation(291, 23);
							PushFollow(Follow._expr_in_type_single1533);
							expr128=expr();
							PopFollow();

							stream_expr.Add(expr128.Tree);

							}
							break;

						default:
							goto loop57;
						}
					}

					loop57:
						;

					} finally { DebugExitSubRule(57); }

					DebugLocation(291, 30);
					char_literal129=(IToken)Match(input,127,Follow._127_in_type_single1537);  
					stream_127.Add(char_literal129);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 291:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(291, 37);
						// SugarCpp.g:291:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(291, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(291, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(291, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:292:13: ( ',' )* ']'
					{
					DebugLocation(292, 13);
					// SugarCpp.g:292:13: ( ',' )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==97))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:13: ','
							{
							DebugLocation(292, 13);
							char_literal130=(IToken)Match(input,97,Follow._97_in_type_single1562);  
							stream_97.Add(char_literal130);


							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(292, 18);
					char_literal131=(IToken)Match(input,127,Follow._127_in_type_single1565);  
					stream_127.Add(char_literal131);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 292:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(292, 25);
						// SugarCpp.g:292:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(292, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(292, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(292, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:294:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 294:7: -> type_star
				{
					DebugLocation(294, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:298:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(298, 1);
		try
		{
			// SugarCpp.g:299:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(299, 4);
			PushFollow(Follow._type_star_in_type_no_array1612);
			type_star132=type_star();
			PopFollow();

			stream_type_star.Add(type_star132.Tree);
			DebugLocation(299, 14);
			// SugarCpp.g:299:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==88))
			{
				alt61 = 1;
			}
			else if ((LA61_0==90||LA61_0==126))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:299:16: '&'
				{
				DebugLocation(299, 16);
				char_literal133=(IToken)Match(input,88,Follow._88_in_type_no_array1616);  
				stream_88.Add(char_literal133);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(299, 23);
					// SugarCpp.g:299:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(299, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(299, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:300:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 300:7: -> type_star
				{
					DebugLocation(300, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:304:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(304, 1);
		try
		{
			// SugarCpp.g:305:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:305:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(305, 4);
			PushFollow(Follow._type_template_type_in_type_star1651);
			type_template_type134=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type134.Tree);
			DebugLocation(305, 23);
			// SugarCpp.g:305:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==92))
			{
				alt63 = 1;
			}
			else if ((LA63_0==DEDENT||LA63_0==IDENT||LA63_0==NEWLINE||LA63_0==88||(LA63_0>=90 && LA63_0<=91)||LA63_0==97||LA63_0==101||(LA63_0>=109 && LA63_0<=110)||LA63_0==116||LA63_0==119||LA63_0==126||(LA63_0>=143 && LA63_0<=144)||LA63_0==146||(LA63_0>=164 && LA63_0<=165)||LA63_0==169||LA63_0==173))
			{
				alt63 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:25: ( '*' )+
				{
				DebugLocation(305, 25);
				// SugarCpp.g:305:25: ( '*' )+
				int cnt62=0;
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==92))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:305:25: '*'
						{
						DebugLocation(305, 25);
						char_literal135=(IToken)Match(input,92,Follow._92_in_type_star1655);  
						stream_92.Add(char_literal135);


						}
						break;

					default:
						if (cnt62 >= 1)
							goto loop62;

						EarlyExitException eee62 = new EarlyExitException( 62, input );
						DebugRecognitionException(eee62);
						throw eee62;
					}
					cnt62++;
				}
				loop62:
					;

				} finally { DebugExitSubRule(62); }



				{
				// AST REWRITE
				// elements: 92, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(305, 33);
					// SugarCpp.g:305:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(305, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(305, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(305, 64);
					if (!(stream_92.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_92.HasNext )
					{
						DebugLocation(305, 64);
						adaptor.AddChild(root_1, stream_92.NextNode());

					}
					stream_92.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:306:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:10: -> type_template_type
				{
					DebugLocation(306, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:310:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(311, 4);
			PushFollow(Follow._type_ident_in_type_template_type1701);
			type_ident136=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident136.Tree);
			DebugLocation(311, 15);
			// SugarCpp.g:311:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==111))
			{
				alt66 = 1;
			}
			else if ((LA66_0==DEDENT||LA66_0==IDENT||LA66_0==NEWLINE||LA66_0==88||(LA66_0>=90 && LA66_0<=92)||LA66_0==97||LA66_0==101||(LA66_0>=109 && LA66_0<=110)||LA66_0==116||LA66_0==119||LA66_0==126||(LA66_0>=143 && LA66_0<=144)||LA66_0==146||(LA66_0>=164 && LA66_0<=165)||LA66_0==169||LA66_0==173))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(311, 17);
				char_literal137=(IToken)Match(input,111,Follow._111_in_type_template_type1705);  
				stream_111.Add(char_literal137);

				DebugLocation(311, 21);
				// SugarCpp.g:311:21: ( type_name ( ',' type_name )* )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==IDENT||LA65_0==90||LA65_0==137||LA65_0==150||LA65_0==158))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:311:22: type_name ( ',' type_name )*
					{
					DebugLocation(311, 22);
					PushFollow(Follow._type_name_in_type_template_type1708);
					type_name138=type_name();
					PopFollow();

					stream_type_name.Add(type_name138.Tree);
					DebugLocation(311, 32);
					// SugarCpp.g:311:32: ( ',' type_name )*
					try { DebugEnterSubRule(64);
					while (true)
					{
						int alt64=2;
						try { DebugEnterDecision(64, false);
						int LA64_0 = input.LA(1);

						if ((LA64_0==97))
						{
							alt64 = 1;
						}


						} finally { DebugExitDecision(64); }
						switch ( alt64 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:311:33: ',' type_name
							{
							DebugLocation(311, 33);
							char_literal139=(IToken)Match(input,97,Follow._97_in_type_template_type1711);  
							stream_97.Add(char_literal139);

							DebugLocation(311, 37);
							PushFollow(Follow._type_name_in_type_template_type1713);
							type_name140=type_name();
							PopFollow();

							stream_type_name.Add(type_name140.Tree);

							}
							break;

						default:
							goto loop64;
						}
					}

					loop64:
						;

					} finally { DebugExitSubRule(64); }


					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(311, 51);
				char_literal141=(IToken)Match(input,119,Follow._119_in_type_template_type1719);  
				stream_119.Add(char_literal141);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(311, 58);
					// SugarCpp.g:311:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(311, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(311, 85);
					// SugarCpp.g:311:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(311, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:8: -> type_ident
				{
					DebugLocation(312, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:316:1: type_ident : ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal142 = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(317, 4);
			// SugarCpp.g:317:4: ( 'const' )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==137))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:4: 'const'
				{
				DebugLocation(317, 4);
				string_literal142=(IToken)Match(input,137,Follow._137_in_type_ident1759);  
				stream_137.Add(string_literal142);


				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(317, 13);
			// SugarCpp.g:317:13: ( 'struct' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==158))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:13: 'struct'
				{
				DebugLocation(317, 13);
				string_literal143=(IToken)Match(input,158,Follow._158_in_type_ident1762);  
				stream_158.Add(string_literal143);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(317, 23);
			// SugarCpp.g:317:23: ( 'long' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==150))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:23: 'long'
				{
				DebugLocation(317, 23);
				string_literal144=(IToken)Match(input,150,Follow._150_in_type_ident1765);  
				stream_150.Add(string_literal144);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(317, 31);
			PushFollow(Follow._ident_in_type_ident1768);
			ident145=ident();
			PopFollow();

			stream_ident.Add(ident145.Tree);


			{
			// AST REWRITE
			// elements: 137, ident, 150, 158
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:37: -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(317, 40);
				// SugarCpp.g:317:40: ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(317, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(317, 53);
				// SugarCpp.g:317:53: ( 'const' )?
				if (stream_137.HasNext)
				{
					DebugLocation(317, 53);
					adaptor.AddChild(root_1, stream_137.NextNode());

				}
				stream_137.Reset();
				DebugLocation(317, 62);
				// SugarCpp.g:317:62: ( 'struct' )?
				if (stream_158.HasNext)
				{
					DebugLocation(317, 62);
					adaptor.AddChild(root_1, stream_158.NextNode());

				}
				stream_158.Reset();
				DebugLocation(317, 72);
				// SugarCpp.g:317:72: ( 'long' )?
				if (stream_150.HasNext)
				{
					DebugLocation(317, 72);
					adaptor.AddChild(root_1, stream_150.NextNode());

				}
				stream_150.Reset();
				DebugLocation(317, 80);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:320:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: ident ( ',' ident )*
			{
			DebugLocation(321, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1796);
			ident146=ident();
			PopFollow();

			stream_ident.Add(ident146.Tree);
			DebugLocation(321, 10);
			// SugarCpp.g:321:10: ( ',' ident )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==97))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:11: ',' ident
					{
					DebugLocation(321, 11);
					char_literal147=(IToken)Match(input,97,Follow._97_in_generic_parameter_inside1799);  
					stream_97.Add(char_literal147);

					DebugLocation(321, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1801);
					ident148=ident();
					PopFollow();

					stream_ident.Add(ident148.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(321, 26);
				// SugarCpp.g:321:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(321, 47);
				// SugarCpp.g:321:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(321, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:324:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(325, 4);
			char_literal149=(IToken)Match(input,111,Follow._111_in_generic_parameter1823);  
			stream_111.Add(char_literal149);

			DebugLocation(325, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1825);
			generic_parameter_inside150=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside150.Tree);
			DebugLocation(325, 33);
			char_literal151=(IToken)Match(input,119,Follow._119_in_generic_parameter1827);  
			stream_119.Add(char_literal151);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:37: -> generic_parameter_inside
			{
				DebugLocation(325, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:328:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(329, 4);
			PushFollow(Follow._func_args_item_in_func_args1842);
			func_args_item152=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item152.Tree);
			DebugLocation(329, 19);
			// SugarCpp.g:329:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==97))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:20: ',' func_args_item
					{
					DebugLocation(329, 20);
					char_literal153=(IToken)Match(input,97,Follow._97_in_func_args1845);  
					stream_97.Add(char_literal153);

					DebugLocation(329, 24);
					PushFollow(Follow._func_args_item_in_func_args1847);
					func_args_item154=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item154.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(329, 44);
				// SugarCpp.g:329:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(329, 56);
				// SugarCpp.g:329:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(329, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:332:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken string_literal159 = default(IToken);
		IToken string_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IDENT))
			{
				alt74 = 1;
			}
			else if ((LA74_0==109))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(333, 4);
				PushFollow(Follow._ident_list_in_func_args_item1869);
				ident_list155=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list155.Tree);
				DebugLocation(333, 15);
				char_literal156=(IToken)Match(input,107,Follow._107_in_func_args_item1871);  
				stream_107.Add(char_literal156);

				DebugLocation(333, 19);
				PushFollow(Follow._type_name_in_func_args_item1873);
				type_name157=type_name();
				PopFollow();

				stream_type_name.Add(type_name157.Tree);
				DebugLocation(333, 29);
				// SugarCpp.g:333:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt73=3;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt73 = 1;
					}
					break;
				case 90:
					{
					alt73 = 2;
					}
					break;
				case 91:
				case 97:
					{
					alt73 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:31: ( '=' | ':=' ) expr
					{
					DebugLocation(333, 31);
					// SugarCpp.g:333:31: ( '=' | ':=' )
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==116))
					{
						alt72 = 1;
					}
					else if ((LA72_0==109))
					{
						alt72 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:333:32: '='
						{
						DebugLocation(333, 32);
						char_literal158=(IToken)Match(input,116,Follow._116_in_func_args_item1878);  
						stream_116.Add(char_literal158);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:333:38: ':='
						{
						DebugLocation(333, 38);
						string_literal159=(IToken)Match(input,109,Follow._109_in_func_args_item1882);  
						stream_109.Add(string_literal159);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(333, 44);
					PushFollow(Follow._expr_in_func_args_item1885);
					expr160=expr();
					PopFollow();

					stream_expr.Add(expr160.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(333, 53);
						// SugarCpp.g:333:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(333, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(333, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(333, 93);
						// SugarCpp.g:333:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(333, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:334:33: bracket_expr_list
					{
					DebugLocation(334, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item1936);
					bracket_expr_list161=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list161.Tree);


					{
					// AST REWRITE
					// elements: type_name, bracket_expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 334:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(334, 55);
						// SugarCpp.g:334:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(334, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(334, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(334, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(334, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:335:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 335:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(335, 18);
						// SugarCpp.g:335:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(335, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(335, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:337:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 8);
				string_literal162=(IToken)Match(input,109,Follow._109_in_func_args_item1992); 
				string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal162_tree, root_0);
				DebugLocation(337, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1996);
				modify_expr163=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr163.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:340:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(341, 2);

			set164=(IToken)input.LT(1);
			if (input.LA(1)==92||input.LA(1)==94||input.LA(1)==98||input.LA(1)==105)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set164));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:344:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==90))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:345:4: ident
				{
				DebugLocation(345, 4);
				PushFollow(Follow._ident_in_func_name2030);
				ident165=ident();
				PopFollow();

				stream_ident.Add(ident165.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 345:10: -> ident
				{
					DebugLocation(345, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:346:4: '(' operator ')'
				{
				DebugLocation(346, 4);
				char_literal166=(IToken)Match(input,90,Follow._90_in_func_name2039);  
				stream_90.Add(char_literal166);

				DebugLocation(346, 8);
				PushFollow(Follow._operator_in_func_name2041);
				operator167=@operator();
				PopFollow();

				stream_operator.Add(operator167.Tree);
				DebugLocation(346, 17);
				char_literal168=(IToken)Match(input,91,Follow._91_in_func_name2043);  
				stream_91.Add(char_literal168);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 346:21: -> operator
				{
					DebugLocation(346, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:349:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(349, 1);
		try
		{
			// SugarCpp.g:350:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:350:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 4);
			PushFollow(Follow._type_name_in_func_type2058);
			type_name169=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name169.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:353:1: func_def : ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal172 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken NEWLINE178 = default(IToken);
		IToken char_literal180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree NEWLINE178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(353, 4);
		try
		{
			// SugarCpp.g:354:2: ( ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:354:4: ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(354, 4);
			// SugarCpp.g:354:4: ( attribute )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==126))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:4: attribute
				{
				DebugLocation(354, 4);
				PushFollow(Follow._attribute_in_func_def2069);
				attribute170=attribute();
				PopFollow();

				stream_attribute.Add(attribute170.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(354, 15);
			// SugarCpp.g:354:15: ( func_type )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			try
			{
				alt77 = dfa77.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:15: func_type
				{
				DebugLocation(354, 15);
				PushFollow(Follow._func_type_in_func_def2072);
				func_type171=func_type();
				PopFollow();

				stream_func_type.Add(func_type171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(354, 26);
			// SugarCpp.g:354:26: ( '~' )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==173))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:26: '~'
				{
				DebugLocation(354, 26);
				char_literal172=(IToken)Match(input,173,Follow._173_in_func_def2075);  
				stream_173.Add(char_literal172);


				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(354, 31);
			PushFollow(Follow._func_name_in_func_def2078);
			func_name173=func_name();
			PopFollow();

			stream_func_name.Add(func_name173.Tree);
			DebugLocation(354, 41);
			// SugarCpp.g:354:41: ( generic_parameter )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==111))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:41: generic_parameter
				{
				DebugLocation(354, 41);
				PushFollow(Follow._generic_parameter_in_func_def2080);
				generic_parameter174=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter174.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(354, 60);
			char_literal175=(IToken)Match(input,90,Follow._90_in_func_def2083);  
			stream_90.Add(char_literal175);

			DebugLocation(354, 64);
			// SugarCpp.g:354:64: ( func_args )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==IDENT||LA80_0==109))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:64: func_args
				{
				DebugLocation(354, 64);
				PushFollow(Follow._func_args_in_func_def2085);
				func_args176=func_args();
				PopFollow();

				stream_func_args.Add(func_args176.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(354, 75);
			char_literal177=(IToken)Match(input,91,Follow._91_in_func_def2088);  
			stream_91.Add(char_literal177);

			DebugLocation(354, 79);
			// SugarCpp.g:354:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==NEWLINE))
			{
				alt82 = 1;
			}
			else if ((LA82_0==116))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:81: ( NEWLINE )+ stmt_block
				{
				DebugLocation(354, 81);
				// SugarCpp.g:354:81: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:354:81: NEWLINE
						{
						DebugLocation(354, 81);
						NEWLINE178=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2092);  
						stream_NEWLINE.Add(NEWLINE178);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(354, 90);
				PushFollow(Follow._stmt_block_in_func_def2095);
				stmt_block179=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block179.Tree);


				{
				// AST REWRITE
				// elements: 173, func_type, func_name, func_args, generic_parameter, stmt_block, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 354:101: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(354, 104);
					// SugarCpp.g:354:104: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(354, 106);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(354, 115);
					// SugarCpp.g:354:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(354, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(354, 126);
					// SugarCpp.g:354:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(354, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(354, 137);
					// SugarCpp.g:354:137: ( '~' )?
					if (stream_173.HasNext)
					{
						DebugLocation(354, 137);
						adaptor.AddChild(root_1, stream_173.NextNode());

					}
					stream_173.Reset();
					DebugLocation(354, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(354, 152);
					// SugarCpp.g:354:152: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(354, 152);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(354, 171);
					// SugarCpp.g:354:171: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(354, 171);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(354, 182);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:355:24: '=' where_expr
				{
				DebugLocation(355, 24);
				char_literal180=(IToken)Match(input,116,Follow._116_in_func_def2145);  
				stream_116.Add(char_literal180);

				DebugLocation(355, 28);
				PushFollow(Follow._where_expr_in_func_def2147);
				where_expr181=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr181.Tree);


				{
				// AST REWRITE
				// elements: func_name, func_type, func_args, attribute, where_expr, generic_parameter, 173
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:40: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(355, 43);
					// SugarCpp.g:355:43: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(355, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(355, 54);
					// SugarCpp.g:355:54: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(355, 54);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(355, 65);
					// SugarCpp.g:355:65: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(355, 65);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(355, 76);
					// SugarCpp.g:355:76: ( '~' )?
					if (stream_173.HasNext)
					{
						DebugLocation(355, 76);
						adaptor.AddChild(root_1, stream_173.NextNode());

					}
					stream_173.Reset();
					DebugLocation(355, 81);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(355, 91);
					// SugarCpp.g:355:91: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(355, 91);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(355, 110);
					// SugarCpp.g:355:110: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(355, 110);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(355, 121);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(356, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:358:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE183 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken NEWLINE187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE183_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree NEWLINE187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(358, 1);
		try
		{
			// SugarCpp.g:359:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt87=2;
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==138||(LA87_0>=142 && LA87_0<=144)||LA87_0==151||LA87_0==159||LA87_0==162||(LA87_0>=164 && LA87_0<=165)||LA87_0==169))
			{
				alt87 = 1;
			}
			else if ((LA87_0==IDENT||LA87_0==83||LA87_0==88||LA87_0==90||LA87_0==92||(LA87_0>=94 && LA87_0<=95)||(LA87_0>=98 && LA87_0<=99)||LA87_0==125||LA87_0==155||LA87_0==157||LA87_0==163||LA87_0==166||LA87_0==173))
			{
				alt87 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:359:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(359, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2188);
				stmt_complex182=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex182.Tree);
				DebugLocation(359, 17);
				// SugarCpp.g:359:17: ( NEWLINE )+
				int cnt83=0;
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if ((LA83_0==NEWLINE))
					{
						alt83 = 1;
					}


					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:359:17: NEWLINE
						{
						DebugLocation(359, 17);
						NEWLINE183=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2190);  
						stream_NEWLINE.Add(NEWLINE183);


						}
						break;

					default:
						if (cnt83 >= 1)
							goto loop83;

						EarlyExitException eee83 = new EarlyExitException( 83, input );
						DebugRecognitionException(eee83);
						throw eee83;
					}
					cnt83++;
				}
				loop83:
					;

				} finally { DebugExitSubRule(83); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 359:26: -> stmt_complex
				{
					DebugLocation(359, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:360:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(360, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2200);
				stmt_simple184=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple184.Tree);
				DebugLocation(360, 16);
				// SugarCpp.g:360:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==NEWLINE))
				{
					alt86 = 1;
				}
				else if ((LA86_0==110))
				{
					alt86 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:17: ( NEWLINE )+
					{
					DebugLocation(360, 17);
					// SugarCpp.g:360:17: ( NEWLINE )+
					int cnt84=0;
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==NEWLINE))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:360:17: NEWLINE
							{
							DebugLocation(360, 17);
							NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2203);  
							stream_NEWLINE.Add(NEWLINE185);


							}
							break;

						default:
							if (cnt84 >= 1)
								goto loop84;

							EarlyExitException eee84 = new EarlyExitException( 84, input );
							DebugRecognitionException(eee84);
							throw eee84;
						}
						cnt84++;
					}
					loop84:
						;

					} finally { DebugExitSubRule(84); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:360:28: ';' ( NEWLINE )*
					{
					DebugLocation(360, 28);
					char_literal186=(IToken)Match(input,110,Follow._110_in_stmt_block_item2208);  
					stream_110.Add(char_literal186);

					DebugLocation(360, 32);
					// SugarCpp.g:360:32: ( NEWLINE )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:360:32: NEWLINE
							{
							DebugLocation(360, 32);
							NEWLINE187=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2210);  
							stream_NEWLINE.Add(NEWLINE187);


							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }


					}
					break;

				}
				} finally { DebugExitSubRule(86); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 360:42: -> stmt_simple
				{
					DebugLocation(360, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:363:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT188 = default(IToken);
		IToken NEWLINE189 = default(IToken);
		IToken DEDENT191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT188_tree = default(CommonTree);
		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree DEDENT191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(363, 1);
		try
		{
			// SugarCpp.g:364:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:364:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(364, 4);
			INDENT188=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2227);  
			stream_INDENT.Add(INDENT188);

			DebugLocation(364, 11);
			// SugarCpp.g:364:11: ( NEWLINE )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==NEWLINE))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:364:11: NEWLINE
					{
					DebugLocation(364, 11);
					NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2229);  
					stream_NEWLINE.Add(NEWLINE189);


					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(364, 20);
			// SugarCpp.g:364:20: ( stmt_block_item )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==83||LA89_0==88||LA89_0==90||LA89_0==92||(LA89_0>=94 && LA89_0<=95)||(LA89_0>=98 && LA89_0<=99)||LA89_0==125||LA89_0==138||(LA89_0>=142 && LA89_0<=144)||LA89_0==151||LA89_0==155||LA89_0==157||LA89_0==159||(LA89_0>=162 && LA89_0<=166)||LA89_0==169||LA89_0==173))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:364:20: stmt_block_item
					{
					DebugLocation(364, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2232);
					stmt_block_item190=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item190.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(364, 37);
			DEDENT191=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2235);  
			stream_DEDENT.Add(DEDENT191);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 364:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(364, 47);
				// SugarCpp.g:364:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(364, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(364, 60);
				// SugarCpp.g:364:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(364, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:367:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(367, 1);
		try
		{
			// SugarCpp.g:368:2: ( stmt_simple | stmt_complex )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==IDENT||LA90_0==83||LA90_0==88||LA90_0==90||LA90_0==92||(LA90_0>=94 && LA90_0<=95)||(LA90_0>=98 && LA90_0<=99)||LA90_0==125||LA90_0==155||LA90_0==157||LA90_0==163||LA90_0==166||LA90_0==173))
			{
				alt90 = 1;
			}
			else if ((LA90_0==138||(LA90_0>=142 && LA90_0<=144)||LA90_0==151||LA90_0==159||LA90_0==162||(LA90_0>=164 && LA90_0<=165)||LA90_0==169))
			{
				alt90 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:368:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 4);
				PushFollow(Follow._stmt_simple_in_stmt2255);
				stmt_simple192=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple192.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:369:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(369, 4);
				PushFollow(Follow._stmt_complex_in_stmt2260);
				stmt_complex193=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex193.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:372:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(373, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2271);
			stmt_expr194=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr194.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:376:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt91=6;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case 144:
			case 164:
				{
				alt91 = 1;
				}
				break;
			case 143:
				{
				alt91 = 2;
				}
				break;
			case 151:
			case 165:
			case 169:
				{
				alt91 = 3;
				}
				break;
			case 162:
				{
				alt91 = 4;
				}
				break;
			case 159:
				{
				alt91 = 5;
				}
				break;
			case 138:
			case 142:
				{
				alt91 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:377:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(377, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2282);
				stmt_if195=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if195.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:378:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2287);
				stmt_for196=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for196.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:379:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2292);
				stmt_while197=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while197.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:380:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2297);
				stmt_try198=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try198.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:381:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2302);
				stmt_switch199=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch199.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:382:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2307);
				stmt_defer200=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer200.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:385:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal201 = default(IToken);
		IToken string_literal203 = default(IToken);
		IToken string_literal205 = default(IToken);
		IToken string_literal207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken char_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal201_tree = default(CommonTree);
		CommonTree string_literal203_tree = default(CommonTree);
		CommonTree string_literal205_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(386, 4);
			// SugarCpp.g:386:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:386:5: a= stmt_expr_item
			{
			DebugLocation(386, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2321);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:22: -> $a
			{
				DebugLocation(386, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(386, 29);
			// SugarCpp.g:386:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=6;
				try { DebugEnterDecision(93, false);
				switch (input.LA(1))
				{
				case 144:
					{
					alt93 = 1;
					}
					break;
				case 164:
					{
					alt93 = 2;
					}
					break;
				case 169:
					{
					alt93 = 3;
					}
					break;
				case 165:
					{
					alt93 = 4;
					}
					break;
				case 143:
					{
					alt93 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:386:31: 'if' expr
					{
					DebugLocation(386, 31);
					string_literal201=(IToken)Match(input,144,Follow._144_in_stmt_expr2331);  
					stream_144.Add(string_literal201);

					DebugLocation(386, 36);
					PushFollow(Follow._expr_in_stmt_expr2333);
					expr202=expr();
					PopFollow();

					stream_expr.Add(expr202.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 386:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(386, 44);
						// SugarCpp.g:386:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(386, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(386, 59);
						// SugarCpp.g:386:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(386, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:387:13: 'unless' expr
					{
					DebugLocation(387, 13);
					string_literal203=(IToken)Match(input,164,Follow._164_in_stmt_expr2362);  
					stream_164.Add(string_literal203);

					DebugLocation(387, 22);
					PushFollow(Follow._expr_in_stmt_expr2364);
					expr204=expr();
					PopFollow();

					stream_expr.Add(expr204.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 387:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(387, 30);
						// SugarCpp.g:387:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(387, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(387, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(387, 49);
						// SugarCpp.g:387:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(387, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(387, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:388:13: 'while' expr
					{
					DebugLocation(388, 13);
					string_literal205=(IToken)Match(input,169,Follow._169_in_stmt_expr2393);  
					stream_169.Add(string_literal205);

					DebugLocation(388, 21);
					PushFollow(Follow._expr_in_stmt_expr2395);
					expr206=expr();
					PopFollow();

					stream_expr.Add(expr206.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 388:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(388, 29);
						// SugarCpp.g:388:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(388, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(388, 47);
						// SugarCpp.g:388:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(388, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:389:13: 'until' expr
					{
					DebugLocation(389, 13);
					string_literal207=(IToken)Match(input,165,Follow._165_in_stmt_expr2424);  
					stream_165.Add(string_literal207);

					DebugLocation(389, 21);
					PushFollow(Follow._expr_in_stmt_expr2426);
					expr208=expr();
					PopFollow();

					stream_expr.Add(expr208.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(389, 29);
						// SugarCpp.g:389:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(389, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(389, 47);
						// SugarCpp.g:389:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(389, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:390:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(390, 13);
					string_literal209=(IToken)Match(input,143,Follow._143_in_stmt_expr2455);  
					stream_143.Add(string_literal209);

					DebugLocation(390, 19);
					PushFollow(Follow._for_item_in_stmt_expr2457);
					for_item210=for_item();
					PopFollow();

					stream_for_item.Add(for_item210.Tree);
					DebugLocation(390, 28);
					// SugarCpp.g:390:28: ( ',' for_item )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==97))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:390:29: ',' for_item
							{
							DebugLocation(390, 29);
							char_literal211=(IToken)Match(input,97,Follow._97_in_stmt_expr2460);  
							stream_97.Add(char_literal211);

							DebugLocation(390, 33);
							PushFollow(Follow._for_item_in_stmt_expr2462);
							for_item212=for_item();
							PopFollow();

							stream_for_item.Add(for_item212.Tree);

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(390, 47);
						// SugarCpp.g:390:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(390, 58);
						// SugarCpp.g:390:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(390, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(390, 68);
						// SugarCpp.g:390:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(390, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:394:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(394, 1);
		try
		{
			// SugarCpp.g:395:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt94=5;
			try { DebugEnterDecision(94, false);
			try
			{
				alt94 = dfa94.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:395:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2504);
				stmt_alloc213=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc213.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:396:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2509);
				stmt_return214=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return214.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:397:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2514);
				stmt_using215=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using215.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:398:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2519);
				stmt_typedef216=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef216.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:399:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2524);
				stmt_modify217=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify217.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:402:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal218 = default(IToken);
		IToken string_literal220 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt221 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==138))
			{
				alt95 = 1;
			}
			else if ((LA95_0==142))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:403:4: 'defer' stmt
				{
				DebugLocation(403, 4);
				string_literal218=(IToken)Match(input,138,Follow._138_in_stmt_defer2535);  
				stream_138.Add(string_literal218);

				DebugLocation(403, 12);
				PushFollow(Follow._stmt_in_stmt_defer2537);
				stmt219=stmt();
				PopFollow();

				stream_stmt.Add(stmt219.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 403:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(403, 20);
					// SugarCpp.g:403:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(403, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(403, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:404:4: 'finally' stmt
				{
				DebugLocation(404, 4);
				string_literal220=(IToken)Match(input,142,Follow._142_in_stmt_defer2550);  
				stream_142.Add(string_literal220);

				DebugLocation(404, 14);
				PushFollow(Follow._stmt_in_stmt_defer2552);
				stmt221=stmt();
				PopFollow();

				stream_stmt.Add(stmt221.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 404:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(404, 22);
					// SugarCpp.g:404:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(404, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(404, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:407:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal222 = default(IToken);
		IToken char_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:408:4: 'type' ident '=' type_name
			{
			DebugLocation(408, 4);
			string_literal222=(IToken)Match(input,163,Follow._163_in_stmt_typedef2571);  
			stream_163.Add(string_literal222);

			DebugLocation(408, 11);
			PushFollow(Follow._ident_in_stmt_typedef2573);
			ident223=ident();
			PopFollow();

			stream_ident.Add(ident223.Tree);
			DebugLocation(408, 17);
			char_literal224=(IToken)Match(input,116,Follow._116_in_stmt_typedef2575);  
			stream_116.Add(char_literal224);

			DebugLocation(408, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2577);
			type_name225=type_name();
			PopFollow();

			stream_type_name.Add(type_name225.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 408:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(408, 34);
				// SugarCpp.g:408:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(408, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(408, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(408, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:411:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal227_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(411, 36);
		try
		{
			// SugarCpp.g:411:16: ( ident | 'namespace' )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==IDENT))
			{
				alt96 = 1;
			}
			else if ((LA96_0==153))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:411:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(411, 18);
				PushFollow(Follow._ident_in_stmt_using_item2596);
				ident226=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident226.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:411:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(411, 26);
				string_literal227=(IToken)Match(input,153,Follow._153_in_stmt_using_item2600); 
				string_literal227_tree = (CommonTree)adaptor.Create(string_literal227);
				adaptor.AddChild(root_0, string_literal227_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(411, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:412:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(412, 1);
		try
		{
			// SugarCpp.g:413:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:413:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(413, 4);
			string_literal228=(IToken)Match(input,166,Follow._166_in_stmt_using2608);  
			stream_166.Add(string_literal228);

			DebugLocation(413, 12);
			// SugarCpp.g:413:12: ( stmt_using_item )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==153))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:413:12: stmt_using_item
					{
					DebugLocation(413, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2610);
					stmt_using_item229=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item229.Tree);

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(413, 32);
				// SugarCpp.g:413:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(413, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(413, 45);
				// SugarCpp.g:413:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(413, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:416:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(416, 1);
		try
		{
			// SugarCpp.g:417:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:417:4: 'return' ( expr )?
			{
			DebugLocation(417, 4);
			string_literal230=(IToken)Match(input,157,Follow._157_in_stmt_return2631);  
			stream_157.Add(string_literal230);

			DebugLocation(417, 13);
			// SugarCpp.g:417:13: ( expr )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==NUMBER||LA98_0==STRING||LA98_0==83||LA98_0==88||LA98_0==90||LA98_0==92||(LA98_0>=94 && LA98_0<=95)||(LA98_0>=98 && LA98_0<=99)||(LA98_0>=125 && LA98_0<=126)||LA98_0==149||LA98_0==152||(LA98_0>=154 && LA98_0<=155)||LA98_0==173))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:417:13: expr
				{
				DebugLocation(417, 13);
				PushFollow(Follow._expr_in_stmt_return2633);
				expr231=expr();
				PopFollow();

				stream_expr.Add(expr231.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(98); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(417, 22);
				// SugarCpp.g:417:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(417, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(417, 36);
				// SugarCpp.g:417:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(417, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:420:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(420, 1);
		try
		{
			// SugarCpp.g:421:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:421:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(421, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2654);
			stmt_simple232=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple232.Tree);
			DebugLocation(421, 16);
			// SugarCpp.g:421:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==110))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:421:17: ';' stmt_simple
					{
					DebugLocation(421, 17);
					char_literal233=(IToken)Match(input,110,Follow._110_in_inline_stmt_block2657);  
					stream_110.Add(char_literal233);

					DebugLocation(421, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2659);
					stmt_simple234=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple234.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 421:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(421, 38);
				// SugarCpp.g:421:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(421, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(421, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(421, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:424:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal235 = default(IToken);
		IToken NEWLINE237 = default(IToken);
		IToken NEWLINE239 = default(IToken);
		IToken string_literal240 = default(IToken);
		IToken NEWLINE241 = default(IToken);
		IToken string_literal243 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken NEWLINE247 = default(IToken);
		IToken NEWLINE249 = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken NEWLINE251 = default(IToken);
		IToken string_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree NEWLINE237_tree = default(CommonTree);
		CommonTree NEWLINE239_tree = default(CommonTree);
		CommonTree string_literal240_tree = default(CommonTree);
		CommonTree NEWLINE241_tree = default(CommonTree);
		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree NEWLINE247_tree = default(CommonTree);
		CommonTree NEWLINE249_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree NEWLINE251_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(424, 1);
		try
		{
			// SugarCpp.g:425:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt110=2;
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==144))
			{
				alt110 = 1;
			}
			else if ((LA110_0==164))
			{
				alt110 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:425:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(425, 4);
				string_literal235=(IToken)Match(input,144,Follow._144_in_stmt_if2681);  
				stream_144.Add(string_literal235);

				DebugLocation(425, 9);
				PushFollow(Follow._expr_in_stmt_if2683);
				expr236=expr();
				PopFollow();

				stream_expr.Add(expr236.Tree);
				DebugLocation(425, 14);
				// SugarCpp.g:425:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}
				else if ((LA104_0==160))
				{
					alt104 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(425, 15);
					// SugarCpp.g:425:15: ( NEWLINE )+
					int cnt100=0;
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==NEWLINE))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch (alt100)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:425:15: NEWLINE
							{
							DebugLocation(425, 15);
							NEWLINE237=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2686);  
							stream_NEWLINE.Add(NEWLINE237);


							}
							break;

						default:
							if (cnt100 >= 1)
								goto loop100;

							EarlyExitException eee100 = new EarlyExitException( 100, input );
							DebugRecognitionException(eee100);
							throw eee100;
						}
						cnt100++;
					}
					loop100:
						;

					} finally { DebugExitSubRule(100); }

					DebugLocation(425, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2689);
					stmt_block238=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block238.Tree);
					DebugLocation(425, 35);
					// SugarCpp.g:425:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt103=2;
					try { DebugEnterSubRule(103);
					try { DebugEnterDecision(103, false);
					try
					{
						alt103 = dfa103.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:425:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(425, 36);
						// SugarCpp.g:425:36: ( NEWLINE )*
						try { DebugEnterSubRule(101);
						while (true)
						{
							int alt101=2;
							try { DebugEnterDecision(101, false);
							int LA101_0 = input.LA(1);

							if ((LA101_0==NEWLINE))
							{
								alt101 = 1;
							}


							} finally { DebugExitDecision(101); }
							switch ( alt101 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:425:36: NEWLINE
								{
								DebugLocation(425, 36);
								NEWLINE239=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2692);  
								stream_NEWLINE.Add(NEWLINE239);


								}
								break;

							default:
								goto loop101;
							}
						}

						loop101:
							;

						} finally { DebugExitSubRule(101); }

						DebugLocation(425, 45);
						string_literal240=(IToken)Match(input,140,Follow._140_in_stmt_if2695);  
						stream_140.Add(string_literal240);

						DebugLocation(425, 52);
						// SugarCpp.g:425:52: ( NEWLINE )+
						int cnt102=0;
						try { DebugEnterSubRule(102);
						while (true)
						{
							int alt102=2;
							try { DebugEnterDecision(102, false);
							int LA102_0 = input.LA(1);

							if ((LA102_0==NEWLINE))
							{
								alt102 = 1;
							}


							} finally { DebugExitDecision(102); }
							switch (alt102)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:425:52: NEWLINE
								{
								DebugLocation(425, 52);
								NEWLINE241=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2697);  
								stream_NEWLINE.Add(NEWLINE241);


								}
								break;

							default:
								if (cnt102 >= 1)
									goto loop102;

								EarlyExitException eee102 = new EarlyExitException( 102, input );
								DebugRecognitionException(eee102);
								throw eee102;
							}
							cnt102++;
						}
						loop102:
							;

						} finally { DebugExitSubRule(102); }

						DebugLocation(425, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2700);
						stmt_block242=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block242.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(103); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 425:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(425, 77);
						// SugarCpp.g:425:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(425, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(425, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(425, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(425, 103);
						// SugarCpp.g:425:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(425, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:426:16: 'then' inline_stmt_block
					{
					DebugLocation(426, 16);
					string_literal243=(IToken)Match(input,160,Follow._160_in_stmt_if2732);  
					stream_160.Add(string_literal243);

					DebugLocation(426, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2734);
					inline_stmt_block244=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block244.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 426:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(426, 44);
						// SugarCpp.g:426:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(426, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(426, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(426, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(428, 4);
				string_literal245=(IToken)Match(input,164,Follow._164_in_stmt_if2755);  
				stream_164.Add(string_literal245);

				DebugLocation(428, 13);
				PushFollow(Follow._expr_in_stmt_if2757);
				expr246=expr();
				PopFollow();

				stream_expr.Add(expr246.Tree);
				DebugLocation(428, 18);
				// SugarCpp.g:428:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}
				else if ((LA109_0==160))
				{
					alt109 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(428, 19);
					// SugarCpp.g:428:19: ( NEWLINE )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==NEWLINE))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:428:19: NEWLINE
							{
							DebugLocation(428, 19);
							NEWLINE247=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2760);  
							stream_NEWLINE.Add(NEWLINE247);


							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(428, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2763);
					stmt_block248=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block248.Tree);
					DebugLocation(428, 39);
					// SugarCpp.g:428:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					try
					{
						alt108 = dfa108.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:428:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(428, 40);
						// SugarCpp.g:428:40: ( NEWLINE )*
						try { DebugEnterSubRule(106);
						while (true)
						{
							int alt106=2;
							try { DebugEnterDecision(106, false);
							int LA106_0 = input.LA(1);

							if ((LA106_0==NEWLINE))
							{
								alt106 = 1;
							}


							} finally { DebugExitDecision(106); }
							switch ( alt106 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:428:40: NEWLINE
								{
								DebugLocation(428, 40);
								NEWLINE249=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2766);  
								stream_NEWLINE.Add(NEWLINE249);


								}
								break;

							default:
								goto loop106;
							}
						}

						loop106:
							;

						} finally { DebugExitSubRule(106); }

						DebugLocation(428, 49);
						string_literal250=(IToken)Match(input,140,Follow._140_in_stmt_if2769);  
						stream_140.Add(string_literal250);

						DebugLocation(428, 56);
						// SugarCpp.g:428:56: ( NEWLINE )+
						int cnt107=0;
						try { DebugEnterSubRule(107);
						while (true)
						{
							int alt107=2;
							try { DebugEnterDecision(107, false);
							int LA107_0 = input.LA(1);

							if ((LA107_0==NEWLINE))
							{
								alt107 = 1;
							}


							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:428:56: NEWLINE
								{
								DebugLocation(428, 56);
								NEWLINE251=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2771);  
								stream_NEWLINE.Add(NEWLINE251);


								}
								break;

							default:
								if (cnt107 >= 1)
									goto loop107;

								EarlyExitException eee107 = new EarlyExitException( 107, input );
								DebugRecognitionException(eee107);
								throw eee107;
							}
							cnt107++;
						}
						loop107:
							;

						} finally { DebugExitSubRule(107); }

						DebugLocation(428, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2774);
						stmt_block252=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block252.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(108); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(428, 81);
						// SugarCpp.g:428:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(428, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(428, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(428, 111);
						// SugarCpp.g:428:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(428, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:429:20: 'then' inline_stmt_block
					{
					DebugLocation(429, 20);
					string_literal253=(IToken)Match(input,160,Follow._160_in_stmt_if2810);  
					stream_160.Add(string_literal253);

					DebugLocation(429, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2812);
					inline_stmt_block254=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block254.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(429, 48);
						// SugarCpp.g:429:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(429, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(429, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(109); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:433:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal255 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken string_literal259 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken NEWLINE263 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken string_literal267 = default(IToken);
		IToken NEWLINE269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree NEWLINE263_tree = default(CommonTree);
		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal267_tree = default(CommonTree);
		CommonTree NEWLINE269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt117=3;
			try { DebugEnterDecision(117, false);
			switch (input.LA(1))
			{
			case 169:
				{
				alt117 = 1;
				}
				break;
			case 165:
				{
				alt117 = 2;
				}
				break;
			case 151:
				{
				alt117 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:434:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(434, 4);
				string_literal255=(IToken)Match(input,169,Follow._169_in_stmt_while2843);  
				stream_169.Add(string_literal255);

				DebugLocation(434, 12);
				PushFollow(Follow._expr_in_stmt_while2845);
				expr256=expr();
				PopFollow();

				stream_expr.Add(expr256.Tree);
				DebugLocation(434, 17);
				// SugarCpp.g:434:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==NEWLINE))
				{
					alt112 = 1;
				}
				else if ((LA112_0==160))
				{
					alt112 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(434, 19);
					// SugarCpp.g:434:19: ( NEWLINE )+
					int cnt111=0;
					try { DebugEnterSubRule(111);
					while (true)
					{
						int alt111=2;
						try { DebugEnterDecision(111, false);
						int LA111_0 = input.LA(1);

						if ((LA111_0==NEWLINE))
						{
							alt111 = 1;
						}


						} finally { DebugExitDecision(111); }
						switch (alt111)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:434:19: NEWLINE
							{
							DebugLocation(434, 19);
							NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2849);  
							stream_NEWLINE.Add(NEWLINE257);


							}
							break;

						default:
							if (cnt111 >= 1)
								goto loop111;

							EarlyExitException eee111 = new EarlyExitException( 111, input );
							DebugRecognitionException(eee111);
							throw eee111;
						}
						cnt111++;
					}
					loop111:
						;

					} finally { DebugExitSubRule(111); }

					DebugLocation(434, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2852);
					stmt_block258=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block258.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(434, 42);
						// SugarCpp.g:434:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(434, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(434, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:435:13: 'then' inline_stmt_block
					{
					DebugLocation(435, 13);
					string_literal259=(IToken)Match(input,160,Follow._160_in_stmt_while2876);  
					stream_160.Add(string_literal259);

					DebugLocation(435, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2878);
					inline_stmt_block260=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block260.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(435, 41);
						// SugarCpp.g:435:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(435, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(435, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:437:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(437, 4);
				string_literal261=(IToken)Match(input,165,Follow._165_in_stmt_while2902);  
				stream_165.Add(string_literal261);

				DebugLocation(437, 12);
				PushFollow(Follow._expr_in_stmt_while2904);
				expr262=expr();
				PopFollow();

				stream_expr.Add(expr262.Tree);
				DebugLocation(437, 17);
				// SugarCpp.g:437:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==NEWLINE))
				{
					alt114 = 1;
				}
				else if ((LA114_0==160))
				{
					alt114 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(437, 19);
					// SugarCpp.g:437:19: ( NEWLINE )+
					int cnt113=0;
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==NEWLINE))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:437:19: NEWLINE
							{
							DebugLocation(437, 19);
							NEWLINE263=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2908);  
							stream_NEWLINE.Add(NEWLINE263);


							}
							break;

						default:
							if (cnt113 >= 1)
								goto loop113;

							EarlyExitException eee113 = new EarlyExitException( 113, input );
							DebugRecognitionException(eee113);
							throw eee113;
						}
						cnt113++;
					}
					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(437, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2911);
					stmt_block264=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block264.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 437:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(437, 42);
						// SugarCpp.g:437:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(437, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(437, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(437, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:438:13: 'then' inline_stmt_block
					{
					DebugLocation(438, 13);
					string_literal265=(IToken)Match(input,160,Follow._160_in_stmt_while2935);  
					stream_160.Add(string_literal265);

					DebugLocation(438, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2937);
					inline_stmt_block266=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block266.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(438, 41);
						// SugarCpp.g:438:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(438, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(438, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:440:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(440, 4);
				string_literal267=(IToken)Match(input,151,Follow._151_in_stmt_while2961);  
				stream_151.Add(string_literal267);

				DebugLocation(440, 11);
				// SugarCpp.g:440:11: ( expr )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==83||LA115_0==88||LA115_0==90||LA115_0==92||(LA115_0>=94 && LA115_0<=95)||(LA115_0>=98 && LA115_0<=99)||(LA115_0>=125 && LA115_0<=126)||LA115_0==149||LA115_0==152||(LA115_0>=154 && LA115_0<=155)||LA115_0==173))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:11: expr
					{
					DebugLocation(440, 11);
					PushFollow(Follow._expr_in_stmt_while2963);
					expr268=expr();
					PopFollow();

					stream_expr.Add(expr268.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(440, 17);
				// SugarCpp.g:440:17: ( NEWLINE )+
				int cnt116=0;
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=2;
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==NEWLINE))
					{
						alt116 = 1;
					}


					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:440:17: NEWLINE
						{
						DebugLocation(440, 17);
						NEWLINE269=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2966);  
						stream_NEWLINE.Add(NEWLINE269);


						}
						break;

					default:
						if (cnt116 >= 1)
							goto loop116;

						EarlyExitException eee116 = new EarlyExitException( 116, input );
						DebugRecognitionException(eee116);
						throw eee116;
					}
					cnt116++;
				}
				loop116:
					;

				} finally { DebugExitSubRule(116); }

				DebugLocation(440, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2969);
				stmt_block270=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block270.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 440:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(440, 40);
					// SugarCpp.g:440:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(440, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(440, 52);
					// SugarCpp.g:440:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(440, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(440, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:443:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal272 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken string_literal276 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:444:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(444, 4);
			PushFollow(Follow._ident_in_for_range2991);
			ident271=ident();
			PopFollow();

			stream_ident.Add(ident271.Tree);
			DebugLocation(444, 10);
			string_literal272=(IToken)Match(input,112,Follow._112_in_for_range2993);  
			stream_112.Add(string_literal272);

			DebugLocation(444, 16);
			PushFollow(Follow._expr_in_for_range2997);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(444, 22);
			// SugarCpp.g:444:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt120=3;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			switch (input.LA(1))
			{
			case 161:
				{
				alt120 = 1;
				}
				break;
			case 139:
				{
				alt120 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 97:
			case 110:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
				{
				alt120 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(444, 23);
				string_literal273=(IToken)Match(input,161,Follow._161_in_for_range3000);  
				stream_161.Add(string_literal273);

				DebugLocation(444, 29);
				PushFollow(Follow._expr_in_for_range3004);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(444, 35);
				// SugarCpp.g:444:35: ( 'by' c= expr )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==133))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:36: 'by' c= expr
					{
					DebugLocation(444, 36);
					string_literal274=(IToken)Match(input,133,Follow._133_in_for_range3007);  
					stream_133.Add(string_literal274);

					DebugLocation(444, 42);
					PushFollow(Follow._expr_in_for_range3011);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }



				{
				// AST REWRITE
				// elements: b, c, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 444:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(444, 53);
					// SugarCpp.g:444:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(444, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(444, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(444, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(444, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(444, 80);
					// SugarCpp.g:444:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(444, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:445:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(445, 8);
				string_literal275=(IToken)Match(input,139,Follow._139_in_for_range3040);  
				stream_139.Add(string_literal275);

				DebugLocation(445, 18);
				PushFollow(Follow._expr_in_for_range3044);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(445, 24);
				// SugarCpp.g:445:24: ( 'by' c= expr )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==133))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:25: 'by' c= expr
					{
					DebugLocation(445, 25);
					string_literal276=(IToken)Match(input,133,Follow._133_in_for_range3047);  
					stream_133.Add(string_literal276);

					DebugLocation(445, 31);
					PushFollow(Follow._expr_in_for_range3051);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(119); }



				{
				// AST REWRITE
				// elements: c, b, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 445:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(445, 42);
					// SugarCpp.g:445:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(445, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(445, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(445, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(445, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(445, 74);
					// SugarCpp.g:445:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(445, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:446:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 446:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(446, 12);
					// SugarCpp.g:446:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(446, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(446, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(446, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:450:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: expr
			{
			DebugLocation(451, 4);
			PushFollow(Follow._expr_in_for_when3109);
			expr277=expr();
			PopFollow();

			stream_expr.Add(expr277.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:9: -> ^( For_Item_When expr )
			{
				DebugLocation(451, 12);
				// SugarCpp.g:451:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(451, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(451, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:454:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr280 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(454, 1);
		try
		{
			// SugarCpp.g:455:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:455:4: ident '=>' expr
			{
			DebugLocation(455, 4);
			PushFollow(Follow._ident_in_for_map3128);
			ident278=ident();
			PopFollow();

			stream_ident.Add(ident278.Tree);
			DebugLocation(455, 10);
			string_literal279=(IToken)Match(input,118,Follow._118_in_for_map3130);  
			stream_118.Add(string_literal279);

			DebugLocation(455, 15);
			PushFollow(Follow._expr_in_for_map3132);
			expr280=expr();
			PopFollow();

			stream_expr.Add(expr280.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 455:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(455, 23);
				// SugarCpp.g:455:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(455, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(455, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(455, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:458:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(458, 1);
		try
		{
			// SugarCpp.g:459:2: ( for_range | for_when | for_map )
			int alt121=3;
			try { DebugEnterDecision(121, false);
			try
			{
				alt121 = dfa121.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:459:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(459, 4);
				PushFollow(Follow._for_range_in_for_item3153);
				for_range281=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range281.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:460:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(460, 4);
				PushFollow(Follow._for_when_in_for_item3158);
				for_when282=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when282.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:461:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(461, 4);
				PushFollow(Follow._for_map_in_for_item3163);
				for_map283=for_map();
				PopFollow();

				adaptor.AddChild(root_0, for_map283.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:464:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken NEWLINE288 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree NEWLINE288_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(465, 4);
			string_literal284=(IToken)Match(input,143,Follow._143_in_stmt_for3174);  
			stream_143.Add(string_literal284);

			DebugLocation(465, 10);
			// SugarCpp.g:465:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:465:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(465, 12);
			PushFollow(Follow._for_item_in_stmt_for3178);
			for_item285=for_item();
			PopFollow();

			stream_for_item.Add(for_item285.Tree);
			DebugLocation(465, 21);
			// SugarCpp.g:465:21: ( ',' for_item )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==97))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:22: ',' for_item
					{
					DebugLocation(465, 22);
					char_literal286=(IToken)Match(input,97,Follow._97_in_stmt_for3181);  
					stream_97.Add(char_literal286);

					DebugLocation(465, 26);
					PushFollow(Follow._for_item_in_stmt_for3183);
					for_item287=for_item();
					PopFollow();

					stream_for_item.Add(for_item287.Tree);

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }

			DebugLocation(465, 37);
			// SugarCpp.g:465:37: ( NEWLINE )+
			int cnt123=0;
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==NEWLINE))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:37: NEWLINE
					{
					DebugLocation(465, 37);
					NEWLINE288=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3187);  
					stream_NEWLINE.Add(NEWLINE288);


					}
					break;

				default:
					if (cnt123 >= 1)
						goto loop123;

					EarlyExitException eee123 = new EarlyExitException( 123, input );
					DebugRecognitionException(eee123);
					throw eee123;
				}
				cnt123++;
			}
			loop123:
				;

			} finally { DebugExitSubRule(123); }

			DebugLocation(465, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3190);
			stmt_block289=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block289.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 465:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(465, 60);
				// SugarCpp.g:465:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(465, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(465, 71);
				// SugarCpp.g:465:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(465, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(465, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:470:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken NEWLINE291 = default(IToken);
		IToken NEWLINE293 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken NEWLINE296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block297 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree NEWLINE291_tree = default(CommonTree);
		CommonTree NEWLINE293_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree NEWLINE296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(470, 1);
		try
		{
			// SugarCpp.g:471:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:471:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(471, 4);
			string_literal290=(IToken)Match(input,162,Follow._162_in_stmt_try3221);  
			stream_162.Add(string_literal290);

			DebugLocation(471, 10);
			// SugarCpp.g:471:10: ( NEWLINE )+
			int cnt124=0;
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==NEWLINE))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:10: NEWLINE
					{
					DebugLocation(471, 10);
					NEWLINE291=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3223);  
					stream_NEWLINE.Add(NEWLINE291);


					}
					break;

				default:
					if (cnt124 >= 1)
						goto loop124;

					EarlyExitException eee124 = new EarlyExitException( 124, input );
					DebugRecognitionException(eee124);
					throw eee124;
				}
				cnt124++;
			}
			loop124:
				;

			} finally { DebugExitSubRule(124); }

			DebugLocation(471, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3226);
			stmt_block292=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block292.Tree);
			DebugLocation(471, 30);
			// SugarCpp.g:471:30: ( NEWLINE )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:30: NEWLINE
					{
					DebugLocation(471, 30);
					NEWLINE293=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3228);  
					stream_NEWLINE.Add(NEWLINE293);


					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }

			DebugLocation(471, 39);
			string_literal294=(IToken)Match(input,135,Follow._135_in_stmt_try3231);  
			stream_135.Add(string_literal294);

			DebugLocation(471, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3233);
			stmt_alloc295=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc295.Tree);
			DebugLocation(471, 58);
			// SugarCpp.g:471:58: ( NEWLINE )+
			int cnt126=0;
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==NEWLINE))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:58: NEWLINE
					{
					DebugLocation(471, 58);
					NEWLINE296=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3235);  
					stream_NEWLINE.Add(NEWLINE296);


					}
					break;

				default:
					if (cnt126 >= 1)
						goto loop126;

					EarlyExitException eee126 = new EarlyExitException( 126, input );
					DebugRecognitionException(eee126);
					throw eee126;
				}
				cnt126++;
			}
			loop126:
				;

			} finally { DebugExitSubRule(126); }

			DebugLocation(471, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3238);
			stmt_block297=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block297.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 471:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(471, 81);
				// SugarCpp.g:471:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(471, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(471, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(471, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(471, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:474:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal298 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken NEWLINE302 = default(IToken);
		IToken string_literal304 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block305 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal298_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		CommonTree NEWLINE302_tree = default(CommonTree);
		CommonTree string_literal304_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(475, 4);
			string_literal298=(IToken)Match(input,167,Follow._167_in_switch_item3261);  
			stream_167.Add(string_literal298);

			DebugLocation(475, 11);
			PushFollow(Follow._expr_in_switch_item3263);
			expr299=expr();
			PopFollow();

			stream_expr.Add(expr299.Tree);
			DebugLocation(475, 16);
			// SugarCpp.g:475:16: ( ',' expr )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==97))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:17: ',' expr
					{
					DebugLocation(475, 17);
					char_literal300=(IToken)Match(input,97,Follow._97_in_switch_item3266);  
					stream_97.Add(char_literal300);

					DebugLocation(475, 21);
					PushFollow(Follow._expr_in_switch_item3268);
					expr301=expr();
					PopFollow();

					stream_expr.Add(expr301.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }

			DebugLocation(475, 28);
			// SugarCpp.g:475:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==NEWLINE))
			{
				alt129 = 1;
			}
			else if ((LA129_0==160))
			{
				alt129 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:475:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(475, 30);
				// SugarCpp.g:475:30: ( NEWLINE )+
				int cnt128=0;
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==NEWLINE))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:475:30: NEWLINE
						{
						DebugLocation(475, 30);
						NEWLINE302=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3274);  
						stream_NEWLINE.Add(NEWLINE302);


						}
						break;

					default:
						if (cnt128 >= 1)
							goto loop128;

						EarlyExitException eee128 = new EarlyExitException( 128, input );
						DebugRecognitionException(eee128);
						throw eee128;
					}
					cnt128++;
				}
				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(475, 39);
				PushFollow(Follow._stmt_block_in_switch_item3277);
				stmt_block303=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block303.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 475:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(475, 53);
					// SugarCpp.g:475:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(475, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(475, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(475, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(475, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:476:30: 'then' inline_stmt_block
				{
				DebugLocation(476, 30);
				string_literal304=(IToken)Match(input,160,Follow._160_in_switch_item3319);  
				stream_160.Add(string_literal304);

				DebugLocation(476, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3321);
				inline_stmt_block305=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block305.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 476:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(476, 58);
					// SugarCpp.g:476:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(476, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(476, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(476, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(476, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:480:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken INDENT309 = default(IToken);
		IToken NEWLINE310 = default(IToken);
		IToken NEWLINE312 = default(IToken);
		IToken string_literal313 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken DEDENT317 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree INDENT309_tree = default(CommonTree);
		CommonTree NEWLINE310_tree = default(CommonTree);
		CommonTree NEWLINE312_tree = default(CommonTree);
		CommonTree string_literal313_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree DEDENT317_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(481, 4);
			string_literal306=(IToken)Match(input,159,Follow._159_in_stmt_switch3357);  
			stream_159.Add(string_literal306);

			DebugLocation(481, 13);
			// SugarCpp.g:481:13: ( expr )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==IDENT||LA130_0==NUMBER||LA130_0==STRING||LA130_0==83||LA130_0==88||LA130_0==90||LA130_0==92||(LA130_0>=94 && LA130_0<=95)||(LA130_0>=98 && LA130_0<=99)||(LA130_0>=125 && LA130_0<=126)||LA130_0==149||LA130_0==152||(LA130_0>=154 && LA130_0<=155)||LA130_0==173))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:13: expr
				{
				DebugLocation(481, 13);
				PushFollow(Follow._expr_in_stmt_switch3359);
				expr307=expr();
				PopFollow();

				stream_expr.Add(expr307.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(481, 19);
			// SugarCpp.g:481:19: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:19: NEWLINE
					{
					DebugLocation(481, 19);
					NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3362);  
					stream_NEWLINE.Add(NEWLINE308);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(481, 28);
			INDENT309=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3365);  
			stream_INDENT.Add(INDENT309);

			DebugLocation(481, 35);
			// SugarCpp.g:481:35: ( NEWLINE )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:35: NEWLINE
					{
					DebugLocation(481, 35);
					NEWLINE310=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3367);  
					stream_NEWLINE.Add(NEWLINE310);


					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(481, 44);
			// SugarCpp.g:481:44: ( switch_item ( NEWLINE )+ )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==167))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:45: switch_item ( NEWLINE )+
					{
					DebugLocation(481, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3371);
					switch_item311=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item311.Tree);
					DebugLocation(481, 57);
					// SugarCpp.g:481:57: ( NEWLINE )+
					int cnt133=0;
					try { DebugEnterSubRule(133);
					while (true)
					{
						int alt133=2;
						try { DebugEnterDecision(133, false);
						int LA133_0 = input.LA(1);

						if ((LA133_0==NEWLINE))
						{
							alt133 = 1;
						}


						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:481:57: NEWLINE
							{
							DebugLocation(481, 57);
							NEWLINE312=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3373);  
							stream_NEWLINE.Add(NEWLINE312);


							}
							break;

						default:
							if (cnt133 >= 1)
								goto loop133;

							EarlyExitException eee133 = new EarlyExitException( 133, input );
							DebugRecognitionException(eee133);
							throw eee133;
						}
						cnt133++;
					}
					loop133:
						;

					} finally { DebugExitSubRule(133); }


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(481, 68);
			// SugarCpp.g:481:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==140))
			{
				alt137 = 1;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(481, 69);
				string_literal313=(IToken)Match(input,140,Follow._140_in_stmt_switch3379);  
				stream_140.Add(string_literal313);

				DebugLocation(481, 76);
				// SugarCpp.g:481:76: ( NEWLINE )+
				int cnt135=0;
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==NEWLINE))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:76: NEWLINE
						{
						DebugLocation(481, 76);
						NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3381);  
						stream_NEWLINE.Add(NEWLINE314);


						}
						break;

					default:
						if (cnt135 >= 1)
							goto loop135;

						EarlyExitException eee135 = new EarlyExitException( 135, input );
						DebugRecognitionException(eee135);
						throw eee135;
					}
					cnt135++;
				}
				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(481, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3384);
				stmt_block315=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block315.Tree);
				DebugLocation(481, 96);
				// SugarCpp.g:481:96: ( NEWLINE )*
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==NEWLINE))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch ( alt136 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:96: NEWLINE
						{
						DebugLocation(481, 96);
						NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3386);  
						stream_NEWLINE.Add(NEWLINE316);


						}
						break;

					default:
						goto loop136;
					}
				}

				loop136:
					;

				} finally { DebugExitSubRule(136); }


				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(481, 107);
			DEDENT317=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3391);  
			stream_DEDENT.Add(DEDENT317);



			{
			// AST REWRITE
			// elements: stmt_block, expr, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 481:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(481, 117);
				// SugarCpp.g:481:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(481, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(481, 131);
				// SugarCpp.g:481:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(481, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(481, 137);
				// SugarCpp.g:481:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(481, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(481, 150);
				// SugarCpp.g:481:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(481, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:484:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal319 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident320 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal319_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:485:4: ident ( ',' ident )*
			{
			DebugLocation(485, 4);
			PushFollow(Follow._ident_in_ident_list3417);
			ident318=ident();
			PopFollow();

			stream_ident.Add(ident318.Tree);
			DebugLocation(485, 10);
			// SugarCpp.g:485:10: ( ',' ident )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==97))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:11: ',' ident
					{
					DebugLocation(485, 11);
					char_literal319=(IToken)Match(input,97,Follow._97_in_ident_list3420);  
					stream_97.Add(char_literal319);

					DebugLocation(485, 15);
					PushFollow(Follow._ident_in_ident_list3422);
					ident320=ident();
					PopFollow();

					stream_ident.Add(ident320.Tree);

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 485:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(485, 26);
				// SugarCpp.g:485:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(485, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(485, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(485, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:488:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken string_literal325 = default(IToken);
		IToken string_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr331 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		CommonTree string_literal325_tree = default(CommonTree);
		CommonTree string_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(489, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3444);
			ident_list321=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list321.Tree);
			DebugLocation(489, 15);
			// SugarCpp.g:489:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==107))
			{
				alt142 = 1;
			}
			else if ((LA142_0==109))
			{
				alt142 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(489, 17);
				char_literal322=(IToken)Match(input,107,Follow._107_in_stmt_alloc3448);  
				stream_107.Add(char_literal322);

				DebugLocation(489, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3450);
				type_name323=type_name();
				PopFollow();

				stream_type_name.Add(type_name323.Tree);
				DebugLocation(489, 31);
				// SugarCpp.g:489:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt140=3;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt140 = 1;
					}
					break;
				case 90:
					{
					alt140 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 110:
				case 143:
				case 144:
				case 146:
				case 164:
				case 165:
				case 169:
					{
					alt140 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 140, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(489, 33);
					// SugarCpp.g:489:33: ( '=' | ':=' )
					int alt139=2;
					try { DebugEnterSubRule(139);
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==116))
					{
						alt139 = 1;
					}
					else if ((LA139_0==109))
					{
						alt139 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 139, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:34: '='
						{
						DebugLocation(489, 34);
						char_literal324=(IToken)Match(input,116,Follow._116_in_stmt_alloc3455);  
						stream_116.Add(char_literal324);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:489:40: ':='
						{
						DebugLocation(489, 40);
						string_literal325=(IToken)Match(input,109,Follow._109_in_stmt_alloc3459);  
						stream_109.Add(string_literal325);


						}
						break;

					}
					} finally { DebugExitSubRule(139); }

					DebugLocation(489, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3462);
					where_expr326=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr326.Tree);


					{
					// AST REWRITE
					// elements: where_expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 489:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(489, 61);
						// SugarCpp.g:489:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(489, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(489, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(489, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(489, 101);
						// SugarCpp.g:489:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(489, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(489, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:490:33: bracket_expr_list
					{
					DebugLocation(490, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3513);
					bracket_expr_list327=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list327.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(490, 55);
						// SugarCpp.g:490:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(490, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(490, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(490, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:491:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(491, 18);
						// SugarCpp.g:491:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(491, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(491, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(140); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:493:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(493, 8);
				string_literal328=(IToken)Match(input,109,Follow._109_in_stmt_alloc3573);  
				stream_109.Add(string_literal328);

				DebugLocation(493, 14);
				// SugarCpp.g:493:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:493:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(493, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3577);
				where_expr329=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr329.Tree);
				DebugLocation(493, 26);
				// SugarCpp.g:493:26: ( ',' where_expr )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==97))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:493:27: ',' where_expr
						{
						DebugLocation(493, 27);
						char_literal330=(IToken)Match(input,97,Follow._97_in_stmt_alloc3580);  
						stream_97.Add(char_literal330);

						DebugLocation(493, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3582);
						where_expr331=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr331.Tree);

						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}



				{
				// AST REWRITE
				// elements: where_expr, ident_list, 109
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 493:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(493, 48);
					// SugarCpp.g:493:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(493, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(493, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(493, 66);
					// SugarCpp.g:493:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(493, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(493, 78);
					// SugarCpp.g:493:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(493, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:496:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal335 = default(IToken);
		IToken string_literal337 = default(IToken);
		IToken string_literal339 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal335_tree = default(CommonTree);
		CommonTree string_literal337_tree = default(CommonTree);
		CommonTree string_literal339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(497, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3612);
			lvalue332=lvalue();
			PopFollow();

			stream_lvalue.Add(lvalue332.Tree);
			DebugLocation(497, 11);
			// SugarCpp.g:497:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt143=5;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case 86:
			case 89:
			case 93:
			case 96:
			case 100:
			case 106:
			case 114:
			case 116:
			case 122:
			case 129:
			case 171:
				{
				alt143 = 1;
				}
				break;
			case 124:
				{
				alt143 = 2;
				}
				break;
			case 113:
				{
				alt143 = 3;
				}
				break;
			case 121:
				{
				alt143 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 110:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
				{
				alt143 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:497:13: modify_expr_op where_expr
				{
				DebugLocation(497, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3616);
				modify_expr_op333=modify_expr_op();
				PopFollow();

				stream_modify_expr_op.Add(modify_expr_op333.Tree);
				DebugLocation(497, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3618);
				where_expr334=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr334.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 497:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(497, 42);
					// SugarCpp.g:497:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(497, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(497, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(497, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:498:13: '?=' where_expr
				{
				DebugLocation(498, 13);
				string_literal335=(IToken)Match(input,124,Follow._124_in_stmt_modify3642);  
				stream_124.Add(string_literal335);

				DebugLocation(498, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3644);
				where_expr336=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr336.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 124
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 498:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(498, 32);
					// SugarCpp.g:498:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(498, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_124.NextNode(), root_1);

					DebugLocation(498, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(498, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:499:16: '<<' where_expr
				{
				DebugLocation(499, 16);
				string_literal337=(IToken)Match(input,113,Follow._113_in_stmt_modify3671);  
				stream_113.Add(string_literal337);

				DebugLocation(499, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3673);
				where_expr338=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr338.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 499:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(499, 35);
					// SugarCpp.g:499:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(499, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(499, 46);
					adaptor.AddChild(root_1, stream_113.NextNode());
					DebugLocation(499, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(499, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:500:16: '>>' where_expr
				{
				DebugLocation(500, 16);
				string_literal339=(IToken)Match(input,121,Follow._121_in_stmt_modify3702);  
				stream_121.Add(string_literal339);

				DebugLocation(500, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3704);
				where_expr340=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr340.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 121
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 500:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(500, 35);
					// SugarCpp.g:500:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(500, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(500, 46);
					adaptor.AddChild(root_1, stream_121.NextNode());
					DebugLocation(500, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(500, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:501:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 501:7: -> lvalue
				{
					DebugLocation(501, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:504:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:505:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(505, 4);
			PushFollow(Follow._stmt_in_where_item3738);
			stmt341=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt341.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:508:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE342 = default(IToken);
		IToken INDENT343 = default(IToken);
		IToken NEWLINE344 = default(IToken);
		IToken string_literal345 = default(IToken);
		IToken NEWLINE347 = default(IToken);
		IToken DEDENT348 = default(IToken);
		IToken NEWLINE349 = default(IToken);
		IToken INDENT350 = default(IToken);
		IToken NEWLINE351 = default(IToken);
		IToken NEWLINE353 = default(IToken);
		IToken DEDENT354 = default(IToken);
		IToken NEWLINE355 = default(IToken);
		IToken DEDENT356 = default(IToken);
		IToken NEWLINE357 = default(IToken);
		IToken INDENT358 = default(IToken);
		IToken NEWLINE359 = default(IToken);
		IToken NEWLINE361 = default(IToken);
		IToken DEDENT362 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken DEDENT364 = default(IToken);
		IToken string_literal365 = default(IToken);
		IToken NEWLINE366 = default(IToken);
		IToken INDENT367 = default(IToken);
		IToken NEWLINE368 = default(IToken);
		IToken NEWLINE370 = default(IToken);
		IToken DEDENT371 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item369 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE342_tree = default(CommonTree);
		CommonTree INDENT343_tree = default(CommonTree);
		CommonTree NEWLINE344_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		CommonTree NEWLINE347_tree = default(CommonTree);
		CommonTree DEDENT348_tree = default(CommonTree);
		CommonTree NEWLINE349_tree = default(CommonTree);
		CommonTree INDENT350_tree = default(CommonTree);
		CommonTree NEWLINE351_tree = default(CommonTree);
		CommonTree NEWLINE353_tree = default(CommonTree);
		CommonTree DEDENT354_tree = default(CommonTree);
		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree DEDENT356_tree = default(CommonTree);
		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree INDENT358_tree = default(CommonTree);
		CommonTree NEWLINE359_tree = default(CommonTree);
		CommonTree NEWLINE361_tree = default(CommonTree);
		CommonTree DEDENT362_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree DEDENT364_tree = default(CommonTree);
		CommonTree string_literal365_tree = default(CommonTree);
		CommonTree NEWLINE366_tree = default(CommonTree);
		CommonTree INDENT367_tree = default(CommonTree);
		CommonTree NEWLINE368_tree = default(CommonTree);
		CommonTree NEWLINE370_tree = default(CommonTree);
		CommonTree DEDENT371_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(508, 1);
		try
		{
			// SugarCpp.g:509:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:509:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(509, 4);
			// SugarCpp.g:509:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:509:5: a= expr
			{
			DebugLocation(509, 6);
			PushFollow(Follow._expr_in_where_expr3752);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 509:12: -> $a
			{
				DebugLocation(509, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(509, 19);
			// SugarCpp.g:509:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt163=3;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			try
			{
				alt163 = dfa163.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:509:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(509, 21);
				// SugarCpp.g:509:21: ( NEWLINE )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==NEWLINE))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:21: NEWLINE
						{
						DebugLocation(509, 21);
						NEWLINE342=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3762);  
						stream_NEWLINE.Add(NEWLINE342);


						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }

				DebugLocation(509, 30);
				INDENT343=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3765);  
				stream_INDENT.Add(INDENT343);

				DebugLocation(509, 37);
				// SugarCpp.g:509:37: ( NEWLINE )*
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==NEWLINE))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch ( alt145 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:37: NEWLINE
						{
						DebugLocation(509, 37);
						NEWLINE344=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3767);  
						stream_NEWLINE.Add(NEWLINE344);


						}
						break;

					default:
						goto loop145;
					}
				}

				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(509, 46);
				string_literal345=(IToken)Match(input,168,Follow._168_in_where_expr3770);  
				stream_168.Add(string_literal345);

				DebugLocation(509, 54);
				// SugarCpp.g:509:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==IDENT||LA158_0==83||LA158_0==88||LA158_0==90||LA158_0==92||(LA158_0>=94 && LA158_0<=95)||(LA158_0>=98 && LA158_0<=99)||LA158_0==125||LA158_0==138||(LA158_0>=142 && LA158_0<=144)||LA158_0==151||LA158_0==155||LA158_0==157||LA158_0==159||(LA158_0>=162 && LA158_0<=166)||LA158_0==169||LA158_0==173))
				{
					alt158 = 1;
				}
				else if ((LA158_0==NEWLINE))
				{
					alt158 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:509:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(509, 56);
					PushFollow(Follow._where_item_in_where_expr3774);
					where_item346=where_item();
					PopFollow();

					stream_where_item.Add(where_item346.Tree);
					DebugLocation(509, 67);
					// SugarCpp.g:509:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt152=2;
					try { DebugEnterSubRule(152);
					try { DebugEnterDecision(152, false);
					try
					{
						alt152 = dfa152.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(509, 69);
						// SugarCpp.g:509:69: ( NEWLINE )*
						try { DebugEnterSubRule(146);
						while (true)
						{
							int alt146=2;
							try { DebugEnterDecision(146, false);
							int LA146_0 = input.LA(1);

							if ((LA146_0==NEWLINE))
							{
								alt146 = 1;
							}


							} finally { DebugExitDecision(146); }
							switch ( alt146 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:509:69: NEWLINE
								{
								DebugLocation(509, 69);
								NEWLINE347=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3778);  
								stream_NEWLINE.Add(NEWLINE347);


								}
								break;

							default:
								goto loop146;
							}
						}

						loop146:
							;

						} finally { DebugExitSubRule(146); }

						DebugLocation(509, 78);
						DEDENT348=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3781);  
						stream_DEDENT.Add(DEDENT348);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 509:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(509, 88);
							// SugarCpp.g:509:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(509, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(509, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(509, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:510:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(510, 21);
						// SugarCpp.g:510:21: ( NEWLINE )+
						int cnt147=0;
						try { DebugEnterSubRule(147);
						while (true)
						{
							int alt147=2;
							try { DebugEnterDecision(147, false);
							int LA147_0 = input.LA(1);

							if ((LA147_0==NEWLINE))
							{
								alt147 = 1;
							}


							} finally { DebugExitDecision(147); }
							switch (alt147)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:510:21: NEWLINE
								{
								DebugLocation(510, 21);
								NEWLINE349=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3814);  
								stream_NEWLINE.Add(NEWLINE349);


								}
								break;

							default:
								if (cnt147 >= 1)
									goto loop147;

								EarlyExitException eee147 = new EarlyExitException( 147, input );
								DebugRecognitionException(eee147);
								throw eee147;
							}
							cnt147++;
						}
						loop147:
							;

						} finally { DebugExitSubRule(147); }

						DebugLocation(510, 30);
						INDENT350=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3817);  
						stream_INDENT.Add(INDENT350);

						DebugLocation(510, 37);
						// SugarCpp.g:510:37: ( NEWLINE )*
						try { DebugEnterSubRule(148);
						while (true)
						{
							int alt148=2;
							try { DebugEnterDecision(148, false);
							int LA148_0 = input.LA(1);

							if ((LA148_0==NEWLINE))
							{
								alt148 = 1;
							}


							} finally { DebugExitDecision(148); }
							switch ( alt148 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:510:37: NEWLINE
								{
								DebugLocation(510, 37);
								NEWLINE351=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3819);  
								stream_NEWLINE.Add(NEWLINE351);


								}
								break;

							default:
								goto loop148;
							}
						}

						loop148:
							;

						} finally { DebugExitSubRule(148); }

						DebugLocation(510, 46);
						// SugarCpp.g:510:46: ( where_item ( NEWLINE )+ )+
						int cnt150=0;
						try { DebugEnterSubRule(150);
						while (true)
						{
							int alt150=2;
							try { DebugEnterDecision(150, false);
							int LA150_0 = input.LA(1);

							if ((LA150_0==IDENT||LA150_0==83||LA150_0==88||LA150_0==90||LA150_0==92||(LA150_0>=94 && LA150_0<=95)||(LA150_0>=98 && LA150_0<=99)||LA150_0==125||LA150_0==138||(LA150_0>=142 && LA150_0<=144)||LA150_0==151||LA150_0==155||LA150_0==157||LA150_0==159||(LA150_0>=162 && LA150_0<=166)||LA150_0==169||LA150_0==173))
							{
								alt150 = 1;
							}


							} finally { DebugExitDecision(150); }
							switch (alt150)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:510:47: where_item ( NEWLINE )+
								{
								DebugLocation(510, 47);
								PushFollow(Follow._where_item_in_where_expr3823);
								where_item352=where_item();
								PopFollow();

								stream_where_item.Add(where_item352.Tree);
								DebugLocation(510, 58);
								// SugarCpp.g:510:58: ( NEWLINE )+
								int cnt149=0;
								try { DebugEnterSubRule(149);
								while (true)
								{
									int alt149=2;
									try { DebugEnterDecision(149, false);
									int LA149_0 = input.LA(1);

									if ((LA149_0==NEWLINE))
									{
										alt149 = 1;
									}


									} finally { DebugExitDecision(149); }
									switch (alt149)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:510:58: NEWLINE
										{
										DebugLocation(510, 58);
										NEWLINE353=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3825);  
										stream_NEWLINE.Add(NEWLINE353);


										}
										break;

									default:
										if (cnt149 >= 1)
											goto loop149;

										EarlyExitException eee149 = new EarlyExitException( 149, input );
										DebugRecognitionException(eee149);
										throw eee149;
									}
									cnt149++;
								}
								loop149:
									;

								} finally { DebugExitSubRule(149); }


								}
								break;

							default:
								if (cnt150 >= 1)
									goto loop150;

								EarlyExitException eee150 = new EarlyExitException( 150, input );
								DebugRecognitionException(eee150);
								throw eee150;
							}
							cnt150++;
						}
						loop150:
							;

						} finally { DebugExitSubRule(150); }

						DebugLocation(510, 69);
						DEDENT354=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3830);  
						stream_DEDENT.Add(DEDENT354);

						DebugLocation(510, 76);
						// SugarCpp.g:510:76: ( NEWLINE )*
						try { DebugEnterSubRule(151);
						while (true)
						{
							int alt151=2;
							try { DebugEnterDecision(151, false);
							int LA151_0 = input.LA(1);

							if ((LA151_0==NEWLINE))
							{
								alt151 = 1;
							}


							} finally { DebugExitDecision(151); }
							switch ( alt151 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:510:76: NEWLINE
								{
								DebugLocation(510, 76);
								NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3832);  
								stream_NEWLINE.Add(NEWLINE355);


								}
								break;

							default:
								goto loop151;
							}
						}

						loop151:
							;

						} finally { DebugExitSubRule(151); }

						DebugLocation(510, 85);
						DEDENT356=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3835);  
						stream_DEDENT.Add(DEDENT356);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 510:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(510, 95);
							// SugarCpp.g:510:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(510, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(510, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(510, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(510, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(152); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:512:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(512, 17);
					// SugarCpp.g:512:17: ( NEWLINE )+
					int cnt153=0;
					try { DebugEnterSubRule(153);
					while (true)
					{
						int alt153=2;
						try { DebugEnterDecision(153, false);
						int LA153_0 = input.LA(1);

						if ((LA153_0==NEWLINE))
						{
							alt153 = 1;
						}


						} finally { DebugExitDecision(153); }
						switch (alt153)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:17: NEWLINE
							{
							DebugLocation(512, 17);
							NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3885);  
							stream_NEWLINE.Add(NEWLINE357);


							}
							break;

						default:
							if (cnt153 >= 1)
								goto loop153;

							EarlyExitException eee153 = new EarlyExitException( 153, input );
							DebugRecognitionException(eee153);
							throw eee153;
						}
						cnt153++;
					}
					loop153:
						;

					} finally { DebugExitSubRule(153); }

					DebugLocation(512, 26);
					INDENT358=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3888);  
					stream_INDENT.Add(INDENT358);

					DebugLocation(512, 33);
					// SugarCpp.g:512:33: ( NEWLINE )*
					try { DebugEnterSubRule(154);
					while (true)
					{
						int alt154=2;
						try { DebugEnterDecision(154, false);
						int LA154_0 = input.LA(1);

						if ((LA154_0==NEWLINE))
						{
							alt154 = 1;
						}


						} finally { DebugExitDecision(154); }
						switch ( alt154 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:33: NEWLINE
							{
							DebugLocation(512, 33);
							NEWLINE359=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3890);  
							stream_NEWLINE.Add(NEWLINE359);


							}
							break;

						default:
							goto loop154;
						}
					}

					loop154:
						;

					} finally { DebugExitSubRule(154); }

					DebugLocation(512, 42);
					// SugarCpp.g:512:42: ( where_item ( NEWLINE )+ )+
					int cnt156=0;
					try { DebugEnterSubRule(156);
					while (true)
					{
						int alt156=2;
						try { DebugEnterDecision(156, false);
						int LA156_0 = input.LA(1);

						if ((LA156_0==IDENT||LA156_0==83||LA156_0==88||LA156_0==90||LA156_0==92||(LA156_0>=94 && LA156_0<=95)||(LA156_0>=98 && LA156_0<=99)||LA156_0==125||LA156_0==138||(LA156_0>=142 && LA156_0<=144)||LA156_0==151||LA156_0==155||LA156_0==157||LA156_0==159||(LA156_0>=162 && LA156_0<=166)||LA156_0==169||LA156_0==173))
						{
							alt156 = 1;
						}


						} finally { DebugExitDecision(156); }
						switch (alt156)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:43: where_item ( NEWLINE )+
							{
							DebugLocation(512, 43);
							PushFollow(Follow._where_item_in_where_expr3894);
							where_item360=where_item();
							PopFollow();

							stream_where_item.Add(where_item360.Tree);
							DebugLocation(512, 54);
							// SugarCpp.g:512:54: ( NEWLINE )+
							int cnt155=0;
							try { DebugEnterSubRule(155);
							while (true)
							{
								int alt155=2;
								try { DebugEnterDecision(155, false);
								int LA155_0 = input.LA(1);

								if ((LA155_0==NEWLINE))
								{
									alt155 = 1;
								}


								} finally { DebugExitDecision(155); }
								switch (alt155)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:512:54: NEWLINE
									{
									DebugLocation(512, 54);
									NEWLINE361=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3896);  
									stream_NEWLINE.Add(NEWLINE361);


									}
									break;

								default:
									if (cnt155 >= 1)
										goto loop155;

									EarlyExitException eee155 = new EarlyExitException( 155, input );
									DebugRecognitionException(eee155);
									throw eee155;
								}
								cnt155++;
							}
							loop155:
								;

							} finally { DebugExitSubRule(155); }


							}
							break;

						default:
							if (cnt156 >= 1)
								goto loop156;

							EarlyExitException eee156 = new EarlyExitException( 156, input );
							DebugRecognitionException(eee156);
							throw eee156;
						}
						cnt156++;
					}
					loop156:
						;

					} finally { DebugExitSubRule(156); }

					DebugLocation(512, 65);
					DEDENT362=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3901);  
					stream_DEDENT.Add(DEDENT362);

					DebugLocation(512, 72);
					// SugarCpp.g:512:72: ( NEWLINE )*
					try { DebugEnterSubRule(157);
					while (true)
					{
						int alt157=2;
						try { DebugEnterDecision(157, false);
						int LA157_0 = input.LA(1);

						if ((LA157_0==NEWLINE))
						{
							alt157 = 1;
						}


						} finally { DebugExitDecision(157); }
						switch ( alt157 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:72: NEWLINE
							{
							DebugLocation(512, 72);
							NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3903);  
							stream_NEWLINE.Add(NEWLINE363);


							}
							break;

						default:
							goto loop157;
						}
					}

					loop157:
						;

					} finally { DebugExitSubRule(157); }

					DebugLocation(512, 81);
					DEDENT364=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3906);  
					stream_DEDENT.Add(DEDENT364);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(512, 91);
						// SugarCpp.g:512:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(512, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(512, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(512, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(158); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:514:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(514, 9);
				string_literal365=(IToken)Match(input,168,Follow._168_in_where_expr3944);  
				stream_168.Add(string_literal365);

				DebugLocation(514, 17);
				// SugarCpp.g:514:17: ( NEWLINE )+
				int cnt159=0;
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0==NEWLINE))
					{
						alt159 = 1;
					}


					} finally { DebugExitDecision(159); }
					switch (alt159)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:17: NEWLINE
						{
						DebugLocation(514, 17);
						NEWLINE366=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3946);  
						stream_NEWLINE.Add(NEWLINE366);


						}
						break;

					default:
						if (cnt159 >= 1)
							goto loop159;

						EarlyExitException eee159 = new EarlyExitException( 159, input );
						DebugRecognitionException(eee159);
						throw eee159;
					}
					cnt159++;
				}
				loop159:
					;

				} finally { DebugExitSubRule(159); }

				DebugLocation(514, 26);
				INDENT367=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3949);  
				stream_INDENT.Add(INDENT367);

				DebugLocation(514, 33);
				// SugarCpp.g:514:33: ( NEWLINE )*
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=2;
					try { DebugEnterDecision(160, false);
					int LA160_0 = input.LA(1);

					if ((LA160_0==NEWLINE))
					{
						alt160 = 1;
					}


					} finally { DebugExitDecision(160); }
					switch ( alt160 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:33: NEWLINE
						{
						DebugLocation(514, 33);
						NEWLINE368=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3951);  
						stream_NEWLINE.Add(NEWLINE368);


						}
						break;

					default:
						goto loop160;
					}
				}

				loop160:
					;

				} finally { DebugExitSubRule(160); }

				DebugLocation(514, 42);
				// SugarCpp.g:514:42: ( where_item ( NEWLINE )+ )+
				int cnt162=0;
				try { DebugEnterSubRule(162);
				while (true)
				{
					int alt162=2;
					try { DebugEnterDecision(162, false);
					int LA162_0 = input.LA(1);

					if ((LA162_0==IDENT||LA162_0==83||LA162_0==88||LA162_0==90||LA162_0==92||(LA162_0>=94 && LA162_0<=95)||(LA162_0>=98 && LA162_0<=99)||LA162_0==125||LA162_0==138||(LA162_0>=142 && LA162_0<=144)||LA162_0==151||LA162_0==155||LA162_0==157||LA162_0==159||(LA162_0>=162 && LA162_0<=166)||LA162_0==169||LA162_0==173))
					{
						alt162 = 1;
					}


					} finally { DebugExitDecision(162); }
					switch (alt162)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:43: where_item ( NEWLINE )+
						{
						DebugLocation(514, 43);
						PushFollow(Follow._where_item_in_where_expr3955);
						where_item369=where_item();
						PopFollow();

						stream_where_item.Add(where_item369.Tree);
						DebugLocation(514, 54);
						// SugarCpp.g:514:54: ( NEWLINE )+
						int cnt161=0;
						try { DebugEnterSubRule(161);
						while (true)
						{
							int alt161=2;
							try { DebugEnterDecision(161, false);
							int LA161_0 = input.LA(1);

							if ((LA161_0==NEWLINE))
							{
								alt161 = 1;
							}


							} finally { DebugExitDecision(161); }
							switch (alt161)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:514:54: NEWLINE
								{
								DebugLocation(514, 54);
								NEWLINE370=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3957);  
								stream_NEWLINE.Add(NEWLINE370);


								}
								break;

							default:
								if (cnt161 >= 1)
									goto loop161;

								EarlyExitException eee161 = new EarlyExitException( 161, input );
								DebugRecognitionException(eee161);
								throw eee161;
							}
							cnt161++;
						}
						loop161:
							;

						} finally { DebugExitSubRule(161); }


						}
						break;

					default:
						if (cnt162 >= 1)
							goto loop162;

						EarlyExitException eee162 = new EarlyExitException( 162, input );
						DebugRecognitionException(eee162);
						throw eee162;
					}
					cnt162++;
				}
				loop162:
					;

				} finally { DebugExitSubRule(162); }

				DebugLocation(514, 65);
				DEDENT371=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3962);  
				stream_DEDENT.Add(DEDENT371);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 514:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(514, 75);
					// SugarCpp.g:514:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(514, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(514, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(514, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(514, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:515:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 515:15: -> expr
				{
					DebugLocation(515, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(163); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(517, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:519:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal372 = default(IToken);
		IToken string_literal374 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken INDENT377 = default(IToken);
		IToken NEWLINE378 = default(IToken);
		IToken NEWLINE380 = default(IToken);
		IToken DEDENT381 = default(IToken);
		IToken NEWLINE383 = default(IToken);
		IToken INDENT384 = default(IToken);
		IToken NEWLINE385 = default(IToken);
		IToken NEWLINE387 = default(IToken);
		IToken string_literal388 = default(IToken);
		IToken NEWLINE390 = default(IToken);
		IToken DEDENT391 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item373 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr382 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item386 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr389 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal372_tree = default(CommonTree);
		CommonTree string_literal374_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree INDENT377_tree = default(CommonTree);
		CommonTree NEWLINE378_tree = default(CommonTree);
		CommonTree NEWLINE380_tree = default(CommonTree);
		CommonTree DEDENT381_tree = default(CommonTree);
		CommonTree NEWLINE383_tree = default(CommonTree);
		CommonTree INDENT384_tree = default(CommonTree);
		CommonTree NEWLINE385_tree = default(CommonTree);
		CommonTree NEWLINE387_tree = default(CommonTree);
		CommonTree string_literal388_tree = default(CommonTree);
		CommonTree NEWLINE390_tree = default(CommonTree);
		CommonTree DEDENT391_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(519, 1);
		try
		{
			// SugarCpp.g:520:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:520:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(520, 4);
			string_literal372=(IToken)Match(input,149,Follow._149_in_let_expr4020);  
			stream_149.Add(string_literal372);

			DebugLocation(520, 10);
			PushFollow(Follow._where_item_in_let_expr4022);
			where_item373=where_item();
			PopFollow();

			stream_where_item.Add(where_item373.Tree);
			DebugLocation(520, 21);
			// SugarCpp.g:520:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			int LA174_0 = input.LA(1);

			if ((LA174_0==146))
			{
				alt174 = 1;
			}
			else if ((LA174_0==NEWLINE))
			{
				alt174 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 174, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:520:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(520, 23);
				string_literal374=(IToken)Match(input,146,Follow._146_in_let_expr4026);  
				stream_146.Add(string_literal374);

				DebugLocation(520, 28);
				// SugarCpp.g:520:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==IDENT||LA168_0==NUMBER||LA168_0==STRING||LA168_0==83||LA168_0==88||LA168_0==90||LA168_0==92||(LA168_0>=94 && LA168_0<=95)||(LA168_0>=98 && LA168_0<=99)||(LA168_0>=125 && LA168_0<=126)||LA168_0==149||LA168_0==152||(LA168_0>=154 && LA168_0<=155)||LA168_0==173))
				{
					alt168 = 1;
				}
				else if ((LA168_0==NEWLINE))
				{
					alt168 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:520:30: expr
					{
					DebugLocation(520, 30);
					PushFollow(Follow._expr_in_let_expr4030);
					expr375=expr();
					PopFollow();

					stream_expr.Add(expr375.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 520:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(520, 38);
						// SugarCpp.g:520:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(520, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(520, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(520, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(520, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:521:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(521, 12);
					// SugarCpp.g:521:12: ( NEWLINE )+
					int cnt164=0;
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==NEWLINE))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch (alt164)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:521:12: NEWLINE
							{
							DebugLocation(521, 12);
							NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4054);  
							stream_NEWLINE.Add(NEWLINE376);


							}
							break;

						default:
							if (cnt164 >= 1)
								goto loop164;

							EarlyExitException eee164 = new EarlyExitException( 164, input );
							DebugRecognitionException(eee164);
							throw eee164;
						}
						cnt164++;
					}
					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(521, 21);
					// SugarCpp.g:521:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt167=2;
					try { DebugEnterSubRule(167);
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==INDENT))
					{
						alt167 = 1;
					}
					else if ((LA167_0==IDENT||LA167_0==NUMBER||LA167_0==STRING||LA167_0==83||LA167_0==88||LA167_0==90||LA167_0==92||(LA167_0>=94 && LA167_0<=95)||(LA167_0>=98 && LA167_0<=99)||(LA167_0>=125 && LA167_0<=126)||LA167_0==149||LA167_0==152||(LA167_0>=154 && LA167_0<=155)||LA167_0==173))
					{
						alt167 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 167, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:521:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(521, 23);
						INDENT377=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4059);  
						stream_INDENT.Add(INDENT377);

						DebugLocation(521, 30);
						// SugarCpp.g:521:30: ( NEWLINE )*
						try { DebugEnterSubRule(165);
						while (true)
						{
							int alt165=2;
							try { DebugEnterDecision(165, false);
							int LA165_0 = input.LA(1);

							if ((LA165_0==NEWLINE))
							{
								alt165 = 1;
							}


							} finally { DebugExitDecision(165); }
							switch ( alt165 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:521:30: NEWLINE
								{
								DebugLocation(521, 30);
								NEWLINE378=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4061);  
								stream_NEWLINE.Add(NEWLINE378);


								}
								break;

							default:
								goto loop165;
							}
						}

						loop165:
							;

						} finally { DebugExitSubRule(165); }

						DebugLocation(521, 39);
						PushFollow(Follow._expr_in_let_expr4064);
						expr379=expr();
						PopFollow();

						stream_expr.Add(expr379.Tree);
						DebugLocation(521, 44);
						// SugarCpp.g:521:44: ( NEWLINE )+
						int cnt166=0;
						try { DebugEnterSubRule(166);
						while (true)
						{
							int alt166=2;
							try { DebugEnterDecision(166, false);
							int LA166_0 = input.LA(1);

							if ((LA166_0==NEWLINE))
							{
								alt166 = 1;
							}


							} finally { DebugExitDecision(166); }
							switch (alt166)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:521:44: NEWLINE
								{
								DebugLocation(521, 44);
								NEWLINE380=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4066);  
								stream_NEWLINE.Add(NEWLINE380);


								}
								break;

							default:
								if (cnt166 >= 1)
									goto loop166;

								EarlyExitException eee166 = new EarlyExitException( 166, input );
								DebugRecognitionException(eee166);
								throw eee166;
							}
							cnt166++;
						}
						loop166:
							;

						} finally { DebugExitSubRule(166); }

						DebugLocation(521, 53);
						DEDENT381=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4069);  
						stream_DEDENT.Add(DEDENT381);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 521:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(521, 63);
							// SugarCpp.g:521:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(521, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(521, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(521, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(521, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:522:14: expr
						{
						DebugLocation(522, 14);
						PushFollow(Follow._expr_in_let_expr4095);
						expr382=expr();
						PopFollow();

						stream_expr.Add(expr382.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 522:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(522, 22);
							// SugarCpp.g:522:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(522, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(522, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(522, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(522, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(167); }


					}
					break;

				}
				} finally { DebugExitSubRule(168); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:525:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(525, 11);
				// SugarCpp.g:525:11: ( NEWLINE )+
				int cnt169=0;
				try { DebugEnterSubRule(169);
				while (true)
				{
					int alt169=2;
					try { DebugEnterDecision(169, false);
					int LA169_0 = input.LA(1);

					if ((LA169_0==NEWLINE))
					{
						alt169 = 1;
					}


					} finally { DebugExitDecision(169); }
					switch (alt169)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:11: NEWLINE
						{
						DebugLocation(525, 11);
						NEWLINE383=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4142);  
						stream_NEWLINE.Add(NEWLINE383);


						}
						break;

					default:
						if (cnt169 >= 1)
							goto loop169;

						EarlyExitException eee169 = new EarlyExitException( 169, input );
						DebugRecognitionException(eee169);
						throw eee169;
					}
					cnt169++;
				}
				loop169:
					;

				} finally { DebugExitSubRule(169); }

				DebugLocation(525, 20);
				INDENT384=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4145);  
				stream_INDENT.Add(INDENT384);

				DebugLocation(525, 27);
				// SugarCpp.g:525:27: ( NEWLINE )*
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==NEWLINE))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch ( alt170 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:27: NEWLINE
						{
						DebugLocation(525, 27);
						NEWLINE385=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4147);  
						stream_NEWLINE.Add(NEWLINE385);


						}
						break;

					default:
						goto loop170;
					}
				}

				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(525, 36);
				// SugarCpp.g:525:36: ( where_item ( NEWLINE )+ )+
				int cnt172=0;
				try { DebugEnterSubRule(172);
				while (true)
				{
					int alt172=2;
					try { DebugEnterDecision(172, false);
					int LA172_0 = input.LA(1);

					if ((LA172_0==IDENT||LA172_0==83||LA172_0==88||LA172_0==90||LA172_0==92||(LA172_0>=94 && LA172_0<=95)||(LA172_0>=98 && LA172_0<=99)||LA172_0==125||LA172_0==138||(LA172_0>=142 && LA172_0<=144)||LA172_0==151||LA172_0==155||LA172_0==157||LA172_0==159||(LA172_0>=162 && LA172_0<=166)||LA172_0==169||LA172_0==173))
					{
						alt172 = 1;
					}


					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:37: where_item ( NEWLINE )+
						{
						DebugLocation(525, 37);
						PushFollow(Follow._where_item_in_let_expr4151);
						where_item386=where_item();
						PopFollow();

						stream_where_item.Add(where_item386.Tree);
						DebugLocation(525, 48);
						// SugarCpp.g:525:48: ( NEWLINE )+
						int cnt171=0;
						try { DebugEnterSubRule(171);
						while (true)
						{
							int alt171=2;
							try { DebugEnterDecision(171, false);
							int LA171_0 = input.LA(1);

							if ((LA171_0==NEWLINE))
							{
								alt171 = 1;
							}


							} finally { DebugExitDecision(171); }
							switch (alt171)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:525:48: NEWLINE
								{
								DebugLocation(525, 48);
								NEWLINE387=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4153);  
								stream_NEWLINE.Add(NEWLINE387);


								}
								break;

							default:
								if (cnt171 >= 1)
									goto loop171;

								EarlyExitException eee171 = new EarlyExitException( 171, input );
								DebugRecognitionException(eee171);
								throw eee171;
							}
							cnt171++;
						}
						loop171:
							;

						} finally { DebugExitSubRule(171); }


						}
						break;

					default:
						if (cnt172 >= 1)
							goto loop172;

						EarlyExitException eee172 = new EarlyExitException( 172, input );
						DebugRecognitionException(eee172);
						throw eee172;
					}
					cnt172++;
				}
				loop172:
					;

				} finally { DebugExitSubRule(172); }

				DebugLocation(525, 59);
				string_literal388=(IToken)Match(input,146,Follow._146_in_let_expr4158);  
				stream_146.Add(string_literal388);

				DebugLocation(525, 64);
				PushFollow(Follow._expr_in_let_expr4160);
				expr389=expr();
				PopFollow();

				stream_expr.Add(expr389.Tree);
				DebugLocation(525, 69);
				// SugarCpp.g:525:69: ( NEWLINE )+
				int cnt173=0;
				try { DebugEnterSubRule(173);
				while (true)
				{
					int alt173=2;
					try { DebugEnterDecision(173, false);
					int LA173_0 = input.LA(1);

					if ((LA173_0==NEWLINE))
					{
						alt173 = 1;
					}


					} finally { DebugExitDecision(173); }
					switch (alt173)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:69: NEWLINE
						{
						DebugLocation(525, 69);
						NEWLINE390=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4162);  
						stream_NEWLINE.Add(NEWLINE390);


						}
						break;

					default:
						if (cnt173 >= 1)
							goto loop173;

						EarlyExitException eee173 = new EarlyExitException( 173, input );
						DebugRecognitionException(eee173);
						throw eee173;
					}
					cnt173++;
				}
				loop173:
					;

				} finally { DebugExitSubRule(173); }

				DebugLocation(525, 78);
				DEDENT391=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4165);  
				stream_DEDENT.Add(DEDENT391);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 525:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(525, 88);
					// SugarCpp.g:525:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(525, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(525, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(525, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(525, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(174); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:529:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal392 = default(IToken);
		IToken string_literal394 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal392_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(529, 1);
		try
		{
			// SugarCpp.g:530:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:530:4: '|' expr '=>' where_expr
			{
			DebugLocation(530, 4);
			char_literal392=(IToken)Match(input,170,Follow._170_in_match_item4197);  
			stream_170.Add(char_literal392);

			DebugLocation(530, 8);
			PushFollow(Follow._expr_in_match_item4199);
			expr393=expr();
			PopFollow();

			stream_expr.Add(expr393.Tree);
			DebugLocation(530, 13);
			string_literal394=(IToken)Match(input,118,Follow._118_in_match_item4201);  
			stream_118.Add(string_literal394);

			DebugLocation(530, 18);
			PushFollow(Follow._where_expr_in_match_item4203);
			where_expr395=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr395.Tree);


			{
			// AST REWRITE
			// elements: expr, where_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 530:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(530, 32);
				// SugarCpp.g:530:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(530, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(530, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(530, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(531, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:533:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal396 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken INDENT399 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken NEWLINE402 = default(IToken);
		IToken DEDENT403 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr397 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal396_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree INDENT399_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree NEWLINE402_tree = default(CommonTree);
		CommonTree DEDENT403_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(533, 1);
		try
		{
			// SugarCpp.g:534:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:534:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(534, 4);
			string_literal396=(IToken)Match(input,152,Follow._152_in_match_expr4224);  
			stream_152.Add(string_literal396);

			DebugLocation(534, 12);
			// SugarCpp.g:534:12: ( expr )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_0 = input.LA(1);

			if ((LA175_0==IDENT||LA175_0==NUMBER||LA175_0==STRING||LA175_0==83||LA175_0==88||LA175_0==90||LA175_0==92||(LA175_0>=94 && LA175_0<=95)||(LA175_0>=98 && LA175_0<=99)||(LA175_0>=125 && LA175_0<=126)||LA175_0==149||LA175_0==152||(LA175_0>=154 && LA175_0<=155)||LA175_0==173))
			{
				alt175 = 1;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:534:12: expr
				{
				DebugLocation(534, 12);
				PushFollow(Follow._expr_in_match_expr4226);
				expr397=expr();
				PopFollow();

				stream_expr.Add(expr397.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(175); }

			DebugLocation(534, 18);
			// SugarCpp.g:534:18: ( NEWLINE )+
			int cnt176=0;
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==NEWLINE))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch (alt176)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:18: NEWLINE
					{
					DebugLocation(534, 18);
					NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4229);  
					stream_NEWLINE.Add(NEWLINE398);


					}
					break;

				default:
					if (cnt176 >= 1)
						goto loop176;

					EarlyExitException eee176 = new EarlyExitException( 176, input );
					DebugRecognitionException(eee176);
					throw eee176;
				}
				cnt176++;
			}
			loop176:
				;

			} finally { DebugExitSubRule(176); }

			DebugLocation(534, 27);
			INDENT399=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4232);  
			stream_INDENT.Add(INDENT399);

			DebugLocation(534, 34);
			// SugarCpp.g:534:34: ( NEWLINE )*
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==NEWLINE))
				{
					alt177 = 1;
				}


				} finally { DebugExitDecision(177); }
				switch ( alt177 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:34: NEWLINE
					{
					DebugLocation(534, 34);
					NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4234);  
					stream_NEWLINE.Add(NEWLINE400);


					}
					break;

				default:
					goto loop177;
				}
			}

			loop177:
				;

			} finally { DebugExitSubRule(177); }

			DebugLocation(534, 43);
			// SugarCpp.g:534:43: ( match_item ( NEWLINE )+ )+
			int cnt179=0;
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=2;
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==170))
				{
					alt179 = 1;
				}


				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:44: match_item ( NEWLINE )+
					{
					DebugLocation(534, 44);
					PushFollow(Follow._match_item_in_match_expr4238);
					match_item401=match_item();
					PopFollow();

					stream_match_item.Add(match_item401.Tree);
					DebugLocation(534, 55);
					// SugarCpp.g:534:55: ( NEWLINE )+
					int cnt178=0;
					try { DebugEnterSubRule(178);
					while (true)
					{
						int alt178=2;
						try { DebugEnterDecision(178, false);
						int LA178_0 = input.LA(1);

						if ((LA178_0==NEWLINE))
						{
							alt178 = 1;
						}


						} finally { DebugExitDecision(178); }
						switch (alt178)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:534:55: NEWLINE
							{
							DebugLocation(534, 55);
							NEWLINE402=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4240);  
							stream_NEWLINE.Add(NEWLINE402);


							}
							break;

						default:
							if (cnt178 >= 1)
								goto loop178;

							EarlyExitException eee178 = new EarlyExitException( 178, input );
							DebugRecognitionException(eee178);
							throw eee178;
						}
						cnt178++;
					}
					loop178:
						;

					} finally { DebugExitSubRule(178); }


					}
					break;

				default:
					if (cnt179 >= 1)
						goto loop179;

					EarlyExitException eee179 = new EarlyExitException( 179, input );
					DebugRecognitionException(eee179);
					throw eee179;
				}
				cnt179++;
			}
			loop179:
				;

			} finally { DebugExitSubRule(179); }

			DebugLocation(534, 66);
			DEDENT403=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4245);  
			stream_DEDENT.Add(DEDENT403);



			{
			// AST REWRITE
			// elements: match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 534:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(534, 76);
				// SugarCpp.g:534:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(534, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(534, 89);
				// SugarCpp.g:534:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(534, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(534, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(534, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:537:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr404 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr406 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(537, 1);
		try
		{
			// SugarCpp.g:538:2: ( list_expr | match_expr | let_expr )
			int alt180=3;
			try { DebugEnterDecision(180, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 83:
			case 88:
			case 90:
			case 92:
			case 94:
			case 95:
			case 98:
			case 99:
			case 125:
			case 126:
			case 154:
			case 155:
			case 173:
				{
				alt180 = 1;
				}
				break;
			case 152:
				{
				alt180 = 2;
				}
				break;
			case 149:
				{
				alt180 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:538:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(538, 4);
				PushFollow(Follow._list_expr_in_expr4268);
				list_expr404=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr404.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:539:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(539, 4);
				PushFollow(Follow._match_expr_in_expr4273);
				match_expr405=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr405.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:540:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(540, 4);
				PushFollow(Follow._let_expr_in_expr4278);
				let_expr406=let_expr();
				PopFollow();

				adaptor.AddChild(root_0, let_expr406.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:543:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 61);
		TraceIn("list_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal407 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken NEWLINE409 = default(IToken);
		IToken INDENT410 = default(IToken);
		IToken DEDENT411 = default(IToken);
		IToken char_literal413 = default(IToken);
		IToken NEWLINE414 = default(IToken);
		IToken INDENT415 = default(IToken);
		IToken DEDENT416 = default(IToken);
		IToken char_literal418 = default(IToken);
		IToken NEWLINE419 = default(IToken);
		IToken INDENT420 = default(IToken);
		IToken DEDENT421 = default(IToken);
		IToken char_literal422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal407_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree NEWLINE409_tree = default(CommonTree);
		CommonTree INDENT410_tree = default(CommonTree);
		CommonTree DEDENT411_tree = default(CommonTree);
		CommonTree char_literal413_tree = default(CommonTree);
		CommonTree NEWLINE414_tree = default(CommonTree);
		CommonTree INDENT415_tree = default(CommonTree);
		CommonTree DEDENT416_tree = default(CommonTree);
		CommonTree char_literal418_tree = default(CommonTree);
		CommonTree NEWLINE419_tree = default(CommonTree);
		CommonTree INDENT420_tree = default(CommonTree);
		CommonTree DEDENT421_tree = default(CommonTree);
		CommonTree char_literal422_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(543, 1);
		try
		{
			// SugarCpp.g:544:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt186=2;
			try { DebugEnterDecision(186, false);
			int LA186_0 = input.LA(1);

			if ((LA186_0==126))
			{
				alt186 = 1;
			}
			else if ((LA186_0==IDENT||LA186_0==NUMBER||LA186_0==STRING||LA186_0==83||LA186_0==88||LA186_0==90||LA186_0==92||(LA186_0>=94 && LA186_0<=95)||(LA186_0>=98 && LA186_0<=99)||LA186_0==125||(LA186_0>=154 && LA186_0<=155)||LA186_0==173))
			{
				alt186 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:544:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(544, 4);
				char_literal407=(IToken)Match(input,126,Follow._126_in_list_expr4289);  
				stream_126.Add(char_literal407);

				DebugLocation(544, 8);
				// SugarCpp.g:544:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				try
				{
					alt184 = dfa184.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:544:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(544, 9);
					// SugarCpp.g:544:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(181);
					while (true)
					{
						int alt181=5;
						try { DebugEnterDecision(181, false);
						switch (input.LA(1))
						{
						case 97:
							{
							alt181 = 1;
							}
							break;
						case NEWLINE:
							{
							alt181 = 2;
							}
							break;
						case INDENT:
							{
							alt181 = 3;
							}
							break;
						case DEDENT:
							{
							alt181 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(181); }
						switch ( alt181 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:544:10: ','
							{
							DebugLocation(544, 10);
							char_literal408=(IToken)Match(input,97,Follow._97_in_list_expr4293);  
							stream_97.Add(char_literal408);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:544:16: NEWLINE
							{
							DebugLocation(544, 16);
							NEWLINE409=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4297);  
							stream_NEWLINE.Add(NEWLINE409);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:544:26: INDENT
							{
							DebugLocation(544, 26);
							INDENT410=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4301);  
							stream_INDENT.Add(INDENT410);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:544:35: DEDENT
							{
							DebugLocation(544, 35);
							DEDENT411=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4305);  
							stream_DEDENT.Add(DEDENT411);


							}
							break;

						default:
							goto loop181;
						}
					}

					loop181:
						;

					} finally { DebugExitSubRule(181); }

					DebugLocation(544, 44);
					PushFollow(Follow._list_expr_in_list_expr4309);
					list_expr412=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr412.Tree);
					DebugLocation(544, 54);
					// SugarCpp.g:544:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(183);
					while (true)
					{
						int alt183=2;
						try { DebugEnterDecision(183, false);
						try
						{
							alt183 = dfa183.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(183); }
						switch ( alt183 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:544:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(544, 55);
							// SugarCpp.g:544:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt182=0;
							try { DebugEnterSubRule(182);
							while (true)
							{
								int alt182=5;
								try { DebugEnterDecision(182, false);
								switch (input.LA(1))
								{
								case 97:
									{
									alt182 = 1;
									}
									break;
								case NEWLINE:
									{
									alt182 = 2;
									}
									break;
								case INDENT:
									{
									alt182 = 3;
									}
									break;
								case DEDENT:
									{
									alt182 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(182); }
								switch (alt182)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:544:56: ','
									{
									DebugLocation(544, 56);
									char_literal413=(IToken)Match(input,97,Follow._97_in_list_expr4313);  
									stream_97.Add(char_literal413);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:544:62: NEWLINE
									{
									DebugLocation(544, 62);
									NEWLINE414=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4317);  
									stream_NEWLINE.Add(NEWLINE414);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:544:72: INDENT
									{
									DebugLocation(544, 72);
									INDENT415=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4321);  
									stream_INDENT.Add(INDENT415);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:544:81: DEDENT
									{
									DebugLocation(544, 81);
									DEDENT416=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4325);  
									stream_DEDENT.Add(DEDENT416);


									}
									break;

								default:
									if (cnt182 >= 1)
										goto loop182;

									EarlyExitException eee182 = new EarlyExitException( 182, input );
									DebugRecognitionException(eee182);
									throw eee182;
								}
								cnt182++;
							}
							loop182:
								;

							} finally { DebugExitSubRule(182); }

							DebugLocation(544, 90);
							PushFollow(Follow._list_expr_in_list_expr4329);
							list_expr417=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr417.Tree);

							}
							break;

						default:
							goto loop183;
						}
					}

					loop183:
						;

					} finally { DebugExitSubRule(183); }


					}
					break;

				}
				} finally { DebugExitSubRule(184); }

				DebugLocation(544, 104);
				// SugarCpp.g:544:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(185);
				while (true)
				{
					int alt185=5;
					try { DebugEnterDecision(185, false);
					switch (input.LA(1))
					{
					case 97:
						{
						alt185 = 1;
						}
						break;
					case NEWLINE:
						{
						alt185 = 2;
						}
						break;
					case INDENT:
						{
						alt185 = 3;
						}
						break;
					case DEDENT:
						{
						alt185 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(185); }
					switch ( alt185 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:544:105: ','
						{
						DebugLocation(544, 105);
						char_literal418=(IToken)Match(input,97,Follow._97_in_list_expr4336);  
						stream_97.Add(char_literal418);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:544:111: NEWLINE
						{
						DebugLocation(544, 111);
						NEWLINE419=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4340);  
						stream_NEWLINE.Add(NEWLINE419);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:544:121: INDENT
						{
						DebugLocation(544, 121);
						INDENT420=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4344);  
						stream_INDENT.Add(INDENT420);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:544:130: DEDENT
						{
						DebugLocation(544, 130);
						DEDENT421=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4348);  
						stream_DEDENT.Add(DEDENT421);


						}
						break;

					default:
						goto loop185;
					}
				}

				loop185:
					;

				} finally { DebugExitSubRule(185); }

				DebugLocation(544, 139);
				char_literal422=(IToken)Match(input,127,Follow._127_in_list_expr4352);  
				stream_127.Add(char_literal422);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 544:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(544, 146);
					// SugarCpp.g:544:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(544, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(544, 158);
					// SugarCpp.g:544:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(544, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:545:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(545, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4366);
				lambda_expr423=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr423.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 61);
			LeaveRule("list_expr", 61);
			LeaveRule_list_expr();
		}
		DebugLocation(546, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:548:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 62);
		TraceIn("lambda_value", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE425 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block426 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE425_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(548, 1);
		try
		{
			// SugarCpp.g:549:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt188=2;
			try { DebugEnterDecision(188, false);
			int LA188_0 = input.LA(1);

			if ((LA188_0==IDENT||LA188_0==NUMBER||LA188_0==STRING||LA188_0==83||LA188_0==88||LA188_0==90||LA188_0==92||(LA188_0>=94 && LA188_0<=95)||(LA188_0>=98 && LA188_0<=99)||(LA188_0>=125 && LA188_0<=126)||LA188_0==149||LA188_0==152||(LA188_0>=154 && LA188_0<=155)||LA188_0==173))
			{
				alt188 = 1;
			}
			else if ((LA188_0==NEWLINE))
			{
				alt188 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 188, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:549:4: expr
				{
				DebugLocation(549, 4);
				PushFollow(Follow._expr_in_lambda_value4377);
				expr424=expr();
				PopFollow();

				stream_expr.Add(expr424.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 549:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(549, 12);
					// SugarCpp.g:549:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(549, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(549, 25);
					// SugarCpp.g:549:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(549, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(549, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:550:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(550, 4);
				// SugarCpp.g:550:4: ( NEWLINE )+
				int cnt187=0;
				try { DebugEnterSubRule(187);
				while (true)
				{
					int alt187=2;
					try { DebugEnterDecision(187, false);
					int LA187_0 = input.LA(1);

					if ((LA187_0==NEWLINE))
					{
						alt187 = 1;
					}


					} finally { DebugExitDecision(187); }
					switch (alt187)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:550:4: NEWLINE
						{
						DebugLocation(550, 4);
						NEWLINE425=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4394);  
						stream_NEWLINE.Add(NEWLINE425);


						}
						break;

					default:
						if (cnt187 >= 1)
							goto loop187;

						EarlyExitException eee187 = new EarlyExitException( 187, input );
						DebugRecognitionException(eee187);
						throw eee187;
					}
					cnt187++;
				}
				loop187:
					;

				} finally { DebugExitSubRule(187); }

				DebugLocation(550, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4397);
				stmt_block426=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block426.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 550:24: -> stmt_block
				{
					DebugLocation(550, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 62);
			LeaveRule("lambda_value", 62);
			LeaveRule_lambda_value();
		}
		DebugLocation(551, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:553:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 63);
		TraceIn("lambda_type", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal427 = default(IToken);
		IToken char_literal429 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name428 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal427_tree = default(CommonTree);
		CommonTree char_literal429_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(553, 1);
		try
		{
			// SugarCpp.g:554:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:554:4: '(' type_name ')'
			{
			DebugLocation(554, 4);
			char_literal427=(IToken)Match(input,90,Follow._90_in_lambda_type4412);  
			stream_90.Add(char_literal427);

			DebugLocation(554, 8);
			PushFollow(Follow._type_name_in_lambda_type4414);
			type_name428=type_name();
			PopFollow();

			stream_type_name.Add(type_name428.Tree);
			DebugLocation(554, 18);
			char_literal429=(IToken)Match(input,91,Follow._91_in_lambda_type4416);  
			stream_91.Add(char_literal429);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 554:22: -> type_name
			{
				DebugLocation(554, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 63);
			LeaveRule("lambda_type", 63);
			LeaveRule_lambda_type();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:557:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 64);
		TraceIn("lambda_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal430 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken string_literal434 = default(IToken);
		IToken string_literal436 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args431 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr438 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal430_tree = default(CommonTree);
		CommonTree char_literal432_tree = default(CommonTree);
		CommonTree string_literal434_tree = default(CommonTree);
		CommonTree string_literal436_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(557, 1);
		try
		{
			// SugarCpp.g:558:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt192=2;
			try { DebugEnterDecision(192, false);
			try
			{
				alt192 = dfa192.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:558:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(558, 4);
				char_literal430=(IToken)Match(input,90,Follow._90_in_lambda_expr4431);  
				stream_90.Add(char_literal430);

				DebugLocation(558, 8);
				// SugarCpp.g:558:8: ( func_args )?
				int alt189=2;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==IDENT||LA189_0==109))
				{
					alt189 = 1;
				}
				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:8: func_args
					{
					DebugLocation(558, 8);
					PushFollow(Follow._func_args_in_lambda_expr4433);
					func_args431=func_args();
					PopFollow();

					stream_func_args.Add(func_args431.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(189); }

				DebugLocation(558, 19);
				char_literal432=(IToken)Match(input,91,Follow._91_in_lambda_expr4436);  
				stream_91.Add(char_literal432);

				DebugLocation(558, 23);
				// SugarCpp.g:558:23: ( lambda_type )?
				int alt190=2;
				try { DebugEnterSubRule(190);
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==90))
				{
					alt190 = 1;
				}
				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:23: lambda_type
					{
					DebugLocation(558, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4438);
					lambda_type433=lambda_type();
					PopFollow();

					stream_lambda_type.Add(lambda_type433.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(190); }

				DebugLocation(558, 36);
				// SugarCpp.g:558:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt191=2;
				try { DebugEnterSubRule(191);
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==101))
				{
					alt191 = 1;
				}
				else if ((LA191_0==118))
				{
					alt191 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:38: '->' lambda_value
					{
					DebugLocation(558, 38);
					string_literal434=(IToken)Match(input,101,Follow._101_in_lambda_expr4443);  
					stream_101.Add(string_literal434);

					DebugLocation(558, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4445);
					lambda_value435=lambda_value();
					PopFollow();

					stream_lambda_value.Add(lambda_value435.Tree);


					{
					// AST REWRITE
					// elements: 101, func_args, lambda_type, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 558:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(558, 60);
						// SugarCpp.g:558:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(558, 74);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(558, 79);
						// SugarCpp.g:558:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(558, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(558, 90);
						// SugarCpp.g:558:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(558, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(558, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:559:17: '=>' lambda_value
					{
					DebugLocation(559, 17);
					string_literal436=(IToken)Match(input,118,Follow._118_in_lambda_expr4480);  
					stream_118.Add(string_literal436);

					DebugLocation(559, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4482);
					lambda_value437=lambda_value();
					PopFollow();

					stream_lambda_value.Add(lambda_value437.Tree);


					{
					// AST REWRITE
					// elements: func_args, lambda_value, lambda_type, 118
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 559:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(559, 39);
						// SugarCpp.g:559:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(559, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(559, 53);
						adaptor.AddChild(root_1, stream_118.NextNode());
						DebugLocation(559, 58);
						// SugarCpp.g:559:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(559, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(559, 69);
						// SugarCpp.g:559:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(559, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(559, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(191); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:560:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(560, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4505);
				modify_expr438=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr438.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 64);
			LeaveRule("lambda_expr", 64);
			LeaveRule_lambda_expr();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:563:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 65);
		TraceIn("modify_expr_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set439 = default(IToken);

		CommonTree set439_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(563, 91);
		try
		{
			// SugarCpp.g:563:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(563, 15);

			set439=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==96||input.LA(1)==100||input.LA(1)==106||input.LA(1)==114||input.LA(1)==116||input.LA(1)==122||input.LA(1)==129||input.LA(1)==171)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set439));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 65);
			LeaveRule("modify_expr_op", 65);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(563, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:564:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 66);
		TraceIn("modify_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set441 = default(IToken);
		IToken char_literal443 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr440 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr442 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set441_tree = default(CommonTree);
		CommonTree char_literal443_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(564, 1);
		try
		{
			// SugarCpp.g:565:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:565:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(565, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4562);
			cond_expr440=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr440.Tree);
			DebugLocation(565, 14);
			// SugarCpp.g:565:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt194=3;
			try { DebugEnterSubRule(194);
			try { DebugEnterDecision(194, false);
			int LA194_0 = input.LA(1);

			if ((LA194_0==86||LA194_0==89||LA194_0==93||LA194_0==96||LA194_0==100||LA194_0==106||LA194_0==109||LA194_0==114||LA194_0==122||LA194_0==129||LA194_0==171))
			{
				alt194 = 1;
			}
			else if ((LA194_0==116))
			{
				alt194 = 2;
			}
			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:565:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(565, 94);

				set441=(IToken)input.LT(1);
				set441=(IToken)input.LT(1);
				if (input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==96||input.LA(1)==100||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==122||input.LA(1)==129||input.LA(1)==171)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set441), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(565, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4611);
				cond_expr442=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr442.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:566:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(566, 7);
				// SugarCpp.g:566:7: ( '=' ^ cond_expr )+
				int cnt193=0;
				try { DebugEnterSubRule(193);
				while (true)
				{
					int alt193=2;
					try { DebugEnterDecision(193, false);
					int LA193_0 = input.LA(1);

					if ((LA193_0==116))
					{
						alt193 = 1;
					}


					} finally { DebugExitDecision(193); }
					switch (alt193)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:566:8: '=' ^ cond_expr
						{
						DebugLocation(566, 11);
						char_literal443=(IToken)Match(input,116,Follow._116_in_modify_expr4620); 
						char_literal443_tree = (CommonTree)adaptor.Create(char_literal443);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal443_tree, root_0);
						DebugLocation(566, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4623);
						cond_expr444=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr444.Tree);

						}
						break;

					default:
						if (cnt193 >= 1)
							goto loop193;

						EarlyExitException eee193 = new EarlyExitException( 193, input );
						DebugRecognitionException(eee193);
						throw eee193;
					}
					cnt193++;
				}
				loop193:
					;

				} finally { DebugExitSubRule(193); }


				}
				break;

			}
			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 66);
			LeaveRule("modify_expr", 66);
			LeaveRule_modify_expr();
		}
		DebugLocation(567, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:569:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 67);
		TraceIn("cond_expr_item", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(569, 24);
		try
		{
			// SugarCpp.g:569:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:569:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(569, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4636);
			or_expr445=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr445.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 67);
			LeaveRule("cond_expr_item", 67);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(569, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:570:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 68);
		TraceIn("cond_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal446 = default(IToken);
		IToken char_literal447 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(570, 1);
		try
		{
			// SugarCpp.g:571:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:571:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(571, 4);
			// SugarCpp.g:571:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:571:5: a= or_expr
			{
			DebugLocation(571, 6);
			PushFollow(Follow._or_expr_in_cond_expr4648);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 571:15: -> $a
			{
				DebugLocation(571, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(571, 22);
			// SugarCpp.g:571:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_0 = input.LA(1);

			if ((LA197_0==123))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:571:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(571, 23);
				char_literal446=(IToken)Match(input,123,Follow._123_in_cond_expr4657);  
				stream_123.Add(char_literal446);

				DebugLocation(571, 27);
				// SugarCpp.g:571:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==IDENT||LA196_0==NUMBER||LA196_0==STRING||LA196_0==83||LA196_0==88||LA196_0==90||LA196_0==92||(LA196_0>=94 && LA196_0<=95)||(LA196_0>=98 && LA196_0<=99)||LA196_0==125||(LA196_0>=154 && LA196_0<=155)||LA196_0==173))
				{
					alt196 = 1;
				}
				else if ((LA196_0==DEDENT||LA196_0==INDENT||LA196_0==NEWLINE||LA196_0==86||LA196_0==89||LA196_0==91||LA196_0==93||(LA196_0>=96 && LA196_0<=97)||LA196_0==100||LA196_0==106||(LA196_0>=109 && LA196_0<=110)||LA196_0==114||LA196_0==116||LA196_0==118||LA196_0==122||LA196_0==127||LA196_0==129||LA196_0==133||LA196_0==139||(LA196_0>=143 && LA196_0<=144)||LA196_0==146||(LA196_0>=160 && LA196_0<=161)||(LA196_0>=164 && LA196_0<=165)||(LA196_0>=168 && LA196_0<=169)||LA196_0==171))
				{
					alt196 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(571, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4663);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(571, 46);
					// SugarCpp.g:571:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt195=2;
					try { DebugEnterSubRule(195);
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==107))
					{
						alt195 = 1;
					}
					else if ((LA195_0==DEDENT||LA195_0==INDENT||LA195_0==NEWLINE||LA195_0==86||LA195_0==89||LA195_0==91||LA195_0==93||(LA195_0>=96 && LA195_0<=97)||LA195_0==100||LA195_0==106||(LA195_0>=109 && LA195_0<=110)||LA195_0==114||LA195_0==116||LA195_0==118||LA195_0==122||LA195_0==127||LA195_0==129||LA195_0==133||LA195_0==139||(LA195_0>=143 && LA195_0<=144)||LA195_0==146||(LA195_0>=160 && LA195_0<=161)||(LA195_0>=164 && LA195_0<=165)||(LA195_0>=168 && LA195_0<=169)||LA195_0==171))
					{
						alt195 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 195, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(195); }
					switch (alt195)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:571:48: ':' b= cond_expr_item
						{
						DebugLocation(571, 48);
						char_literal447=(IToken)Match(input,107,Follow._107_in_cond_expr4667);  
						stream_107.Add(char_literal447);

						DebugLocation(571, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4671);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 571:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(571, 72);
							// SugarCpp.g:571:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(571, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(571, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(571, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(571, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:572:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 572:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(572, 20);
							// SugarCpp.g:572:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(572, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(572, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(572, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(195); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:574:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(574, 14);
						// SugarCpp.g:574:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(574, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(196); }


				}
				break;

			}
			} finally { DebugExitSubRule(197); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 68);
			LeaveRule("cond_expr", 68);
			LeaveRule_cond_expr();
		}
		DebugLocation(576, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:578:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 69);
		TraceIn("or_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set448 = default(IToken);

		CommonTree set448_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(578, 19);
		try
		{
			// SugarCpp.g:578:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(578, 6);

			set448=(IToken)input.LT(1);
			if (input.LA(1)==156||input.LA(1)==172)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set448));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 69);
			LeaveRule("or_op", 69);
			LeaveRule_or_op();
		}
		DebugLocation(578, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:579:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 70);
		TraceIn("or_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(579, 1);
		try
		{
			// SugarCpp.g:580:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:580:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(580, 4);
			// SugarCpp.g:580:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:580:5: a= and_expr
			{
			DebugLocation(580, 6);
			PushFollow(Follow._and_expr_in_or_expr4785);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 580:16: -> $a
			{
				DebugLocation(580, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(580, 23);
			// SugarCpp.g:580:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(198);
			while (true)
			{
				int alt198=2;
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==156||LA198_0==172))
				{
					alt198 = 1;
				}


				} finally { DebugExitDecision(198); }
				switch ( alt198 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:24: op= or_op b= and_expr
					{
					DebugLocation(580, 26);
					PushFollow(Follow._or_op_in_or_expr4796);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(580, 34);
					PushFollow(Follow._and_expr_in_or_expr4800);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, or_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 580:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(580, 47);
						// SugarCpp.g:580:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(580, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(580, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(580, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(580, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop198;
				}
			}

			loop198:
				;

			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 70);
			LeaveRule("or_expr", 70);
			LeaveRule_or_expr();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:583:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 71);
		TraceIn("and_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set449 = default(IToken);

		CommonTree set449_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(583, 21);
		try
		{
			// SugarCpp.g:583:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(583, 7);

			set449=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==131)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set449));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 71);
			LeaveRule("and_op", 71);
			LeaveRule_and_op();
		}
		DebugLocation(583, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:584:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 72);
		TraceIn("and_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(584, 1);
		try
		{
			// SugarCpp.g:585:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:585:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(585, 4);
			// SugarCpp.g:585:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:585:5: a= bit_or
			{
			DebugLocation(585, 6);
			PushFollow(Follow._bit_or_in_and_expr4842);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 585:14: -> $a
			{
				DebugLocation(585, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(585, 21);
			// SugarCpp.g:585:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(199);
			while (true)
			{
				int alt199=2;
				try { DebugEnterDecision(199, false);
				int LA199_0 = input.LA(1);

				if ((LA199_0==87||LA199_0==131))
				{
					alt199 = 1;
				}


				} finally { DebugExitDecision(199); }
				switch ( alt199 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:585:22: op= and_op b= bit_or
					{
					DebugLocation(585, 24);
					PushFollow(Follow._and_op_in_and_expr4853);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(585, 33);
					PushFollow(Follow._bit_or_in_and_expr4857);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, and_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 585:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(585, 44);
						// SugarCpp.g:585:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(585, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(585, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(585, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(585, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop199;
				}
			}

			loop199:
				;

			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 72);
			LeaveRule("and_expr", 72);
			LeaveRule_and_expr();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:588:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 73);
		TraceIn("bit_or", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal450 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal450_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(588, 1);
		try
		{
			// SugarCpp.g:589:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:589:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(589, 4);
			// SugarCpp.g:589:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:589:5: a= bit_xor
			{
			DebugLocation(589, 6);
			PushFollow(Follow._bit_xor_in_bit_or4888);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 589:15: -> $a
			{
				DebugLocation(589, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(589, 22);
			// SugarCpp.g:589:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==170))
				{
					alt200 = 1;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:589:23: '|' b= bit_xor
					{
					DebugLocation(589, 23);
					char_literal450=(IToken)Match(input,170,Follow._170_in_bit_or4897);  
					stream_170.Add(char_literal450);

					DebugLocation(589, 28);
					PushFollow(Follow._bit_xor_in_bit_or4901);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 170, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(589, 40);
						// SugarCpp.g:589:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(589, 51);
						adaptor.AddChild(root_1, stream_170.NextNode());
						DebugLocation(589, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(589, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 73);
			LeaveRule("bit_or", 73);
			LeaveRule_bit_or();
		}
		DebugLocation(590, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:592:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 74);
		TraceIn("bit_xor", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal451 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal451_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(592, 1);
		try
		{
			// SugarCpp.g:593:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:593:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(593, 4);
			// SugarCpp.g:593:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:593:5: a= bit_and
			{
			DebugLocation(593, 6);
			PushFollow(Follow._bit_and_in_bit_xor4931);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 593:15: -> $a
			{
				DebugLocation(593, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(593, 22);
			// SugarCpp.g:593:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==128))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:593:23: '^' b= bit_and
					{
					DebugLocation(593, 23);
					char_literal451=(IToken)Match(input,128,Follow._128_in_bit_xor4940);  
					stream_128.Add(char_literal451);

					DebugLocation(593, 28);
					PushFollow(Follow._bit_and_in_bit_xor4944);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 128, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 593:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(593, 40);
						// SugarCpp.g:593:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(593, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(593, 51);
						adaptor.AddChild(root_1, stream_128.NextNode());
						DebugLocation(593, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(593, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 74);
			LeaveRule("bit_xor", 74);
			LeaveRule_bit_xor();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:596:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 75);
		TraceIn("bit_and", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal452 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal452_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(596, 1);
		try
		{
			// SugarCpp.g:597:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:597:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(597, 4);
			// SugarCpp.g:597:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:597:5: a= cmp_expr
			{
			DebugLocation(597, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4974);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 597:16: -> $a
			{
				DebugLocation(597, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(597, 23);
			// SugarCpp.g:597:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(202);
			while (true)
			{
				int alt202=2;
				try { DebugEnterDecision(202, false);
				int LA202_0 = input.LA(1);

				if ((LA202_0==88))
				{
					alt202 = 1;
				}


				} finally { DebugExitDecision(202); }
				switch ( alt202 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:597:24: '&' b= cmp_expr
					{
					DebugLocation(597, 24);
					char_literal452=(IToken)Match(input,88,Follow._88_in_bit_and4983);  
					stream_88.Add(char_literal452);

					DebugLocation(597, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4987);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 88, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 597:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(597, 42);
						// SugarCpp.g:597:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(597, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(597, 53);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(597, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(597, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop202;
				}
			}

			loop202:
				;

			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 75);
			LeaveRule("bit_and", 75);
			LeaveRule_bit_and();
		}
		DebugLocation(598, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:600:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 76);
		TraceIn("chain_op", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set453 = default(IToken);

		CommonTree set453_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(600, 64);
		try
		{
			// SugarCpp.g:600:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(600, 9);

			set453=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==111||input.LA(1)==115||input.LA(1)==117||(input.LA(1)>=119 && input.LA(1)<=120)||(input.LA(1)>=147 && input.LA(1)<=148))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set453));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 76);
			LeaveRule("chain_op", 76);
			LeaveRule_chain_op();
		}
		DebugLocation(600, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:601:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 77);
		TraceIn("no_less_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set454 = default(IToken);

		CommonTree set454_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(601, 60);
		try
		{
			// SugarCpp.g:601:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(601, 11);

			set454=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==115||input.LA(1)==117||(input.LA(1)>=119 && input.LA(1)<=120)||(input.LA(1)>=147 && input.LA(1)<=148))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set454));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 77);
			LeaveRule("no_less_op", 77);
			LeaveRule_no_less_op();
		}
		DebugLocation(601, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:602:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 78);
		TraceIn("chain_list", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op455 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr456 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(602, 35);
		try
		{
			// SugarCpp.g:602:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:602:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(602, 13);
			// SugarCpp.g:602:13: ( chain_op shift_expr )+
			int cnt203=0;
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==84||LA203_0==111||LA203_0==115||LA203_0==117||(LA203_0>=119 && LA203_0<=120)||(LA203_0>=147 && LA203_0<=148)))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:602:14: chain_op shift_expr
					{
					DebugLocation(602, 14);
					PushFollow(Follow._chain_op_in_chain_list5079);
					chain_op455=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op455.Tree);
					DebugLocation(602, 23);
					PushFollow(Follow._shift_expr_in_chain_list5081);
					shift_expr456=shift_expr();
					PopFollow();

					adaptor.AddChild(root_0, shift_expr456.Tree);

					}
					break;

				default:
					if (cnt203 >= 1)
						goto loop203;

					EarlyExitException eee203 = new EarlyExitException( 203, input );
					DebugRecognitionException(eee203);
					throw eee203;
				}
				cnt203++;
			}
			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 78);
			LeaveRule("chain_list", 78);
			LeaveRule_chain_list();
		}
		DebugLocation(602, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:603:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 79);
		TraceIn("cmp_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal457 = default(IToken);
		IToken char_literal459 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident458 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list461 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list462 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal457_tree = default(CommonTree);
		CommonTree char_literal459_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(603, 1);
		try
		{
			// SugarCpp.g:604:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:604:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(604, 4);
			// SugarCpp.g:604:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:604:5: a= shift_expr
			{
			DebugLocation(604, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5095);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 604:18: -> $a
			{
				DebugLocation(604, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(604, 25);
			// SugarCpp.g:604:25: ( '<' b= shift_expr ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt207=3;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_0 = input.LA(1);

			if ((LA207_0==111))
			{
				alt207 = 1;
			}
			else if ((LA207_0==84||LA207_0==115||LA207_0==117||(LA207_0>=119 && LA207_0<=120)||(LA207_0>=147 && LA207_0<=148)))
			{
				alt207 = 2;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:604:27: '<' b= shift_expr ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(604, 27);
				char_literal457=(IToken)Match(input,111,Follow._111_in_cmp_expr5105);  
				stream_111.Add(char_literal457);

				DebugLocation(604, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr5109);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(604, 44);
				// SugarCpp.g:604:44: ({...}? ( ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt205=3;
				try { DebugEnterSubRule(205);
				try { DebugEnterDecision(205, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt205 = 1;
					}
					break;
				case 119:
					{
					int LA205_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt205 = 1;
					}
					else if ((true))
					{
						alt205 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 205, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 84:
				case 111:
				case 115:
				case 117:
				case 120:
				case 147:
				case 148:
					{
					alt205 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 86:
				case 87:
				case 88:
				case 89:
				case 91:
				case 93:
				case 96:
				case 97:
				case 100:
				case 106:
				case 107:
				case 109:
				case 110:
				case 114:
				case 116:
				case 118:
				case 122:
				case 123:
				case 127:
				case 128:
				case 129:
				case 131:
				case 133:
				case 139:
				case 143:
				case 144:
				case 146:
				case 156:
				case 160:
				case 161:
				case 164:
				case 165:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
					{
					alt205 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 205, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:604:46: {...}? ( ident )* '>' bracket_expr_list
					{
					DebugLocation(604, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(604, 76);
					// SugarCpp.g:604:76: ( ident )*
					try { DebugEnterSubRule(204);
					while (true)
					{
						int alt204=2;
						try { DebugEnterDecision(204, false);
						int LA204_0 = input.LA(1);

						if ((LA204_0==IDENT))
						{
							alt204 = 1;
						}


						} finally { DebugExitDecision(204); }
						switch ( alt204 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:604:76: ident
							{
							DebugLocation(604, 76);
							PushFollow(Follow._ident_in_cmp_expr5115);
							ident458=ident();
							PopFollow();

							stream_ident.Add(ident458.Tree);

							}
							break;

						default:
							goto loop204;
						}
					}

					loop204:
						;

					} finally { DebugExitSubRule(204); }

					DebugLocation(604, 83);
					char_literal459=(IToken)Match(input,119,Follow._119_in_cmp_expr5118);  
					stream_119.Add(char_literal459);

					DebugLocation(604, 87);
					PushFollow(Follow._bracket_expr_list_in_cmp_expr5120);
					bracket_expr_list460=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list460.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, bracket_expr_list, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 604:105: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list )
					{
						DebugLocation(604, 108);
						// SugarCpp.g:604:108: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(604, 110);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(604, 121);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(604, 130);
						// SugarCpp.g:604:130: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(604, 132);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(604, 152);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(604, 154);
						// SugarCpp.g:604:154: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(604, 154);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(604, 162);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:605:46: chain_list
					{
					DebugLocation(605, 46);
					PushFollow(Follow._chain_list_in_cmp_expr5188);
					chain_list461=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list461.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, chain_list, b, 111
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 605:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(605, 60);
						// SugarCpp.g:605:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(605, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(605, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(605, 84);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(605, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(605, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:606:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 111
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(606, 19);
						// SugarCpp.g:606:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(606, 30);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(606, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(606, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(205); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:607:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(607, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5265);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(607, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5269);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(607, 54);
				// SugarCpp.g:607:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt206=2;
				try { DebugEnterSubRule(206);
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==84||LA206_0==111||LA206_0==115||LA206_0==117||(LA206_0>=119 && LA206_0<=120)||(LA206_0>=147 && LA206_0<=148)))
				{
					alt206 = 1;
				}
				else if ((LA206_0==DEDENT||LA206_0==INDENT||LA206_0==NEWLINE||(LA206_0>=86 && LA206_0<=89)||LA206_0==91||LA206_0==93||(LA206_0>=96 && LA206_0<=97)||LA206_0==100||(LA206_0>=106 && LA206_0<=107)||(LA206_0>=109 && LA206_0<=110)||LA206_0==114||LA206_0==116||LA206_0==118||(LA206_0>=122 && LA206_0<=123)||(LA206_0>=127 && LA206_0<=129)||LA206_0==131||LA206_0==133||LA206_0==139||(LA206_0>=143 && LA206_0<=144)||LA206_0==146||LA206_0==156||(LA206_0>=160 && LA206_0<=161)||(LA206_0>=164 && LA206_0<=165)||(LA206_0>=168 && LA206_0<=172)))
				{
					alt206 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:607:56: chain_list
					{
					DebugLocation(607, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5273);
					chain_list462=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list462.Tree);


					{
					// AST REWRITE
					// elements: op, cmp_expr, chain_list, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 607:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(607, 70);
						// SugarCpp.g:607:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(607, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(607, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(607, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(607, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(607, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:608:17: 
					{

					{
					// AST REWRITE
					// elements: op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(608, 20);
						// SugarCpp.g:608:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(608, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(608, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(206); }


				}
				break;

			}
			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 79);
			LeaveRule("cmp_expr", 79);
			LeaveRule_cmp_expr();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:613:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 80);
		TraceIn("shift_expr_op", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set463 = default(IToken);

		CommonTree set463_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(613, 27);
		try
		{
			// SugarCpp.g:613:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(613, 14);

			set463=(IToken)input.LT(1);
			if (input.LA(1)==113||input.LA(1)==121)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set463));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 80);
			LeaveRule("shift_expr_op", 80);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(613, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:614:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 81);
		TraceIn("shift_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op464 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(614, 1);
		try
		{
			// SugarCpp.g:615:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:615:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(615, 4);
			// SugarCpp.g:615:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:615:5: a= add_expr
			{
			DebugLocation(615, 6);
			PushFollow(Follow._add_expr_in_shift_expr5375);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 615:16: -> $a
			{
				DebugLocation(615, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(615, 23);
			// SugarCpp.g:615:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==113||LA208_0==121))
				{
					alt208 = 1;
				}


				} finally { DebugExitDecision(208); }
				switch ( alt208 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:615:24: shift_expr_op b= add_expr
					{
					DebugLocation(615, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5384);
					shift_expr_op464=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op464.Tree);
					DebugLocation(615, 39);
					PushFollow(Follow._add_expr_in_shift_expr5388);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 615:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(615, 52);
						// SugarCpp.g:615:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(615, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(615, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(615, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(615, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop208;
				}
			}

			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 81);
			LeaveRule("shift_expr", 81);
			LeaveRule_shift_expr();
		}
		DebugLocation(616, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:618:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 82);
		TraceIn("add_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal465 = default(IToken);
		IToken char_literal466 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal465_tree = default(CommonTree);
		CommonTree char_literal466_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(618, 1);
		try
		{
			// SugarCpp.g:619:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:619:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(619, 4);
			// SugarCpp.g:619:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:619:5: a= mul_expr
			{
			DebugLocation(619, 6);
			PushFollow(Follow._mul_expr_in_add_expr5418);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 619:16: -> $a
			{
				DebugLocation(619, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(619, 23);
			// SugarCpp.g:619:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=3;
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==94))
				{
					alt209 = 1;
				}
				else if ((LA209_0==98))
				{
					alt209 = 2;
				}


				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:619:25: '+' b= mul_expr
					{
					DebugLocation(619, 25);
					char_literal465=(IToken)Match(input,94,Follow._94_in_add_expr5428);  
					stream_94.Add(char_literal465);

					DebugLocation(619, 30);
					PushFollow(Follow._mul_expr_in_add_expr5432);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 619:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(619, 43);
						// SugarCpp.g:619:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(619, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(619, 54);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(619, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(619, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:620:10: '-' b= mul_expr
					{
					DebugLocation(620, 10);
					char_literal466=(IToken)Match(input,98,Follow._98_in_add_expr5457);  
					stream_98.Add(char_literal466);

					DebugLocation(620, 15);
					PushFollow(Follow._mul_expr_in_add_expr5461);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 98
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 620:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(620, 28);
						// SugarCpp.g:620:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(620, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(620, 39);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(620, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(620, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 82);
			LeaveRule("add_expr", 82);
			LeaveRule_add_expr();
		}
		DebugLocation(622, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:624:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 83);
		TraceIn("mul_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal467 = default(IToken);
		IToken char_literal468 = default(IToken);
		IToken char_literal469 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal467_tree = default(CommonTree);
		CommonTree char_literal468_tree = default(CommonTree);
		CommonTree char_literal469_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(624, 1);
		try
		{
			// SugarCpp.g:625:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:625:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(625, 4);
			// SugarCpp.g:625:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:625:5: a= infix_expr
			{
			DebugLocation(625, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5499);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 625:18: -> $a
			{
				DebugLocation(625, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(625, 25);
			// SugarCpp.g:625:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=4;
				try { DebugEnterDecision(210, false);
				switch (input.LA(1))
				{
				case 92:
					{
					alt210 = 1;
					}
					break;
				case 105:
					{
					alt210 = 2;
					}
					break;
				case 85:
					{
					alt210 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:625:27: '*' b= infix_expr
					{
					DebugLocation(625, 27);
					char_literal467=(IToken)Match(input,92,Follow._92_in_mul_expr5509);  
					stream_92.Add(char_literal467);

					DebugLocation(625, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5513);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(625, 47);
						// SugarCpp.g:625:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(625, 58);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(625, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:626:12: '/' b= infix_expr
					{
					DebugLocation(626, 12);
					char_literal468=(IToken)Match(input,105,Follow._105_in_mul_expr5540);  
					stream_105.Add(char_literal468);

					DebugLocation(626, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5544);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 105, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(626, 32);
						// SugarCpp.g:626:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(626, 43);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(626, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(626, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:627:12: '%' b= infix_expr
					{
					DebugLocation(627, 12);
					char_literal469=(IToken)Match(input,85,Follow._85_in_mul_expr5571);  
					stream_85.Add(char_literal469);

					DebugLocation(627, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5575);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 85, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 627:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(627, 32);
						// SugarCpp.g:627:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(627, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(627, 43);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(627, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(627, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 83);
			LeaveRule("mul_expr", 83);
			LeaveRule_mul_expr();
		}
		DebugLocation(629, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:631:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 84);
		TraceIn("infix_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func470 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(631, 1);
		try
		{
			// SugarCpp.g:632:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:632:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(632, 4);
			// SugarCpp.g:632:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:632:5: a= selector_expr
			{
			DebugLocation(632, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5615);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 632:21: -> $a
			{
				DebugLocation(632, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(632, 28);
			// SugarCpp.g:632:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==130))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:632:30: infix_func b= selector_expr
					{
					DebugLocation(632, 30);
					PushFollow(Follow._infix_func_in_infix_expr5625);
					infix_func470=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func470.Tree);
					DebugLocation(632, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5629);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 632:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(632, 61);
						// SugarCpp.g:632:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(632, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(632, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(632, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(632, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 84);
			LeaveRule("infix_expr", 84);
			LeaveRule_infix_expr();
		}
		DebugLocation(633, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:635:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 85);
		TraceIn("selector_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal471 = default(IToken);
		IToken string_literal472 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal471_tree = default(CommonTree);
		CommonTree string_literal472_tree = default(CommonTree);
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(635, 1);
		try
		{
			// SugarCpp.g:636:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:636:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(636, 4);
			// SugarCpp.g:636:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:636:5: a= cast_expr
			{
			DebugLocation(636, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5661);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 636:17: -> $a
			{
				DebugLocation(636, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(636, 24);
			// SugarCpp.g:636:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=3;
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==102))
				{
					alt212 = 1;
				}
				else if ((LA212_0==104))
				{
					alt212 = 2;
				}


				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:636:26: '->*' b= ident
					{
					DebugLocation(636, 26);
					string_literal471=(IToken)Match(input,102,Follow._102_in_selector_expr5671);  
					stream_102.Add(string_literal471);

					DebugLocation(636, 33);
					PushFollow(Follow._ident_in_selector_expr5675);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 102, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(636, 43);
						// SugarCpp.g:636:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(636, 57);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(636, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:637:11: '.*' b= ident
					{
					DebugLocation(637, 11);
					string_literal472=(IToken)Match(input,104,Follow._104_in_selector_expr5701);  
					stream_104.Add(string_literal472);

					DebugLocation(637, 18);
					PushFollow(Follow._ident_in_selector_expr5706);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 104, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 637:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(637, 28);
						// SugarCpp.g:637:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(637, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(637, 42);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(637, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(637, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 85);
			LeaveRule("selector_expr", 85);
			LeaveRule_selector_expr();
		}
		DebugLocation(639, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:641:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 86);
		TraceIn("cast_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal473 = default(IToken);
		IToken char_literal474 = default(IToken);
		IToken char_literal476 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name475 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal473_tree = default(CommonTree);
		CommonTree char_literal474_tree = default(CommonTree);
		CommonTree char_literal476_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(641, 1);
		try
		{
			// SugarCpp.g:642:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:642:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(642, 4);
			// SugarCpp.g:642:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:642:5: a= prefix_expr
			{
			DebugLocation(642, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5746);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 642:19: -> $a
			{
				DebugLocation(642, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(642, 26);
			// SugarCpp.g:642:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt213=2;
			try { DebugEnterSubRule(213);
			try { DebugEnterDecision(213, false);
			int LA213_0 = input.LA(1);

			if ((LA213_0==132))
			{
				alt213 = 1;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:642:27: 'as' '(' type_name ')'
				{
				DebugLocation(642, 27);
				string_literal473=(IToken)Match(input,132,Follow._132_in_cast_expr5755);  
				stream_132.Add(string_literal473);

				DebugLocation(642, 32);
				char_literal474=(IToken)Match(input,90,Follow._90_in_cast_expr5757);  
				stream_90.Add(char_literal474);

				DebugLocation(642, 36);
				PushFollow(Follow._type_name_in_cast_expr5759);
				type_name475=type_name();
				PopFollow();

				stream_type_name.Add(type_name475.Tree);
				DebugLocation(642, 46);
				char_literal476=(IToken)Match(input,91,Follow._91_in_cast_expr5761);  
				stream_91.Add(char_literal476);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 642:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(642, 53);
					// SugarCpp.g:642:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(642, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(642, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(642, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 86);
			LeaveRule("cast_expr", 86);
			LeaveRule_cast_expr();
		}
		DebugLocation(643, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:645:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 87);
		TraceIn("prefix_expr_op", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set477 = default(IToken);

		CommonTree set477_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(645, 71);
		try
		{
			// SugarCpp.g:645:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(645, 15);

			set477=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==88||input.LA(1)==92||(input.LA(1)>=94 && input.LA(1)<=95)||(input.LA(1)>=98 && input.LA(1)<=99)||input.LA(1)==155||input.LA(1)==173)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set477));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 87);
			LeaveRule("prefix_expr_op", 87);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(645, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:646:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 88);
		TraceIn("prefix_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal480 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op478 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array481 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal480_tree = default(CommonTree);
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(646, 1);
		try
		{
			// SugarCpp.g:647:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt215=3;
			try { DebugEnterDecision(215, false);
			switch (input.LA(1))
			{
			case 83:
			case 88:
			case 92:
			case 94:
			case 95:
			case 98:
			case 99:
			case 155:
			case 173:
				{
				alt215 = 1;
				}
				break;
			case 154:
				{
				alt215 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 90:
			case 125:
				{
				alt215 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(215); }
			switch (alt215)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:647:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(647, 4);
				// SugarCpp.g:647:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:647:5: prefix_expr_op prefix_expr
				{
				DebugLocation(647, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5823);
				prefix_expr_op478=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op478.Tree);
				DebugLocation(647, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5825);
				prefix_expr479=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr479.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 647:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(647, 36);
					// SugarCpp.g:647:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(647, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(647, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(647, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:648:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(648, 4);
				string_literal480=(IToken)Match(input,154,Follow._154_in_prefix_expr5841);  
				stream_154.Add(string_literal480);

				DebugLocation(648, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr5843);
				type_no_array481=type_no_array();
				PopFollow();

				stream_type_no_array.Add(type_no_array481.Tree);
				DebugLocation(648, 24);
				// SugarCpp.g:648:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt214=2;
				try { DebugEnterSubRule(214);
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==90))
				{
					alt214 = 1;
				}
				else if ((LA214_0==126))
				{
					alt214 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 214, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:648:26: bracket_expr_list
					{
					DebugLocation(648, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr5847);
					bracket_expr_list482=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list482.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(648, 47);
						// SugarCpp.g:648:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(648, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(648, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:649:11: square_expr_list
					{
					DebugLocation(649, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr5869);
					square_expr_list483=square_expr_list();
					PopFollow();

					stream_square_expr_list.Add(square_expr_list483.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 649:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(649, 31);
						// SugarCpp.g:649:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(649, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(649, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(649, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(214); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:651:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5894);
				suffix_expr484=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr484.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 88);
			LeaveRule("prefix_expr", 88);
			LeaveRule_prefix_expr();
		}
		DebugLocation(652, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:654:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 89);
		TraceIn("square_expr_list", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal485 = default(IToken);
		IToken char_literal487 = default(IToken);
		IToken char_literal489 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr488 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal485_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		CommonTree char_literal489_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(654, 1);
		try
		{
			// SugarCpp.g:655:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:655:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(655, 4);
			char_literal485=(IToken)Match(input,126,Follow._126_in_square_expr_list5906);  
			stream_126.Add(char_literal485);

			DebugLocation(655, 8);
			PushFollow(Follow._expr_in_square_expr_list5908);
			expr486=expr();
			PopFollow();

			stream_expr.Add(expr486.Tree);
			DebugLocation(655, 13);
			// SugarCpp.g:655:13: ( ',' expr )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==97))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:655:14: ',' expr
					{
					DebugLocation(655, 14);
					char_literal487=(IToken)Match(input,97,Follow._97_in_square_expr_list5911);  
					stream_97.Add(char_literal487);

					DebugLocation(655, 18);
					PushFollow(Follow._expr_in_square_expr_list5913);
					expr488=expr();
					PopFollow();

					stream_expr.Add(expr488.Tree);

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }

			DebugLocation(655, 25);
			char_literal489=(IToken)Match(input,127,Follow._127_in_square_expr_list5917);  
			stream_127.Add(char_literal489);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 655:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(655, 32);
				// SugarCpp.g:655:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(655, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(655, 44);
				// SugarCpp.g:655:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(655, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 89);
			LeaveRule("square_expr_list", 89);
			LeaveRule_square_expr_list();
		}
		DebugLocation(656, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:658:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 90);
		TraceIn("bracket_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal490 = default(IToken);
		IToken char_literal492 = default(IToken);
		IToken char_literal494 = default(IToken);
		IToken NEWLINE495 = default(IToken);
		IToken INDENT496 = default(IToken);
		IToken NEWLINE497 = default(IToken);
		IToken char_literal499 = default(IToken);
		IToken NEWLINE500 = default(IToken);
		IToken NEWLINE502 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken NEWLINE504 = default(IToken);
		IToken DEDENT505 = default(IToken);
		IToken DEDENT506 = default(IToken);
		IToken NEWLINE507 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal510 = default(IToken);
		IToken NEWLINE511 = default(IToken);
		IToken char_literal513 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr512 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree NEWLINE495_tree = default(CommonTree);
		CommonTree INDENT496_tree = default(CommonTree);
		CommonTree NEWLINE497_tree = default(CommonTree);
		CommonTree char_literal499_tree = default(CommonTree);
		CommonTree NEWLINE500_tree = default(CommonTree);
		CommonTree NEWLINE502_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree NEWLINE504_tree = default(CommonTree);
		CommonTree DEDENT505_tree = default(CommonTree);
		CommonTree DEDENT506_tree = default(CommonTree);
		CommonTree NEWLINE507_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal510_tree = default(CommonTree);
		CommonTree NEWLINE511_tree = default(CommonTree);
		CommonTree char_literal513_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(658, 1);
		try
		{
			// SugarCpp.g:659:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:659:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(659, 4);
			char_literal490=(IToken)Match(input,90,Follow._90_in_bracket_expr_list5937);  
			stream_90.Add(char_literal490);

			DebugLocation(659, 8);
			// SugarCpp.g:659:8: ( expr ( ',' expr )* )?
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			int LA218_0 = input.LA(1);

			if ((LA218_0==IDENT||LA218_0==NUMBER||LA218_0==STRING||LA218_0==83||LA218_0==88||LA218_0==90||LA218_0==92||(LA218_0>=94 && LA218_0<=95)||(LA218_0>=98 && LA218_0<=99)||(LA218_0>=125 && LA218_0<=126)||LA218_0==149||LA218_0==152||(LA218_0>=154 && LA218_0<=155)||LA218_0==173))
			{
				alt218 = 1;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:659:9: expr ( ',' expr )*
				{
				DebugLocation(659, 9);
				PushFollow(Follow._expr_in_bracket_expr_list5940);
				expr491=expr();
				PopFollow();

				stream_expr.Add(expr491.Tree);
				DebugLocation(659, 14);
				// SugarCpp.g:659:14: ( ',' expr )*
				try { DebugEnterSubRule(217);
				while (true)
				{
					int alt217=2;
					try { DebugEnterDecision(217, false);
					int LA217_0 = input.LA(1);

					if ((LA217_0==97))
					{
						alt217 = 1;
					}


					} finally { DebugExitDecision(217); }
					switch ( alt217 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:659:15: ',' expr
						{
						DebugLocation(659, 15);
						char_literal492=(IToken)Match(input,97,Follow._97_in_bracket_expr_list5943);  
						stream_97.Add(char_literal492);

						DebugLocation(659, 19);
						PushFollow(Follow._expr_in_bracket_expr_list5945);
						expr493=expr();
						PopFollow();

						stream_expr.Add(expr493.Tree);

						}
						break;

					default:
						goto loop217;
					}
				}

				loop217:
					;

				} finally { DebugExitSubRule(217); }


				}
				break;

			}
			} finally { DebugExitSubRule(218); }

			DebugLocation(659, 28);
			// SugarCpp.g:659:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt231=2;
			try { DebugEnterSubRule(231);
			try { DebugEnterDecision(231, false);
			int LA231_0 = input.LA(1);

			if ((LA231_0==91))
			{
				alt231 = 1;
			}
			else if ((LA231_0==NEWLINE))
			{
				alt231 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:659:30: ')'
				{
				DebugLocation(659, 30);
				char_literal494=(IToken)Match(input,91,Follow._91_in_bracket_expr_list5953);  
				stream_91.Add(char_literal494);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 659:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(659, 37);
					// SugarCpp.g:659:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(659, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(659, 49);
					// SugarCpp.g:659:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(659, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:660:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(660, 12);
				// SugarCpp.g:660:12: ( NEWLINE )+
				int cnt219=0;
				try { DebugEnterSubRule(219);
				while (true)
				{
					int alt219=2;
					try { DebugEnterDecision(219, false);
					int LA219_0 = input.LA(1);

					if ((LA219_0==NEWLINE))
					{
						alt219 = 1;
					}


					} finally { DebugExitDecision(219); }
					switch (alt219)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:660:12: NEWLINE
						{
						DebugLocation(660, 12);
						NEWLINE495=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list5975);  
						stream_NEWLINE.Add(NEWLINE495);


						}
						break;

					default:
						if (cnt219 >= 1)
							goto loop219;

						EarlyExitException eee219 = new EarlyExitException( 219, input );
						DebugRecognitionException(eee219);
						throw eee219;
					}
					cnt219++;
				}
				loop219:
					;

				} finally { DebugExitSubRule(219); }

				DebugLocation(660, 21);
				// SugarCpp.g:660:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt230=2;
				try { DebugEnterSubRule(230);
				try { DebugEnterDecision(230, false);
				int LA230_0 = input.LA(1);

				if ((LA230_0==INDENT))
				{
					alt230 = 1;
				}
				else if ((LA230_0==IDENT||LA230_0==NUMBER||LA230_0==STRING||LA230_0==83||LA230_0==88||(LA230_0>=90 && LA230_0<=92)||(LA230_0>=94 && LA230_0<=95)||(LA230_0>=98 && LA230_0<=99)||(LA230_0>=125 && LA230_0<=126)||LA230_0==149||LA230_0==152||(LA230_0>=154 && LA230_0<=155)||LA230_0==173))
				{
					alt230 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(230); }
				switch (alt230)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:660:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(660, 23);
					INDENT496=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list5980);  
					stream_INDENT.Add(INDENT496);

					DebugLocation(660, 30);
					// SugarCpp.g:660:30: ( NEWLINE )*
					try { DebugEnterSubRule(220);
					while (true)
					{
						int alt220=2;
						try { DebugEnterDecision(220, false);
						int LA220_0 = input.LA(1);

						if ((LA220_0==NEWLINE))
						{
							alt220 = 1;
						}


						} finally { DebugExitDecision(220); }
						switch ( alt220 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:660:30: NEWLINE
							{
							DebugLocation(660, 30);
							NEWLINE497=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list5982);  
							stream_NEWLINE.Add(NEWLINE497);


							}
							break;

						default:
							goto loop220;
						}
					}

					loop220:
						;

					} finally { DebugExitSubRule(220); }

					DebugLocation(660, 39);
					PushFollow(Follow._expr_in_bracket_expr_list5985);
					expr498=expr();
					PopFollow();

					stream_expr.Add(expr498.Tree);
					DebugLocation(660, 44);
					// SugarCpp.g:660:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(222);
					while (true)
					{
						int alt222=2;
						try { DebugEnterDecision(222, false);
						try
						{
							alt222 = dfa222.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(222); }
						switch ( alt222 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:660:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(660, 45);
							// SugarCpp.g:660:45: ( ',' | NEWLINE )+
							int cnt221=0;
							try { DebugEnterSubRule(221);
							while (true)
							{
								int alt221=3;
								try { DebugEnterDecision(221, false);
								int LA221_0 = input.LA(1);

								if ((LA221_0==97))
								{
									alt221 = 1;
								}
								else if ((LA221_0==NEWLINE))
								{
									alt221 = 2;
								}


								} finally { DebugExitDecision(221); }
								switch (alt221)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:660:46: ','
									{
									DebugLocation(660, 46);
									char_literal499=(IToken)Match(input,97,Follow._97_in_bracket_expr_list5989);  
									stream_97.Add(char_literal499);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:660:52: NEWLINE
									{
									DebugLocation(660, 52);
									NEWLINE500=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list5993);  
									stream_NEWLINE.Add(NEWLINE500);


									}
									break;

								default:
									if (cnt221 >= 1)
										goto loop221;

									EarlyExitException eee221 = new EarlyExitException( 221, input );
									DebugRecognitionException(eee221);
									throw eee221;
								}
								cnt221++;
							}
							loop221:
								;

							} finally { DebugExitSubRule(221); }

							DebugLocation(660, 62);
							PushFollow(Follow._expr_in_bracket_expr_list5997);
							expr501=expr();
							PopFollow();

							stream_expr.Add(expr501.Tree);

							}
							break;

						default:
							goto loop222;
						}
					}

					loop222:
						;

					} finally { DebugExitSubRule(222); }

					DebugLocation(660, 69);
					// SugarCpp.g:660:69: ( NEWLINE )*
					try { DebugEnterSubRule(223);
					while (true)
					{
						int alt223=2;
						try { DebugEnterDecision(223, false);
						int LA223_0 = input.LA(1);

						if ((LA223_0==NEWLINE))
						{
							alt223 = 1;
						}


						} finally { DebugExitDecision(223); }
						switch ( alt223 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:660:69: NEWLINE
							{
							DebugLocation(660, 69);
							NEWLINE502=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6001);  
							stream_NEWLINE.Add(NEWLINE502);


							}
							break;

						default:
							goto loop223;
						}
					}

					loop223:
						;

					} finally { DebugExitSubRule(223); }

					DebugLocation(660, 78);
					// SugarCpp.g:660:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt226=2;
					try { DebugEnterSubRule(226);
					try { DebugEnterDecision(226, false);
					int LA226_0 = input.LA(1);

					if ((LA226_0==91))
					{
						alt226 = 1;
					}
					else if ((LA226_0==DEDENT))
					{
						alt226 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(226); }
					switch (alt226)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:660:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(660, 80);
						char_literal503=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6006);  
						stream_91.Add(char_literal503);

						DebugLocation(660, 84);
						// SugarCpp.g:660:84: ( NEWLINE )*
						try { DebugEnterSubRule(224);
						while (true)
						{
							int alt224=2;
							try { DebugEnterDecision(224, false);
							int LA224_0 = input.LA(1);

							if ((LA224_0==NEWLINE))
							{
								alt224 = 1;
							}


							} finally { DebugExitDecision(224); }
							switch ( alt224 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:660:84: NEWLINE
								{
								DebugLocation(660, 84);
								NEWLINE504=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6008);  
								stream_NEWLINE.Add(NEWLINE504);


								}
								break;

							default:
								goto loop224;
							}
						}

						loop224:
							;

						} finally { DebugExitSubRule(224); }

						DebugLocation(660, 93);
						DEDENT505=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6011);  
						stream_DEDENT.Add(DEDENT505);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:660:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(660, 102);
						DEDENT506=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6015);  
						stream_DEDENT.Add(DEDENT506);

						DebugLocation(660, 109);
						// SugarCpp.g:660:109: ( NEWLINE )*
						try { DebugEnterSubRule(225);
						while (true)
						{
							int alt225=2;
							try { DebugEnterDecision(225, false);
							int LA225_0 = input.LA(1);

							if ((LA225_0==NEWLINE))
							{
								alt225 = 1;
							}


							} finally { DebugExitDecision(225); }
							switch ( alt225 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:660:109: NEWLINE
								{
								DebugLocation(660, 109);
								NEWLINE507=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6017);  
								stream_NEWLINE.Add(NEWLINE507);


								}
								break;

							default:
								goto loop225;
							}
						}

						loop225:
							;

						} finally { DebugExitSubRule(225); }

						DebugLocation(660, 118);
						char_literal508=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6020);  
						stream_91.Add(char_literal508);


						}
						break;

					}
					} finally { DebugExitSubRule(226); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 660:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(660, 127);
						// SugarCpp.g:660:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(660, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(660, 139);
						// SugarCpp.g:660:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(660, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:661:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(661, 14);
					// SugarCpp.g:661:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt229=2;
					try { DebugEnterSubRule(229);
					try { DebugEnterDecision(229, false);
					int LA229_0 = input.LA(1);

					if ((LA229_0==IDENT||LA229_0==NUMBER||LA229_0==STRING||LA229_0==83||LA229_0==88||LA229_0==90||LA229_0==92||(LA229_0>=94 && LA229_0<=95)||(LA229_0>=98 && LA229_0<=99)||(LA229_0>=125 && LA229_0<=126)||LA229_0==149||LA229_0==152||(LA229_0>=154 && LA229_0<=155)||LA229_0==173))
					{
						alt229 = 1;
					}
					} finally { DebugExitDecision(229); }
					switch (alt229)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:661:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(661, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6047);
						expr509=expr();
						PopFollow();

						stream_expr.Add(expr509.Tree);
						DebugLocation(661, 20);
						// SugarCpp.g:661:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(228);
						while (true)
						{
							int alt228=2;
							try { DebugEnterDecision(228, false);
							int LA228_0 = input.LA(1);

							if ((LA228_0==NEWLINE||LA228_0==97))
							{
								alt228 = 1;
							}


							} finally { DebugExitDecision(228); }
							switch ( alt228 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:661:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(661, 21);
								// SugarCpp.g:661:21: ( ',' | NEWLINE )+
								int cnt227=0;
								try { DebugEnterSubRule(227);
								while (true)
								{
									int alt227=3;
									try { DebugEnterDecision(227, false);
									int LA227_0 = input.LA(1);

									if ((LA227_0==97))
									{
										alt227 = 1;
									}
									else if ((LA227_0==NEWLINE))
									{
										alt227 = 2;
									}


									} finally { DebugExitDecision(227); }
									switch (alt227)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:661:22: ','
										{
										DebugLocation(661, 22);
										char_literal510=(IToken)Match(input,97,Follow._97_in_bracket_expr_list6051);  
										stream_97.Add(char_literal510);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:661:28: NEWLINE
										{
										DebugLocation(661, 28);
										NEWLINE511=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6055);  
										stream_NEWLINE.Add(NEWLINE511);


										}
										break;

									default:
										if (cnt227 >= 1)
											goto loop227;

										EarlyExitException eee227 = new EarlyExitException( 227, input );
										DebugRecognitionException(eee227);
										throw eee227;
									}
									cnt227++;
								}
								loop227:
									;

								} finally { DebugExitSubRule(227); }

								DebugLocation(661, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6059);
								expr512=expr();
								PopFollow();

								stream_expr.Add(expr512.Tree);

								}
								break;

							default:
								goto loop228;
							}
						}

						loop228:
							;

						} finally { DebugExitSubRule(228); }


						}
						break;

					}
					} finally { DebugExitSubRule(229); }

					DebugLocation(661, 47);
					char_literal513=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6065);  
					stream_91.Add(char_literal513);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 661:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(661, 54);
						// SugarCpp.g:661:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(661, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(661, 66);
						// SugarCpp.g:661:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(661, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(230); }


				}
				break;

			}
			} finally { DebugExitSubRule(231); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 90);
			LeaveRule("bracket_expr_list", 90);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(664, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:666:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 91);
		TraceIn("suffix_expr", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal514 = default(IToken);
		IToken string_literal515 = default(IToken);
		IToken char_literal516 = default(IToken);
		IToken string_literal518 = default(IToken);
		IToken char_literal522 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list524 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal514_tree = default(CommonTree);
		CommonTree string_literal515_tree = default(CommonTree);
		CommonTree char_literal516_tree = default(CommonTree);
		CommonTree string_literal518_tree = default(CommonTree);
		CommonTree char_literal522_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(666, 1);
		try
		{
			// SugarCpp.g:667:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:667:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(667, 4);
			// SugarCpp.g:667:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:667:5: a= atom_expr
			{
			DebugLocation(667, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6112);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 667:17: -> $a
			{
				DebugLocation(667, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(667, 24);
			// SugarCpp.g:667:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(232);
			while (true)
			{
				int alt232=8;
				try { DebugEnterDecision(232, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt232 = 1;
					}
					break;
				case 99:
					{
					alt232 = 2;
					}
					break;
				case 103:
					{
					alt232 = 3;
					}
					break;
				case 101:
					{
					alt232 = 4;
					}
					break;
				case 90:
					{
					alt232 = 5;
					}
					break;
				case 126:
					{
					alt232 = 6;
					}
					break;
				case 125:
					{
					alt232 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(232); }
				switch ( alt232 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:667:26: '++'
					{
					DebugLocation(667, 26);
					string_literal514=(IToken)Match(input,95,Follow._95_in_suffix_expr6122);  
					stream_95.Add(string_literal514);



					{
					// AST REWRITE
					// elements: suffix_expr, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 667:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(667, 34);
						// SugarCpp.g:667:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(667, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(667, 48);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(667, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:668:14: '--'
					{
					DebugLocation(668, 14);
					string_literal515=(IToken)Match(input,99,Follow._99_in_suffix_expr6148);  
					stream_99.Add(string_literal515);



					{
					// AST REWRITE
					// elements: suffix_expr, 99
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 668:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(668, 22);
						// SugarCpp.g:668:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(668, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(668, 36);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(668, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:669:11: '.' ident
					{
					DebugLocation(669, 11);
					char_literal516=(IToken)Match(input,103,Follow._103_in_suffix_expr6171);  
					stream_103.Add(char_literal516);

					DebugLocation(669, 15);
					PushFollow(Follow._ident_in_suffix_expr6173);
					ident517=ident();
					PopFollow();

					stream_ident.Add(ident517.Tree);


					{
					// AST REWRITE
					// elements: 103, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 669:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(669, 24);
						// SugarCpp.g:669:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(669, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(669, 38);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(669, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(669, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:670:11: '->' ident
					{
					DebugLocation(670, 11);
					string_literal518=(IToken)Match(input,101,Follow._101_in_suffix_expr6198);  
					stream_101.Add(string_literal518);

					DebugLocation(670, 16);
					PushFollow(Follow._ident_in_suffix_expr6200);
					ident519=ident();
					PopFollow();

					stream_ident.Add(ident519.Tree);


					{
					// AST REWRITE
					// elements: 101, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 670:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(670, 25);
						// SugarCpp.g:670:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(670, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(670, 39);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(670, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(670, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:671:11: bracket_expr_list
					{
					DebugLocation(671, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6225);
					bracket_expr_list520=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list520.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 671:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(671, 32);
						// SugarCpp.g:671:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(671, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(671, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(671, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:672:11: square_expr_list
					{
					DebugLocation(672, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6248);
					square_expr_list521=square_expr_list();
					PopFollow();

					stream_square_expr_list.Add(square_expr_list521.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 672:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(672, 31);
						// SugarCpp.g:672:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(672, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(672, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(672, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:673:11: '@' ident bracket_expr_list
					{
					DebugLocation(673, 11);
					char_literal522=(IToken)Match(input,125,Follow._125_in_suffix_expr6271);  
					stream_125.Add(char_literal522);

					DebugLocation(673, 15);
					PushFollow(Follow._ident_in_suffix_expr6273);
					ident523=ident();
					PopFollow();

					stream_ident.Add(ident523.Tree);
					DebugLocation(673, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6275);
					bracket_expr_list524=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list524.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 673:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(673, 42);
						// SugarCpp.g:673:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(673, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(673, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(673, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(673, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop232;
				}
			}

			loop232:
				;

			} finally { DebugExitSubRule(232); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 91);
			LeaveRule("suffix_expr", 91);
			LeaveRule_suffix_expr();
		}
		DebugLocation(675, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:677:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 92);
		TraceIn("atom_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER525 = default(IToken);
		IToken STRING527 = default(IToken);
		IToken char_literal528 = default(IToken);
		IToken char_literal530 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken char_literal533 = default(IToken);
		IToken char_literal534 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident529 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr532 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER525_tree = default(CommonTree);
		CommonTree STRING527_tree = default(CommonTree);
		CommonTree char_literal528_tree = default(CommonTree);
		CommonTree char_literal530_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree char_literal533_tree = default(CommonTree);
		CommonTree char_literal534_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(677, 1);
		try
		{
			// SugarCpp.g:678:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt235=5;
			try { DebugEnterDecision(235, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt235 = 1;
				}
				break;
			case IDENT:
				{
				alt235 = 2;
				}
				break;
			case STRING:
				{
				alt235 = 3;
				}
				break;
			case 125:
				{
				alt235 = 4;
				}
				break;
			case 90:
				{
				alt235 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 235, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(235); }
			switch (alt235)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:678:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(678, 4);
				NUMBER525=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6313); 
				NUMBER525_tree = (CommonTree)adaptor.Create(NUMBER525);
				adaptor.AddChild(root_0, NUMBER525_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:679:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(679, 4);
				PushFollow(Follow._ident_in_atom_expr6318);
				ident526=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident526.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:680:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(680, 4);
				STRING527=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6323); 
				STRING527_tree = (CommonTree)adaptor.Create(STRING527);
				adaptor.AddChild(root_0, STRING527_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:681:4: '@' ident
				{
				DebugLocation(681, 4);
				char_literal528=(IToken)Match(input,125,Follow._125_in_atom_expr6328);  
				stream_125.Add(char_literal528);

				DebugLocation(681, 8);
				PushFollow(Follow._ident_in_atom_expr6330);
				ident529=ident();
				PopFollow();

				stream_ident.Add(ident529.Tree);


				{
				// AST REWRITE
				// elements: 125, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 681:14: -> ^( '@' ident )
				{
					DebugLocation(681, 17);
					// SugarCpp.g:681:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(681, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_125.NextNode(), root_1);

					DebugLocation(681, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:682:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(682, 4);
				char_literal530=(IToken)Match(input,90,Follow._90_in_atom_expr6343);  
				stream_90.Add(char_literal530);

				DebugLocation(682, 9);
				PushFollow(Follow._expr_in_atom_expr6347);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(682, 15);
				// SugarCpp.g:682:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt234=2;
				try { DebugEnterSubRule(234);
				try { DebugEnterDecision(234, false);
				int LA234_0 = input.LA(1);

				if ((LA234_0==97))
				{
					alt234 = 1;
				}
				else if ((LA234_0==91))
				{
					alt234 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 234, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(234); }
				switch (alt234)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:682:17: ( ',' expr )+ ')'
					{
					DebugLocation(682, 17);
					// SugarCpp.g:682:17: ( ',' expr )+
					int cnt233=0;
					try { DebugEnterSubRule(233);
					while (true)
					{
						int alt233=2;
						try { DebugEnterDecision(233, false);
						int LA233_0 = input.LA(1);

						if ((LA233_0==97))
						{
							alt233 = 1;
						}


						} finally { DebugExitDecision(233); }
						switch (alt233)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:682:18: ',' expr
							{
							DebugLocation(682, 18);
							char_literal531=(IToken)Match(input,97,Follow._97_in_atom_expr6352);  
							stream_97.Add(char_literal531);

							DebugLocation(682, 22);
							PushFollow(Follow._expr_in_atom_expr6354);
							expr532=expr();
							PopFollow();

							stream_expr.Add(expr532.Tree);

							}
							break;

						default:
							if (cnt233 >= 1)
								goto loop233;

							EarlyExitException eee233 = new EarlyExitException( 233, input );
							DebugRecognitionException(eee233);
							throw eee233;
						}
						cnt233++;
					}
					loop233:
						;

					} finally { DebugExitSubRule(233); }

					DebugLocation(682, 29);
					char_literal533=(IToken)Match(input,91,Follow._91_in_atom_expr6358);  
					stream_91.Add(char_literal533);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 682:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(682, 36);
						// SugarCpp.g:682:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(682, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(682, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(682, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:683:17: ')' {...}?
					{
					DebugLocation(683, 17);
					char_literal534=(IToken)Match(input,91,Follow._91_in_atom_expr6385);  
					stream_91.Add(char_literal534);

					DebugLocation(683, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 683:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(683, 40);
						// SugarCpp.g:683:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(683, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(683, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(234); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 92);
			LeaveRule("atom_expr", 92);
			LeaveRule_atom_expr();
		}
		DebugLocation(685, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:687:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 93);
		TraceIn("lvalue_item", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix535 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(687, 1);
		try
		{
			// SugarCpp.g:688:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:688:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(688, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6416);
			lvalue_prefix535=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix535.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 93);
			LeaveRule("lvalue_item", 93);
			LeaveRule_lvalue_item();
		}
		DebugLocation(689, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:691:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 94);
		TraceIn("lvalue_prefix", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op536 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix538 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(691, 1);
		try
		{
			// SugarCpp.g:692:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt236=2;
			try { DebugEnterDecision(236, false);
			int LA236_0 = input.LA(1);

			if ((LA236_0==83||LA236_0==88||LA236_0==92||(LA236_0>=94 && LA236_0<=95)||(LA236_0>=98 && LA236_0<=99)||LA236_0==155||LA236_0==173))
			{
				alt236 = 1;
			}
			else if ((LA236_0==IDENT||LA236_0==125))
			{
				alt236 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 236, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:692:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(692, 4);
				// SugarCpp.g:692:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:692:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(692, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6428);
				prefix_expr_op536=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op536.Tree);
				DebugLocation(692, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6430);
				lvalue_prefix537=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix537.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 692:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(692, 38);
					// SugarCpp.g:692:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(692, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(692, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(692, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:693:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(693, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6446);
				lvalue_suffix538=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix538.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 94);
			LeaveRule("lvalue_prefix", 94);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(694, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:696:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 95);
		TraceIn("lvalue_suffix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal539 = default(IToken);
		IToken string_literal540 = default(IToken);
		IToken char_literal541 = default(IToken);
		IToken string_literal543 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list547 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal539_tree = default(CommonTree);
		CommonTree string_literal540_tree = default(CommonTree);
		CommonTree char_literal541_tree = default(CommonTree);
		CommonTree string_literal543_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(696, 1);
		try
		{
			// SugarCpp.g:697:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:697:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(697, 4);
			// SugarCpp.g:697:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:697:5: a= lvalue_atom
			{
			DebugLocation(697, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6460);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 697:19: -> $a
			{
				DebugLocation(697, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(697, 26);
			// SugarCpp.g:697:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(238);
			while (true)
			{
				int alt238=7;
				try { DebugEnterDecision(238, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt238 = 1;
					}
					break;
				case 99:
					{
					alt238 = 2;
					}
					break;
				case 103:
					{
					alt238 = 3;
					}
					break;
				case 101:
					{
					alt238 = 4;
					}
					break;
				case 90:
				case 111:
					{
					alt238 = 5;
					}
					break;
				case 126:
					{
					alt238 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(238); }
				switch ( alt238 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:697:28: '++'
					{
					DebugLocation(697, 28);
					string_literal539=(IToken)Match(input,95,Follow._95_in_lvalue_suffix6470);  
					stream_95.Add(string_literal539);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 697:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(697, 36);
						// SugarCpp.g:697:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(697, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(697, 50);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(697, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:698:16: '--'
					{
					DebugLocation(698, 16);
					string_literal540=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6498);  
					stream_99.Add(string_literal540);



					{
					// AST REWRITE
					// elements: 99, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 698:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(698, 24);
						// SugarCpp.g:698:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(698, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(698, 38);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(698, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:699:13: '.' ident
					{
					DebugLocation(699, 13);
					char_literal541=(IToken)Match(input,103,Follow._103_in_lvalue_suffix6523);  
					stream_103.Add(char_literal541);

					DebugLocation(699, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6525);
					ident542=ident();
					PopFollow();

					stream_ident.Add(ident542.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 103, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 699:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(699, 26);
						// SugarCpp.g:699:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(699, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(699, 40);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(699, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(699, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:700:13: '->' ident
					{
					DebugLocation(700, 13);
					string_literal543=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6552);  
					stream_101.Add(string_literal543);

					DebugLocation(700, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6554);
					ident544=ident();
					PopFollow();

					stream_ident.Add(ident544.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 101, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(700, 27);
						// SugarCpp.g:700:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(700, 41);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(700, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(700, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:701:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(701, 13);
					// SugarCpp.g:701:13: ( generic_parameter )?
					int alt237=2;
					try { DebugEnterSubRule(237);
					try { DebugEnterDecision(237, false);
					int LA237_0 = input.LA(1);

					if ((LA237_0==111))
					{
						alt237 = 1;
					}
					} finally { DebugExitDecision(237); }
					switch (alt237)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:701:13: generic_parameter
						{
						DebugLocation(701, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6581);
						generic_parameter545=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter545.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(237); }

					DebugLocation(701, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix6584);
					bracket_expr_list546=bracket_expr_list();
					PopFollow();

					stream_bracket_expr_list.Add(bracket_expr_list546.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, lvalue_suffix, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 701:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(701, 53);
						// SugarCpp.g:701:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(701, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(701, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(701, 80);
						// SugarCpp.g:701:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(701, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(701, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:702:13: square_expr_list
					{
					DebugLocation(702, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix6612);
					square_expr_list547=square_expr_list();
					PopFollow();

					stream_square_expr_list.Add(square_expr_list547.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 702:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(702, 33);
						// SugarCpp.g:702:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(702, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(702, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(702, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop238;
				}
			}

			loop238:
				;

			} finally { DebugExitSubRule(238); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 95);
			LeaveRule("lvalue_suffix", 95);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(704, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:706:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 96);
		TraceIn("lvalue_atom", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal549 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident548 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident550 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal549_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(706, 1);
		try
		{
			// SugarCpp.g:707:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt239=2;
			try { DebugEnterDecision(239, false);
			int LA239_0 = input.LA(1);

			if ((LA239_0==IDENT))
			{
				alt239 = 1;
			}
			else if ((LA239_0==125))
			{
				alt239 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:707:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(707, 4);
				PushFollow(Follow._ident_in_lvalue_atom6650);
				ident548=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident548.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:708:4: '@' ident
				{
				DebugLocation(708, 4);
				char_literal549=(IToken)Match(input,125,Follow._125_in_lvalue_atom6655);  
				stream_125.Add(char_literal549);

				DebugLocation(708, 8);
				PushFollow(Follow._ident_in_lvalue_atom6657);
				ident550=ident();
				PopFollow();

				stream_ident.Add(ident550.Tree);


				{
				// AST REWRITE
				// elements: 125, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 708:14: -> ^( '@' ident )
				{
					DebugLocation(708, 17);
					// SugarCpp.g:708:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(708, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_125.NextNode(), root_1);

					DebugLocation(708, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 96);
			LeaveRule("lvalue_atom", 96);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(709, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:711:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 97);
		TraceIn("lvalue", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal551 = default(IToken);
		IToken char_literal553 = default(IToken);
		IToken char_literal555 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item552 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item556 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal551_tree = default(CommonTree);
		CommonTree char_literal553_tree = default(CommonTree);
		CommonTree char_literal555_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(711, 1);
		try
		{
			// SugarCpp.g:712:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt241=2;
			try { DebugEnterDecision(241, false);
			int LA241_0 = input.LA(1);

			if ((LA241_0==90))
			{
				alt241 = 1;
			}
			else if ((LA241_0==IDENT||LA241_0==83||LA241_0==88||LA241_0==92||(LA241_0>=94 && LA241_0<=95)||(LA241_0>=98 && LA241_0<=99)||LA241_0==125||LA241_0==155||LA241_0==173))
			{
				alt241 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:712:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(712, 4);
				char_literal551=(IToken)Match(input,90,Follow._90_in_lvalue6676);  
				stream_90.Add(char_literal551);

				DebugLocation(712, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6678);
				lvalue_item552=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item552.Tree);
				DebugLocation(712, 20);
				// SugarCpp.g:712:20: ( ',' lvalue_item )+
				int cnt240=0;
				try { DebugEnterSubRule(240);
				while (true)
				{
					int alt240=2;
					try { DebugEnterDecision(240, false);
					int LA240_0 = input.LA(1);

					if ((LA240_0==97))
					{
						alt240 = 1;
					}


					} finally { DebugExitDecision(240); }
					switch (alt240)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:712:21: ',' lvalue_item
						{
						DebugLocation(712, 21);
						char_literal553=(IToken)Match(input,97,Follow._97_in_lvalue6681);  
						stream_97.Add(char_literal553);

						DebugLocation(712, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6683);
						lvalue_item554=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item554.Tree);

						}
						break;

					default:
						if (cnt240 >= 1)
							goto loop240;

						EarlyExitException eee240 = new EarlyExitException( 240, input );
						DebugRecognitionException(eee240);
						throw eee240;
					}
					cnt240++;
				}
				loop240:
					;

				} finally { DebugExitSubRule(240); }

				DebugLocation(712, 39);
				char_literal555=(IToken)Match(input,91,Follow._91_in_lvalue6687);  
				stream_91.Add(char_literal555);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 712:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(712, 46);
					// SugarCpp.g:712:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(712, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(712, 60);
					// SugarCpp.g:712:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(712, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:713:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(713, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6701);
				lvalue_item556=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item556.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 97);
			LeaveRule("lvalue", 97);
			LeaveRule_lvalue();
		}
		DebugLocation(714, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:716:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 98);
		TraceIn("ident", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT557 = default(IToken);
		IToken string_literal558 = default(IToken);
		IToken IDENT559 = default(IToken);

		CommonTree IDENT557_tree = default(CommonTree);
		CommonTree string_literal558_tree = default(CommonTree);
		CommonTree IDENT559_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(716, 1);
		try
		{
			// SugarCpp.g:717:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:717:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(717, 4);
			IDENT557=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6712); 
			IDENT557_tree = (CommonTree)adaptor.Create(IDENT557);
			adaptor.AddChild(root_0, IDENT557_tree);
			DebugLocation(717, 10);
			// SugarCpp.g:717:10: ( '::' IDENT )*
			try { DebugEnterSubRule(242);
			while (true)
			{
				int alt242=2;
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==108))
				{
					alt242 = 1;
				}


				} finally { DebugExitDecision(242); }
				switch ( alt242 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:717:11: '::' IDENT
					{
					DebugLocation(717, 11);
					string_literal558=(IToken)Match(input,108,Follow._108_in_ident6715); 
					string_literal558_tree = (CommonTree)adaptor.Create(string_literal558);
					adaptor.AddChild(root_0, string_literal558_tree);
					DebugLocation(717, 16);
					IDENT559=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6717); 
					IDENT559_tree = (CommonTree)adaptor.Create(IDENT559);
					adaptor.AddChild(root_0, IDENT559_tree);

					}
					break;

				default:
					goto loop242;
				}
			}

			loop242:
				;

			} finally { DebugExitSubRule(242); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 98);
			LeaveRule("ident", 98);
			LeaveRule_ident();
		}
		DebugLocation(718, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:720:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 99);
		TraceIn("infix_func", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal560 = default(IToken);
		IToken char_literal562 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident561 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal560_tree = default(CommonTree);
		CommonTree char_literal562_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(720, 1);
		try
		{
			// SugarCpp.g:721:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:721:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(721, 7);
			char_literal560=(IToken)Match(input,130,Follow._130_in_infix_func6730); 
			DebugLocation(721, 9);
			PushFollow(Follow._ident_in_infix_func6733);
			ident561=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident561.Tree);
			DebugLocation(721, 18);
			char_literal562=(IToken)Match(input,130,Follow._130_in_infix_func6735); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 99);
			LeaveRule("infix_func", 99);
			LeaveRule_infix_func();
		}
		DebugLocation(722, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA28 dfa28;
	private DFA35 dfa35;
	private DFA42 dfa42;
	private DFA49 dfa49;
	private DFA77 dfa77;
	private DFA94 dfa94;
	private DFA103 dfa103;
	private DFA108 dfa108;
	private DFA121 dfa121;
	private DFA163 dfa163;
	private DFA152 dfa152;
	private DFA184 dfa184;
	private DFA183 dfa183;
	private DFA192 dfa192;
	private DFA222 dfa222;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa28 = new DFA28( this );
		dfa35 = new DFA35( this );
		dfa42 = new DFA42( this );
		dfa49 = new DFA49( this );
		dfa77 = new DFA77( this );
		dfa94 = new DFA94( this );
		dfa103 = new DFA103( this );
		dfa108 = new DFA108( this );
		dfa121 = new DFA121( this );
		dfa163 = new DFA163( this );
		dfa152 = new DFA152( this );
		dfa184 = new DFA184( this );
		dfa183 = new DFA183( this );
		dfa192 = new DFA192( this );
		dfa222 = new DFA222( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2C\x1\xFFFF\x1\x2C\x6\xFFFF\x2\x5A\x1\x2C\x1\xFFFF\x3\x2C\x1\x35"+
			"\x2\x2C\x1\x5A\x3\x5B\x2\x5A\x1\x2C\x3\x5B\x1\x2C\x1\x61\x5\x2C\x1\x61"+
			"\x1\x2C\x4\x5B\x1\x5A\xA\x5B\x2\x2C\x1\x61\x2\x2C\x1\x61\x2\x2C\xA\x5B"+
			"\x2\x2C\x2\x5B";
		private const string DFA4_maxS =
			"\x1\xAD\x1\x89\x1\xFFFF\x1\xAD\x6\xFFFF\x2\x7F\x1\x2C\x1\xFFFF\x1\x2C"+
			"\x1\x3B\x1\x89\x1\x35\x1\x3B\x1\xAD\x1\x7F\x2\x61\x1\x6C\x2\x7F\x1\xAD"+
			"\x2\x61\x1\x6C\x1\x3B\x1\x7F\x2\x2C\x3\x3B\x1\x7F\x1\x2C\x2\x61\x2\x6C"+
			"\x1\x7F\x2\x61\x1\x6C\x2\x61\x1\x6C\x2\x61\x2\x6C\x1\x2C\x1\x3B\x1\x7F"+
			"\x1\x2C\x1\x3B\x1\x7F\x2\x2C\x1\x6C\x2\x61\x2\x6C\x2\x61\x3\x6C\x2\x2C"+
			"\x2\x6C";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x5C\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2E\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5C\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2E\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x6\xFFFF"+
				"\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "217:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x4\xFFFF";
		private const string DFA28_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA28_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA28_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA28_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "261:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA35_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA35_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "269:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x4\xFFFF";
		private const string DFA42_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA42_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA42_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA42_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "273:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x4\xFFFF";
		private const string DFA49_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA49_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA49_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA49_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "274:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA77 : DFA
	{
		private const string DFA77_eotS =
			"\x11\xFFFF";
		private const string DFA77_eofS =
			"\x11\xFFFF";
		private const string DFA77_minS =
			"\x1\x2C\x1\xFFFF\x2\x2C\x1\xFFFF\x4\x2C\x1\x58\x3\x2C\x2\x58\x1\x2C\x1"+
			"\x58";
		private const string DFA77_maxS =
			"\x1\xAD\x1\xFFFF\x1\xAD\x1\x9E\x1\xFFFF\x1\x2C\x1\x9E\x1\x6D\x1\xAD\x1"+
			"\x7E\x1\x2C\x1\x9E\x1\xAD\x2\x7E\x1\x2C\x1\x7E";
		private const string DFA77_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA77_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA77_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1"+
				"\xE\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x6\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1C\xFFFF\x1\x1\x11\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x18\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
		private static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
		private static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
		private static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
		private static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
		private static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
		private static readonly short[][] DFA77_transition;

		static DFA77()
		{
			int numStates = DFA77_transitionS.Length;
			DFA77_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA77_transition[i] = DFA.UnpackEncodedString(DFA77_transitionS[i]);
			}
		}

		public DFA77( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 77;
			this.eot = DFA77_eot;
			this.eof = DFA77_eof;
			this.min = DFA77_min;
			this.max = DFA77_max;
			this.accept = DFA77_accept;
			this.special = DFA77_special;
			this.transition = DFA77_transition;
		}

		public override string Description { get { return "354:15: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA94 : DFA
	{
		private const string DFA94_eotS =
			"\x9\xFFFF";
		private const string DFA94_eofS =
			"\x9\xFFFF";
		private const string DFA94_minS =
			"\x1\x2C\x1\x8\x4\xFFFF\x1\x2C\x1\xFFFF\x1\x8";
		private const string DFA94_maxS =
			"\x1\xAD\x1\xAB\x4\xFFFF\x1\x2C\x1\xFFFF\x1\xAB";
		private const string DFA94_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA94_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA94_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x2\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2C\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2C\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA94_eot = DFA.UnpackEncodedString(DFA94_eotS);
		private static readonly short[] DFA94_eof = DFA.UnpackEncodedString(DFA94_eofS);
		private static readonly char[] DFA94_min = DFA.UnpackEncodedStringToUnsignedChars(DFA94_minS);
		private static readonly char[] DFA94_max = DFA.UnpackEncodedStringToUnsignedChars(DFA94_maxS);
		private static readonly short[] DFA94_accept = DFA.UnpackEncodedString(DFA94_acceptS);
		private static readonly short[] DFA94_special = DFA.UnpackEncodedString(DFA94_specialS);
		private static readonly short[][] DFA94_transition;

		static DFA94()
		{
			int numStates = DFA94_transitionS.Length;
			DFA94_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA94_transition[i] = DFA.UnpackEncodedString(DFA94_transitionS[i]);
			}
		}

		public DFA94( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 94;
			this.eot = DFA94_eot;
			this.eof = DFA94_eof;
			this.min = DFA94_min;
			this.max = DFA94_max;
			this.accept = DFA94_accept;
			this.special = DFA94_special;
			this.transition = DFA94_transition;
		}

		public override string Description { get { return "394:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA103 : DFA
	{
		private const string DFA103_eotS =
			"\x4\xFFFF";
		private const string DFA103_eofS =
			"\x4\xFFFF";
		private const string DFA103_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA103_maxS =
			"\x1\x92\x1\xAD\x2\xFFFF";
		private const string DFA103_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA103_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA103_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x23\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA103_eot = DFA.UnpackEncodedString(DFA103_eotS);
		private static readonly short[] DFA103_eof = DFA.UnpackEncodedString(DFA103_eofS);
		private static readonly char[] DFA103_min = DFA.UnpackEncodedStringToUnsignedChars(DFA103_minS);
		private static readonly char[] DFA103_max = DFA.UnpackEncodedStringToUnsignedChars(DFA103_maxS);
		private static readonly short[] DFA103_accept = DFA.UnpackEncodedString(DFA103_acceptS);
		private static readonly short[] DFA103_special = DFA.UnpackEncodedString(DFA103_specialS);
		private static readonly short[][] DFA103_transition;

		static DFA103()
		{
			int numStates = DFA103_transitionS.Length;
			DFA103_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA103_transition[i] = DFA.UnpackEncodedString(DFA103_transitionS[i]);
			}
		}

		public DFA103( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 103;
			this.eot = DFA103_eot;
			this.eof = DFA103_eof;
			this.min = DFA103_min;
			this.max = DFA103_max;
			this.accept = DFA103_accept;
			this.special = DFA103_special;
			this.transition = DFA103_transition;
		}

		public override string Description { get { return "425:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x4\xFFFF";
		private const string DFA108_eofS =
			"\x4\xFFFF";
		private const string DFA108_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA108_maxS =
			"\x1\x92\x1\xAD\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x23\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "428:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA121 : DFA
	{
		private const string DFA121_eotS =
			"\x7\xFFFF";
		private const string DFA121_eofS =
			"\x7\xFFFF";
		private const string DFA121_minS =
			"\x1\x2C\x1\x8\x1\xFFFF\x1\x2C\x2\xFFFF\x1\x8";
		private const string DFA121_maxS =
			"\x1\xAD\x1\xAC\x1\xFFFF\x1\x2C\x2\xFFFF\x1\xAC";
		private const string DFA121_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA121_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA121_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x2\x2C\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\x5\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2C\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\x5\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2"
			};

		private static readonly short[] DFA121_eot = DFA.UnpackEncodedString(DFA121_eotS);
		private static readonly short[] DFA121_eof = DFA.UnpackEncodedString(DFA121_eofS);
		private static readonly char[] DFA121_min = DFA.UnpackEncodedStringToUnsignedChars(DFA121_minS);
		private static readonly char[] DFA121_max = DFA.UnpackEncodedStringToUnsignedChars(DFA121_maxS);
		private static readonly short[] DFA121_accept = DFA.UnpackEncodedString(DFA121_acceptS);
		private static readonly short[] DFA121_special = DFA.UnpackEncodedString(DFA121_specialS);
		private static readonly short[][] DFA121_transition;

		static DFA121()
		{
			int numStates = DFA121_transitionS.Length;
			DFA121_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA121_transition[i] = DFA.UnpackEncodedString(DFA121_transitionS[i]);
			}
		}

		public DFA121( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 121;
			this.eot = DFA121_eot;
			this.eof = DFA121_eof;
			this.min = DFA121_min;
			this.max = DFA121_max;
			this.accept = DFA121_accept;
			this.special = DFA121_special;
			this.transition = DFA121_transition;
		}

		public override string Description { get { return "458:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA163 : DFA
	{
		private const string DFA163_eotS =
			"\x7\xFFFF";
		private const string DFA163_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA163_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA163_maxS =
			"\x1\xA9\x1\xAD\x2\xFFFF\x2\xAD\x1\xFFFF";
		private const string DFA163_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA163_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA163_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x20\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x11\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x23\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				"\x1\x3\x23\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA163_eot = DFA.UnpackEncodedString(DFA163_eotS);
		private static readonly short[] DFA163_eof = DFA.UnpackEncodedString(DFA163_eofS);
		private static readonly char[] DFA163_min = DFA.UnpackEncodedStringToUnsignedChars(DFA163_minS);
		private static readonly char[] DFA163_max = DFA.UnpackEncodedStringToUnsignedChars(DFA163_maxS);
		private static readonly short[] DFA163_accept = DFA.UnpackEncodedString(DFA163_acceptS);
		private static readonly short[] DFA163_special = DFA.UnpackEncodedString(DFA163_specialS);
		private static readonly short[][] DFA163_transition;

		static DFA163()
		{
			int numStates = DFA163_transitionS.Length;
			DFA163_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA163_transition[i] = DFA.UnpackEncodedString(DFA163_transitionS[i]);
			}
		}

		public DFA163( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 163;
			this.eot = DFA163_eot;
			this.eof = DFA163_eof;
			this.min = DFA163_min;
			this.max = DFA163_max;
			this.accept = DFA163_accept;
			this.special = DFA163_special;
			this.transition = DFA163_transition;
		}

		public override string Description { get { return "509:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA152 : DFA
	{
		private const string DFA152_eotS =
			"\x4\xFFFF";
		private const string DFA152_eofS =
			"\x4\xFFFF";
		private const string DFA152_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA152_maxS =
			"\x2\x35\x2\xFFFF";
		private const string DFA152_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA152_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA152_transitionS =
			{
				"\x1\x2\x2C\xFFFF\x1\x1",
				"\x1\x2\x24\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA152_eot = DFA.UnpackEncodedString(DFA152_eotS);
		private static readonly short[] DFA152_eof = DFA.UnpackEncodedString(DFA152_eofS);
		private static readonly char[] DFA152_min = DFA.UnpackEncodedStringToUnsignedChars(DFA152_minS);
		private static readonly char[] DFA152_max = DFA.UnpackEncodedStringToUnsignedChars(DFA152_maxS);
		private static readonly short[] DFA152_accept = DFA.UnpackEncodedString(DFA152_acceptS);
		private static readonly short[] DFA152_special = DFA.UnpackEncodedString(DFA152_specialS);
		private static readonly short[][] DFA152_transition;

		static DFA152()
		{
			int numStates = DFA152_transitionS.Length;
			DFA152_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA152_transition[i] = DFA.UnpackEncodedString(DFA152_transitionS[i]);
			}
		}

		public DFA152( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 152;
			this.eot = DFA152_eot;
			this.eof = DFA152_eof;
			this.min = DFA152_min;
			this.max = DFA152_max;
			this.accept = DFA152_accept;
			this.special = DFA152_special;
			this.transition = DFA152_transition;
		}

		public override string Description { get { return "509:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA184 : DFA
	{
		private const string DFA184_eotS =
			"\x7\xFFFF";
		private const string DFA184_eofS =
			"\x7\xFFFF";
		private const string DFA184_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA184_maxS =
			"\x5\xAD\x2\xFFFF";
		private const string DFA184_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA184_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA184_transitionS =
			{
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA184_eot = DFA.UnpackEncodedString(DFA184_eotS);
		private static readonly short[] DFA184_eof = DFA.UnpackEncodedString(DFA184_eofS);
		private static readonly char[] DFA184_min = DFA.UnpackEncodedStringToUnsignedChars(DFA184_minS);
		private static readonly char[] DFA184_max = DFA.UnpackEncodedStringToUnsignedChars(DFA184_maxS);
		private static readonly short[] DFA184_accept = DFA.UnpackEncodedString(DFA184_acceptS);
		private static readonly short[] DFA184_special = DFA.UnpackEncodedString(DFA184_specialS);
		private static readonly short[][] DFA184_transition;

		static DFA184()
		{
			int numStates = DFA184_transitionS.Length;
			DFA184_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA184_transition[i] = DFA.UnpackEncodedString(DFA184_transitionS[i]);
			}
		}

		public DFA184( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 184;
			this.eot = DFA184_eot;
			this.eof = DFA184_eof;
			this.min = DFA184_min;
			this.max = DFA184_max;
			this.accept = DFA184_accept;
			this.special = DFA184_special;
			this.transition = DFA184_transition;
		}

		public override string Description { get { return "544:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA183 : DFA
	{
		private const string DFA183_eotS =
			"\x7\xFFFF";
		private const string DFA183_eofS =
			"\x7\xFFFF";
		private const string DFA183_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA183_maxS =
			"\x1\x7F\x4\xAD\x2\xFFFF";
		private const string DFA183_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA183_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA183_transitionS =
			{
				"\x1\x4\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA183_eot = DFA.UnpackEncodedString(DFA183_eotS);
		private static readonly short[] DFA183_eof = DFA.UnpackEncodedString(DFA183_eofS);
		private static readonly char[] DFA183_min = DFA.UnpackEncodedStringToUnsignedChars(DFA183_minS);
		private static readonly char[] DFA183_max = DFA.UnpackEncodedStringToUnsignedChars(DFA183_maxS);
		private static readonly short[] DFA183_accept = DFA.UnpackEncodedString(DFA183_acceptS);
		private static readonly short[] DFA183_special = DFA.UnpackEncodedString(DFA183_specialS);
		private static readonly short[][] DFA183_transition;

		static DFA183()
		{
			int numStates = DFA183_transitionS.Length;
			DFA183_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA183_transition[i] = DFA.UnpackEncodedString(DFA183_transitionS[i]);
			}
		}

		public DFA183( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 183;
			this.eot = DFA183_eot;
			this.eof = DFA183_eof;
			this.min = DFA183_min;
			this.max = DFA183_max;
			this.accept = DFA183_accept;
			this.special = DFA183_special;
			this.transition = DFA183_transition;
		}

		public override string Description { get { return "()* loopback of 544:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA192 : DFA
	{
		private const string DFA192_eotS =
			"\xB\xFFFF";
		private const string DFA192_eofS =
			"\xB\xFFFF";
		private const string DFA192_minS =
			"\x2\x2C\x1\xFFFF\x1\x54\x1\xFFFF\x2\x2C\x2\x54\x1\x2C\x1\x54";
		private const string DFA192_maxS =
			"\x2\xAD\x1\xFFFF\x1\xAC\x1\xFFFF\x1\x2C\x1\xAD\x2\xAC\x1\x2C\x1\xAC";
		private const string DFA192_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA192_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA192_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1C\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2"
			};

		private static readonly short[] DFA192_eot = DFA.UnpackEncodedString(DFA192_eotS);
		private static readonly short[] DFA192_eof = DFA.UnpackEncodedString(DFA192_eofS);
		private static readonly char[] DFA192_min = DFA.UnpackEncodedStringToUnsignedChars(DFA192_minS);
		private static readonly char[] DFA192_max = DFA.UnpackEncodedStringToUnsignedChars(DFA192_maxS);
		private static readonly short[] DFA192_accept = DFA.UnpackEncodedString(DFA192_acceptS);
		private static readonly short[] DFA192_special = DFA.UnpackEncodedString(DFA192_specialS);
		private static readonly short[][] DFA192_transition;

		static DFA192()
		{
			int numStates = DFA192_transitionS.Length;
			DFA192_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA192_transition[i] = DFA.UnpackEncodedString(DFA192_transitionS[i]);
			}
		}

		public DFA192( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}

		public override string Description { get { return "557:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA222 : DFA
	{
		private const string DFA222_eotS =
			"\x4\xFFFF";
		private const string DFA222_eofS =
			"\x4\xFFFF";
		private const string DFA222_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA222_maxS =
			"\x1\x61\x1\xAD\x2\xFFFF";
		private const string DFA222_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA222_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA222_transitionS =
			{
				"\x1\x2\x2C\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x23\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x19\xFFFF\x2\x3\x16\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x11\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA222_eot = DFA.UnpackEncodedString(DFA222_eotS);
		private static readonly short[] DFA222_eof = DFA.UnpackEncodedString(DFA222_eofS);
		private static readonly char[] DFA222_min = DFA.UnpackEncodedStringToUnsignedChars(DFA222_minS);
		private static readonly char[] DFA222_max = DFA.UnpackEncodedStringToUnsignedChars(DFA222_maxS);
		private static readonly short[] DFA222_accept = DFA.UnpackEncodedString(DFA222_acceptS);
		private static readonly short[] DFA222_special = DFA.UnpackEncodedString(DFA222_specialS);
		private static readonly short[][] DFA222_transition;

		static DFA222()
		{
			int numStates = DFA222_transitionS.Length;
			DFA222_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA222_transition[i] = DFA.UnpackEncodedString(DFA222_transitionS[i]);
			}
		}

		public DFA222( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 222;
			this.eot = DFA222_eot;
			this.eof = DFA222_eof;
			this.min = DFA222_min;
			this.max = DFA222_max;
			this.accept = DFA222_accept;
			this.special = DFA222_special;
			this.transition = DFA222_transition;
		}

		public override string Description { get { return "()* loopback of 660:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root571 = new BitSet(new ulong[]{0x20100000000000UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_root574 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block596 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block598 = new BitSet(new ulong[]{0x20100000000002UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _func_def_in_node621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item689 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_attribute_item692 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item694 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_attribute_item697 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item699 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_attribute_item703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_attribute_item721 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_attribute_item724 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item726 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_attribute_item729 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item731 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_attribute_item735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_attribute760 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _attribute_item_in_attribute762 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_attribute765 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _attribute_item_in_attribute767 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_attribute771 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute773 = new BitSet(new ulong[]{0x20000000000002UL,0x4000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc792 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc795 = new BitSet(new ulong[]{0x0UL,0x280000000000UL});
		public static readonly BitSet _107_in_global_alloc799 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_global_alloc801 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_global_alloc806 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_global_alloc810 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_global_alloc948 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc951 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_global_alloc954 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc956 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _attribute_in_global_using997 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_global_using1000 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1002 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _attribute_in_global_typedef1026 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_typedef1029 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_global_typedef1031 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_global_typedef1033 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_global_typedef1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_import_def1062 = new BitSet(new ulong[]{0x820000000000002UL});
		public static readonly BitSet _STRING_in_import_def1064 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1068 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_import_def1071 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1073 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _STRING_in_import_def1078 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1080 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1110 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_enum_def1113 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_enum_def1115 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_enum_def1117 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _ident_in_enum_def1120 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_enum_def1123 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_enum_def1125 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1158 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_namespace_def1161 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_namespace_def1163 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1166 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1169 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1171 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_namespace_def1174 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1204 = new BitSet(new ulong[]{0x0UL,0x0UL,0x140UL});
		public static readonly BitSet _136_in_class_def1209 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1211 = new BitSet(new ulong[]{0x20000000000002UL,0x880000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1214 = new BitSet(new ulong[]{0x20000000000002UL,0x80000000000UL});
		public static readonly BitSet _107_in_class_def1219 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1221 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _97_in_class_def1224 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1226 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1233 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_class_def1236 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_class_def1238 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_class_def1241 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_class_def1285 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_class_def1287 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1289 = new BitSet(new ulong[]{0x20000000000002UL,0x880004000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1292 = new BitSet(new ulong[]{0x20000000000002UL,0x80004000000UL});
		public static readonly BitSet _90_in_class_def1297 = new BitSet(new ulong[]{0x100000000000UL,0x200000000000UL});
		public static readonly BitSet _func_args_in_class_def1299 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_class_def1301 = new BitSet(new ulong[]{0x20000000000002UL,0x80000000000UL});
		public static readonly BitSet _107_in_class_def1306 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1308 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _97_in_class_def1311 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1313 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1320 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_class_def1323 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_class_def1325 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_class_def1328 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1383 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_type_list1386 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_list1388 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _type_single_in_type_name1410 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_name1414 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_name1417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1421 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1464 = new BitSet(new ulong[]{0x100000000000UL,0xC000000UL,0x40400200UL});
		public static readonly BitSet _type_list_in_type_name1466 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1469 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_name1471 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_name1474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1478 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1504 = new BitSet(new ulong[]{0x2UL,0x4000000001000000UL});
		public static readonly BitSet _88_in_type_single1508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_type_single1524 = new BitSet(new ulong[]{0x840100000000000UL,0xE000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_type_single1528 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_type_single1531 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_type_single1533 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_type_single1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_type_single1562 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_type_single1565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1612 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_type_no_array1616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1651 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_type_star1655 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1701 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_type_template_type1705 = new BitSet(new ulong[]{0x100000000000UL,0x80000004000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_template_type1708 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _97_in_type_template_type1711 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_template_type1713 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _119_in_type_template_type1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_type_ident1759 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x40400000UL});
		public static readonly BitSet _158_in_type_ident1762 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_type_ident1765 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_type_ident1768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1796 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_generic_parameter_inside1799 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1801 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _111_in_generic_parameter1823 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1825 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_generic_parameter1827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1842 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_func_args1845 = new BitSet(new ulong[]{0x100000000000UL,0x200000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1847 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1869 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_func_args_item1871 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_func_args_item1873 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_func_args_item1878 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_func_args_item1882 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_func_args_item1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item1936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_func_args_item1992 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_func_name2039 = new BitSet(new ulong[]{0x0UL,0x20450000000UL});
		public static readonly BitSet _operator_in_func_name2041 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_name2043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2069 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x200040400200UL});
		public static readonly BitSet _func_type_in_func_def2072 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x200000000000UL});
		public static readonly BitSet _173_in_func_def2075 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL});
		public static readonly BitSet _func_name_in_func_def2078 = new BitSet(new ulong[]{0x0UL,0x800004000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2080 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_func_def2083 = new BitSet(new ulong[]{0x100000000000UL,0x200008000000UL});
		public static readonly BitSet _func_args_in_func_def2085 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_def2088 = new BitSet(new ulong[]{0x20000000000000UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2092 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_func_def2145 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_func_def2147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2188 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2190 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2200 = new BitSet(new ulong[]{0x20000000000000UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2203 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _110_in_stmt_block_item2208 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2210 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2227 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2229 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2232 = new BitSet(new ulong[]{0x100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_stmt_block2235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2321 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _144_in_stmt_expr2331 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2333 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _164_in_stmt_expr2362 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2364 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _169_in_stmt_expr2393 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2395 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _165_in_stmt_expr2424 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2426 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _143_in_stmt_expr2455 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_expr2457 = new BitSet(new ulong[]{0x2UL,0x200000000UL,0x23000018000UL});
		public static readonly BitSet _97_in_stmt_expr2460 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_expr2462 = new BitSet(new ulong[]{0x2UL,0x200000000UL,0x23000018000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_defer2535 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_in_stmt_defer2537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2550 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_in_stmt_defer2552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_typedef2571 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2573 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_stmt_typedef2575 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_stmt_typedef2577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_stmt_using_item2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_using2608 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2610 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _157_in_stmt_return2631 = new BitSet(new ulong[]{0x840100000000002UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_return2633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2654 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_inline_stmt_block2657 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2659 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _144_in_stmt_if2681 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_if2683 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2686 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2689 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2692 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_if2695 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2697 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2732 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_if2755 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_if2757 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2760 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2763 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2766 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_if2769 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2771 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2810 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_while2843 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while2845 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2849 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while2876 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while2902 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while2904 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2908 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while2935 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_while2961 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while2963 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2966 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2991 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_for_range2993 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range2997 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000800UL});
		public static readonly BitSet _161_in_for_range3000 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3004 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_for_range3007 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_for_range3040 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3044 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_for_range3047 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3128 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_for_map3130 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_map3132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_for3174 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_for3178 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL});
		public static readonly BitSet _97_in_stmt_for3181 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_for3183 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3187 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_try3221 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3223 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3226 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3228 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_try3231 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3233 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3235 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_switch_item3261 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_switch_item3263 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL,0x100000000UL});
		public static readonly BitSet _97_in_switch_item3266 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_switch_item3268 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3274 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_switch_item3319 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_switch3357 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_switch3359 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3362 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3365 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3367 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3371 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3373 = new BitSet(new ulong[]{0x20000000000100UL,0x0UL,0x8000001000UL});
		public static readonly BitSet _140_in_stmt_switch3379 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3381 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3384 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3386 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3417 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_ident_list3420 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_ident_list3422 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3444 = new BitSet(new ulong[]{0x0UL,0x280000000000UL});
		public static readonly BitSet _107_in_stmt_alloc3448 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_stmt_alloc3450 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_stmt_alloc3455 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_stmt_alloc3459 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_alloc3573 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3577 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_stmt_alloc3580 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3582 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3612 = new BitSet(new ulong[]{0x2UL,0x1616041122400000UL,0x80000000002UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3616 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_stmt_modify3642 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_modify3671 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_modify3702 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3752 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3762 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3765 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3767 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_where_expr3770 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3774 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3778 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3814 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3817 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr3819 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3823 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3825 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr3830 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3832 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3885 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3888 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr3890 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3894 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3896 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr3901 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3903 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_where_expr3944 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3946 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3949 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr3951 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3955 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3957 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr3962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_let_expr4020 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_let_expr4022 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_let_expr4026 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4054 = new BitSet(new ulong[]{0x860300000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _INDENT_in_let_expr4059 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4061 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4064 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4066 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4142 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4145 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_let_expr4147 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_let_expr4151 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4153 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA885C400UL});
		public static readonly BitSet _146_in_let_expr4158 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4160 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4162 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_match_item4197 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_match_item4199 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_match_item4201 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_match_item4203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_match_expr4224 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_match_expr4226 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4229 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4232 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4234 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _match_item_in_match_expr4238 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4240 = new BitSet(new ulong[]{0x20000000000100UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_list_expr4289 = new BitSet(new ulong[]{0x860300000000100UL,0xE000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _97_in_list_expr4293 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4297 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _INDENT_in_list_expr4301 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4305 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _list_expr_in_list_expr4309 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_list_expr4313 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4317 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _INDENT_in_list_expr4321 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4325 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _list_expr_in_list_expr4329 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_list_expr4336 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4340 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _INDENT_in_list_expr4344 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4348 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_list_expr4352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4394 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lambda_type4412 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_lambda_type4414 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_lambda_type4416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lambda_expr4431 = new BitSet(new ulong[]{0x100000000000UL,0x200008000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4433 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_lambda_expr4436 = new BitSet(new ulong[]{0x0UL,0x40002004000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4438 = new BitSet(new ulong[]{0x0UL,0x40002000000000UL});
		public static readonly BitSet _101_in_lambda_expr4443 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_lambda_expr4480 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4562 = new BitSet(new ulong[]{0x2UL,0x414241122400000UL,0x80000000002UL});
		public static readonly BitSet _set_in_modify_expr4566 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_modify_expr4620 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4623 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4648 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _123_in_cond_expr4657 = new BitSet(new ulong[]{0x840100000000002UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4663 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_cond_expr4667 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4785 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _or_op_in_or_expr4796 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _and_expr_in_or_expr4800 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _bit_or_in_and_expr4842 = new BitSet(new ulong[]{0x2UL,0x800000UL,0x8UL});
		public static readonly BitSet _and_op_in_and_expr4853 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_or_in_and_expr4857 = new BitSet(new ulong[]{0x2UL,0x800000UL,0x8UL});
		public static readonly BitSet _bit_xor_in_bit_or4888 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_bit_or4897 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_xor_in_bit_or4901 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4931 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_bit_xor4940 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4944 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cmp_expr_in_bit_and4974 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_bit_and4983 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4987 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _chain_op_in_chain_list5079 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_chain_list5081 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5095 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _111_in_cmp_expr5105 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5109 = new BitSet(new ulong[]{0x100000000002UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _ident_in_cmp_expr5115 = new BitSet(new ulong[]{0x100000000000UL,0x80000000000000UL});
		public static readonly BitSet _119_in_cmp_expr5118 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr5188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5265 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5269 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5375 = new BitSet(new ulong[]{0x2UL,0x202000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5384 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _add_expr_in_shift_expr5388 = new BitSet(new ulong[]{0x2UL,0x202000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5418 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _94_in_add_expr5428 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5432 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _98_in_add_expr5457 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5461 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5499 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _92_in_mul_expr5509 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5513 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _105_in_mul_expr5540 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5544 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _85_in_mul_expr5571 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5575 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5615 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _infix_func_in_infix_expr5625 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _cast_expr_in_selector_expr5661 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _102_in_selector_expr5671 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_selector_expr5675 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _104_in_selector_expr5701 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_selector_expr5706 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5746 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_cast_expr5755 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_cast_expr5757 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_cast_expr5759 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_cast_expr5761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5823 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_prefix_expr5841 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x40400200UL});
		public static readonly BitSet _type_no_array_in_prefix_expr5843 = new BitSet(new ulong[]{0x0UL,0x4000000004000000UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr5847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr5869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_square_expr_list5906 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_square_expr_list5908 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_square_expr_list5911 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_square_expr_list5913 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_square_expr_list5917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_bracket_expr_list5937 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CDD080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list5940 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list5943 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list5945 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _91_in_bracket_expr_list5953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list5975 = new BitSet(new ulong[]{0x860300000000000UL,0x6000000CDD080000UL,0x20000D200000UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list5980 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list5982 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list5985 = new BitSet(new ulong[]{0x20000000000100UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list5989 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list5993 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list5997 = new BitSet(new ulong[]{0x20000000000100UL,0x208000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6001 = new BitSet(new ulong[]{0x20000000000100UL,0x8000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6006 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6008 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6015 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6017 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6047 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list6051 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6055 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6059 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6112 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _95_in_suffix_expr6122 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _99_in_suffix_expr6148 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _103_in_suffix_expr6171 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6173 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _101_in_suffix_expr6198 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6200 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6225 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6248 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _125_in_suffix_expr6271 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6273 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6275 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr6313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_atom_expr6328 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_atom_expr6330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_atom_expr6343 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_atom_expr6347 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_atom_expr6352 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_atom_expr6354 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_atom_expr6358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_atom_expr6385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6428 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6460 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _95_in_lvalue_suffix6470 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6498 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _103_in_lvalue_suffix6523 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6525 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6552 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6554 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6581 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix6584 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix6612 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_lvalue_atom6655 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lvalue6676 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6678 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_lvalue6681 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6683 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_lvalue6687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6712 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_ident6715 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _IDENT_in_ident6717 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _130_in_infix_func6730 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_infix_func6733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_infix_func6735 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
