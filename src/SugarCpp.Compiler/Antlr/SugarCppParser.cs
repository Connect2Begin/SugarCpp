//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-25 04:04:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'short'", "'signed'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Func=74;
	public const int Type_Ident=75;
	public const int Type_List=76;
	public const int Type_Ref=77;
	public const int Type_Star=78;
	public const int Type_Template=79;
	public const int White_Space=80;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:206:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(207, 4);
			// SugarCpp.g:207:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:4: NEWLINE
					{
					DebugLocation(207, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(207, 13);
			PushFollow(Follow._global_block_in_root562);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(207, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root564); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 207:30: -> ^( Root global_block )
			{
				DebugLocation(207, 33);
				// SugarCpp.g:207:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(207, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:210:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(211, 4);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==88||LA3_0==124||LA3_0==132||(LA3_0>=134 && LA3_0<=135)||LA3_0==139||LA3_0==143||LA3_0==148||LA3_0==151||(LA3_0>=156 && LA3_0<=158)||LA3_0==163||LA3_0==165||LA3_0==167||LA3_0==174))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:5: node ( NEWLINE )+
					{
					DebugLocation(211, 5);
					PushFollow(Follow._node_in_global_block584);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(211, 10);
					// SugarCpp.g:211:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:211:10: NEWLINE
							{
							DebugLocation(211, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block586); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(211, 24);
				// SugarCpp.g:211:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(211, 39);
				// SugarCpp.g:211:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(211, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._func_def_in_node609);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._class_def_in_node614);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._enum_def_in_node619);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:218:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._global_alloc_in_node624);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:219:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._global_using_in_node629);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:220:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._global_typedef_in_node634);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:221:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._import_def_in_node639);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:222:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._namespace_def_in_node644);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:225:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args656); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args661); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:228:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._ident_in_attribute_args666);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:231:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==135))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(232, 4);
				PushFollow(Follow._ident_in_attribute_item677);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(232, 10);
				// SugarCpp.g:232:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==88))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(232, 11);
					char_literal18=(IToken)Match(input,88,Follow._88_in_attribute_item680); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal18);

					DebugLocation(232, 15);
					PushFollow(Follow._attribute_args_in_attribute_item682);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(232, 30);
					// SugarCpp.g:232:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==95))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:31: ',' attribute_args
							{
							DebugLocation(232, 31);
							char_literal20=(IToken)Match(input,95,Follow._95_in_attribute_item685); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal20);

							DebugLocation(232, 35);
							PushFollow(Follow._attribute_args_in_attribute_item687);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(232, 52);
					char_literal22=(IToken)Match(input,89,Follow._89_in_attribute_item691); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(232, 61);
					// SugarCpp.g:232:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(232, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(232, 79);
					// SugarCpp.g:232:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(232, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(233, 4);
				string_literal23=(IToken)Match(input,135,Follow._135_in_attribute_item709); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_135.Add(string_literal23);

				DebugLocation(233, 12);
				// SugarCpp.g:233:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==88))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(233, 13);
					char_literal24=(IToken)Match(input,88,Follow._88_in_attribute_item712); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal24);

					DebugLocation(233, 17);
					PushFollow(Follow._attribute_args_in_attribute_item714);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(233, 32);
					// SugarCpp.g:233:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==95))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:233:33: ',' attribute_args
							{
							DebugLocation(233, 33);
							char_literal26=(IToken)Match(input,95,Follow._95_in_attribute_item717); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal26);

							DebugLocation(233, 37);
							PushFollow(Follow._attribute_args_in_attribute_item719);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(233, 54);
					char_literal28=(IToken)Match(input,89,Follow._89_in_attribute_item723); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 135, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(233, 63);
					// SugarCpp.g:233:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(233, 75);
					adaptor.AddChild(root_1, stream_135.NextNode());
					DebugLocation(233, 83);
					// SugarCpp.g:233:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(233, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:236:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==124))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(237, 5);
					char_literal29=(IToken)Match(input,124,Follow._124_in_attribute748); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal29);

					DebugLocation(237, 9);
					PushFollow(Follow._attribute_item_in_attribute750);
					attribute_item30=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(237, 24);
					// SugarCpp.g:237:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==95))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:25: ',' attribute_item
							{
							DebugLocation(237, 25);
							char_literal31=(IToken)Match(input,95,Follow._95_in_attribute753); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal31);

							DebugLocation(237, 29);
							PushFollow(Follow._attribute_item_in_attribute755);
							attribute_item32=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(237, 46);
					char_literal33=(IToken)Match(input,125,Follow._125_in_attribute759); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal33);

					DebugLocation(237, 50);
					// SugarCpp.g:237:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:50: NEWLINE
							{
							DebugLocation(237, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute761); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:61: -> ( attribute_item )+
			{
				DebugLocation(237, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(237, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:240:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==124))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: attribute
				{
				DebugLocation(241, 4);
				PushFollow(Follow._attribute_in_global_alloc780);
				attribute35=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(241, 15);
			PushFollow(Follow._ident_list_in_global_alloc783);
			ident_list36=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(241, 26);
			// SugarCpp.g:241:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==105))
			{
				alt19 = 1;
			}
			else if ((LA19_0==107))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(241, 28);
				char_literal37=(IToken)Match(input,105,Follow._105_in_global_alloc787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(char_literal37);

				DebugLocation(241, 32);
				PushFollow(Follow._type_name_in_global_alloc789);
				type_name38=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name38.Tree);
				DebugLocation(241, 42);
				// SugarCpp.g:241:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt17 = 1;
					}
					break;
				case 88:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:44: ( '=' | ':=' ) expr
					{
					DebugLocation(241, 44);
					// SugarCpp.g:241:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==114))
					{
						alt15 = 1;
					}
					else if ((LA15_0==107))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:241:45: '='
						{
						DebugLocation(241, 45);
						char_literal39=(IToken)Match(input,114,Follow._114_in_global_alloc794); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_114.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:241:51: ':='
						{
						DebugLocation(241, 51);
						string_literal40=(IToken)Match(input,107,Follow._107_in_global_alloc798); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_107.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(241, 57);
					PushFollow(Follow._expr_in_global_alloc801);
					expr41=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: attribute, expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 241:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(241, 65);
						// SugarCpp.g:241:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(241, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(241, 84);
						// SugarCpp.g:241:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(241, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(241, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(241, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(241, 116);
						// SugarCpp.g:241:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(241, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:242:43: '(' ( expr_list )? ')'
					{
					DebugLocation(242, 43);
					char_literal42=(IToken)Match(input,88,Follow._88_in_global_alloc861); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal42);

					DebugLocation(242, 47);
					// SugarCpp.g:242:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==81||LA16_0==86||LA16_0==88||LA16_0==90||(LA16_0>=92 && LA16_0<=93)||(LA16_0>=96 && LA16_0<=97)||(LA16_0>=123 && LA16_0<=124)||LA16_0==147||LA16_0==150||(LA16_0>=152 && LA16_0<=153)||LA16_0==174))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:47: expr_list
						{
						DebugLocation(242, 47);
						PushFollow(Follow._expr_list_in_global_alloc863);
						expr_list43=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(242, 58);
					char_literal44=(IToken)Match(input,89,Follow._89_in_global_alloc866); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal44);



					{
					// AST REWRITE
					// elements: attribute, expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 242:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(242, 65);
						// SugarCpp.g:242:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(242, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(242, 86);
						// SugarCpp.g:242:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(242, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(242, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(242, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(242, 118);
						// SugarCpp.g:242:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(242, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:243:17: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 243:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(243, 20);
						// SugarCpp.g:243:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(243, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(243, 39);
						// SugarCpp.g:243:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(243, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(243, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(243, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(245, 10);
				string_literal45=(IToken)Match(input,107,Follow._107_in_global_alloc939); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(string_literal45);

				DebugLocation(245, 15);
				// SugarCpp.g:245:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:245:16: expr ( ',' expr )*
				{
				DebugLocation(245, 16);
				PushFollow(Follow._expr_in_global_alloc942);
				expr46=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr46.Tree);
				DebugLocation(245, 21);
				// SugarCpp.g:245:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==95))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:245:22: ',' expr
						{
						DebugLocation(245, 22);
						char_literal47=(IToken)Match(input,95,Follow._95_in_global_alloc945); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal47);

						DebugLocation(245, 26);
						PushFollow(Follow._expr_in_global_alloc947);
						expr48=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: expr, 107, ident_list, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(245, 37);
					// SugarCpp.g:245:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(245, 44);
					// SugarCpp.g:245:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(245, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(245, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(245, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(245, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:249:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_using984);
				attribute49=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			string_literal50=(IToken)Match(input,167,Follow._167_in_global_using987); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal50);

			DebugLocation(250, 23);
			// SugarCpp.g:250:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==151))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:23: stmt_using_item
					{
					DebugLocation(250, 23);
					PushFollow(Follow._stmt_using_item_in_global_using989);
					stmt_using_item51=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(250, 43);
				// SugarCpp.g:250:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(250, 56);
				// SugarCpp.g:250:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(250, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(250, 67);
				// SugarCpp.g:250:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(250, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:253:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(253, 1);
		try
		{
			// SugarCpp.g:254:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(254, 4);
			// SugarCpp.g:254:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==124))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:4: attribute
				{
				DebugLocation(254, 4);
				PushFollow(Follow._attribute_in_global_typedef1013);
				attribute52=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(254, 15);
			string_literal53=(IToken)Match(input,163,Follow._163_in_global_typedef1016); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal53);

			DebugLocation(254, 22);
			PushFollow(Follow._ident_in_global_typedef1018);
			ident54=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident54.Tree);
			DebugLocation(254, 28);
			char_literal55=(IToken)Match(input,114,Follow._114_in_global_typedef1020); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal55);

			DebugLocation(254, 32);
			PushFollow(Follow._type_name_in_global_typedef1022);
			type_name56=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(254, 45);
				// SugarCpp.g:254:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(254, 60);
				// SugarCpp.g:254:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(254, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(254, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(254, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:257:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(257, 1);
		try
		{
			// SugarCpp.g:258:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(258, 4);
			// SugarCpp.g:258:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==124))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:4: attribute
				{
				DebugLocation(258, 4);
				PushFollow(Follow._attribute_in_import_def1046);
				attribute57=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(258, 15);
			string_literal58=(IToken)Match(input,143,Follow._143_in_import_def1049); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_143.Add(string_literal58);

			DebugLocation(258, 24);
			// SugarCpp.g:258:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:24: STRING
				{
				DebugLocation(258, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(258, 32);
			// SugarCpp.g:258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(258, 33);
				// SugarCpp.g:258:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:33: NEWLINE
						{
						DebugLocation(258, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1055); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(258, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1058); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT61);

				DebugLocation(258, 49);
				// SugarCpp.g:258:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:49: NEWLINE
						{
						DebugLocation(258, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1060); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(258, 59);
				// SugarCpp.g:258:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:60: STRING ( NEWLINE )+
						{
						DebugLocation(258, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1065); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING63);

						DebugLocation(258, 67);
						// SugarCpp.g:258:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:258:67: NEWLINE
								{
								DebugLocation(258, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1067); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(258, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1072); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(258, 90);
				// SugarCpp.g:258:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(258, 99);
				// SugarCpp.g:258:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(258, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(258, 110);
				// SugarCpp.g:258:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(258, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:261:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==124))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:4: attribute
				{
				DebugLocation(262, 4);
				PushFollow(Follow._attribute_in_enum_def1097);
				attribute66=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(262, 15);
			string_literal67=(IToken)Match(input,139,Follow._139_in_enum_def1100); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal67);

			DebugLocation(262, 22);
			PushFollow(Follow._ident_in_enum_def1102);
			ident68=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident68.Tree);
			DebugLocation(262, 28);
			char_literal69=(IToken)Match(input,114,Follow._114_in_enum_def1104); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal69);

			DebugLocation(262, 32);
			// SugarCpp.g:262:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:33: ident ( '|' ident )*
				{
				DebugLocation(262, 33);
				PushFollow(Follow._ident_in_enum_def1107);
				ident70=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident70.Tree);
				DebugLocation(262, 39);
				// SugarCpp.g:262:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==171))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:262:40: '|' ident
						{
						DebugLocation(262, 40);
						char_literal71=(IToken)Match(input,171,Follow._171_in_enum_def1110); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_171.Add(char_literal71);

						DebugLocation(262, 44);
						PushFollow(Follow._ident_in_enum_def1112);
						ident72=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(262, 57);
				// SugarCpp.g:262:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(262, 64);
				// SugarCpp.g:262:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(262, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(262, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(262, 81);
				// SugarCpp.g:262:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(262, 94);
				// SugarCpp.g:262:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(262, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:265:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==124))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: attribute
				{
				DebugLocation(266, 4);
				PushFollow(Follow._attribute_in_namespace_def1145);
				attribute73=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(266, 15);
			string_literal74=(IToken)Match(input,151,Follow._151_in_namespace_def1148); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_151.Add(string_literal74);

			DebugLocation(266, 27);
			PushFollow(Follow._ident_in_namespace_def1150);
			ident75=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident75.Tree);
			DebugLocation(266, 33);
			// SugarCpp.g:266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(266, 34);
				// SugarCpp.g:266:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:34: NEWLINE
						{
						DebugLocation(266, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1153); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(266, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1156); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT77);

				DebugLocation(266, 50);
				// SugarCpp.g:266:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:50: NEWLINE
						{
						DebugLocation(266, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1158); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(266, 59);
				PushFollow(Follow._global_block_in_namespace_def1161);
				global_block79=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block79.Tree);
				DebugLocation(266, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, attribute, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(266, 84);
				// SugarCpp.g:266:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(266, 96);
				// SugarCpp.g:266:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(266, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(266, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(266, 113);
				// SugarCpp.g:266:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(266, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:269:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken INDENT90 = default(IToken);
		IToken NEWLINE91 = default(IToken);
		IToken DEDENT93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken string_literal95 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken INDENT106 = default(IToken);
		IToken NEWLINE107 = default(IToken);
		IToken DEDENT109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree INDENT90_tree = default(CommonTree);
		CommonTree NEWLINE91_tree = default(CommonTree);
		CommonTree DEDENT93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree string_literal95_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree INDENT106_tree = default(CommonTree);
		CommonTree NEWLINE107_tree = default(CommonTree);
		CommonTree DEDENT109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(270, 5);
			// SugarCpp.g:270:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==124))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:5: attribute
				{
				DebugLocation(270, 5);
				PushFollow(Follow._attribute_in_class_def1191);
				attribute81=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(270, 16);
			// SugarCpp.g:270:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==134))
			{
				alt51 = 1;
			}
			else if ((LA51_0==132))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(270, 18);
				string_literal82=(IToken)Match(input,134,Follow._134_in_class_def1196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_134.Add(string_literal82);

				DebugLocation(270, 26);
				PushFollow(Follow._ident_in_class_def1198);
				ident83=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident83.Tree);
				DebugLocation(270, 32);
				// SugarCpp.g:270:32: ( generic_parameter )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==109))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:33: generic_parameter
					{
					DebugLocation(270, 33);
					PushFollow(Follow._generic_parameter_in_class_def1201);
					generic_parameter84=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter84.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(270, 53);
				// SugarCpp.g:270:53: ( ':' ident ( ',' ident )* )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==105))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:54: ':' ident ( ',' ident )*
					{
					DebugLocation(270, 54);
					char_literal85=(IToken)Match(input,105,Follow._105_in_class_def1206); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal85);

					DebugLocation(270, 58);
					PushFollow(Follow._ident_in_class_def1208);
					ident86=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident86.Tree);
					DebugLocation(270, 64);
					// SugarCpp.g:270:64: ( ',' ident )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=2;
						try { DebugEnterDecision(39, false);
						int LA39_0 = input.LA(1);

						if ((LA39_0==95))
						{
							alt39 = 1;
						}


						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:65: ',' ident
							{
							DebugLocation(270, 65);
							char_literal87=(IToken)Match(input,95,Follow._95_in_class_def1211); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal87);

							DebugLocation(270, 69);
							PushFollow(Follow._ident_in_class_def1213);
							ident88=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident88.Tree);

							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(270, 79);
				// SugarCpp.g:270:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				try
				{
					alt43 = dfa43.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(270, 80);
					// SugarCpp.g:270:80: ( NEWLINE )+
					int cnt41=0;
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_0 = input.LA(1);

						if ((LA41_0==NEWLINE))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:80: NEWLINE
							{
							DebugLocation(270, 80);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1220); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							if (cnt41 >= 1)
								goto loop41;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee41 = new EarlyExitException( 41, input );
							DebugRecognitionException(eee41);
							throw eee41;
						}
						cnt41++;
					}
					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(270, 89);
					INDENT90=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1223); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT90);

					DebugLocation(270, 96);
					// SugarCpp.g:270:96: ( NEWLINE )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==NEWLINE))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:96: NEWLINE
							{
							DebugLocation(270, 96);
							NEWLINE91=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1225); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE91);


							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(270, 105);
					PushFollow(Follow._global_block_in_class_def1228);
					global_block92=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block92.Tree);
					DebugLocation(270, 118);
					DEDENT93=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1230); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT93);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }



				{
				// AST REWRITE
				// elements: global_block, attribute, generic_parameter, ident, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(270, 130);
					// SugarCpp.g:270:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(270, 138);
					// SugarCpp.g:270:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(270, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(270, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(270, 155);
					// SugarCpp.g:270:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(270, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(270, 174);
					// SugarCpp.g:270:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(270, 175);
						// SugarCpp.g:270:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(270, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(270, 188);
						// SugarCpp.g:270:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(270, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(270, 198);
					// SugarCpp.g:270:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(270, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:271:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(271, 12);
				string_literal94=(IToken)Match(input,132,Follow._132_in_class_def1272); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(string_literal94);

				DebugLocation(271, 19);
				string_literal95=(IToken)Match(input,134,Follow._134_in_class_def1274); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_134.Add(string_literal95);

				DebugLocation(271, 27);
				PushFollow(Follow._ident_in_class_def1276);
				ident96=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident96.Tree);
				DebugLocation(271, 33);
				// SugarCpp.g:271:33: ( generic_parameter )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==109))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:34: generic_parameter
					{
					DebugLocation(271, 34);
					PushFollow(Follow._generic_parameter_in_class_def1279);
					generic_parameter97=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter97.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(271, 54);
				// SugarCpp.g:271:54: ( '(' func_args ')' )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==88))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:55: '(' func_args ')'
					{
					DebugLocation(271, 55);
					char_literal98=(IToken)Match(input,88,Follow._88_in_class_def1284); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal98);

					DebugLocation(271, 59);
					PushFollow(Follow._func_args_in_class_def1286);
					func_args99=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args99.Tree);
					DebugLocation(271, 69);
					char_literal100=(IToken)Match(input,89,Follow._89_in_class_def1288); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal100);


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(271, 75);
				// SugarCpp.g:271:75: ( ':' ident ( ',' ident )* )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==105))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:76: ':' ident ( ',' ident )*
					{
					DebugLocation(271, 76);
					char_literal101=(IToken)Match(input,105,Follow._105_in_class_def1293); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal101);

					DebugLocation(271, 80);
					PushFollow(Follow._ident_in_class_def1295);
					ident102=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident102.Tree);
					DebugLocation(271, 86);
					// SugarCpp.g:271:86: ( ',' ident )*
					try { DebugEnterSubRule(46);
					while (true)
					{
						int alt46=2;
						try { DebugEnterDecision(46, false);
						int LA46_0 = input.LA(1);

						if ((LA46_0==95))
						{
							alt46 = 1;
						}


						} finally { DebugExitDecision(46); }
						switch ( alt46 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:87: ',' ident
							{
							DebugLocation(271, 87);
							char_literal103=(IToken)Match(input,95,Follow._95_in_class_def1298); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal103);

							DebugLocation(271, 91);
							PushFollow(Follow._ident_in_class_def1300);
							ident104=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident104.Tree);

							}
							break;

						default:
							goto loop46;
						}
					}

					loop46:
						;

					} finally { DebugExitSubRule(46); }


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(271, 101);
				// SugarCpp.g:271:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				try
				{
					alt50 = dfa50.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(271, 102);
					// SugarCpp.g:271:102: ( NEWLINE )+
					int cnt48=0;
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:102: NEWLINE
							{
							DebugLocation(271, 102);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1307); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							if (cnt48 >= 1)
								goto loop48;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee48 = new EarlyExitException( 48, input );
							DebugRecognitionException(eee48);
							throw eee48;
						}
						cnt48++;
					}
					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(271, 111);
					INDENT106=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1310); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT106);

					DebugLocation(271, 118);
					// SugarCpp.g:271:118: ( NEWLINE )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==NEWLINE))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:118: NEWLINE
							{
							DebugLocation(271, 118);
							NEWLINE107=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1312); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE107);


							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }

					DebugLocation(271, 127);
					PushFollow(Follow._global_block_in_class_def1315);
					global_block108=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block108.Tree);
					DebugLocation(271, 140);
					DEDENT109=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1317); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT109);


					}
					break;

				}
				} finally { DebugExitSubRule(50); }



				{
				// AST REWRITE
				// elements: func_args, ident, attribute, global_block, 132, generic_parameter, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(271, 152);
					// SugarCpp.g:271:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(271, 160);
					adaptor.AddChild(root_1, stream_132.NextNode());
					DebugLocation(271, 167);
					// SugarCpp.g:271:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(271, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(271, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(271, 184);
					// SugarCpp.g:271:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(271, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(271, 203);
					// SugarCpp.g:271:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(271, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(271, 214);
					// SugarCpp.g:271:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(271, 215);
						// SugarCpp.g:271:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(271, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(271, 228);
						// SugarCpp.g:271:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(271, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(271, 238);
					// SugarCpp.g:271:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(271, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:275:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: type_name ( ',' type_name )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._type_name_in_type_list1370);
			type_name110=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name110.Tree);
			DebugLocation(276, 14);
			// SugarCpp.g:276:14: ( ',' type_name )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==95))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:15: ',' type_name
					{
					DebugLocation(276, 15);
					char_literal111=(IToken)Match(input,95,Follow._95_in_type_list1373); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal111);

					DebugLocation(276, 19);
					PushFollow(Follow._type_name_in_type_list1375);
					type_name112=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name112.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(276, 34);
				// SugarCpp.g:276:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(276, 46);
				// SugarCpp.g:276:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(276, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:279:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken string_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree string_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==IDENT||LA57_0==135||LA57_0==148||(LA57_0>=156 && LA57_0<=158)||LA57_0==165))
			{
				alt57 = 1;
			}
			else if ((LA57_0==88))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(280, 4);
				PushFollow(Follow._type_single_in_type_name1397);
				type_single113=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single113.Tree);
				DebugLocation(280, 16);
				// SugarCpp.g:280:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==99))
				{
					alt54 = 1;
				}
				else if ((LA54_0==DEDENT||LA54_0==IDENT||LA54_0==NEWLINE||(LA54_0>=88 && LA54_0<=89)||LA54_0==95||(LA54_0>=107 && LA54_0<=108)||LA54_0==114||LA54_0==117||(LA54_0>=141 && LA54_0<=142)||LA54_0==144||LA54_0==164||LA54_0==166||LA54_0==170||LA54_0==174))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(280, 18);
					string_literal114=(IToken)Match(input,99,Follow._99_in_type_name1401); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal114);

					DebugLocation(280, 23);
					// SugarCpp.g:280:23: ( type_name | '(' ')' )
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==IDENT||LA53_0==135||LA53_0==148||(LA53_0>=156 && LA53_0<=158)||LA53_0==165))
					{
						alt53 = 1;
					}
					else if ((LA53_0==88))
					{
						int LA53_2 = input.LA(2);

						if ((LA53_2==89))
						{
							int LA53_3 = input.LA(3);

							if ((LA53_3==99))
							{
								alt53 = 1;
							}
							else if ((LA53_3==DEDENT||LA53_3==IDENT||LA53_3==NEWLINE||(LA53_3>=88 && LA53_3<=89)||LA53_3==95||(LA53_3>=107 && LA53_3<=108)||LA53_3==114||LA53_3==117||(LA53_3>=141 && LA53_3<=142)||LA53_3==144||LA53_3==164||LA53_3==166||LA53_3==170||LA53_3==174))
							{
								alt53 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 53, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA53_2==IDENT||LA53_2==88||LA53_2==135||LA53_2==148||(LA53_2>=156 && LA53_2<=158)||LA53_2==165))
						{
							alt53 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 53, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:280:24: type_name
						{
						DebugLocation(280, 24);
						PushFollow(Follow._type_name_in_type_name1404);
						type_name115=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name115.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:280:36: '(' ')'
						{
						DebugLocation(280, 36);
						char_literal116=(IToken)Match(input,88,Follow._88_in_type_name1408); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_88.Add(char_literal116);

						DebugLocation(280, 40);
						char_literal117=(IToken)Match(input,89,Follow._89_in_type_name1410); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_89.Add(char_literal117);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(280, 48);
						// SugarCpp.g:280:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(280, 60);
						// SugarCpp.g:280:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(280, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(280, 85);
						// SugarCpp.g:280:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(280, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:9: -> type_single
					{
						DebugLocation(281, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:283:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(283, 4);
				char_literal118=(IToken)Match(input,88,Follow._88_in_type_name1451); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal118);

				DebugLocation(283, 8);
				// SugarCpp.g:283:8: ( type_list )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==88||LA55_0==135||LA55_0==148||(LA55_0>=156 && LA55_0<=158)||LA55_0==165))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:8: type_list
					{
					DebugLocation(283, 8);
					PushFollow(Follow._type_list_in_type_name1453);
					type_list119=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list119.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(283, 19);
				char_literal120=(IToken)Match(input,89,Follow._89_in_type_name1456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal120);

				DebugLocation(283, 23);
				string_literal121=(IToken)Match(input,99,Follow._99_in_type_name1458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_99.Add(string_literal121);

				DebugLocation(283, 28);
				// SugarCpp.g:283:28: ( type_name | '(' ')' )
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==135||LA56_0==148||(LA56_0>=156 && LA56_0<=158)||LA56_0==165))
				{
					alt56 = 1;
				}
				else if ((LA56_0==88))
				{
					int LA56_2 = input.LA(2);

					if ((LA56_2==89))
					{
						int LA56_3 = input.LA(3);

						if ((LA56_3==99))
						{
							alt56 = 1;
						}
						else if ((LA56_3==DEDENT||LA56_3==IDENT||LA56_3==NEWLINE||(LA56_3>=88 && LA56_3<=89)||LA56_3==95||(LA56_3>=107 && LA56_3<=108)||LA56_3==114||LA56_3==117||(LA56_3>=141 && LA56_3<=142)||LA56_3==144||LA56_3==164||LA56_3==166||LA56_3==170||LA56_3==174))
						{
							alt56 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 56, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA56_2==IDENT||LA56_2==88||LA56_2==135||LA56_2==148||(LA56_2>=156 && LA56_2<=158)||LA56_2==165))
					{
						alt56 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 56, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:29: type_name
					{
					DebugLocation(283, 29);
					PushFollow(Follow._type_name_in_type_name1461);
					type_name122=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name122.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:283:41: '(' ')'
					{
					DebugLocation(283, 41);
					char_literal123=(IToken)Match(input,88,Follow._88_in_type_name1465); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal123);

					DebugLocation(283, 45);
					char_literal124=(IToken)Match(input,89,Follow._89_in_type_name1467); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal124);


					}
					break;

				}
				} finally { DebugExitSubRule(56); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 283:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(283, 53);
					// SugarCpp.g:283:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(283, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(283, 65);
					// SugarCpp.g:283:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(283, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(283, 76);
					// SugarCpp.g:283:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(283, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:286:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(287, 4);
			PushFollow(Follow._type_star_in_type_single1491);
			type_star125=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star125.Tree);
			DebugLocation(287, 14);
			// SugarCpp.g:287:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt61=3;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt61 = 1;
				}
				break;
			case 124:
				{
				alt61 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 88:
			case 89:
			case 95:
			case 99:
			case 107:
			case 108:
			case 114:
			case 117:
			case 141:
			case 142:
			case 144:
			case 164:
			case 166:
			case 170:
			case 174:
				{
				alt61 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:16: '&'
				{
				DebugLocation(287, 16);
				char_literal126=(IToken)Match(input,86,Follow._86_in_type_single1495); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_86.Add(char_literal126);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(287, 23);
					// SugarCpp.g:287:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(287, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:288:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(288, 7);
				char_literal127=(IToken)Match(input,124,Follow._124_in_type_single1511); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal127);

				DebugLocation(288, 11);
				// SugarCpp.g:288:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==IDENT||LA60_0==NUMBER||LA60_0==STRING||LA60_0==81||LA60_0==86||LA60_0==88||LA60_0==90||(LA60_0>=92 && LA60_0<=93)||(LA60_0>=96 && LA60_0<=97)||(LA60_0>=123 && LA60_0<=124)||LA60_0==147||LA60_0==150||(LA60_0>=152 && LA60_0<=153)||LA60_0==174))
				{
					alt60 = 1;
				}
				else if ((LA60_0==95||LA60_0==125))
				{
					alt60 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:288:13: expr ( ',' expr )* ']'
					{
					DebugLocation(288, 13);
					PushFollow(Follow._expr_in_type_single1515);
					expr128=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr128.Tree);
					DebugLocation(288, 18);
					// SugarCpp.g:288:18: ( ',' expr )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==95))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:288:19: ',' expr
							{
							DebugLocation(288, 19);
							char_literal129=(IToken)Match(input,95,Follow._95_in_type_single1518); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal129);

							DebugLocation(288, 23);
							PushFollow(Follow._expr_in_type_single1520);
							expr130=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr130.Tree);

							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(288, 30);
					char_literal131=(IToken)Match(input,125,Follow._125_in_type_single1524); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal131);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 288:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(288, 37);
						// SugarCpp.g:288:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(288, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(288, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(288, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(288, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:289:13: ( ',' )* ']'
					{
					DebugLocation(289, 13);
					// SugarCpp.g:289:13: ( ',' )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==95))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:289:13: ','
							{
							DebugLocation(289, 13);
							char_literal132=(IToken)Match(input,95,Follow._95_in_type_single1549); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal132);


							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(289, 18);
					char_literal133=(IToken)Match(input,125,Follow._125_in_type_single1552); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal133);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 289:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(289, 25);
						// SugarCpp.g:289:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(289, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(289, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(289, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(289, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:291:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:7: -> type_star
				{
					DebugLocation(291, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:295:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(295, 1);
		try
		{
			// SugarCpp.g:296:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:296:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(296, 4);
			PushFollow(Follow._type_star_in_type_no_array1599);
			type_star134=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star134.Tree);
			DebugLocation(296, 14);
			// SugarCpp.g:296:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==86))
			{
				alt62 = 1;
			}
			else if ((LA62_0==88||LA62_0==124))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:296:16: '&'
				{
				DebugLocation(296, 16);
				char_literal135=(IToken)Match(input,86,Follow._86_in_type_no_array1603); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_86.Add(char_literal135);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(296, 23);
					// SugarCpp.g:296:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(296, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:297:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:7: -> type_star
				{
					DebugLocation(297, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:301:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(302, 4);
			PushFollow(Follow._type_template_type_in_type_star1638);
			type_template_type136=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type136.Tree);
			DebugLocation(302, 23);
			// SugarCpp.g:302:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==90))
			{
				alt64 = 1;
			}
			else if ((LA64_0==DEDENT||LA64_0==IDENT||LA64_0==NEWLINE||LA64_0==86||(LA64_0>=88 && LA64_0<=89)||LA64_0==95||LA64_0==99||(LA64_0>=107 && LA64_0<=108)||LA64_0==114||LA64_0==117||LA64_0==124||(LA64_0>=141 && LA64_0<=142)||LA64_0==144||LA64_0==164||LA64_0==166||LA64_0==170||LA64_0==174))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:302:25: ( '*' )+
				{
				DebugLocation(302, 25);
				// SugarCpp.g:302:25: ( '*' )+
				int cnt63=0;
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==90))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:302:25: '*'
						{
						DebugLocation(302, 25);
						char_literal137=(IToken)Match(input,90,Follow._90_in_type_star1642); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_90.Add(char_literal137);


						}
						break;

					default:
						if (cnt63 >= 1)
							goto loop63;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee63 = new EarlyExitException( 63, input );
						DebugRecognitionException(eee63);
						throw eee63;
					}
					cnt63++;
				}
				loop63:
					;

				} finally { DebugExitSubRule(63); }



				{
				// AST REWRITE
				// elements: type_template_type, 90
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(302, 33);
					// SugarCpp.g:302:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(302, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(302, 64);
					if (!(stream_90.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_90.HasNext )
					{
						DebugLocation(302, 64);
						adaptor.AddChild(root_1, stream_90.NextNode());

					}
					stream_90.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:303:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:10: -> type_template_type
				{
					DebugLocation(303, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:307:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(308, 4);
			PushFollow(Follow._type_ident_in_type_template_type1688);
			type_ident138=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident138.Tree);
			DebugLocation(308, 15);
			// SugarCpp.g:308:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==109))
			{
				alt67 = 1;
			}
			else if ((LA67_0==DEDENT||LA67_0==IDENT||LA67_0==NEWLINE||LA67_0==86||(LA67_0>=88 && LA67_0<=90)||LA67_0==95||LA67_0==99||(LA67_0>=107 && LA67_0<=108)||LA67_0==114||LA67_0==117||LA67_0==124||(LA67_0>=141 && LA67_0<=142)||LA67_0==144||LA67_0==164||LA67_0==166||LA67_0==170||LA67_0==174))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(308, 17);
				char_literal139=(IToken)Match(input,109,Follow._109_in_type_template_type1692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal139);

				DebugLocation(308, 21);
				// SugarCpp.g:308:21: ( type_name ( ',' type_name )* )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==IDENT||LA66_0==88||LA66_0==135||LA66_0==148||(LA66_0>=156 && LA66_0<=158)||LA66_0==165))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:22: type_name ( ',' type_name )*
					{
					DebugLocation(308, 22);
					PushFollow(Follow._type_name_in_type_template_type1695);
					type_name140=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name140.Tree);
					DebugLocation(308, 32);
					// SugarCpp.g:308:32: ( ',' type_name )*
					try { DebugEnterSubRule(65);
					while (true)
					{
						int alt65=2;
						try { DebugEnterDecision(65, false);
						int LA65_0 = input.LA(1);

						if ((LA65_0==95))
						{
							alt65 = 1;
						}


						} finally { DebugExitDecision(65); }
						switch ( alt65 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:308:33: ',' type_name
							{
							DebugLocation(308, 33);
							char_literal141=(IToken)Match(input,95,Follow._95_in_type_template_type1698); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal141);

							DebugLocation(308, 37);
							PushFollow(Follow._type_name_in_type_template_type1700);
							type_name142=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name142.Tree);

							}
							break;

						default:
							goto loop65;
						}
					}

					loop65:
						;

					} finally { DebugExitSubRule(65); }


					}
					break;

				}
				} finally { DebugExitSubRule(66); }

				DebugLocation(308, 51);
				char_literal143=(IToken)Match(input,117,Follow._117_in_type_template_type1706); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(char_literal143);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(308, 58);
					// SugarCpp.g:308:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(308, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(308, 85);
					// SugarCpp.g:308:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(308, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:8: -> type_ident
				{
					DebugLocation(309, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_sign();
	partial void LeaveRule_type_sign();

	// $ANTLR start "type_sign"
	// SugarCpp.g:313:1: type_sign : ( 'unsigned' | 'signed' );
	[GrammarRule("type_sign")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_sign()
	{
		EnterRule_type_sign();
		EnterRule("type_sign", 20);
		TraceIn("type_sign", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set144 = default(IToken);

		CommonTree set144_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_sign");
		DebugLocation(313, 33);
		try
		{
			// SugarCpp.g:313:10: ( 'unsigned' | 'signed' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(313, 10);

			set144=(IToken)input.LT(1);
			if (input.LA(1)==157||input.LA(1)==165)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set144));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_sign", 20);
			LeaveRule("type_sign", 20);
			LeaveRule_type_sign();
		}
		DebugLocation(313, 33);
		} finally { DebugExitRule(GrammarFileName, "type_sign"); }
		return retval;

	}
	// $ANTLR end "type_sign"

	partial void EnterRule_type_size();
	partial void LeaveRule_type_size();

	// $ANTLR start "type_size"
	// SugarCpp.g:314:1: type_size : ( 'long' | 'short' );
	[GrammarRule("type_size")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_size()
	{
		EnterRule_type_size();
		EnterRule("type_size", 21);
		TraceIn("type_size", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set145 = default(IToken);

		CommonTree set145_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_size");
		DebugLocation(314, 28);
		try
		{
			// SugarCpp.g:314:10: ( 'long' | 'short' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(314, 10);

			set145=(IToken)input.LT(1);
			if (input.LA(1)==148||input.LA(1)==156)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set145));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_size", 21);
			LeaveRule("type_size", 21);
			LeaveRule_type_size();
		}
		DebugLocation(314, 28);
		} finally { DebugExitRule(GrammarFileName, "type_size"); }
		return retval;

	}
	// $ANTLR end "type_size"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:315:1: type_ident options {backtrack=true; } : ( ( 'const' )? ( ( type_sign )? ( type_size )* ident -> ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident ) | 'struct' ident -> ^( Type_Ident ( 'const' )? 'struct' ident ) ) | ( 'unsigned' )? ( 'signed' )? ( type_size )+ -> ^( Type_Ident ( 'unsigned' )? ( 'signed' )? ( type_size )+ ) );
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 22);
		TraceIn("type_ident", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal150 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken string_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_sign147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_size148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_size154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree string_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_type_sign=new RewriteRuleSubtreeStream(adaptor,"rule type_sign");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_size=new RewriteRuleSubtreeStream(adaptor,"rule type_size");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:320:2: ( ( 'const' )? ( ( type_sign )? ( type_size )* ident -> ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident ) | 'struct' ident -> ^( Type_Ident ( 'const' )? 'struct' ident ) ) | ( 'unsigned' )? ( 'signed' )? ( type_size )+ -> ^( Type_Ident ( 'unsigned' )? ( 'signed' )? ( type_size )+ ) )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 135:
			case 158:
				{
				alt75 = 1;
				}
				break;
			case 165:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 148:
			case 156:
				{
				int LA75_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 157:
				{
				int LA75_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: ( 'const' )? ( ( type_sign )? ( type_size )* ident -> ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident ) | 'struct' ident -> ^( Type_Ident ( 'const' )? 'struct' ident ) )
				{
				DebugLocation(320, 4);
				// SugarCpp.g:320:4: ( 'const' )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==135))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:4: 'const'
					{
					DebugLocation(320, 4);
					string_literal146=(IToken)Match(input,135,Follow._135_in_type_ident1778); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_135.Add(string_literal146);


					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(320, 13);
				// SugarCpp.g:320:13: ( ( type_sign )? ( type_size )* ident -> ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident ) | 'struct' ident -> ^( Type_Ident ( 'const' )? 'struct' ident ) )
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==IDENT||LA71_0==148||(LA71_0>=156 && LA71_0<=157)||LA71_0==165))
				{
					alt71 = 1;
				}
				else if ((LA71_0==158))
				{
					alt71 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:15: ( type_sign )? ( type_size )* ident
					{
					DebugLocation(320, 15);
					// SugarCpp.g:320:15: ( type_sign )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==157||LA69_0==165))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:320:15: type_sign
						{
						DebugLocation(320, 15);
						PushFollow(Follow._type_sign_in_type_ident1783);
						type_sign147=type_sign();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_sign.Add(type_sign147.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(320, 26);
					// SugarCpp.g:320:26: ( type_size )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==148||LA70_0==156))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:320:26: type_size
							{
							DebugLocation(320, 26);
							PushFollow(Follow._type_size_in_type_ident1786);
							type_size148=type_size();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_size.Add(type_size148.Tree);

							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }

					DebugLocation(320, 37);
					PushFollow(Follow._ident_in_type_ident1789);
					ident149=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident149.Tree);


					{
					// AST REWRITE
					// elements: ident, type_size, 135, type_sign
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 320:43: -> ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident )
					{
						DebugLocation(320, 46);
						// SugarCpp.g:320:46: ^( Type_Ident ( 'const' )? ( type_sign )? ( type_size )* ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(320, 48);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

						DebugLocation(320, 59);
						// SugarCpp.g:320:59: ( 'const' )?
						if (stream_135.HasNext)
						{
							DebugLocation(320, 59);
							adaptor.AddChild(root_1, stream_135.NextNode());

						}
						stream_135.Reset();
						DebugLocation(320, 68);
						// SugarCpp.g:320:68: ( type_sign )?
						if (stream_type_sign.HasNext)
						{
							DebugLocation(320, 68);
							adaptor.AddChild(root_1, stream_type_sign.NextTree());

						}
						stream_type_sign.Reset();
						DebugLocation(320, 79);
						// SugarCpp.g:320:79: ( type_size )*
						while ( stream_type_size.HasNext )
						{
							DebugLocation(320, 79);
							adaptor.AddChild(root_1, stream_type_size.NextTree());

						}
						stream_type_size.Reset();
						DebugLocation(320, 90);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:321:9: 'struct' ident
					{
					DebugLocation(321, 9);
					string_literal150=(IToken)Match(input,158,Follow._158_in_type_ident1816); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_158.Add(string_literal150);

					DebugLocation(321, 18);
					PushFollow(Follow._ident_in_type_ident1818);
					ident151=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident151.Tree);


					{
					// AST REWRITE
					// elements: 158, 135, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 321:24: -> ^( Type_Ident ( 'const' )? 'struct' ident )
					{
						DebugLocation(321, 27);
						// SugarCpp.g:321:27: ^( Type_Ident ( 'const' )? 'struct' ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(321, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

						DebugLocation(321, 40);
						// SugarCpp.g:321:40: ( 'const' )?
						if (stream_135.HasNext)
						{
							DebugLocation(321, 40);
							adaptor.AddChild(root_1, stream_135.NextNode());

						}
						stream_135.Reset();
						DebugLocation(321, 49);
						adaptor.AddChild(root_1, stream_158.NextNode());
						DebugLocation(321, 58);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:323:4: ( 'unsigned' )? ( 'signed' )? ( type_size )+
				{
				DebugLocation(323, 4);
				// SugarCpp.g:323:4: ( 'unsigned' )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==165))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:4: 'unsigned'
					{
					DebugLocation(323, 4);
					string_literal152=(IToken)Match(input,165,Follow._165_in_type_ident1844); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal152);


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(323, 16);
				// SugarCpp.g:323:16: ( 'signed' )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==157))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:16: 'signed'
					{
					DebugLocation(323, 16);
					string_literal153=(IToken)Match(input,157,Follow._157_in_type_ident1847); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_157.Add(string_literal153);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(323, 26);
				// SugarCpp.g:323:26: ( type_size )+
				int cnt74=0;
				try { DebugEnterSubRule(74);
				while (true)
				{
					int alt74=2;
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==148||LA74_0==156))
					{
						alt74 = 1;
					}


					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:323:26: type_size
						{
						DebugLocation(323, 26);
						PushFollow(Follow._type_size_in_type_ident1850);
						type_size154=type_size();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_size.Add(type_size154.Tree);

						}
						break;

					default:
						if (cnt74 >= 1)
							goto loop74;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee74 = new EarlyExitException( 74, input );
						DebugRecognitionException(eee74);
						throw eee74;
					}
					cnt74++;
				}
				loop74:
					;

				} finally { DebugExitSubRule(74); }



				{
				// AST REWRITE
				// elements: 165, type_size, 157
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:38: -> ^( Type_Ident ( 'unsigned' )? ( 'signed' )? ( type_size )+ )
				{
					DebugLocation(323, 41);
					// SugarCpp.g:323:41: ^( Type_Ident ( 'unsigned' )? ( 'signed' )? ( type_size )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

					DebugLocation(323, 54);
					// SugarCpp.g:323:54: ( 'unsigned' )?
					if (stream_165.HasNext)
					{
						DebugLocation(323, 54);
						adaptor.AddChild(root_1, stream_165.NextNode());

					}
					stream_165.Reset();
					DebugLocation(323, 66);
					// SugarCpp.g:323:66: ( 'signed' )?
					if (stream_157.HasNext)
					{
						DebugLocation(323, 66);
						adaptor.AddChild(root_1, stream_157.NextNode());

					}
					stream_157.Reset();
					DebugLocation(323, 76);
					if (!(stream_type_size.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_type_size.HasNext )
					{
						DebugLocation(323, 76);
						adaptor.AddChild(root_1, stream_type_size.NextTree());

					}
					stream_type_size.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 22);
			LeaveRule("type_ident", 22);
			LeaveRule_type_ident();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:326:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 23);
		TraceIn("generic_parameter_inside", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(326, 1);
		try
		{
			// SugarCpp.g:327:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: ident ( ',' ident )*
			{
			DebugLocation(327, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1878);
			ident155=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident155.Tree);
			DebugLocation(327, 10);
			// SugarCpp.g:327:10: ( ',' ident )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==95))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:327:11: ',' ident
					{
					DebugLocation(327, 11);
					char_literal156=(IToken)Match(input,95,Follow._95_in_generic_parameter_inside1881); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal156);

					DebugLocation(327, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1883);
					ident157=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident157.Tree);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(327, 26);
				// SugarCpp.g:327:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(327, 47);
				// SugarCpp.g:327:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(327, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 23);
			LeaveRule("generic_parameter_inside", 23);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:330:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 24);
		TraceIn("generic_parameter", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(330, 1);
		try
		{
			// SugarCpp.g:331:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(331, 4);
			char_literal158=(IToken)Match(input,109,Follow._109_in_generic_parameter1905); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(char_literal158);

			DebugLocation(331, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1907);
			generic_parameter_inside159=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside159.Tree);
			DebugLocation(331, 33);
			char_literal160=(IToken)Match(input,117,Follow._117_in_generic_parameter1909); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_117.Add(char_literal160);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:37: -> generic_parameter_inside
			{
				DebugLocation(331, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 24);
			LeaveRule("generic_parameter", 24);
			LeaveRule_generic_parameter();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:334:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 25);
		TraceIn("func_args", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(335, 4);
			PushFollow(Follow._func_args_item_in_func_args1924);
			func_args_item161=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item161.Tree);
			DebugLocation(335, 19);
			// SugarCpp.g:335:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==95))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:335:20: ',' func_args_item
					{
					DebugLocation(335, 20);
					char_literal162=(IToken)Match(input,95,Follow._95_in_func_args1927); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal162);

					DebugLocation(335, 24);
					PushFollow(Follow._func_args_item_in_func_args1929);
					func_args_item163=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item163.Tree);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(335, 44);
				// SugarCpp.g:335:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(335, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(335, 56);
				// SugarCpp.g:335:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(335, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 25);
			LeaveRule("func_args", 25);
			LeaveRule_func_args();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:338:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 26);
		TraceIn("func_args_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken string_literal168 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken string_literal173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree string_literal168_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree string_literal173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==IDENT))
			{
				alt81 = 1;
			}
			else if ((LA81_0==107))
			{
				alt81 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:339:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(339, 4);
				PushFollow(Follow._ident_list_in_func_args_item1951);
				ident_list164=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list164.Tree);
				DebugLocation(339, 15);
				char_literal165=(IToken)Match(input,105,Follow._105_in_func_args_item1953); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(char_literal165);

				DebugLocation(339, 19);
				PushFollow(Follow._type_name_in_func_args_item1955);
				type_name166=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name166.Tree);
				DebugLocation(339, 29);
				// SugarCpp.g:339:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt80=3;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt80 = 1;
					}
					break;
				case 88:
					{
					alt80 = 2;
					}
					break;
				case 89:
				case 95:
					{
					alt80 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:31: ( '=' | ':=' ) expr
					{
					DebugLocation(339, 31);
					// SugarCpp.g:339:31: ( '=' | ':=' )
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==114))
					{
						alt78 = 1;
					}
					else if ((LA78_0==107))
					{
						alt78 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:339:32: '='
						{
						DebugLocation(339, 32);
						char_literal167=(IToken)Match(input,114,Follow._114_in_func_args_item1960); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_114.Add(char_literal167);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:339:38: ':='
						{
						DebugLocation(339, 38);
						string_literal168=(IToken)Match(input,107,Follow._107_in_func_args_item1964); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_107.Add(string_literal168);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(339, 44);
					PushFollow(Follow._expr_in_func_args_item1967);
					expr169=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr169.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(339, 53);
						// SugarCpp.g:339:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(339, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(339, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(339, 93);
						// SugarCpp.g:339:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(339, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:340:33: '(' ( expr_list )? ')'
					{
					DebugLocation(340, 33);
					char_literal170=(IToken)Match(input,88,Follow._88_in_func_args_item2015); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal170);

					DebugLocation(340, 37);
					// SugarCpp.g:340:37: ( expr_list )?
					int alt79=2;
					try { DebugEnterSubRule(79);
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==IDENT||LA79_0==NUMBER||LA79_0==STRING||LA79_0==81||LA79_0==86||LA79_0==88||LA79_0==90||(LA79_0>=92 && LA79_0<=93)||(LA79_0>=96 && LA79_0<=97)||(LA79_0>=123 && LA79_0<=124)||LA79_0==147||LA79_0==150||(LA79_0>=152 && LA79_0<=153)||LA79_0==174))
					{
						alt79 = 1;
					}
					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:340:37: expr_list
						{
						DebugLocation(340, 37);
						PushFollow(Follow._expr_list_in_func_args_item2017);
						expr_list171=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list171.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(79); }

					DebugLocation(340, 48);
					char_literal172=(IToken)Match(input,89,Follow._89_in_func_args_item2020); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal172);



					{
					// AST REWRITE
					// elements: ident_list, expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 340:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(340, 56);
						// SugarCpp.g:340:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(340, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(340, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(340, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(340, 98);
						// SugarCpp.g:340:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(340, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:341:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(341, 18);
						// SugarCpp.g:341:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(341, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(341, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:343:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 8);
				string_literal173=(IToken)Match(input,107,Follow._107_in_func_args_item2077); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal173_tree = (CommonTree)adaptor.Create(string_literal173);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal173_tree, root_0);
				}
				DebugLocation(343, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2081);
				modify_expr174=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr174.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 26);
			LeaveRule("func_args_item", 26);
			LeaveRule_func_args_item();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:346:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 27);
		TraceIn("operator", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set175 = default(IToken);

		CommonTree set175_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 2);

			set175=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set175));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 27);
			LeaveRule("operator", 27);
			LeaveRule_operator();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:350:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 28);
		TraceIn("func_name", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal177 = default(IToken);
		IToken char_literal179 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt82=2;
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==IDENT))
			{
				alt82 = 1;
			}
			else if ((LA82_0==88))
			{
				alt82 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:4: ident
				{
				DebugLocation(351, 4);
				PushFollow(Follow._ident_in_func_name2115);
				ident176=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident176.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 351:10: -> ident
				{
					DebugLocation(351, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:352:4: '(' operator ')'
				{
				DebugLocation(352, 4);
				char_literal177=(IToken)Match(input,88,Follow._88_in_func_name2124); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal177);

				DebugLocation(352, 8);
				PushFollow(Follow._operator_in_func_name2126);
				operator178=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator178.Tree);
				DebugLocation(352, 17);
				char_literal179=(IToken)Match(input,89,Follow._89_in_func_name2128); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal179);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 352:21: -> operator
				{
					DebugLocation(352, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 28);
			LeaveRule("func_name", 28);
			LeaveRule_func_name();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:355:1: func_def : ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 29);
		TraceIn("func_def", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal182 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken NEWLINE188 = default(IToken);
		IToken char_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree NEWLINE188_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(355, 4);
		try
		{
			// SugarCpp.g:356:2: ( ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(356, 4);
			// SugarCpp.g:356:4: ( attribute )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==124))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:4: attribute
				{
				DebugLocation(356, 4);
				PushFollow(Follow._attribute_in_func_def2143);
				attribute180=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute180.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(356, 15);
			// SugarCpp.g:356:15: ( type_name )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			try
			{
				alt84 = dfa84.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:15: type_name
				{
				DebugLocation(356, 15);
				PushFollow(Follow._type_name_in_func_def2146);
				type_name181=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(356, 26);
			// SugarCpp.g:356:26: ( '~' )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==174))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:26: '~'
				{
				DebugLocation(356, 26);
				char_literal182=(IToken)Match(input,174,Follow._174_in_func_def2149); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal182);


				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(356, 31);
			PushFollow(Follow._func_name_in_func_def2152);
			func_name183=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name183.Tree);
			DebugLocation(356, 41);
			// SugarCpp.g:356:41: ( generic_parameter )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==109))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:41: generic_parameter
				{
				DebugLocation(356, 41);
				PushFollow(Follow._generic_parameter_in_func_def2154);
				generic_parameter184=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter184.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(356, 60);
			char_literal185=(IToken)Match(input,88,Follow._88_in_func_def2157); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal185);

			DebugLocation(356, 64);
			// SugarCpp.g:356:64: ( func_args )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==IDENT||LA87_0==107))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:64: func_args
				{
				DebugLocation(356, 64);
				PushFollow(Follow._func_args_in_func_def2159);
				func_args186=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args186.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(356, 75);
			char_literal187=(IToken)Match(input,89,Follow._89_in_func_def2162); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_89.Add(char_literal187);

			DebugLocation(356, 79);
			// SugarCpp.g:356:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_0 = input.LA(1);

			if ((LA89_0==NEWLINE))
			{
				alt89 = 1;
			}
			else if ((LA89_0==114))
			{
				alt89 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:80: ( NEWLINE )+ stmt_block
				{
				DebugLocation(356, 80);
				// SugarCpp.g:356:80: ( NEWLINE )+
				int cnt88=0;
				try { DebugEnterSubRule(88);
				while (true)
				{
					int alt88=2;
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==NEWLINE))
					{
						alt88 = 1;
					}


					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:80: NEWLINE
						{
						DebugLocation(356, 80);
						NEWLINE188=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2165); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE188);


						}
						break;

					default:
						if (cnt88 >= 1)
							goto loop88;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee88 = new EarlyExitException( 88, input );
						DebugRecognitionException(eee88);
						throw eee88;
					}
					cnt88++;
				}
				loop88:
					;

				} finally { DebugExitSubRule(88); }

				DebugLocation(356, 89);
				PushFollow(Follow._stmt_block_in_func_def2168);
				stmt_block189=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block189.Tree);


				{
				// AST REWRITE
				// elements: attribute, func_args, type_name, stmt_block, func_name, 174, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:100: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(356, 103);
					// SugarCpp.g:356:103: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 105);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(356, 114);
					// SugarCpp.g:356:114: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(356, 114);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(356, 125);
					// SugarCpp.g:356:125: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(356, 125);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(356, 136);
					// SugarCpp.g:356:136: ( '~' )?
					if (stream_174.HasNext)
					{
						DebugLocation(356, 136);
						adaptor.AddChild(root_1, stream_174.NextNode());

					}
					stream_174.Reset();
					DebugLocation(356, 141);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(356, 151);
					// SugarCpp.g:356:151: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(356, 151);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(356, 170);
					// SugarCpp.g:356:170: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(356, 170);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(356, 181);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:27: '=' where_expr
				{
				DebugLocation(357, 27);
				char_literal190=(IToken)Match(input,114,Follow._114_in_func_def2221); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal190);

				DebugLocation(357, 31);
				PushFollow(Follow._where_expr_in_func_def2223);
				where_expr191=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr191.Tree);


				{
				// AST REWRITE
				// elements: attribute, type_name, generic_parameter, func_args, 174, where_expr, func_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:43: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(357, 46);
					// SugarCpp.g:357:46: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(357, 57);
					// SugarCpp.g:357:57: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(357, 57);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(357, 68);
					// SugarCpp.g:357:68: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(357, 68);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(357, 79);
					// SugarCpp.g:357:79: ( '~' )?
					if (stream_174.HasNext)
					{
						DebugLocation(357, 79);
						adaptor.AddChild(root_1, stream_174.NextNode());

					}
					stream_174.Reset();
					DebugLocation(357, 84);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(357, 94);
					// SugarCpp.g:357:94: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(357, 94);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(357, 113);
					// SugarCpp.g:357:113: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(357, 113);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(357, 124);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 29);
			LeaveRule("func_def", 29);
			LeaveRule_func_def();
		}
		DebugLocation(358, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:360:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 30);
		TraceIn("stmt_block_item", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE193 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken char_literal196 = default(IToken);
		IToken NEWLINE197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE193_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		CommonTree NEWLINE197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt94=2;
			try { DebugEnterDecision(94, false);
			int LA94_0 = input.LA(1);

			if ((LA94_0==136||(LA94_0>=140 && LA94_0<=142)||LA94_0==149||LA94_0==159||LA94_0==162||LA94_0==164||LA94_0==166||LA94_0==170))
			{
				alt94 = 1;
			}
			else if ((LA94_0==IDENT||LA94_0==81||LA94_0==86||LA94_0==88||LA94_0==90||(LA94_0>=92 && LA94_0<=93)||(LA94_0>=96 && LA94_0<=97)||LA94_0==123||LA94_0==153||LA94_0==155||LA94_0==163||LA94_0==167||LA94_0==174))
			{
				alt94 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(361, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2264);
				stmt_complex192=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex192.Tree);
				DebugLocation(361, 17);
				// SugarCpp.g:361:17: ( NEWLINE )+
				int cnt90=0;
				try { DebugEnterSubRule(90);
				while (true)
				{
					int alt90=2;
					try { DebugEnterDecision(90, false);
					int LA90_0 = input.LA(1);

					if ((LA90_0==NEWLINE))
					{
						alt90 = 1;
					}


					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:361:17: NEWLINE
						{
						DebugLocation(361, 17);
						NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2266); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


						}
						break;

					default:
						if (cnt90 >= 1)
							goto loop90;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee90 = new EarlyExitException( 90, input );
						DebugRecognitionException(eee90);
						throw eee90;
					}
					cnt90++;
				}
				loop90:
					;

				} finally { DebugExitSubRule(90); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:26: -> stmt_complex
				{
					DebugLocation(361, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:362:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(362, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2276);
				stmt_simple194=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple194.Tree);
				DebugLocation(362, 16);
				// SugarCpp.g:362:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==NEWLINE))
				{
					alt93 = 1;
				}
				else if ((LA93_0==108))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:362:17: ( NEWLINE )+
					{
					DebugLocation(362, 17);
					// SugarCpp.g:362:17: ( NEWLINE )+
					int cnt91=0;
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==NEWLINE))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:362:17: NEWLINE
							{
							DebugLocation(362, 17);
							NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2279); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE195);


							}
							break;

						default:
							if (cnt91 >= 1)
								goto loop91;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee91 = new EarlyExitException( 91, input );
							DebugRecognitionException(eee91);
							throw eee91;
						}
						cnt91++;
					}
					loop91:
						;

					} finally { DebugExitSubRule(91); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:362:28: ';' ( NEWLINE )*
					{
					DebugLocation(362, 28);
					char_literal196=(IToken)Match(input,108,Follow._108_in_stmt_block_item2284); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(char_literal196);

					DebugLocation(362, 32);
					// SugarCpp.g:362:32: ( NEWLINE )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:362:32: NEWLINE
							{
							DebugLocation(362, 32);
							NEWLINE197=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2286); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE197);


							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;

				}
				} finally { DebugExitSubRule(93); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 362:42: -> stmt_simple
				{
					DebugLocation(362, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 30);
			LeaveRule("stmt_block_item", 30);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:365:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 31);
		TraceIn("stmt_block", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT198 = default(IToken);
		IToken NEWLINE199 = default(IToken);
		IToken DEDENT201 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT198_tree = default(CommonTree);
		CommonTree NEWLINE199_tree = default(CommonTree);
		CommonTree DEDENT201_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(365, 1);
		try
		{
			// SugarCpp.g:366:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:366:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(366, 4);
			INDENT198=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2303); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT198);

			DebugLocation(366, 11);
			// SugarCpp.g:366:11: ( NEWLINE )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==NEWLINE))
				{
					alt95 = 1;
				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:366:11: NEWLINE
					{
					DebugLocation(366, 11);
					NEWLINE199=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE199);


					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }

			DebugLocation(366, 20);
			// SugarCpp.g:366:20: ( stmt_block_item )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==IDENT||LA96_0==81||LA96_0==86||LA96_0==88||LA96_0==90||(LA96_0>=92 && LA96_0<=93)||(LA96_0>=96 && LA96_0<=97)||LA96_0==123||LA96_0==136||(LA96_0>=140 && LA96_0<=142)||LA96_0==149||LA96_0==153||LA96_0==155||LA96_0==159||(LA96_0>=162 && LA96_0<=164)||(LA96_0>=166 && LA96_0<=167)||LA96_0==170||LA96_0==174))
				{
					alt96 = 1;
				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:366:20: stmt_block_item
					{
					DebugLocation(366, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2308);
					stmt_block_item200=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item200.Tree);

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }

			DebugLocation(366, 37);
			DEDENT201=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2311); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT201);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 366:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(366, 47);
				// SugarCpp.g:366:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(366, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(366, 60);
				// SugarCpp.g:366:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(366, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 31);
			LeaveRule("stmt_block", 31);
			LeaveRule_stmt_block();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:369:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 32);
		TraceIn("stmt", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( stmt_simple | stmt_complex )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==IDENT||LA97_0==81||LA97_0==86||LA97_0==88||LA97_0==90||(LA97_0>=92 && LA97_0<=93)||(LA97_0>=96 && LA97_0<=97)||LA97_0==123||LA97_0==153||LA97_0==155||LA97_0==163||LA97_0==167||LA97_0==174))
			{
				alt97 = 1;
			}
			else if ((LA97_0==136||(LA97_0>=140 && LA97_0<=142)||LA97_0==149||LA97_0==159||LA97_0==162||LA97_0==164||LA97_0==166||LA97_0==170))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._stmt_simple_in_stmt2331);
				stmt_simple202=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple202.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:371:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 4);
				PushFollow(Follow._stmt_complex_in_stmt2336);
				stmt_complex203=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex203.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 32);
			LeaveRule("stmt", 32);
			LeaveRule_stmt();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:374:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 33);
		TraceIn("stmt_simple", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(375, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2347);
			stmt_expr204=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr204.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 33);
			LeaveRule("stmt_simple", 33);
			LeaveRule_stmt_simple();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:378:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 34);
		TraceIn("stmt_complex", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(378, 1);
		try
		{
			// SugarCpp.g:379:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt98=6;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case 142:
			case 164:
				{
				alt98 = 1;
				}
				break;
			case 141:
				{
				alt98 = 2;
				}
				break;
			case 149:
			case 166:
			case 170:
				{
				alt98 = 3;
				}
				break;
			case 162:
				{
				alt98 = 4;
				}
				break;
			case 159:
				{
				alt98 = 5;
				}
				break;
			case 136:
			case 140:
				{
				alt98 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:379:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2358);
				stmt_if205=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if205.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:380:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2363);
				stmt_for206=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for206.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:381:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2368);
				stmt_while207=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while207.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:382:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2373);
				stmt_try208=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try208.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:383:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2378);
				stmt_switch209=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch209.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:384:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2383);
				stmt_defer210=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer210.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 34);
			LeaveRule("stmt_complex", 34);
			LeaveRule_stmt_complex();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:387:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 35);
		TraceIn("stmt_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken string_literal217 = default(IToken);
		IToken string_literal219 = default(IToken);
		IToken char_literal221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree char_literal221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(387, 1);
		try
		{
			// SugarCpp.g:388:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:388:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(388, 4);
			// SugarCpp.g:388:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:388:5: a= stmt_expr_item
			{
			DebugLocation(388, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2397);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 388:22: -> $a
			{
				DebugLocation(388, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(388, 29);
			// SugarCpp.g:388:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=6;
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case 142:
					{
					alt100 = 1;
					}
					break;
				case 164:
					{
					alt100 = 2;
					}
					break;
				case 170:
					{
					alt100 = 3;
					}
					break;
				case 166:
					{
					alt100 = 4;
					}
					break;
				case 141:
					{
					alt100 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:388:31: 'if' expr
					{
					DebugLocation(388, 31);
					string_literal211=(IToken)Match(input,142,Follow._142_in_stmt_expr2407); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_142.Add(string_literal211);

					DebugLocation(388, 36);
					PushFollow(Follow._expr_in_stmt_expr2409);
					expr212=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr212.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 388:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(388, 44);
						// SugarCpp.g:388:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(388, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(388, 59);
						// SugarCpp.g:388:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(388, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:389:13: 'unless' expr
					{
					DebugLocation(389, 13);
					string_literal213=(IToken)Match(input,164,Follow._164_in_stmt_expr2438); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal213);

					DebugLocation(389, 22);
					PushFollow(Follow._expr_in_stmt_expr2440);
					expr214=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr214.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(389, 30);
						// SugarCpp.g:389:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(389, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(389, 49);
						// SugarCpp.g:389:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(389, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:390:13: 'while' expr
					{
					DebugLocation(390, 13);
					string_literal215=(IToken)Match(input,170,Follow._170_in_stmt_expr2469); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(string_literal215);

					DebugLocation(390, 21);
					PushFollow(Follow._expr_in_stmt_expr2471);
					expr216=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr216.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(390, 29);
						// SugarCpp.g:390:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(390, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(390, 47);
						// SugarCpp.g:390:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(390, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:391:13: 'until' expr
					{
					DebugLocation(391, 13);
					string_literal217=(IToken)Match(input,166,Follow._166_in_stmt_expr2500); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_166.Add(string_literal217);

					DebugLocation(391, 21);
					PushFollow(Follow._expr_in_stmt_expr2502);
					expr218=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr218.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(391, 29);
						// SugarCpp.g:391:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(391, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(391, 47);
						// SugarCpp.g:391:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(391, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:392:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(392, 13);
					string_literal219=(IToken)Match(input,141,Follow._141_in_stmt_expr2531); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_141.Add(string_literal219);

					DebugLocation(392, 19);
					PushFollow(Follow._for_item_in_stmt_expr2533);
					for_item220=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item220.Tree);
					DebugLocation(392, 28);
					// SugarCpp.g:392:28: ( ',' for_item )*
					try { DebugEnterSubRule(99);
					while (true)
					{
						int alt99=2;
						try { DebugEnterDecision(99, false);
						int LA99_0 = input.LA(1);

						if ((LA99_0==95))
						{
							alt99 = 1;
						}


						} finally { DebugExitDecision(99); }
						switch ( alt99 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:392:29: ',' for_item
							{
							DebugLocation(392, 29);
							char_literal221=(IToken)Match(input,95,Follow._95_in_stmt_expr2536); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal221);

							DebugLocation(392, 33);
							PushFollow(Follow._for_item_in_stmt_expr2538);
							for_item222=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item222.Tree);

							}
							break;

						default:
							goto loop99;
						}
					}

					loop99:
						;

					} finally { DebugExitSubRule(99); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(392, 47);
						// SugarCpp.g:392:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(392, 58);
						// SugarCpp.g:392:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(392, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(392, 68);
						// SugarCpp.g:392:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(392, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 35);
			LeaveRule("stmt_expr", 35);
			LeaveRule_stmt_expr();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:396:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 36);
		TraceIn("stmt_expr_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(396, 1);
		try
		{
			// SugarCpp.g:397:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt101=5;
			try { DebugEnterDecision(101, false);
			try
			{
				alt101 = dfa101.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:397:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2580);
				stmt_alloc223=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc223.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:398:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2585);
				stmt_return224=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return224.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:399:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2590);
				stmt_using225=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using225.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:400:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2595);
				stmt_typedef226=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef226.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:401:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2600);
				stmt_modify227=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify227.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 36);
			LeaveRule("stmt_expr_item", 36);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:404:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 37);
		TraceIn("stmt_defer", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		IToken string_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(404, 1);
		try
		{
			// SugarCpp.g:405:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt102=2;
			try { DebugEnterDecision(102, false);
			int LA102_0 = input.LA(1);

			if ((LA102_0==136))
			{
				alt102 = 1;
			}
			else if ((LA102_0==140))
			{
				alt102 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:405:4: 'defer' stmt
				{
				DebugLocation(405, 4);
				string_literal228=(IToken)Match(input,136,Follow._136_in_stmt_defer2611); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal228);

				DebugLocation(405, 12);
				PushFollow(Follow._stmt_in_stmt_defer2613);
				stmt229=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt229.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 405:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(405, 20);
					// SugarCpp.g:405:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(405, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(405, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:406:4: 'finally' stmt
				{
				DebugLocation(406, 4);
				string_literal230=(IToken)Match(input,140,Follow._140_in_stmt_defer2626); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal230);

				DebugLocation(406, 14);
				PushFollow(Follow._stmt_in_stmt_defer2628);
				stmt231=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt231.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 406:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(406, 22);
					// SugarCpp.g:406:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(406, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(406, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 37);
			LeaveRule("stmt_defer", 37);
			LeaveRule_stmt_defer();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:409:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 38);
		TraceIn("stmt_typedef", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal232 = default(IToken);
		IToken char_literal234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree char_literal234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: 'type' ident '=' type_name
			{
			DebugLocation(410, 4);
			string_literal232=(IToken)Match(input,163,Follow._163_in_stmt_typedef2647); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal232);

			DebugLocation(410, 11);
			PushFollow(Follow._ident_in_stmt_typedef2649);
			ident233=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident233.Tree);
			DebugLocation(410, 17);
			char_literal234=(IToken)Match(input,114,Follow._114_in_stmt_typedef2651); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal234);

			DebugLocation(410, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2653);
			type_name235=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name235.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(410, 34);
				// SugarCpp.g:410:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(410, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(410, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(410, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 38);
			LeaveRule("stmt_typedef", 38);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:413:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 39);
		TraceIn("stmt_using_item", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal237_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(413, 36);
		try
		{
			// SugarCpp.g:413:16: ( ident | 'namespace' )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==IDENT))
			{
				alt103 = 1;
			}
			else if ((LA103_0==151))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:413:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(413, 18);
				PushFollow(Follow._ident_in_stmt_using_item2672);
				ident236=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident236.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:413:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(413, 26);
				string_literal237=(IToken)Match(input,151,Follow._151_in_stmt_using_item2676); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal237_tree = (CommonTree)adaptor.Create(string_literal237);
				adaptor.AddChild(root_0, string_literal237_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 39);
			LeaveRule("stmt_using_item", 39);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(413, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:414:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 40);
		TraceIn("stmt_using", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(414, 1);
		try
		{
			// SugarCpp.g:415:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:415:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(415, 4);
			string_literal238=(IToken)Match(input,167,Follow._167_in_stmt_using2684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal238);

			DebugLocation(415, 12);
			// SugarCpp.g:415:12: ( stmt_using_item )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==IDENT||LA104_0==151))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:415:12: stmt_using_item
					{
					DebugLocation(415, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2686);
					stmt_using_item239=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item239.Tree);

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 415:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(415, 32);
				// SugarCpp.g:415:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(415, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(415, 45);
				// SugarCpp.g:415:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(415, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 40);
			LeaveRule("stmt_using", 40);
			LeaveRule_stmt_using();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:418:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(418, 1);
		try
		{
			// SugarCpp.g:419:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:419:4: 'return' ( expr )?
			{
			DebugLocation(419, 4);
			string_literal240=(IToken)Match(input,155,Follow._155_in_stmt_return2707); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_155.Add(string_literal240);

			DebugLocation(419, 13);
			// SugarCpp.g:419:13: ( expr )?
			int alt105=2;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			int LA105_0 = input.LA(1);

			if ((LA105_0==IDENT||LA105_0==NUMBER||LA105_0==STRING||LA105_0==81||LA105_0==86||LA105_0==88||LA105_0==90||(LA105_0>=92 && LA105_0<=93)||(LA105_0>=96 && LA105_0<=97)||(LA105_0>=123 && LA105_0<=124)||LA105_0==147||LA105_0==150||(LA105_0>=152 && LA105_0<=153)||LA105_0==174))
			{
				alt105 = 1;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:419:13: expr
				{
				DebugLocation(419, 13);
				PushFollow(Follow._expr_in_stmt_return2709);
				expr241=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr241.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 419:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(419, 22);
				// SugarCpp.g:419:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(419, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(419, 36);
				// SugarCpp.g:419:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(419, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:422:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 42);
		TraceIn("inline_stmt_block", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(423, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2730);
			stmt_simple242=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple242.Tree);
			DebugLocation(423, 16);
			// SugarCpp.g:423:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==108))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:17: ';' stmt_simple
					{
					DebugLocation(423, 17);
					char_literal243=(IToken)Match(input,108,Follow._108_in_inline_stmt_block2733); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(char_literal243);

					DebugLocation(423, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2735);
					stmt_simple244=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple244.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(423, 38);
				// SugarCpp.g:423:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(423, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(423, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 42);
			LeaveRule("inline_stmt_block", 42);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:426:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 43);
		TraceIn("stmt_if", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		IToken NEWLINE247 = default(IToken);
		IToken NEWLINE249 = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken NEWLINE251 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken string_literal255 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken NEWLINE259 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken NEWLINE261 = default(IToken);
		IToken string_literal263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree NEWLINE247_tree = default(CommonTree);
		CommonTree NEWLINE249_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree NEWLINE251_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree NEWLINE259_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree NEWLINE261_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt117=2;
			try { DebugEnterDecision(117, false);
			int LA117_0 = input.LA(1);

			if ((LA117_0==142))
			{
				alt117 = 1;
			}
			else if ((LA117_0==164))
			{
				alt117 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(427, 4);
				string_literal245=(IToken)Match(input,142,Follow._142_in_stmt_if2757); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal245);

				DebugLocation(427, 9);
				PushFollow(Follow._expr_in_stmt_if2759);
				expr246=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr246.Tree);
				DebugLocation(427, 14);
				// SugarCpp.g:427:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==NEWLINE))
				{
					alt111 = 1;
				}
				else if ((LA111_0==160))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(427, 15);
					// SugarCpp.g:427:15: ( NEWLINE )+
					int cnt107=0;
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						int LA107_0 = input.LA(1);

						if ((LA107_0==NEWLINE))
						{
							alt107 = 1;
						}


						} finally { DebugExitDecision(107); }
						switch (alt107)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:427:15: NEWLINE
							{
							DebugLocation(427, 15);
							NEWLINE247=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2762); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE247);


							}
							break;

						default:
							if (cnt107 >= 1)
								goto loop107;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee107 = new EarlyExitException( 107, input );
							DebugRecognitionException(eee107);
							throw eee107;
						}
						cnt107++;
					}
					loop107:
						;

					} finally { DebugExitSubRule(107); }

					DebugLocation(427, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2765);
					stmt_block248=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block248.Tree);
					DebugLocation(427, 35);
					// SugarCpp.g:427:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, false);
					try
					{
						alt110 = dfa110.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:427:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(427, 36);
						// SugarCpp.g:427:36: ( NEWLINE )*
						try { DebugEnterSubRule(108);
						while (true)
						{
							int alt108=2;
							try { DebugEnterDecision(108, false);
							int LA108_0 = input.LA(1);

							if ((LA108_0==NEWLINE))
							{
								alt108 = 1;
							}


							} finally { DebugExitDecision(108); }
							switch ( alt108 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:427:36: NEWLINE
								{
								DebugLocation(427, 36);
								NEWLINE249=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2768); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE249);


								}
								break;

							default:
								goto loop108;
							}
						}

						loop108:
							;

						} finally { DebugExitSubRule(108); }

						DebugLocation(427, 45);
						string_literal250=(IToken)Match(input,138,Follow._138_in_stmt_if2771); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_138.Add(string_literal250);

						DebugLocation(427, 52);
						// SugarCpp.g:427:52: ( NEWLINE )+
						int cnt109=0;
						try { DebugEnterSubRule(109);
						while (true)
						{
							int alt109=2;
							try { DebugEnterDecision(109, false);
							int LA109_0 = input.LA(1);

							if ((LA109_0==NEWLINE))
							{
								alt109 = 1;
							}


							} finally { DebugExitDecision(109); }
							switch (alt109)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:427:52: NEWLINE
								{
								DebugLocation(427, 52);
								NEWLINE251=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2773); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE251);


								}
								break;

							default:
								if (cnt109 >= 1)
									goto loop109;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee109 = new EarlyExitException( 109, input );
								DebugRecognitionException(eee109);
								throw eee109;
							}
							cnt109++;
						}
						loop109:
							;

						} finally { DebugExitSubRule(109); }

						DebugLocation(427, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2776);
						stmt_block252=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block252.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(110); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 427:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(427, 77);
						// SugarCpp.g:427:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(427, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(427, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(427, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(427, 103);
						// SugarCpp.g:427:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(427, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:428:16: 'then' inline_stmt_block
					{
					DebugLocation(428, 16);
					string_literal253=(IToken)Match(input,160,Follow._160_in_stmt_if2808); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal253);

					DebugLocation(428, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2810);
					inline_stmt_block254=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block254.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(428, 44);
						// SugarCpp.g:428:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(428, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(428, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(111); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:430:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(430, 4);
				string_literal255=(IToken)Match(input,164,Follow._164_in_stmt_if2831); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal255);

				DebugLocation(430, 13);
				PushFollow(Follow._expr_in_stmt_if2833);
				expr256=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr256.Tree);
				DebugLocation(430, 18);
				// SugarCpp.g:430:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==NEWLINE))
				{
					alt116 = 1;
				}
				else if ((LA116_0==160))
				{
					alt116 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 116, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:430:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(430, 19);
					// SugarCpp.g:430:19: ( NEWLINE )+
					int cnt112=0;
					try { DebugEnterSubRule(112);
					while (true)
					{
						int alt112=2;
						try { DebugEnterDecision(112, false);
						int LA112_0 = input.LA(1);

						if ((LA112_0==NEWLINE))
						{
							alt112 = 1;
						}


						} finally { DebugExitDecision(112); }
						switch (alt112)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:430:19: NEWLINE
							{
							DebugLocation(430, 19);
							NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2836); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE257);


							}
							break;

						default:
							if (cnt112 >= 1)
								goto loop112;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee112 = new EarlyExitException( 112, input );
							DebugRecognitionException(eee112);
							throw eee112;
						}
						cnt112++;
					}
					loop112:
						;

					} finally { DebugExitSubRule(112); }

					DebugLocation(430, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2839);
					stmt_block258=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block258.Tree);
					DebugLocation(430, 39);
					// SugarCpp.g:430:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt115=2;
					try { DebugEnterSubRule(115);
					try { DebugEnterDecision(115, false);
					try
					{
						alt115 = dfa115.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(115); }
					switch (alt115)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:430:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(430, 40);
						// SugarCpp.g:430:40: ( NEWLINE )*
						try { DebugEnterSubRule(113);
						while (true)
						{
							int alt113=2;
							try { DebugEnterDecision(113, false);
							int LA113_0 = input.LA(1);

							if ((LA113_0==NEWLINE))
							{
								alt113 = 1;
							}


							} finally { DebugExitDecision(113); }
							switch ( alt113 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:430:40: NEWLINE
								{
								DebugLocation(430, 40);
								NEWLINE259=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2842); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE259);


								}
								break;

							default:
								goto loop113;
							}
						}

						loop113:
							;

						} finally { DebugExitSubRule(113); }

						DebugLocation(430, 49);
						string_literal260=(IToken)Match(input,138,Follow._138_in_stmt_if2845); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_138.Add(string_literal260);

						DebugLocation(430, 56);
						// SugarCpp.g:430:56: ( NEWLINE )+
						int cnt114=0;
						try { DebugEnterSubRule(114);
						while (true)
						{
							int alt114=2;
							try { DebugEnterDecision(114, false);
							int LA114_0 = input.LA(1);

							if ((LA114_0==NEWLINE))
							{
								alt114 = 1;
							}


							} finally { DebugExitDecision(114); }
							switch (alt114)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:430:56: NEWLINE
								{
								DebugLocation(430, 56);
								NEWLINE261=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2847); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE261);


								}
								break;

							default:
								if (cnt114 >= 1)
									goto loop114;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee114 = new EarlyExitException( 114, input );
								DebugRecognitionException(eee114);
								throw eee114;
							}
							cnt114++;
						}
						loop114:
							;

						} finally { DebugExitSubRule(114); }

						DebugLocation(430, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2850);
						stmt_block262=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block262.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(115); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 430:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(430, 81);
						// SugarCpp.g:430:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(430, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(430, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(430, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(430, 111);
						// SugarCpp.g:430:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(430, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:431:20: 'then' inline_stmt_block
					{
					DebugLocation(431, 20);
					string_literal263=(IToken)Match(input,160,Follow._160_in_stmt_if2886); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal263);

					DebugLocation(431, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2888);
					inline_stmt_block264=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block264.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(431, 48);
						// SugarCpp.g:431:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(431, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(431, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(116); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 43);
			LeaveRule("stmt_if", 43);
			LeaveRule_stmt_if();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:435:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 44);
		TraceIn("stmt_while", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken NEWLINE267 = default(IToken);
		IToken string_literal269 = default(IToken);
		IToken string_literal271 = default(IToken);
		IToken NEWLINE273 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken string_literal277 = default(IToken);
		IToken NEWLINE279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block280 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree NEWLINE267_tree = default(CommonTree);
		CommonTree string_literal269_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree NEWLINE273_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree string_literal277_tree = default(CommonTree);
		CommonTree NEWLINE279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(435, 1);
		try
		{
			// SugarCpp.g:436:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt124=3;
			try { DebugEnterDecision(124, false);
			switch (input.LA(1))
			{
			case 170:
				{
				alt124 = 1;
				}
				break;
			case 166:
				{
				alt124 = 2;
				}
				break;
			case 149:
				{
				alt124 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:436:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(436, 4);
				string_literal265=(IToken)Match(input,170,Follow._170_in_stmt_while2919); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal265);

				DebugLocation(436, 12);
				PushFollow(Follow._expr_in_stmt_while2921);
				expr266=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr266.Tree);
				DebugLocation(436, 17);
				// SugarCpp.g:436:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==NEWLINE))
				{
					alt119 = 1;
				}
				else if ((LA119_0==160))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(436, 19);
					// SugarCpp.g:436:19: ( NEWLINE )+
					int cnt118=0;
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==NEWLINE))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch (alt118)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:436:19: NEWLINE
							{
							DebugLocation(436, 19);
							NEWLINE267=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2925); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE267);


							}
							break;

						default:
							if (cnt118 >= 1)
								goto loop118;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee118 = new EarlyExitException( 118, input );
							DebugRecognitionException(eee118);
							throw eee118;
						}
						cnt118++;
					}
					loop118:
						;

					} finally { DebugExitSubRule(118); }

					DebugLocation(436, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2928);
					stmt_block268=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block268.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 436:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(436, 42);
						// SugarCpp.g:436:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(436, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(436, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(436, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:437:13: 'then' inline_stmt_block
					{
					DebugLocation(437, 13);
					string_literal269=(IToken)Match(input,160,Follow._160_in_stmt_while2952); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal269);

					DebugLocation(437, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2954);
					inline_stmt_block270=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block270.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 437:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(437, 41);
						// SugarCpp.g:437:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(437, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(437, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(437, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:439:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(439, 4);
				string_literal271=(IToken)Match(input,166,Follow._166_in_stmt_while2978); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal271);

				DebugLocation(439, 12);
				PushFollow(Follow._expr_in_stmt_while2980);
				expr272=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr272.Tree);
				DebugLocation(439, 17);
				// SugarCpp.g:439:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==NEWLINE))
				{
					alt121 = 1;
				}
				else if ((LA121_0==160))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(439, 19);
					// SugarCpp.g:439:19: ( NEWLINE )+
					int cnt120=0;
					try { DebugEnterSubRule(120);
					while (true)
					{
						int alt120=2;
						try { DebugEnterDecision(120, false);
						int LA120_0 = input.LA(1);

						if ((LA120_0==NEWLINE))
						{
							alt120 = 1;
						}


						} finally { DebugExitDecision(120); }
						switch (alt120)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:19: NEWLINE
							{
							DebugLocation(439, 19);
							NEWLINE273=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2984); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE273);


							}
							break;

						default:
							if (cnt120 >= 1)
								goto loop120;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee120 = new EarlyExitException( 120, input );
							DebugRecognitionException(eee120);
							throw eee120;
						}
						cnt120++;
					}
					loop120:
						;

					} finally { DebugExitSubRule(120); }

					DebugLocation(439, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2987);
					stmt_block274=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block274.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(439, 42);
						// SugarCpp.g:439:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(439, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(439, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:440:13: 'then' inline_stmt_block
					{
					DebugLocation(440, 13);
					string_literal275=(IToken)Match(input,160,Follow._160_in_stmt_while3011); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal275);

					DebugLocation(440, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3013);
					inline_stmt_block276=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block276.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(440, 41);
						// SugarCpp.g:440:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(440, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(440, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:442:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(442, 4);
				string_literal277=(IToken)Match(input,149,Follow._149_in_stmt_while3037); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal277);

				DebugLocation(442, 11);
				// SugarCpp.g:442:11: ( expr )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==IDENT||LA122_0==NUMBER||LA122_0==STRING||LA122_0==81||LA122_0==86||LA122_0==88||LA122_0==90||(LA122_0>=92 && LA122_0<=93)||(LA122_0>=96 && LA122_0<=97)||(LA122_0>=123 && LA122_0<=124)||LA122_0==147||LA122_0==150||(LA122_0>=152 && LA122_0<=153)||LA122_0==174))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:442:11: expr
					{
					DebugLocation(442, 11);
					PushFollow(Follow._expr_in_stmt_while3039);
					expr278=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr278.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(442, 17);
				// SugarCpp.g:442:17: ( NEWLINE )+
				int cnt123=0;
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=2;
					try { DebugEnterDecision(123, false);
					int LA123_0 = input.LA(1);

					if ((LA123_0==NEWLINE))
					{
						alt123 = 1;
					}


					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:17: NEWLINE
						{
						DebugLocation(442, 17);
						NEWLINE279=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3042); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE279);


						}
						break;

					default:
						if (cnt123 >= 1)
							goto loop123;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee123 = new EarlyExitException( 123, input );
						DebugRecognitionException(eee123);
						throw eee123;
					}
					cnt123++;
				}
				loop123:
					;

				} finally { DebugExitSubRule(123); }

				DebugLocation(442, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3045);
				stmt_block280=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block280.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 442:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(442, 40);
					// SugarCpp.g:442:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(442, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(442, 52);
					// SugarCpp.g:442:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(442, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(442, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 44);
			LeaveRule("stmt_while", 44);
			LeaveRule_stmt_while();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:445:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 45);
		TraceIn("for_range", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal282 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken string_literal284 = default(IToken);
		IToken string_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(445, 1);
		try
		{
			// SugarCpp.g:446:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:446:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(446, 4);
			PushFollow(Follow._ident_in_for_range3067);
			ident281=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident281.Tree);
			DebugLocation(446, 10);
			string_literal282=(IToken)Match(input,110,Follow._110_in_for_range3069); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal282);

			DebugLocation(446, 16);
			PushFollow(Follow._expr_in_for_range3073);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(446, 22);
			// SugarCpp.g:446:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt127=3;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case 161:
				{
				alt127 = 1;
				}
				break;
			case 137:
				{
				alt127 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 95:
			case 108:
			case 141:
			case 142:
			case 144:
			case 164:
			case 166:
			case 170:
				{
				alt127 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:446:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(446, 23);
				string_literal283=(IToken)Match(input,161,Follow._161_in_for_range3076); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal283);

				DebugLocation(446, 29);
				PushFollow(Follow._expr_in_for_range3080);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(446, 35);
				// SugarCpp.g:446:35: ( 'by' c= expr )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==131))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:446:36: 'by' c= expr
					{
					DebugLocation(446, 36);
					string_literal284=(IToken)Match(input,131,Follow._131_in_for_range3083); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(string_literal284);

					DebugLocation(446, 42);
					PushFollow(Follow._expr_in_for_range3087);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(125); }



				{
				// AST REWRITE
				// elements: c, b, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 446:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(446, 53);
					// SugarCpp.g:446:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(446, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(446, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(446, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(446, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(446, 80);
					// SugarCpp.g:446:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(446, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:447:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(447, 8);
				string_literal285=(IToken)Match(input,137,Follow._137_in_for_range3116); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal285);

				DebugLocation(447, 18);
				PushFollow(Follow._expr_in_for_range3120);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(447, 24);
				// SugarCpp.g:447:24: ( 'by' c= expr )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==131))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:25: 'by' c= expr
					{
					DebugLocation(447, 25);
					string_literal286=(IToken)Match(input,131,Follow._131_in_for_range3123); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(string_literal286);

					DebugLocation(447, 31);
					PushFollow(Follow._expr_in_for_range3127);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(126); }



				{
				// AST REWRITE
				// elements: c, a, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 447:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(447, 42);
					// SugarCpp.g:447:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(447, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(447, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(447, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(447, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(447, 74);
					// SugarCpp.g:447:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(447, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:448:9: 
				{

				{
				// AST REWRITE
				// elements: ident, a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 448:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(448, 12);
					// SugarCpp.g:448:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(448, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(448, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(448, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 45);
			LeaveRule("for_range", 45);
			LeaveRule_for_range();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:452:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 46);
		TraceIn("for_when", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(452, 1);
		try
		{
			// SugarCpp.g:453:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: expr
			{
			DebugLocation(453, 4);
			PushFollow(Follow._expr_in_for_when3185);
			expr287=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr287.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 453:9: -> ^( For_Item_When expr )
			{
				DebugLocation(453, 12);
				// SugarCpp.g:453:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(453, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(453, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 46);
			LeaveRule("for_when", 46);
			LeaveRule_for_when();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:456:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( for_range | for_when )
			int alt128=2;
			try { DebugEnterDecision(128, false);
			try
			{
				alt128 = dfa128.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:457:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(457, 4);
				PushFollow(Follow._for_range_in_for_item3204);
				for_range288=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range288.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:458:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(458, 4);
				PushFollow(Follow._for_when_in_for_item3209);
				for_when289=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when289.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:461:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken NEWLINE294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree NEWLINE294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(461, 1);
		try
		{
			// SugarCpp.g:462:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:462:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(462, 4);
			string_literal290=(IToken)Match(input,141,Follow._141_in_stmt_for3220); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_141.Add(string_literal290);

			DebugLocation(462, 10);
			// SugarCpp.g:462:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:462:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(462, 12);
			PushFollow(Follow._for_item_in_stmt_for3224);
			for_item291=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item291.Tree);
			DebugLocation(462, 21);
			// SugarCpp.g:462:21: ( ',' for_item )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==95))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:462:22: ',' for_item
					{
					DebugLocation(462, 22);
					char_literal292=(IToken)Match(input,95,Follow._95_in_stmt_for3227); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal292);

					DebugLocation(462, 26);
					PushFollow(Follow._for_item_in_stmt_for3229);
					for_item293=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item293.Tree);

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }

			DebugLocation(462, 37);
			// SugarCpp.g:462:37: ( NEWLINE )+
			int cnt130=0;
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==NEWLINE))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:462:37: NEWLINE
					{
					DebugLocation(462, 37);
					NEWLINE294=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3233); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE294);


					}
					break;

				default:
					if (cnt130 >= 1)
						goto loop130;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee130 = new EarlyExitException( 130, input );
					DebugRecognitionException(eee130);
					throw eee130;
				}
				cnt130++;
			}
			loop130:
				;

			} finally { DebugExitSubRule(130); }

			DebugLocation(462, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3236);
			stmt_block295=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block295.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 462:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(462, 60);
				// SugarCpp.g:462:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(462, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(462, 71);
				// SugarCpp.g:462:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(462, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(462, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:467:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal296 = default(IToken);
		IToken NEWLINE297 = default(IToken);
		IToken NEWLINE299 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken NEWLINE302 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree NEWLINE297_tree = default(CommonTree);
		CommonTree NEWLINE299_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree NEWLINE302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(468, 4);
			string_literal296=(IToken)Match(input,162,Follow._162_in_stmt_try3267); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_162.Add(string_literal296);

			DebugLocation(468, 10);
			// SugarCpp.g:468:10: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:10: NEWLINE
					{
					DebugLocation(468, 10);
					NEWLINE297=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3269); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE297);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(468, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3272);
			stmt_block298=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block298.Tree);
			DebugLocation(468, 30);
			// SugarCpp.g:468:30: ( NEWLINE )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:30: NEWLINE
					{
					DebugLocation(468, 30);
					NEWLINE299=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3274); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE299);


					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(468, 39);
			string_literal300=(IToken)Match(input,133,Follow._133_in_stmt_try3277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(string_literal300);

			DebugLocation(468, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3279);
			stmt_alloc301=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc301.Tree);
			DebugLocation(468, 58);
			// SugarCpp.g:468:58: ( NEWLINE )+
			int cnt133=0;
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==NEWLINE))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:58: NEWLINE
					{
					DebugLocation(468, 58);
					NEWLINE302=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3281); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE302);


					}
					break;

				default:
					if (cnt133 >= 1)
						goto loop133;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee133 = new EarlyExitException( 133, input );
					DebugRecognitionException(eee133);
					throw eee133;
				}
				cnt133++;
			}
			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(468, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3284);
			stmt_block303=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block303.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 468:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(468, 81);
				// SugarCpp.g:468:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(468, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(468, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(468, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(468, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:471:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken string_literal310 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(472, 4);
			string_literal304=(IToken)Match(input,168,Follow._168_in_switch_item3307); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_168.Add(string_literal304);

			DebugLocation(472, 11);
			PushFollow(Follow._expr_in_switch_item3309);
			expr305=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr305.Tree);
			DebugLocation(472, 16);
			// SugarCpp.g:472:16: ( ',' expr )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==95))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:472:17: ',' expr
					{
					DebugLocation(472, 17);
					char_literal306=(IToken)Match(input,95,Follow._95_in_switch_item3312); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal306);

					DebugLocation(472, 21);
					PushFollow(Follow._expr_in_switch_item3314);
					expr307=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr307.Tree);

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(472, 28);
			// SugarCpp.g:472:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_0 = input.LA(1);

			if ((LA136_0==NEWLINE))
			{
				alt136 = 1;
			}
			else if ((LA136_0==160))
			{
				alt136 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 136, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:472:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(472, 30);
				// SugarCpp.g:472:30: ( NEWLINE )+
				int cnt135=0;
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==NEWLINE))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:472:30: NEWLINE
						{
						DebugLocation(472, 30);
						NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3320); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE308);


						}
						break;

					default:
						if (cnt135 >= 1)
							goto loop135;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee135 = new EarlyExitException( 135, input );
						DebugRecognitionException(eee135);
						throw eee135;
					}
					cnt135++;
				}
				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(472, 39);
				PushFollow(Follow._stmt_block_in_switch_item3323);
				stmt_block309=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block309.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 472:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(472, 53);
					// SugarCpp.g:472:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(472, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(472, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(472, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(472, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:473:30: 'then' inline_stmt_block
				{
				DebugLocation(473, 30);
				string_literal310=(IToken)Match(input,160,Follow._160_in_switch_item3365); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal310);

				DebugLocation(473, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3367);
				inline_stmt_block311=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block311.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 473:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(473, 58);
					// SugarCpp.g:473:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(473, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(473, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(473, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(473, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(475, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:477:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal312 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken INDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken NEWLINE318 = default(IToken);
		IToken string_literal319 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken DEDENT323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree INDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree NEWLINE318_tree = default(CommonTree);
		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree DEDENT323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(477, 1);
		try
		{
			// SugarCpp.g:478:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:478:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(478, 4);
			string_literal312=(IToken)Match(input,159,Follow._159_in_stmt_switch3403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_159.Add(string_literal312);

			DebugLocation(478, 13);
			// SugarCpp.g:478:13: ( expr )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==IDENT||LA137_0==NUMBER||LA137_0==STRING||LA137_0==81||LA137_0==86||LA137_0==88||LA137_0==90||(LA137_0>=92 && LA137_0<=93)||(LA137_0>=96 && LA137_0<=97)||(LA137_0>=123 && LA137_0<=124)||LA137_0==147||LA137_0==150||(LA137_0>=152 && LA137_0<=153)||LA137_0==174))
			{
				alt137 = 1;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:478:13: expr
				{
				DebugLocation(478, 13);
				PushFollow(Follow._expr_in_stmt_switch3405);
				expr313=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr313.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(478, 19);
			// SugarCpp.g:478:19: ( NEWLINE )+
			int cnt138=0;
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==NEWLINE))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:478:19: NEWLINE
					{
					DebugLocation(478, 19);
					NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE314);


					}
					break;

				default:
					if (cnt138 >= 1)
						goto loop138;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee138 = new EarlyExitException( 138, input );
					DebugRecognitionException(eee138);
					throw eee138;
				}
				cnt138++;
			}
			loop138:
				;

			} finally { DebugExitSubRule(138); }

			DebugLocation(478, 28);
			INDENT315=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3411); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT315);

			DebugLocation(478, 35);
			// SugarCpp.g:478:35: ( NEWLINE )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==NEWLINE))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:478:35: NEWLINE
					{
					DebugLocation(478, 35);
					NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3413); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE316);


					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(478, 44);
			// SugarCpp.g:478:44: ( switch_item ( NEWLINE )+ )+
			int cnt141=0;
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==168))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:478:45: switch_item ( NEWLINE )+
					{
					DebugLocation(478, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3417);
					switch_item317=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item317.Tree);
					DebugLocation(478, 57);
					// SugarCpp.g:478:57: ( NEWLINE )+
					int cnt140=0;
					try { DebugEnterSubRule(140);
					while (true)
					{
						int alt140=2;
						try { DebugEnterDecision(140, false);
						int LA140_0 = input.LA(1);

						if ((LA140_0==NEWLINE))
						{
							alt140 = 1;
						}


						} finally { DebugExitDecision(140); }
						switch (alt140)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:478:57: NEWLINE
							{
							DebugLocation(478, 57);
							NEWLINE318=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3419); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE318);


							}
							break;

						default:
							if (cnt140 >= 1)
								goto loop140;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee140 = new EarlyExitException( 140, input );
							DebugRecognitionException(eee140);
							throw eee140;
						}
						cnt140++;
					}
					loop140:
						;

					} finally { DebugExitSubRule(140); }


					}
					break;

				default:
					if (cnt141 >= 1)
						goto loop141;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee141 = new EarlyExitException( 141, input );
					DebugRecognitionException(eee141);
					throw eee141;
				}
				cnt141++;
			}
			loop141:
				;

			} finally { DebugExitSubRule(141); }

			DebugLocation(478, 68);
			// SugarCpp.g:478:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt144=2;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			int LA144_0 = input.LA(1);

			if ((LA144_0==138))
			{
				alt144 = 1;
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:478:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(478, 69);
				string_literal319=(IToken)Match(input,138,Follow._138_in_stmt_switch3425); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_138.Add(string_literal319);

				DebugLocation(478, 76);
				// SugarCpp.g:478:76: ( NEWLINE )+
				int cnt142=0;
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_0 = input.LA(1);

					if ((LA142_0==NEWLINE))
					{
						alt142 = 1;
					}


					} finally { DebugExitDecision(142); }
					switch (alt142)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:478:76: NEWLINE
						{
						DebugLocation(478, 76);
						NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3427); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE320);


						}
						break;

					default:
						if (cnt142 >= 1)
							goto loop142;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee142 = new EarlyExitException( 142, input );
						DebugRecognitionException(eee142);
						throw eee142;
					}
					cnt142++;
				}
				loop142:
					;

				} finally { DebugExitSubRule(142); }

				DebugLocation(478, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3430);
				stmt_block321=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block321.Tree);
				DebugLocation(478, 96);
				// SugarCpp.g:478:96: ( NEWLINE )*
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, false);
					int LA143_0 = input.LA(1);

					if ((LA143_0==NEWLINE))
					{
						alt143 = 1;
					}


					} finally { DebugExitDecision(143); }
					switch ( alt143 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:478:96: NEWLINE
						{
						DebugLocation(478, 96);
						NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3432); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


						}
						break;

					default:
						goto loop143;
					}
				}

				loop143:
					;

				} finally { DebugExitSubRule(143); }


				}
				break;

			}
			} finally { DebugExitSubRule(144); }

			DebugLocation(478, 107);
			DEDENT323=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3437); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT323);



			{
			// AST REWRITE
			// elements: expr, switch_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 478:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(478, 117);
				// SugarCpp.g:478:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(478, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(478, 131);
				// SugarCpp.g:478:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(478, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(478, 137);
				// SugarCpp.g:478:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(478, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(478, 150);
				// SugarCpp.g:478:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(478, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:481:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident326 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(481, 1);
		try
		{
			// SugarCpp.g:482:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:482:4: ident ( ',' ident )*
			{
			DebugLocation(482, 4);
			PushFollow(Follow._ident_in_ident_list3463);
			ident324=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident324.Tree);
			DebugLocation(482, 10);
			// SugarCpp.g:482:10: ( ',' ident )*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==95))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:482:11: ',' ident
					{
					DebugLocation(482, 11);
					char_literal325=(IToken)Match(input,95,Follow._95_in_ident_list3466); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal325);

					DebugLocation(482, 15);
					PushFollow(Follow._ident_in_ident_list3468);
					ident326=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident326.Tree);

					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 482:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(482, 26);
				// SugarCpp.g:482:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(482, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(482, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(482, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:485:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken string_literal331 = default(IToken);
		IToken char_literal333 = default(IToken);
		IToken char_literal335 = default(IToken);
		IToken string_literal336 = default(IToken);
		IToken char_literal338 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr339 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree char_literal333_tree = default(CommonTree);
		CommonTree char_literal335_tree = default(CommonTree);
		CommonTree string_literal336_tree = default(CommonTree);
		CommonTree char_literal338_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(485, 1);
		try
		{
			// SugarCpp.g:486:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:486:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(486, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3490);
			ident_list327=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list327.Tree);
			DebugLocation(486, 15);
			// SugarCpp.g:486:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==105))
			{
				alt150 = 1;
			}
			else if ((LA150_0==107))
			{
				alt150 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(486, 17);
				char_literal328=(IToken)Match(input,105,Follow._105_in_stmt_alloc3494); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(char_literal328);

				DebugLocation(486, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3496);
				type_name329=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name329.Tree);
				DebugLocation(486, 31);
				// SugarCpp.g:486:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt148=3;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt148 = 1;
					}
					break;
				case 88:
					{
					alt148 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 108:
				case 141:
				case 142:
				case 144:
				case 164:
				case 166:
				case 170:
					{
					alt148 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 148, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(486, 33);
					// SugarCpp.g:486:33: ( '=' | ':=' )
					int alt146=2;
					try { DebugEnterSubRule(146);
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==114))
					{
						alt146 = 1;
					}
					else if ((LA146_0==107))
					{
						alt146 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 146, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:34: '='
						{
						DebugLocation(486, 34);
						char_literal330=(IToken)Match(input,114,Follow._114_in_stmt_alloc3501); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_114.Add(char_literal330);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:486:40: ':='
						{
						DebugLocation(486, 40);
						string_literal331=(IToken)Match(input,107,Follow._107_in_stmt_alloc3505); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_107.Add(string_literal331);


						}
						break;

					}
					} finally { DebugExitSubRule(146); }

					DebugLocation(486, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3508);
					where_expr332=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr332.Tree);


					{
					// AST REWRITE
					// elements: where_expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 486:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(486, 61);
						// SugarCpp.g:486:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(486, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(486, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(486, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(486, 101);
						// SugarCpp.g:486:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(486, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:487:33: '(' ( expr_list )? ')'
					{
					DebugLocation(487, 33);
					char_literal333=(IToken)Match(input,88,Follow._88_in_stmt_alloc3556); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal333);

					DebugLocation(487, 37);
					// SugarCpp.g:487:37: ( expr_list )?
					int alt147=2;
					try { DebugEnterSubRule(147);
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==IDENT||LA147_0==NUMBER||LA147_0==STRING||LA147_0==81||LA147_0==86||LA147_0==88||LA147_0==90||(LA147_0>=92 && LA147_0<=93)||(LA147_0>=96 && LA147_0<=97)||(LA147_0>=123 && LA147_0<=124)||LA147_0==147||LA147_0==150||(LA147_0>=152 && LA147_0<=153)||LA147_0==174))
					{
						alt147 = 1;
					}
					} finally { DebugExitDecision(147); }
					switch (alt147)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:37: expr_list
						{
						DebugLocation(487, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3558);
						expr_list334=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list334.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(147); }

					DebugLocation(487, 48);
					char_literal335=(IToken)Match(input,89,Follow._89_in_stmt_alloc3561); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal335);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 487:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(487, 56);
						// SugarCpp.g:487:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(487, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(487, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(487, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(487, 98);
						// SugarCpp.g:487:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(487, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:488:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 488:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(488, 18);
						// SugarCpp.g:488:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(488, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(488, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(488, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(148); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:490:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(490, 8);
				string_literal336=(IToken)Match(input,107,Follow._107_in_stmt_alloc3622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(string_literal336);

				DebugLocation(490, 14);
				// SugarCpp.g:490:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:490:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(490, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3626);
				where_expr337=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr337.Tree);
				DebugLocation(490, 26);
				// SugarCpp.g:490:26: ( ',' where_expr )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==95))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:490:27: ',' where_expr
						{
						DebugLocation(490, 27);
						char_literal338=(IToken)Match(input,95,Follow._95_in_stmt_alloc3629); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal338);

						DebugLocation(490, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3631);
						where_expr339=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr339.Tree);

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }


				}



				{
				// AST REWRITE
				// elements: ident_list, 107, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 490:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(490, 48);
					// SugarCpp.g:490:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(490, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(490, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(490, 66);
					// SugarCpp.g:490:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(490, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:493:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal343 = default(IToken);
		IToken string_literal345 = default(IToken);
		IToken string_literal347 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr348 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal343_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		CommonTree string_literal347_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(493, 1);
		try
		{
			// SugarCpp.g:494:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:494:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(494, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3657);
			lvalue340=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue340.Tree);
			DebugLocation(494, 11);
			// SugarCpp.g:494:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt151=5;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			switch (input.LA(1))
			{
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 127:
			case 172:
				{
				alt151 = 1;
				}
				break;
			case 122:
				{
				alt151 = 2;
				}
				break;
			case 111:
				{
				alt151 = 3;
				}
				break;
			case 119:
				{
				alt151 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 108:
			case 141:
			case 142:
			case 144:
			case 164:
			case 166:
			case 170:
				{
				alt151 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:494:13: modify_expr_op where_expr
				{
				DebugLocation(494, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3661);
				modify_expr_op341=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op341.Tree);
				DebugLocation(494, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3663);
				where_expr342=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr342.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 494:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(494, 42);
					// SugarCpp.g:494:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(494, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(494, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(494, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:495:13: '?=' where_expr
				{
				DebugLocation(495, 13);
				string_literal343=(IToken)Match(input,122,Follow._122_in_stmt_modify3687); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_122.Add(string_literal343);

				DebugLocation(495, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3689);
				where_expr344=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr344.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 122
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 495:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(495, 32);
					// SugarCpp.g:495:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(495, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_122.NextNode(), root_1);

					DebugLocation(495, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(495, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:496:16: '<<' where_expr
				{
				DebugLocation(496, 16);
				string_literal345=(IToken)Match(input,111,Follow._111_in_stmt_modify3716); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal345);

				DebugLocation(496, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3718);
				where_expr346=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr346.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 111, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 496:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(496, 35);
					// SugarCpp.g:496:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(496, 46);
					adaptor.AddChild(root_1, stream_111.NextNode());
					DebugLocation(496, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(496, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:497:16: '>>' where_expr
				{
				DebugLocation(497, 16);
				string_literal347=(IToken)Match(input,119,Follow._119_in_stmt_modify3747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(string_literal347);

				DebugLocation(497, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3749);
				where_expr348=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr348.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 119
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 497:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(497, 35);
					// SugarCpp.g:497:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(497, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(497, 46);
					adaptor.AddChild(root_1, stream_119.NextNode());
					DebugLocation(497, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(497, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:498:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 498:7: -> lvalue
				{
					DebugLocation(498, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:501:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt349 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(501, 1);
		try
		{
			// SugarCpp.g:502:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:502:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(502, 4);
			PushFollow(Follow._stmt_in_where_item3783);
			stmt349=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt349.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(503, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:505:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE350 = default(IToken);
		IToken INDENT351 = default(IToken);
		IToken NEWLINE352 = default(IToken);
		IToken string_literal353 = default(IToken);
		IToken NEWLINE355 = default(IToken);
		IToken DEDENT356 = default(IToken);
		IToken NEWLINE357 = default(IToken);
		IToken INDENT358 = default(IToken);
		IToken NEWLINE359 = default(IToken);
		IToken NEWLINE361 = default(IToken);
		IToken DEDENT362 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken DEDENT364 = default(IToken);
		IToken NEWLINE365 = default(IToken);
		IToken INDENT366 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken DEDENT370 = default(IToken);
		IToken NEWLINE371 = default(IToken);
		IToken DEDENT372 = default(IToken);
		IToken string_literal373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken INDENT375 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken NEWLINE378 = default(IToken);
		IToken DEDENT379 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item368 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree INDENT351_tree = default(CommonTree);
		CommonTree NEWLINE352_tree = default(CommonTree);
		CommonTree string_literal353_tree = default(CommonTree);
		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree DEDENT356_tree = default(CommonTree);
		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree INDENT358_tree = default(CommonTree);
		CommonTree NEWLINE359_tree = default(CommonTree);
		CommonTree NEWLINE361_tree = default(CommonTree);
		CommonTree DEDENT362_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree DEDENT364_tree = default(CommonTree);
		CommonTree NEWLINE365_tree = default(CommonTree);
		CommonTree INDENT366_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree DEDENT370_tree = default(CommonTree);
		CommonTree NEWLINE371_tree = default(CommonTree);
		CommonTree DEDENT372_tree = default(CommonTree);
		CommonTree string_literal373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree INDENT375_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree NEWLINE378_tree = default(CommonTree);
		CommonTree DEDENT379_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(505, 1);
		try
		{
			// SugarCpp.g:506:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:506:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(506, 4);
			// SugarCpp.g:506:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:506:5: a= expr
			{
			DebugLocation(506, 6);
			PushFollow(Follow._expr_in_where_expr3797);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 506:12: -> $a
			{
				DebugLocation(506, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(506, 19);
			// SugarCpp.g:506:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt171=3;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			try
			{
				alt171 = dfa171.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:506:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(506, 21);
				// SugarCpp.g:506:21: ( NEWLINE )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==NEWLINE))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:21: NEWLINE
						{
						DebugLocation(506, 21);
						NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3807); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE350);


						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(506, 30);
				INDENT351=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3810); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT351);

				DebugLocation(506, 37);
				// SugarCpp.g:506:37: ( NEWLINE )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:37: NEWLINE
						{
						DebugLocation(506, 37);
						NEWLINE352=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3812); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE352);


						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(506, 46);
				string_literal353=(IToken)Match(input,169,Follow._169_in_where_expr3815); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal353);

				DebugLocation(506, 54);
				// SugarCpp.g:506:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==IDENT||LA166_0==81||LA166_0==86||LA166_0==88||LA166_0==90||(LA166_0>=92 && LA166_0<=93)||(LA166_0>=96 && LA166_0<=97)||LA166_0==123||LA166_0==136||(LA166_0>=140 && LA166_0<=142)||LA166_0==149||LA166_0==153||LA166_0==155||LA166_0==159||(LA166_0>=162 && LA166_0<=164)||(LA166_0>=166 && LA166_0<=167)||LA166_0==170||LA166_0==174))
				{
					alt166 = 1;
				}
				else if ((LA166_0==NEWLINE))
				{
					alt166 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 166, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:506:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(506, 56);
					PushFollow(Follow._where_item_in_where_expr3819);
					where_item354=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item354.Tree);
					DebugLocation(506, 67);
					// SugarCpp.g:506:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt160=2;
					try { DebugEnterSubRule(160);
					try { DebugEnterDecision(160, false);
					try
					{
						alt160 = dfa160.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(506, 69);
						// SugarCpp.g:506:69: ( NEWLINE )*
						try { DebugEnterSubRule(154);
						while (true)
						{
							int alt154=2;
							try { DebugEnterDecision(154, false);
							int LA154_0 = input.LA(1);

							if ((LA154_0==NEWLINE))
							{
								alt154 = 1;
							}


							} finally { DebugExitDecision(154); }
							switch ( alt154 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:506:69: NEWLINE
								{
								DebugLocation(506, 69);
								NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3823); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE355);


								}
								break;

							default:
								goto loop154;
							}
						}

						loop154:
							;

						} finally { DebugExitSubRule(154); }

						DebugLocation(506, 78);
						DEDENT356=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3826); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT356);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 506:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(506, 88);
							// SugarCpp.g:506:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(506, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(506, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(506, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:507:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(507, 21);
						// SugarCpp.g:507:21: ( NEWLINE )+
						int cnt155=0;
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==NEWLINE))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch (alt155)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:507:21: NEWLINE
								{
								DebugLocation(507, 21);
								NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3859); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE357);


								}
								break;

							default:
								if (cnt155 >= 1)
									goto loop155;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee155 = new EarlyExitException( 155, input );
								DebugRecognitionException(eee155);
								throw eee155;
							}
							cnt155++;
						}
						loop155:
							;

						} finally { DebugExitSubRule(155); }

						DebugLocation(507, 30);
						INDENT358=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3862); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT358);

						DebugLocation(507, 37);
						// SugarCpp.g:507:37: ( NEWLINE )*
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch ( alt156 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:507:37: NEWLINE
								{
								DebugLocation(507, 37);
								NEWLINE359=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3864); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE359);


								}
								break;

							default:
								goto loop156;
							}
						}

						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(507, 46);
						// SugarCpp.g:507:46: ( where_item ( NEWLINE )+ )+
						int cnt158=0;
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==IDENT||LA158_0==81||LA158_0==86||LA158_0==88||LA158_0==90||(LA158_0>=92 && LA158_0<=93)||(LA158_0>=96 && LA158_0<=97)||LA158_0==123||LA158_0==136||(LA158_0>=140 && LA158_0<=142)||LA158_0==149||LA158_0==153||LA158_0==155||LA158_0==159||(LA158_0>=162 && LA158_0<=164)||(LA158_0>=166 && LA158_0<=167)||LA158_0==170||LA158_0==174))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch (alt158)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:507:47: where_item ( NEWLINE )+
								{
								DebugLocation(507, 47);
								PushFollow(Follow._where_item_in_where_expr3868);
								where_item360=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item360.Tree);
								DebugLocation(507, 58);
								// SugarCpp.g:507:58: ( NEWLINE )+
								int cnt157=0;
								try { DebugEnterSubRule(157);
								while (true)
								{
									int alt157=2;
									try { DebugEnterDecision(157, false);
									int LA157_0 = input.LA(1);

									if ((LA157_0==NEWLINE))
									{
										alt157 = 1;
									}


									} finally { DebugExitDecision(157); }
									switch (alt157)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:507:58: NEWLINE
										{
										DebugLocation(507, 58);
										NEWLINE361=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3870); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE361);


										}
										break;

									default:
										if (cnt157 >= 1)
											goto loop157;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee157 = new EarlyExitException( 157, input );
										DebugRecognitionException(eee157);
										throw eee157;
									}
									cnt157++;
								}
								loop157:
									;

								} finally { DebugExitSubRule(157); }


								}
								break;

							default:
								if (cnt158 >= 1)
									goto loop158;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee158 = new EarlyExitException( 158, input );
								DebugRecognitionException(eee158);
								throw eee158;
							}
							cnt158++;
						}
						loop158:
							;

						} finally { DebugExitSubRule(158); }

						DebugLocation(507, 69);
						DEDENT362=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3875); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT362);

						DebugLocation(507, 76);
						// SugarCpp.g:507:76: ( NEWLINE )*
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch ( alt159 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:507:76: NEWLINE
								{
								DebugLocation(507, 76);
								NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3877); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE363);


								}
								break;

							default:
								goto loop159;
							}
						}

						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(507, 85);
						DEDENT364=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3880); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT364);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 507:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(507, 95);
							// SugarCpp.g:507:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(507, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(507, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(507, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(507, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(160); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:509:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(509, 17);
					// SugarCpp.g:509:17: ( NEWLINE )+
					int cnt161=0;
					try { DebugEnterSubRule(161);
					while (true)
					{
						int alt161=2;
						try { DebugEnterDecision(161, false);
						int LA161_0 = input.LA(1);

						if ((LA161_0==NEWLINE))
						{
							alt161 = 1;
						}


						} finally { DebugExitDecision(161); }
						switch (alt161)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:509:17: NEWLINE
							{
							DebugLocation(509, 17);
							NEWLINE365=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3930); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE365);


							}
							break;

						default:
							if (cnt161 >= 1)
								goto loop161;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee161 = new EarlyExitException( 161, input );
							DebugRecognitionException(eee161);
							throw eee161;
						}
						cnt161++;
					}
					loop161:
						;

					} finally { DebugExitSubRule(161); }

					DebugLocation(509, 26);
					INDENT366=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3933); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT366);

					DebugLocation(509, 33);
					// SugarCpp.g:509:33: ( NEWLINE )*
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==NEWLINE))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch ( alt162 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:509:33: NEWLINE
							{
							DebugLocation(509, 33);
							NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3935); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE367);


							}
							break;

						default:
							goto loop162;
						}
					}

					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(509, 42);
					// SugarCpp.g:509:42: ( where_item ( NEWLINE )+ )+
					int cnt164=0;
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==IDENT||LA164_0==81||LA164_0==86||LA164_0==88||LA164_0==90||(LA164_0>=92 && LA164_0<=93)||(LA164_0>=96 && LA164_0<=97)||LA164_0==123||LA164_0==136||(LA164_0>=140 && LA164_0<=142)||LA164_0==149||LA164_0==153||LA164_0==155||LA164_0==159||(LA164_0>=162 && LA164_0<=164)||(LA164_0>=166 && LA164_0<=167)||LA164_0==170||LA164_0==174))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch (alt164)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:509:43: where_item ( NEWLINE )+
							{
							DebugLocation(509, 43);
							PushFollow(Follow._where_item_in_where_expr3939);
							where_item368=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item368.Tree);
							DebugLocation(509, 54);
							// SugarCpp.g:509:54: ( NEWLINE )+
							int cnt163=0;
							try { DebugEnterSubRule(163);
							while (true)
							{
								int alt163=2;
								try { DebugEnterDecision(163, false);
								int LA163_0 = input.LA(1);

								if ((LA163_0==NEWLINE))
								{
									alt163 = 1;
								}


								} finally { DebugExitDecision(163); }
								switch (alt163)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:509:54: NEWLINE
									{
									DebugLocation(509, 54);
									NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3941); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE369);


									}
									break;

								default:
									if (cnt163 >= 1)
										goto loop163;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee163 = new EarlyExitException( 163, input );
									DebugRecognitionException(eee163);
									throw eee163;
								}
								cnt163++;
							}
							loop163:
								;

							} finally { DebugExitSubRule(163); }


							}
							break;

						default:
							if (cnt164 >= 1)
								goto loop164;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee164 = new EarlyExitException( 164, input );
							DebugRecognitionException(eee164);
							throw eee164;
						}
						cnt164++;
					}
					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(509, 65);
					DEDENT370=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3946); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT370);

					DebugLocation(509, 72);
					// SugarCpp.g:509:72: ( NEWLINE )*
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==NEWLINE))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch ( alt165 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:509:72: NEWLINE
							{
							DebugLocation(509, 72);
							NEWLINE371=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3948); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE371);


							}
							break;

						default:
							goto loop165;
						}
					}

					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(509, 81);
					DEDENT372=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3951); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT372);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 509:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(509, 91);
						// SugarCpp.g:509:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(509, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(509, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(509, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(509, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(166); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:511:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(511, 9);
				string_literal373=(IToken)Match(input,169,Follow._169_in_where_expr3989); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal373);

				DebugLocation(511, 17);
				// SugarCpp.g:511:17: ( NEWLINE )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==NEWLINE))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:511:17: NEWLINE
						{
						DebugLocation(511, 17);
						NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3991); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(511, 26);
				INDENT375=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3994); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT375);

				DebugLocation(511, 33);
				// SugarCpp.g:511:33: ( NEWLINE )*
				try { DebugEnterSubRule(168);
				while (true)
				{
					int alt168=2;
					try { DebugEnterDecision(168, false);
					int LA168_0 = input.LA(1);

					if ((LA168_0==NEWLINE))
					{
						alt168 = 1;
					}


					} finally { DebugExitDecision(168); }
					switch ( alt168 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:511:33: NEWLINE
						{
						DebugLocation(511, 33);
						NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3996); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


						}
						break;

					default:
						goto loop168;
					}
				}

				loop168:
					;

				} finally { DebugExitSubRule(168); }

				DebugLocation(511, 42);
				// SugarCpp.g:511:42: ( where_item ( NEWLINE )+ )+
				int cnt170=0;
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==IDENT||LA170_0==81||LA170_0==86||LA170_0==88||LA170_0==90||(LA170_0>=92 && LA170_0<=93)||(LA170_0>=96 && LA170_0<=97)||LA170_0==123||LA170_0==136||(LA170_0>=140 && LA170_0<=142)||LA170_0==149||LA170_0==153||LA170_0==155||LA170_0==159||(LA170_0>=162 && LA170_0<=164)||(LA170_0>=166 && LA170_0<=167)||LA170_0==170||LA170_0==174))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:511:43: where_item ( NEWLINE )+
						{
						DebugLocation(511, 43);
						PushFollow(Follow._where_item_in_where_expr4000);
						where_item377=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item377.Tree);
						DebugLocation(511, 54);
						// SugarCpp.g:511:54: ( NEWLINE )+
						int cnt169=0;
						try { DebugEnterSubRule(169);
						while (true)
						{
							int alt169=2;
							try { DebugEnterDecision(169, false);
							int LA169_0 = input.LA(1);

							if ((LA169_0==NEWLINE))
							{
								alt169 = 1;
							}


							} finally { DebugExitDecision(169); }
							switch (alt169)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:511:54: NEWLINE
								{
								DebugLocation(511, 54);
								NEWLINE378=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4002); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE378);


								}
								break;

							default:
								if (cnt169 >= 1)
									goto loop169;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee169 = new EarlyExitException( 169, input );
								DebugRecognitionException(eee169);
								throw eee169;
							}
							cnt169++;
						}
						loop169:
							;

						} finally { DebugExitSubRule(169); }


						}
						break;

					default:
						if (cnt170 >= 1)
							goto loop170;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee170 = new EarlyExitException( 170, input );
						DebugRecognitionException(eee170);
						throw eee170;
					}
					cnt170++;
				}
				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(511, 65);
				DEDENT379=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4007); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT379);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 511:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(511, 75);
					// SugarCpp.g:511:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(511, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(511, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(511, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(511, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:512:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 512:15: -> expr
				{
					DebugLocation(512, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(514, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:516:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal380 = default(IToken);
		IToken string_literal382 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken INDENT385 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken NEWLINE388 = default(IToken);
		IToken DEDENT389 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken INDENT392 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken NEWLINE395 = default(IToken);
		IToken string_literal396 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken DEDENT399 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr397 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal380_tree = default(CommonTree);
		CommonTree string_literal382_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree INDENT385_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree NEWLINE388_tree = default(CommonTree);
		CommonTree DEDENT389_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree INDENT392_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree NEWLINE395_tree = default(CommonTree);
		CommonTree string_literal396_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree DEDENT399_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(516, 1);
		try
		{
			// SugarCpp.g:517:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:517:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(517, 4);
			string_literal380=(IToken)Match(input,147,Follow._147_in_let_expr4065); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_147.Add(string_literal380);

			DebugLocation(517, 10);
			PushFollow(Follow._where_item_in_let_expr4067);
			where_item381=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item381.Tree);
			DebugLocation(517, 21);
			// SugarCpp.g:517:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_0 = input.LA(1);

			if ((LA182_0==144))
			{
				alt182 = 1;
			}
			else if ((LA182_0==NEWLINE))
			{
				alt182 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 182, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:517:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(517, 23);
				string_literal382=(IToken)Match(input,144,Follow._144_in_let_expr4071); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal382);

				DebugLocation(517, 28);
				// SugarCpp.g:517:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt176=2;
				try { DebugEnterSubRule(176);
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==IDENT||LA176_0==NUMBER||LA176_0==STRING||LA176_0==81||LA176_0==86||LA176_0==88||LA176_0==90||(LA176_0>=92 && LA176_0<=93)||(LA176_0>=96 && LA176_0<=97)||(LA176_0>=123 && LA176_0<=124)||LA176_0==147||LA176_0==150||(LA176_0>=152 && LA176_0<=153)||LA176_0==174))
				{
					alt176 = 1;
				}
				else if ((LA176_0==NEWLINE))
				{
					alt176 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 176, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(176); }
				switch (alt176)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:517:30: expr
					{
					DebugLocation(517, 30);
					PushFollow(Follow._expr_in_let_expr4075);
					expr383=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr383.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(517, 38);
						// SugarCpp.g:517:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(517, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(517, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(517, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:518:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(518, 12);
					// SugarCpp.g:518:12: ( NEWLINE )+
					int cnt172=0;
					try { DebugEnterSubRule(172);
					while (true)
					{
						int alt172=2;
						try { DebugEnterDecision(172, false);
						int LA172_0 = input.LA(1);

						if ((LA172_0==NEWLINE))
						{
							alt172 = 1;
						}


						} finally { DebugExitDecision(172); }
						switch (alt172)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:12: NEWLINE
							{
							DebugLocation(518, 12);
							NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4099); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE384);


							}
							break;

						default:
							if (cnt172 >= 1)
								goto loop172;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee172 = new EarlyExitException( 172, input );
							DebugRecognitionException(eee172);
							throw eee172;
						}
						cnt172++;
					}
					loop172:
						;

					} finally { DebugExitSubRule(172); }

					DebugLocation(518, 21);
					// SugarCpp.g:518:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt175=2;
					try { DebugEnterSubRule(175);
					try { DebugEnterDecision(175, false);
					int LA175_0 = input.LA(1);

					if ((LA175_0==INDENT))
					{
						alt175 = 1;
					}
					else if ((LA175_0==IDENT||LA175_0==NUMBER||LA175_0==STRING||LA175_0==81||LA175_0==86||LA175_0==88||LA175_0==90||(LA175_0>=92 && LA175_0<=93)||(LA175_0>=96 && LA175_0<=97)||(LA175_0>=123 && LA175_0<=124)||LA175_0==147||LA175_0==150||(LA175_0>=152 && LA175_0<=153)||LA175_0==174))
					{
						alt175 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 175, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(175); }
					switch (alt175)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:518:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(518, 23);
						INDENT385=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4104); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT385);

						DebugLocation(518, 30);
						// SugarCpp.g:518:30: ( NEWLINE )*
						try { DebugEnterSubRule(173);
						while (true)
						{
							int alt173=2;
							try { DebugEnterDecision(173, false);
							int LA173_0 = input.LA(1);

							if ((LA173_0==NEWLINE))
							{
								alt173 = 1;
							}


							} finally { DebugExitDecision(173); }
							switch ( alt173 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:30: NEWLINE
								{
								DebugLocation(518, 30);
								NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4106); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE386);


								}
								break;

							default:
								goto loop173;
							}
						}

						loop173:
							;

						} finally { DebugExitSubRule(173); }

						DebugLocation(518, 39);
						PushFollow(Follow._expr_in_let_expr4109);
						expr387=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr387.Tree);
						DebugLocation(518, 44);
						// SugarCpp.g:518:44: ( NEWLINE )+
						int cnt174=0;
						try { DebugEnterSubRule(174);
						while (true)
						{
							int alt174=2;
							try { DebugEnterDecision(174, false);
							int LA174_0 = input.LA(1);

							if ((LA174_0==NEWLINE))
							{
								alt174 = 1;
							}


							} finally { DebugExitDecision(174); }
							switch (alt174)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:44: NEWLINE
								{
								DebugLocation(518, 44);
								NEWLINE388=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4111); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE388);


								}
								break;

							default:
								if (cnt174 >= 1)
									goto loop174;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee174 = new EarlyExitException( 174, input );
								DebugRecognitionException(eee174);
								throw eee174;
							}
							cnt174++;
						}
						loop174:
							;

						} finally { DebugExitSubRule(174); }

						DebugLocation(518, 53);
						DEDENT389=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4114); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT389);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 518:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(518, 63);
							// SugarCpp.g:518:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(518, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(518, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(518, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(518, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:519:14: expr
						{
						DebugLocation(519, 14);
						PushFollow(Follow._expr_in_let_expr4140);
						expr390=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr390.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 519:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(519, 22);
							// SugarCpp.g:519:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(519, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(519, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(519, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(519, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(175); }


					}
					break;

				}
				} finally { DebugExitSubRule(176); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:522:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(522, 11);
				// SugarCpp.g:522:11: ( NEWLINE )+
				int cnt177=0;
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==NEWLINE))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:11: NEWLINE
						{
						DebugLocation(522, 11);
						NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4187); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE391);


						}
						break;

					default:
						if (cnt177 >= 1)
							goto loop177;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee177 = new EarlyExitException( 177, input );
						DebugRecognitionException(eee177);
						throw eee177;
					}
					cnt177++;
				}
				loop177:
					;

				} finally { DebugExitSubRule(177); }

				DebugLocation(522, 20);
				INDENT392=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT392);

				DebugLocation(522, 27);
				// SugarCpp.g:522:27: ( NEWLINE )*
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==NEWLINE))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch ( alt178 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:27: NEWLINE
						{
						DebugLocation(522, 27);
						NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4192); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE393);


						}
						break;

					default:
						goto loop178;
					}
				}

				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(522, 36);
				// SugarCpp.g:522:36: ( where_item ( NEWLINE )+ )+
				int cnt180=0;
				try { DebugEnterSubRule(180);
				while (true)
				{
					int alt180=2;
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==IDENT||LA180_0==81||LA180_0==86||LA180_0==88||LA180_0==90||(LA180_0>=92 && LA180_0<=93)||(LA180_0>=96 && LA180_0<=97)||LA180_0==123||LA180_0==136||(LA180_0>=140 && LA180_0<=142)||LA180_0==149||LA180_0==153||LA180_0==155||LA180_0==159||(LA180_0>=162 && LA180_0<=164)||(LA180_0>=166 && LA180_0<=167)||LA180_0==170||LA180_0==174))
					{
						alt180 = 1;
					}


					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:37: where_item ( NEWLINE )+
						{
						DebugLocation(522, 37);
						PushFollow(Follow._where_item_in_let_expr4196);
						where_item394=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item394.Tree);
						DebugLocation(522, 48);
						// SugarCpp.g:522:48: ( NEWLINE )+
						int cnt179=0;
						try { DebugEnterSubRule(179);
						while (true)
						{
							int alt179=2;
							try { DebugEnterDecision(179, false);
							int LA179_0 = input.LA(1);

							if ((LA179_0==NEWLINE))
							{
								alt179 = 1;
							}


							} finally { DebugExitDecision(179); }
							switch (alt179)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:522:48: NEWLINE
								{
								DebugLocation(522, 48);
								NEWLINE395=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4198); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE395);


								}
								break;

							default:
								if (cnt179 >= 1)
									goto loop179;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee179 = new EarlyExitException( 179, input );
								DebugRecognitionException(eee179);
								throw eee179;
							}
							cnt179++;
						}
						loop179:
							;

						} finally { DebugExitSubRule(179); }


						}
						break;

					default:
						if (cnt180 >= 1)
							goto loop180;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee180 = new EarlyExitException( 180, input );
						DebugRecognitionException(eee180);
						throw eee180;
					}
					cnt180++;
				}
				loop180:
					;

				} finally { DebugExitSubRule(180); }

				DebugLocation(522, 59);
				string_literal396=(IToken)Match(input,144,Follow._144_in_let_expr4203); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal396);

				DebugLocation(522, 64);
				PushFollow(Follow._expr_in_let_expr4205);
				expr397=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr397.Tree);
				DebugLocation(522, 69);
				// SugarCpp.g:522:69: ( NEWLINE )+
				int cnt181=0;
				try { DebugEnterSubRule(181);
				while (true)
				{
					int alt181=2;
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==NEWLINE))
					{
						alt181 = 1;
					}


					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:69: NEWLINE
						{
						DebugLocation(522, 69);
						NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4207); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE398);


						}
						break;

					default:
						if (cnt181 >= 1)
							goto loop181;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee181 = new EarlyExitException( 181, input );
						DebugRecognitionException(eee181);
						throw eee181;
					}
					cnt181++;
				}
				loop181:
					;

				} finally { DebugExitSubRule(181); }

				DebugLocation(522, 78);
				DEDENT399=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT399);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 522:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(522, 88);
					// SugarCpp.g:522:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(522, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(522, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(522, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(522, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:526:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal400 = default(IToken);
		IToken string_literal402 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr403 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal400_tree = default(CommonTree);
		CommonTree string_literal402_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(526, 1);
		try
		{
			// SugarCpp.g:527:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:527:4: '|' expr '=>' where_expr
			{
			DebugLocation(527, 4);
			char_literal400=(IToken)Match(input,171,Follow._171_in_match_item4242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(char_literal400);

			DebugLocation(527, 8);
			PushFollow(Follow._expr_in_match_item4244);
			expr401=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr401.Tree);
			DebugLocation(527, 13);
			string_literal402=(IToken)Match(input,116,Follow._116_in_match_item4246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal402);

			DebugLocation(527, 18);
			PushFollow(Follow._where_expr_in_match_item4248);
			where_expr403=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr403.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 527:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(527, 32);
				// SugarCpp.g:527:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(527, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(527, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(527, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(528, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:530:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal404 = default(IToken);
		IToken NEWLINE406 = default(IToken);
		IToken INDENT407 = default(IToken);
		IToken NEWLINE408 = default(IToken);
		IToken NEWLINE410 = default(IToken);
		IToken DEDENT411 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item409 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal404_tree = default(CommonTree);
		CommonTree NEWLINE406_tree = default(CommonTree);
		CommonTree INDENT407_tree = default(CommonTree);
		CommonTree NEWLINE408_tree = default(CommonTree);
		CommonTree NEWLINE410_tree = default(CommonTree);
		CommonTree DEDENT411_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(530, 1);
		try
		{
			// SugarCpp.g:531:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:531:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(531, 4);
			string_literal404=(IToken)Match(input,150,Follow._150_in_match_expr4269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(string_literal404);

			DebugLocation(531, 12);
			// SugarCpp.g:531:12: ( expr )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_0 = input.LA(1);

			if ((LA183_0==IDENT||LA183_0==NUMBER||LA183_0==STRING||LA183_0==81||LA183_0==86||LA183_0==88||LA183_0==90||(LA183_0>=92 && LA183_0<=93)||(LA183_0>=96 && LA183_0<=97)||(LA183_0>=123 && LA183_0<=124)||LA183_0==147||LA183_0==150||(LA183_0>=152 && LA183_0<=153)||LA183_0==174))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:531:12: expr
				{
				DebugLocation(531, 12);
				PushFollow(Follow._expr_in_match_expr4271);
				expr405=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr405.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(531, 18);
			// SugarCpp.g:531:18: ( NEWLINE )+
			int cnt184=0;
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==NEWLINE))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:531:18: NEWLINE
					{
					DebugLocation(531, 18);
					NEWLINE406=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4274); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE406);


					}
					break;

				default:
					if (cnt184 >= 1)
						goto loop184;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee184 = new EarlyExitException( 184, input );
					DebugRecognitionException(eee184);
					throw eee184;
				}
				cnt184++;
			}
			loop184:
				;

			} finally { DebugExitSubRule(184); }

			DebugLocation(531, 27);
			INDENT407=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT407);

			DebugLocation(531, 34);
			// SugarCpp.g:531:34: ( NEWLINE )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==NEWLINE))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:531:34: NEWLINE
					{
					DebugLocation(531, 34);
					NEWLINE408=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4279); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE408);


					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(531, 43);
			// SugarCpp.g:531:43: ( match_item ( NEWLINE )+ )+
			int cnt187=0;
			try { DebugEnterSubRule(187);
			while (true)
			{
				int alt187=2;
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==171))
				{
					alt187 = 1;
				}


				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:531:44: match_item ( NEWLINE )+
					{
					DebugLocation(531, 44);
					PushFollow(Follow._match_item_in_match_expr4283);
					match_item409=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item409.Tree);
					DebugLocation(531, 55);
					// SugarCpp.g:531:55: ( NEWLINE )+
					int cnt186=0;
					try { DebugEnterSubRule(186);
					while (true)
					{
						int alt186=2;
						try { DebugEnterDecision(186, false);
						int LA186_0 = input.LA(1);

						if ((LA186_0==NEWLINE))
						{
							alt186 = 1;
						}


						} finally { DebugExitDecision(186); }
						switch (alt186)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:531:55: NEWLINE
							{
							DebugLocation(531, 55);
							NEWLINE410=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4285); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE410);


							}
							break;

						default:
							if (cnt186 >= 1)
								goto loop186;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee186 = new EarlyExitException( 186, input );
							DebugRecognitionException(eee186);
							throw eee186;
						}
						cnt186++;
					}
					loop186:
						;

					} finally { DebugExitSubRule(186); }


					}
					break;

				default:
					if (cnt187 >= 1)
						goto loop187;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee187 = new EarlyExitException( 187, input );
					DebugRecognitionException(eee187);
					throw eee187;
				}
				cnt187++;
			}
			loop187:
				;

			} finally { DebugExitSubRule(187); }

			DebugLocation(531, 66);
			DEDENT411=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4290); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT411);



			{
			// AST REWRITE
			// elements: match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 531:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(531, 76);
				// SugarCpp.g:531:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(531, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(531, 89);
				// SugarCpp.g:531:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(531, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(531, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(531, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(532, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:534:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(534, 1);
		try
		{
			// SugarCpp.g:535:2: ( list_expr | match_expr | let_expr )
			int alt188=3;
			try { DebugEnterDecision(188, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 81:
			case 86:
			case 88:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 123:
			case 124:
			case 152:
			case 153:
			case 174:
				{
				alt188 = 1;
				}
				break;
			case 150:
				{
				alt188 = 2;
				}
				break;
			case 147:
				{
				alt188 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 188, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:535:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(535, 4);
				PushFollow(Follow._list_expr_in_expr4313);
				list_expr412=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr412.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:536:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(536, 4);
				PushFollow(Follow._match_expr_in_expr4318);
				match_expr413=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr413.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:537:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(537, 4);
				PushFollow(Follow._let_expr_in_expr4323);
				let_expr414=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr414.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:540:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 61);
		TraceIn("list_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal415 = default(IToken);
		IToken char_literal416 = default(IToken);
		IToken NEWLINE417 = default(IToken);
		IToken INDENT418 = default(IToken);
		IToken DEDENT419 = default(IToken);
		IToken char_literal421 = default(IToken);
		IToken NEWLINE422 = default(IToken);
		IToken INDENT423 = default(IToken);
		IToken DEDENT424 = default(IToken);
		IToken char_literal426 = default(IToken);
		IToken NEWLINE427 = default(IToken);
		IToken INDENT428 = default(IToken);
		IToken DEDENT429 = default(IToken);
		IToken char_literal430 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr425 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr431 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal415_tree = default(CommonTree);
		CommonTree char_literal416_tree = default(CommonTree);
		CommonTree NEWLINE417_tree = default(CommonTree);
		CommonTree INDENT418_tree = default(CommonTree);
		CommonTree DEDENT419_tree = default(CommonTree);
		CommonTree char_literal421_tree = default(CommonTree);
		CommonTree NEWLINE422_tree = default(CommonTree);
		CommonTree INDENT423_tree = default(CommonTree);
		CommonTree DEDENT424_tree = default(CommonTree);
		CommonTree char_literal426_tree = default(CommonTree);
		CommonTree NEWLINE427_tree = default(CommonTree);
		CommonTree INDENT428_tree = default(CommonTree);
		CommonTree DEDENT429_tree = default(CommonTree);
		CommonTree char_literal430_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(540, 1);
		try
		{
			// SugarCpp.g:541:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt194=2;
			try { DebugEnterDecision(194, false);
			int LA194_0 = input.LA(1);

			if ((LA194_0==124))
			{
				alt194 = 1;
			}
			else if ((LA194_0==IDENT||LA194_0==NUMBER||LA194_0==STRING||LA194_0==81||LA194_0==86||LA194_0==88||LA194_0==90||(LA194_0>=92 && LA194_0<=93)||(LA194_0>=96 && LA194_0<=97)||LA194_0==123||(LA194_0>=152 && LA194_0<=153)||LA194_0==174))
			{
				alt194 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:541:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(541, 4);
				char_literal415=(IToken)Match(input,124,Follow._124_in_list_expr4334); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal415);

				DebugLocation(541, 8);
				// SugarCpp.g:541:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt192=2;
				try { DebugEnterSubRule(192);
				try { DebugEnterDecision(192, false);
				try
				{
					alt192 = dfa192.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(192); }
				switch (alt192)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:541:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(541, 9);
					// SugarCpp.g:541:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(189);
					while (true)
					{
						int alt189=5;
						try { DebugEnterDecision(189, false);
						switch (input.LA(1))
						{
						case 95:
							{
							alt189 = 1;
							}
							break;
						case NEWLINE:
							{
							alt189 = 2;
							}
							break;
						case INDENT:
							{
							alt189 = 3;
							}
							break;
						case DEDENT:
							{
							alt189 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(189); }
						switch ( alt189 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:541:10: ','
							{
							DebugLocation(541, 10);
							char_literal416=(IToken)Match(input,95,Follow._95_in_list_expr4338); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal416);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:541:16: NEWLINE
							{
							DebugLocation(541, 16);
							NEWLINE417=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4342); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE417);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:541:26: INDENT
							{
							DebugLocation(541, 26);
							INDENT418=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4346); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT418);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:541:35: DEDENT
							{
							DebugLocation(541, 35);
							DEDENT419=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4350); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT419);


							}
							break;

						default:
							goto loop189;
						}
					}

					loop189:
						;

					} finally { DebugExitSubRule(189); }

					DebugLocation(541, 44);
					PushFollow(Follow._list_expr_in_list_expr4354);
					list_expr420=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr420.Tree);
					DebugLocation(541, 54);
					// SugarCpp.g:541:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(191);
					while (true)
					{
						int alt191=2;
						try { DebugEnterDecision(191, false);
						try
						{
							alt191 = dfa191.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(191); }
						switch ( alt191 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:541:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(541, 55);
							// SugarCpp.g:541:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt190=0;
							try { DebugEnterSubRule(190);
							while (true)
							{
								int alt190=5;
								try { DebugEnterDecision(190, false);
								switch (input.LA(1))
								{
								case 95:
									{
									alt190 = 1;
									}
									break;
								case NEWLINE:
									{
									alt190 = 2;
									}
									break;
								case INDENT:
									{
									alt190 = 3;
									}
									break;
								case DEDENT:
									{
									alt190 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(190); }
								switch (alt190)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:541:56: ','
									{
									DebugLocation(541, 56);
									char_literal421=(IToken)Match(input,95,Follow._95_in_list_expr4358); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_95.Add(char_literal421);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:541:62: NEWLINE
									{
									DebugLocation(541, 62);
									NEWLINE422=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4362); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE422);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:541:72: INDENT
									{
									DebugLocation(541, 72);
									INDENT423=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4366); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT423);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:541:81: DEDENT
									{
									DebugLocation(541, 81);
									DEDENT424=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4370); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT424);


									}
									break;

								default:
									if (cnt190 >= 1)
										goto loop190;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee190 = new EarlyExitException( 190, input );
									DebugRecognitionException(eee190);
									throw eee190;
								}
								cnt190++;
							}
							loop190:
								;

							} finally { DebugExitSubRule(190); }

							DebugLocation(541, 90);
							PushFollow(Follow._list_expr_in_list_expr4374);
							list_expr425=list_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_list_expr.Add(list_expr425.Tree);

							}
							break;

						default:
							goto loop191;
						}
					}

					loop191:
						;

					} finally { DebugExitSubRule(191); }


					}
					break;

				}
				} finally { DebugExitSubRule(192); }

				DebugLocation(541, 104);
				// SugarCpp.g:541:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(193);
				while (true)
				{
					int alt193=5;
					try { DebugEnterDecision(193, false);
					switch (input.LA(1))
					{
					case 95:
						{
						alt193 = 1;
						}
						break;
					case NEWLINE:
						{
						alt193 = 2;
						}
						break;
					case INDENT:
						{
						alt193 = 3;
						}
						break;
					case DEDENT:
						{
						alt193 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(193); }
					switch ( alt193 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:105: ','
						{
						DebugLocation(541, 105);
						char_literal426=(IToken)Match(input,95,Follow._95_in_list_expr4381); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal426);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:541:111: NEWLINE
						{
						DebugLocation(541, 111);
						NEWLINE427=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4385); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE427);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:541:121: INDENT
						{
						DebugLocation(541, 121);
						INDENT428=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4389); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT428);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:541:130: DEDENT
						{
						DebugLocation(541, 130);
						DEDENT429=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4393); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT429);


						}
						break;

					default:
						goto loop193;
					}
				}

				loop193:
					;

				} finally { DebugExitSubRule(193); }

				DebugLocation(541, 139);
				char_literal430=(IToken)Match(input,125,Follow._125_in_list_expr4397); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal430);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 541:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(541, 146);
					// SugarCpp.g:541:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(541, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(541, 158);
					// SugarCpp.g:541:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(541, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:542:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(542, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4411);
				lambda_expr431=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr431.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 61);
			LeaveRule("list_expr", 61);
			LeaveRule_list_expr();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:545:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 62);
		TraceIn("lambda_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal432 = default(IToken);
		IToken char_literal434 = default(IToken);
		IToken string_literal435 = default(IToken);
		IToken string_literal437 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal432_tree = default(CommonTree);
		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree string_literal435_tree = default(CommonTree);
		CommonTree string_literal437_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(545, 1);
		try
		{
			// SugarCpp.g:546:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt197=2;
			try { DebugEnterDecision(197, false);
			try
			{
				alt197 = dfa197.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:546:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(546, 4);
				char_literal432=(IToken)Match(input,88,Follow._88_in_lambda_expr4422); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal432);

				DebugLocation(546, 8);
				// SugarCpp.g:546:8: ( func_args )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_0 = input.LA(1);

				if ((LA195_0==IDENT||LA195_0==107))
				{
					alt195 = 1;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:546:8: func_args
					{
					DebugLocation(546, 8);
					PushFollow(Follow._func_args_in_lambda_expr4424);
					func_args433=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args433.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(546, 19);
				char_literal434=(IToken)Match(input,89,Follow._89_in_lambda_expr4427); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal434);

				DebugLocation(546, 23);
				// SugarCpp.g:546:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==99))
				{
					alt196 = 1;
				}
				else if ((LA196_0==116))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:546:25: '->' expr
					{
					DebugLocation(546, 25);
					string_literal435=(IToken)Match(input,99,Follow._99_in_lambda_expr4431); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal435);

					DebugLocation(546, 30);
					PushFollow(Follow._expr_in_lambda_expr4433);
					expr436=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr436.Tree);


					{
					// AST REWRITE
					// elements: 99, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(546, 39);
						// SugarCpp.g:546:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(546, 53);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(546, 58);
						// SugarCpp.g:546:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(546, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(546, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:547:25: '=>' expr
					{
					DebugLocation(547, 25);
					string_literal437=(IToken)Match(input,116,Follow._116_in_lambda_expr4473); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_116.Add(string_literal437);

					DebugLocation(547, 30);
					PushFollow(Follow._expr_in_lambda_expr4475);
					expr438=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr438.Tree);


					{
					// AST REWRITE
					// elements: expr, 116, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 547:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(547, 39);
						// SugarCpp.g:547:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(547, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(547, 53);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(547, 58);
						// SugarCpp.g:547:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(547, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(547, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(196); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:548:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(548, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4495);
				modify_expr439=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr439.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 62);
			LeaveRule("lambda_expr", 62);
			LeaveRule_lambda_expr();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:551:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 63);
		TraceIn("modify_expr_op", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set440 = default(IToken);

		CommonTree set440_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(551, 91);
		try
		{
			// SugarCpp.g:551:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(551, 15);

			set440=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==114||input.LA(1)==120||input.LA(1)==127||input.LA(1)==172)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set440));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 63);
			LeaveRule("modify_expr_op", 63);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(551, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:552:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 64);
		TraceIn("modify_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set442 = default(IToken);
		IToken char_literal444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set442_tree = default(CommonTree);
		CommonTree char_literal444_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(552, 1);
		try
		{
			// SugarCpp.g:553:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:553:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(553, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4552);
			cond_expr441=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr441.Tree);
			DebugLocation(553, 14);
			// SugarCpp.g:553:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt199=3;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==84||LA199_0==87||LA199_0==91||LA199_0==94||LA199_0==98||LA199_0==104||LA199_0==107||LA199_0==112||LA199_0==120||LA199_0==127||LA199_0==172))
			{
				alt199 = 1;
			}
			else if ((LA199_0==114))
			{
				alt199 = 2;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:553:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(553, 94);

				set442=(IToken)input.LT(1);
				set442=(IToken)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==107||input.LA(1)==112||input.LA(1)==120||input.LA(1)==127||input.LA(1)==172)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set442), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(553, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4601);
				cond_expr443=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr443.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:554:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(554, 7);
				// SugarCpp.g:554:7: ( '=' ^ cond_expr )+
				int cnt198=0;
				try { DebugEnterSubRule(198);
				while (true)
				{
					int alt198=2;
					try { DebugEnterDecision(198, false);
					int LA198_0 = input.LA(1);

					if ((LA198_0==114))
					{
						alt198 = 1;
					}


					} finally { DebugExitDecision(198); }
					switch (alt198)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:554:8: '=' ^ cond_expr
						{
						DebugLocation(554, 11);
						char_literal444=(IToken)Match(input,114,Follow._114_in_modify_expr4610); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal444_tree = (CommonTree)adaptor.Create(char_literal444);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal444_tree, root_0);
						}
						DebugLocation(554, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4613);
						cond_expr445=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr445.Tree);

						}
						break;

					default:
						if (cnt198 >= 1)
							goto loop198;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee198 = new EarlyExitException( 198, input );
						DebugRecognitionException(eee198);
						throw eee198;
					}
					cnt198++;
				}
				loop198:
					;

				} finally { DebugExitSubRule(198); }


				}
				break;

			}
			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 64);
			LeaveRule("modify_expr", 64);
			LeaveRule_modify_expr();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:557:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 65);
		TraceIn("cond_expr_item", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr446 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(557, 24);
		try
		{
			// SugarCpp.g:557:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:557:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(557, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4626);
			or_expr446=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr446.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 65);
			LeaveRule("cond_expr_item", 65);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(557, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:558:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 66);
		TraceIn("cond_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal447 = default(IToken);
		IToken char_literal448 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal448_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(558, 1);
		try
		{
			// SugarCpp.g:559:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:559:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(559, 4);
			// SugarCpp.g:559:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:559:5: a= or_expr
			{
			DebugLocation(559, 6);
			PushFollow(Follow._or_expr_in_cond_expr4638);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 559:15: -> $a
			{
				DebugLocation(559, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(559, 22);
			// SugarCpp.g:559:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==121))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:559:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(559, 23);
				char_literal447=(IToken)Match(input,121,Follow._121_in_cond_expr4647); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_121.Add(char_literal447);

				DebugLocation(559, 27);
				// SugarCpp.g:559:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==IDENT||LA201_0==NUMBER||LA201_0==STRING||LA201_0==81||LA201_0==86||LA201_0==88||LA201_0==90||(LA201_0>=92 && LA201_0<=93)||(LA201_0>=96 && LA201_0<=97)||LA201_0==123||(LA201_0>=152 && LA201_0<=153)||LA201_0==174))
				{
					alt201 = 1;
				}
				else if ((LA201_0==DEDENT||LA201_0==INDENT||LA201_0==NEWLINE||LA201_0==84||LA201_0==87||LA201_0==89||LA201_0==91||(LA201_0>=94 && LA201_0<=95)||LA201_0==98||LA201_0==104||(LA201_0>=107 && LA201_0<=108)||LA201_0==112||LA201_0==114||LA201_0==116||LA201_0==120||LA201_0==125||LA201_0==127||LA201_0==131||LA201_0==137||(LA201_0>=141 && LA201_0<=142)||LA201_0==144||(LA201_0>=160 && LA201_0<=161)||LA201_0==164||LA201_0==166||(LA201_0>=169 && LA201_0<=170)||LA201_0==172))
				{
					alt201 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:559:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(559, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4653);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(559, 46);
					// SugarCpp.g:559:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt200=2;
					try { DebugEnterSubRule(200);
					try { DebugEnterDecision(200, false);
					int LA200_0 = input.LA(1);

					if ((LA200_0==105))
					{
						alt200 = 1;
					}
					else if ((LA200_0==DEDENT||LA200_0==INDENT||LA200_0==NEWLINE||LA200_0==84||LA200_0==87||LA200_0==89||LA200_0==91||(LA200_0>=94 && LA200_0<=95)||LA200_0==98||LA200_0==104||(LA200_0>=107 && LA200_0<=108)||LA200_0==112||LA200_0==114||LA200_0==116||LA200_0==120||LA200_0==125||LA200_0==127||LA200_0==131||LA200_0==137||(LA200_0>=141 && LA200_0<=142)||LA200_0==144||(LA200_0>=160 && LA200_0<=161)||LA200_0==164||LA200_0==166||(LA200_0>=169 && LA200_0<=170)||LA200_0==172))
					{
						alt200 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(200); }
					switch (alt200)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:559:48: ':' b= cond_expr_item
						{
						DebugLocation(559, 48);
						char_literal448=(IToken)Match(input,105,Follow._105_in_cond_expr4657); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_105.Add(char_literal448);

						DebugLocation(559, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4661);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, a, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 559:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(559, 72);
							// SugarCpp.g:559:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(559, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(559, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(559, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(559, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:560:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 560:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(560, 20);
							// SugarCpp.g:560:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(560, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(560, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(560, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(200); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:562:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(562, 14);
						// SugarCpp.g:562:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(562, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(201); }


				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 66);
			LeaveRule("cond_expr", 66);
			LeaveRule_cond_expr();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:566:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 67);
		TraceIn("or_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set449 = default(IToken);

		CommonTree set449_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(566, 19);
		try
		{
			// SugarCpp.g:566:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(566, 6);

			set449=(IToken)input.LT(1);
			if (input.LA(1)==154||input.LA(1)==173)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set449));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 67);
			LeaveRule("or_op", 67);
			LeaveRule_or_op();
		}
		DebugLocation(566, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:567:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 68);
		TraceIn("or_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(568, 4);
			// SugarCpp.g:568:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:568:5: a= and_expr
			{
			DebugLocation(568, 6);
			PushFollow(Follow._and_expr_in_or_expr4775);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 568:16: -> $a
			{
				DebugLocation(568, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(568, 23);
			// SugarCpp.g:568:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==154||LA203_0==173))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:568:24: op= or_op b= and_expr
					{
					DebugLocation(568, 26);
					PushFollow(Follow._or_op_in_or_expr4786);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(568, 34);
					PushFollow(Follow._and_expr_in_or_expr4790);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 568:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(568, 47);
						// SugarCpp.g:568:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(568, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(568, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(568, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(568, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 68);
			LeaveRule("or_expr", 68);
			LeaveRule_or_expr();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:571:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 69);
		TraceIn("and_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set450 = default(IToken);

		CommonTree set450_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(571, 21);
		try
		{
			// SugarCpp.g:571:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(571, 7);

			set450=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==129)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set450));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 69);
			LeaveRule("and_op", 69);
			LeaveRule_and_op();
		}
		DebugLocation(571, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:572:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 70);
		TraceIn("and_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(572, 1);
		try
		{
			// SugarCpp.g:573:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:573:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(573, 4);
			// SugarCpp.g:573:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:573:5: a= bit_or
			{
			DebugLocation(573, 6);
			PushFollow(Follow._bit_or_in_and_expr4832);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 573:14: -> $a
			{
				DebugLocation(573, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(573, 21);
			// SugarCpp.g:573:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=2;
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==85||LA204_0==129))
				{
					alt204 = 1;
				}


				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:573:22: op= and_op b= bit_or
					{
					DebugLocation(573, 24);
					PushFollow(Follow._and_op_in_and_expr4843);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(573, 33);
					PushFollow(Follow._bit_or_in_and_expr4847);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 573:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(573, 44);
						// SugarCpp.g:573:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(573, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(573, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(573, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 70);
			LeaveRule("and_expr", 70);
			LeaveRule_and_expr();
		}
		DebugLocation(574, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:576:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 71);
		TraceIn("bit_or", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal451 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal451_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(576, 1);
		try
		{
			// SugarCpp.g:577:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:577:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(577, 4);
			// SugarCpp.g:577:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:577:5: a= bit_xor
			{
			DebugLocation(577, 6);
			PushFollow(Follow._bit_xor_in_bit_or4878);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 577:15: -> $a
			{
				DebugLocation(577, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(577, 22);
			// SugarCpp.g:577:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(205);
			while (true)
			{
				int alt205=2;
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==171))
				{
					alt205 = 1;
				}


				} finally { DebugExitDecision(205); }
				switch ( alt205 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:577:23: '|' b= bit_xor
					{
					DebugLocation(577, 23);
					char_literal451=(IToken)Match(input,171,Follow._171_in_bit_or4887); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal451);

					DebugLocation(577, 28);
					PushFollow(Follow._bit_xor_in_bit_or4891);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 171, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(577, 40);
						// SugarCpp.g:577:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(577, 51);
						adaptor.AddChild(root_1, stream_171.NextNode());
						DebugLocation(577, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(577, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop205;
				}
			}

			loop205:
				;

			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 71);
			LeaveRule("bit_or", 71);
			LeaveRule_bit_or();
		}
		DebugLocation(578, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:580:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 72);
		TraceIn("bit_xor", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal452 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal452_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(580, 1);
		try
		{
			// SugarCpp.g:581:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:581:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(581, 4);
			// SugarCpp.g:581:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:581:5: a= bit_and
			{
			DebugLocation(581, 6);
			PushFollow(Follow._bit_and_in_bit_xor4921);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 581:15: -> $a
			{
				DebugLocation(581, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(581, 22);
			// SugarCpp.g:581:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==126))
				{
					alt206 = 1;
				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:581:23: '^' b= bit_and
					{
					DebugLocation(581, 23);
					char_literal452=(IToken)Match(input,126,Follow._126_in_bit_xor4930); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_126.Add(char_literal452);

					DebugLocation(581, 28);
					PushFollow(Follow._bit_and_in_bit_xor4934);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 126
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 581:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(581, 40);
						// SugarCpp.g:581:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(581, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(581, 51);
						adaptor.AddChild(root_1, stream_126.NextNode());
						DebugLocation(581, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(581, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 72);
			LeaveRule("bit_xor", 72);
			LeaveRule_bit_xor();
		}
		DebugLocation(582, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:584:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 73);
		TraceIn("bit_and", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal453 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal453_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(584, 1);
		try
		{
			// SugarCpp.g:585:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:585:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(585, 4);
			// SugarCpp.g:585:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:585:5: a= cmp_expr
			{
			DebugLocation(585, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4964);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 585:16: -> $a
			{
				DebugLocation(585, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(585, 23);
			// SugarCpp.g:585:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==86))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:585:24: '&' b= cmp_expr
					{
					DebugLocation(585, 24);
					char_literal453=(IToken)Match(input,86,Follow._86_in_bit_and4973); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_86.Add(char_literal453);

					DebugLocation(585, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4977);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 585:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(585, 42);
						// SugarCpp.g:585:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(585, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(585, 53);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(585, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(585, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 73);
			LeaveRule("bit_and", 73);
			LeaveRule_bit_and();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:588:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 74);
		TraceIn("chain_op", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set454 = default(IToken);

		CommonTree set454_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(588, 64);
		try
		{
			// SugarCpp.g:588:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(588, 9);

			set454=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set454));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 74);
			LeaveRule("chain_op", 74);
			LeaveRule_chain_op();
		}
		DebugLocation(588, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:589:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 75);
		TraceIn("no_less_op", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set455 = default(IToken);

		CommonTree set455_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(589, 60);
		try
		{
			// SugarCpp.g:589:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(589, 11);

			set455=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set455));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 75);
			LeaveRule("no_less_op", 75);
			LeaveRule_no_less_op();
		}
		DebugLocation(589, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:590:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 76);
		TraceIn("chain_list", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr457 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(590, 35);
		try
		{
			// SugarCpp.g:590:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:590:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(590, 13);
			// SugarCpp.g:590:13: ( chain_op shift_expr )+
			int cnt208=0;
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==82||LA208_0==109||LA208_0==113||LA208_0==115||(LA208_0>=117 && LA208_0<=118)||(LA208_0>=145 && LA208_0<=146)))
				{
					alt208 = 1;
				}


				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:590:14: chain_op shift_expr
					{
					DebugLocation(590, 14);
					PushFollow(Follow._chain_op_in_chain_list5069);
					chain_op456=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op456.Tree);
					DebugLocation(590, 23);
					PushFollow(Follow._shift_expr_in_chain_list5071);
					shift_expr457=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr457.Tree);

					}
					break;

				default:
					if (cnt208 >= 1)
						goto loop208;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee208 = new EarlyExitException( 208, input );
					DebugRecognitionException(eee208);
					throw eee208;
				}
				cnt208++;
			}
			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 76);
			LeaveRule("chain_list", 76);
			LeaveRule_chain_list();
		}
		DebugLocation(590, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:591:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 77);
		TraceIn("cmp_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal458 = default(IToken);
		IToken char_literal460 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken char_literal463 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list465 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal458_tree = default(CommonTree);
		CommonTree char_literal460_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree char_literal463_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(591, 1);
		try
		{
			// SugarCpp.g:592:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:592:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(592, 4);
			// SugarCpp.g:592:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:592:5: a= shift_expr
			{
			DebugLocation(592, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5085);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 592:18: -> $a
			{
				DebugLocation(592, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(592, 25);
			// SugarCpp.g:592:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt213=3;
			try { DebugEnterSubRule(213);
			try { DebugEnterDecision(213, false);
			int LA213_0 = input.LA(1);

			if ((LA213_0==109))
			{
				alt213 = 1;
			}
			else if ((LA213_0==82||LA213_0==113||LA213_0==115||(LA213_0>=117 && LA213_0<=118)||(LA213_0>=145 && LA213_0<=146)))
			{
				alt213 = 2;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:592:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(592, 27);
				char_literal458=(IToken)Match(input,109,Follow._109_in_cmp_expr5095); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal458);

				DebugLocation(592, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr5099);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(592, 44);
				// SugarCpp.g:592:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt211=3;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt211 = 1;
					}
					break;
				case 117:
					{
					int LA211_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt211 = 1;
					}
					else if ((true))
					{
						alt211 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 211, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 82:
				case 109:
				case 113:
				case 115:
				case 118:
				case 145:
				case 146:
					{
					alt211 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 84:
				case 85:
				case 86:
				case 87:
				case 89:
				case 91:
				case 94:
				case 95:
				case 98:
				case 104:
				case 105:
				case 107:
				case 108:
				case 112:
				case 114:
				case 116:
				case 120:
				case 121:
				case 125:
				case 126:
				case 127:
				case 129:
				case 131:
				case 137:
				case 141:
				case 142:
				case 144:
				case 154:
				case 160:
				case 161:
				case 164:
				case 166:
				case 169:
				case 170:
				case 171:
				case 172:
				case 173:
					{
					alt211 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:592:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(592, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(592, 76);
					// SugarCpp.g:592:76: ( ident )*
					try { DebugEnterSubRule(209);
					while (true)
					{
						int alt209=2;
						try { DebugEnterDecision(209, false);
						int LA209_0 = input.LA(1);

						if ((LA209_0==IDENT))
						{
							alt209 = 1;
						}


						} finally { DebugExitDecision(209); }
						switch ( alt209 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:592:76: ident
							{
							DebugLocation(592, 76);
							PushFollow(Follow._ident_in_cmp_expr5105);
							ident459=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident459.Tree);

							}
							break;

						default:
							goto loop209;
						}
					}

					loop209:
						;

					} finally { DebugExitSubRule(209); }

					DebugLocation(592, 83);
					char_literal460=(IToken)Match(input,117,Follow._117_in_cmp_expr5108); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_117.Add(char_literal460);

					DebugLocation(592, 87);
					char_literal461=(IToken)Match(input,88,Follow._88_in_cmp_expr5110); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal461);

					DebugLocation(592, 91);
					// SugarCpp.g:592:91: ( expr_list )?
					int alt210=2;
					try { DebugEnterSubRule(210);
					try { DebugEnterDecision(210, false);
					int LA210_0 = input.LA(1);

					if ((LA210_0==IDENT||LA210_0==NUMBER||LA210_0==STRING||LA210_0==81||LA210_0==86||LA210_0==88||LA210_0==90||(LA210_0>=92 && LA210_0<=93)||(LA210_0>=96 && LA210_0<=97)||(LA210_0>=123 && LA210_0<=124)||LA210_0==147||LA210_0==150||(LA210_0>=152 && LA210_0<=153)||LA210_0==174))
					{
						alt210 = 1;
					}
					} finally { DebugExitDecision(210); }
					switch (alt210)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:592:91: expr_list
						{
						DebugLocation(592, 91);
						PushFollow(Follow._expr_list_in_cmp_expr5112);
						expr_list462=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list462.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(210); }

					DebugLocation(592, 102);
					char_literal463=(IToken)Match(input,89,Follow._89_in_cmp_expr5115); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal463);



					{
					// AST REWRITE
					// elements: expr_list, ident, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 592:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(592, 109);
						// SugarCpp.g:592:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(592, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(592, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(592, 131);
						// SugarCpp.g:592:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(592, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(592, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(592, 155);
						// SugarCpp.g:592:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(592, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(592, 163);
						// SugarCpp.g:592:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(592, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:593:46: chain_list
					{
					DebugLocation(593, 46);
					PushFollow(Follow._chain_list_in_cmp_expr5184);
					chain_list464=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list464.Tree);


					{
					// AST REWRITE
					// elements: chain_list, 109, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 593:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(593, 60);
						// SugarCpp.g:593:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(593, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(593, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(593, 84);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(593, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(593, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:594:16: 
					{

					{
					// AST REWRITE
					// elements: b, cmp_expr, 109
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 594:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(594, 19);
						// SugarCpp.g:594:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(594, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(594, 30);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(594, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(594, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(211); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:595:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(595, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5261);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(595, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5265);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(595, 54);
				// SugarCpp.g:595:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt212=2;
				try { DebugEnterSubRule(212);
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==82||LA212_0==109||LA212_0==113||LA212_0==115||(LA212_0>=117 && LA212_0<=118)||(LA212_0>=145 && LA212_0<=146)))
				{
					alt212 = 1;
				}
				else if ((LA212_0==DEDENT||LA212_0==INDENT||LA212_0==NEWLINE||(LA212_0>=84 && LA212_0<=87)||LA212_0==89||LA212_0==91||(LA212_0>=94 && LA212_0<=95)||LA212_0==98||(LA212_0>=104 && LA212_0<=105)||(LA212_0>=107 && LA212_0<=108)||LA212_0==112||LA212_0==114||LA212_0==116||(LA212_0>=120 && LA212_0<=121)||(LA212_0>=125 && LA212_0<=127)||LA212_0==129||LA212_0==131||LA212_0==137||(LA212_0>=141 && LA212_0<=142)||LA212_0==144||LA212_0==154||(LA212_0>=160 && LA212_0<=161)||LA212_0==164||LA212_0==166||(LA212_0>=169 && LA212_0<=173)))
				{
					alt212 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 212, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(212); }
				switch (alt212)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:595:56: chain_list
					{
					DebugLocation(595, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5269);
					chain_list465=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list465.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, op, chain_list
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 595:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(595, 70);
						// SugarCpp.g:595:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(595, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(595, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(595, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(595, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(595, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:596:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 596:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(596, 20);
						// SugarCpp.g:596:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(596, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(596, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(596, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(596, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(212); }


				}
				break;

			}
			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 77);
			LeaveRule("cmp_expr", 77);
			LeaveRule_cmp_expr();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:601:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 78);
		TraceIn("shift_expr_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set466 = default(IToken);

		CommonTree set466_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(601, 27);
		try
		{
			// SugarCpp.g:601:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(601, 14);

			set466=(IToken)input.LT(1);
			if (input.LA(1)==111||input.LA(1)==119)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set466));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 78);
			LeaveRule("shift_expr_op", 78);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(601, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:602:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 79);
		TraceIn("shift_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op467 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(602, 1);
		try
		{
			// SugarCpp.g:603:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:603:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(603, 4);
			// SugarCpp.g:603:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:603:5: a= add_expr
			{
			DebugLocation(603, 6);
			PushFollow(Follow._add_expr_in_shift_expr5371);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 603:16: -> $a
			{
				DebugLocation(603, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(603, 23);
			// SugarCpp.g:603:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==111||LA214_0==119))
				{
					alt214 = 1;
				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:603:24: shift_expr_op b= add_expr
					{
					DebugLocation(603, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5380);
					shift_expr_op467=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op467.Tree);
					DebugLocation(603, 39);
					PushFollow(Follow._add_expr_in_shift_expr5384);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 603:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(603, 52);
						// SugarCpp.g:603:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(603, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(603, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(603, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(603, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 79);
			LeaveRule("shift_expr", 79);
			LeaveRule_shift_expr();
		}
		DebugLocation(604, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:606:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 80);
		TraceIn("add_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal468 = default(IToken);
		IToken char_literal469 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal468_tree = default(CommonTree);
		CommonTree char_literal469_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(606, 1);
		try
		{
			// SugarCpp.g:607:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:607:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(607, 4);
			// SugarCpp.g:607:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:607:5: a= mul_expr
			{
			DebugLocation(607, 6);
			PushFollow(Follow._mul_expr_in_add_expr5414);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 607:16: -> $a
			{
				DebugLocation(607, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(607, 23);
			// SugarCpp.g:607:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=3;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==92))
				{
					alt215 = 1;
				}
				else if ((LA215_0==96))
				{
					alt215 = 2;
				}


				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:607:25: '+' b= mul_expr
					{
					DebugLocation(607, 25);
					char_literal468=(IToken)Match(input,92,Follow._92_in_add_expr5424); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal468);

					DebugLocation(607, 30);
					PushFollow(Follow._mul_expr_in_add_expr5428);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 92, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 607:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(607, 43);
						// SugarCpp.g:607:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(607, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(607, 54);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(607, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(607, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:608:10: '-' b= mul_expr
					{
					DebugLocation(608, 10);
					char_literal469=(IToken)Match(input,96,Follow._96_in_add_expr5453); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal469);

					DebugLocation(608, 15);
					PushFollow(Follow._mul_expr_in_add_expr5457);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 96
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(608, 28);
						// SugarCpp.g:608:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(608, 39);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(608, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 80);
			LeaveRule("add_expr", 80);
			LeaveRule_add_expr();
		}
		DebugLocation(610, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:612:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 81);
		TraceIn("mul_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal470 = default(IToken);
		IToken char_literal471 = default(IToken);
		IToken char_literal472 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal470_tree = default(CommonTree);
		CommonTree char_literal471_tree = default(CommonTree);
		CommonTree char_literal472_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(612, 1);
		try
		{
			// SugarCpp.g:613:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:613:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(613, 4);
			// SugarCpp.g:613:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:613:5: a= infix_expr
			{
			DebugLocation(613, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5495);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 613:18: -> $a
			{
				DebugLocation(613, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(613, 25);
			// SugarCpp.g:613:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=4;
				try { DebugEnterDecision(216, false);
				switch (input.LA(1))
				{
				case 90:
					{
					alt216 = 1;
					}
					break;
				case 103:
					{
					alt216 = 2;
					}
					break;
				case 83:
					{
					alt216 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:613:27: '*' b= infix_expr
					{
					DebugLocation(613, 27);
					char_literal470=(IToken)Match(input,90,Follow._90_in_mul_expr5505); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal470);

					DebugLocation(613, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5509);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 90
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 613:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(613, 47);
						// SugarCpp.g:613:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(613, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(613, 58);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(613, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(613, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:614:12: '/' b= infix_expr
					{
					DebugLocation(614, 12);
					char_literal471=(IToken)Match(input,103,Follow._103_in_mul_expr5536); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal471);

					DebugLocation(614, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5540);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 103, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 614:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(614, 32);
						// SugarCpp.g:614:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(614, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(614, 43);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(614, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(614, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:615:12: '%' b= infix_expr
					{
					DebugLocation(615, 12);
					char_literal472=(IToken)Match(input,83,Follow._83_in_mul_expr5567); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_83.Add(char_literal472);

					DebugLocation(615, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5571);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 83
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 615:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(615, 32);
						// SugarCpp.g:615:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(615, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(615, 43);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(615, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(615, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 81);
			LeaveRule("mul_expr", 81);
			LeaveRule_mul_expr();
		}
		DebugLocation(617, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:619:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 82);
		TraceIn("infix_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func473 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(619, 1);
		try
		{
			// SugarCpp.g:620:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:620:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(620, 4);
			// SugarCpp.g:620:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:620:5: a= selector_expr
			{
			DebugLocation(620, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5611);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 620:21: -> $a
			{
				DebugLocation(620, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(620, 28);
			// SugarCpp.g:620:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==128))
				{
					alt217 = 1;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:620:30: infix_func b= selector_expr
					{
					DebugLocation(620, 30);
					PushFollow(Follow._infix_func_in_infix_expr5621);
					infix_func473=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func473.Tree);
					DebugLocation(620, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5625);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 620:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(620, 61);
						// SugarCpp.g:620:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(620, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(620, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(620, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(620, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 82);
			LeaveRule("infix_expr", 82);
			LeaveRule_infix_expr();
		}
		DebugLocation(621, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:623:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 83);
		TraceIn("selector_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal474 = default(IToken);
		IToken string_literal475 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal474_tree = default(CommonTree);
		CommonTree string_literal475_tree = default(CommonTree);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(623, 1);
		try
		{
			// SugarCpp.g:624:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:624:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(624, 4);
			// SugarCpp.g:624:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:624:5: a= cast_expr
			{
			DebugLocation(624, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5657);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 624:17: -> $a
			{
				DebugLocation(624, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(624, 24);
			// SugarCpp.g:624:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=3;
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==100))
				{
					alt218 = 1;
				}
				else if ((LA218_0==102))
				{
					alt218 = 2;
				}


				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:624:26: '->*' b= ident
					{
					DebugLocation(624, 26);
					string_literal474=(IToken)Match(input,100,Follow._100_in_selector_expr5667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(string_literal474);

					DebugLocation(624, 33);
					PushFollow(Follow._ident_in_selector_expr5671);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(624, 43);
						// SugarCpp.g:624:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(624, 57);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(624, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(624, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:625:11: '.*' b= ident
					{
					DebugLocation(625, 11);
					string_literal475=(IToken)Match(input,102,Follow._102_in_selector_expr5697); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal475);

					DebugLocation(625, 18);
					PushFollow(Follow._ident_in_selector_expr5702);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 102, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(625, 28);
						// SugarCpp.g:625:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(625, 42);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(625, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 83);
			LeaveRule("selector_expr", 83);
			LeaveRule_selector_expr();
		}
		DebugLocation(627, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:629:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 84);
		TraceIn("cast_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal476 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken char_literal479 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name478 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal476_tree = default(CommonTree);
		CommonTree char_literal477_tree = default(CommonTree);
		CommonTree char_literal479_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(629, 1);
		try
		{
			// SugarCpp.g:630:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:630:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(630, 4);
			// SugarCpp.g:630:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:630:5: a= prefix_expr
			{
			DebugLocation(630, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5742);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 630:19: -> $a
			{
				DebugLocation(630, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(630, 26);
			// SugarCpp.g:630:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt219=2;
			try { DebugEnterSubRule(219);
			try { DebugEnterDecision(219, false);
			int LA219_0 = input.LA(1);

			if ((LA219_0==130))
			{
				alt219 = 1;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:630:27: 'as' '(' type_name ')'
				{
				DebugLocation(630, 27);
				string_literal476=(IToken)Match(input,130,Follow._130_in_cast_expr5751); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(string_literal476);

				DebugLocation(630, 32);
				char_literal477=(IToken)Match(input,88,Follow._88_in_cast_expr5753); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal477);

				DebugLocation(630, 36);
				PushFollow(Follow._type_name_in_cast_expr5755);
				type_name478=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name478.Tree);
				DebugLocation(630, 46);
				char_literal479=(IToken)Match(input,89,Follow._89_in_cast_expr5757); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal479);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 630:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(630, 53);
					// SugarCpp.g:630:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(630, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(630, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(630, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 84);
			LeaveRule("cast_expr", 84);
			LeaveRule_cast_expr();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:633:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 85);
		TraceIn("prefix_expr_op", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set480 = default(IToken);

		CommonTree set480_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(633, 71);
		try
		{
			// SugarCpp.g:633:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(633, 15);

			set480=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==86||input.LA(1)==90||(input.LA(1)>=92 && input.LA(1)<=93)||(input.LA(1)>=96 && input.LA(1)<=97)||input.LA(1)==153||input.LA(1)==174)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set480));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 85);
			LeaveRule("prefix_expr_op", 85);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(633, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:634:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 86);
		TraceIn("prefix_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal483 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal487 = default(IToken);
		IToken char_literal488 = default(IToken);
		IToken char_literal490 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op481 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list489 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr491 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal483_tree = default(CommonTree);
		CommonTree char_literal485_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		CommonTree char_literal488_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(634, 1);
		try
		{
			// SugarCpp.g:635:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr )
			int alt223=3;
			try { DebugEnterDecision(223, false);
			switch (input.LA(1))
			{
			case 81:
			case 86:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 153:
			case 174:
				{
				alt223 = 1;
				}
				break;
			case 152:
				{
				alt223 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 88:
			case 123:
				{
				alt223 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 223, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:635:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(635, 4);
				// SugarCpp.g:635:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:635:5: prefix_expr_op prefix_expr
				{
				DebugLocation(635, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5819);
				prefix_expr_op481=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op481.Tree);
				DebugLocation(635, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5821);
				prefix_expr482=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr482.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 635:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(635, 36);
					// SugarCpp.g:635:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(635, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(635, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(635, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:636:4: 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				{
				DebugLocation(636, 4);
				string_literal483=(IToken)Match(input,152,Follow._152_in_prefix_expr5837); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_152.Add(string_literal483);

				DebugLocation(636, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr5839);
				type_no_array484=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array484.Tree);
				DebugLocation(636, 24);
				// SugarCpp.g:636:24: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				int alt222=2;
				try { DebugEnterSubRule(222);
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==88))
				{
					alt222 = 1;
				}
				else if ((LA222_0==124))
				{
					alt222 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 222, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(222); }
				switch (alt222)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:636:26: '(' ( expr_list )? ')'
					{
					DebugLocation(636, 26);
					char_literal485=(IToken)Match(input,88,Follow._88_in_prefix_expr5843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal485);

					DebugLocation(636, 30);
					// SugarCpp.g:636:30: ( expr_list )?
					int alt220=2;
					try { DebugEnterSubRule(220);
					try { DebugEnterDecision(220, false);
					int LA220_0 = input.LA(1);

					if ((LA220_0==IDENT||LA220_0==NUMBER||LA220_0==STRING||LA220_0==81||LA220_0==86||LA220_0==88||LA220_0==90||(LA220_0>=92 && LA220_0<=93)||(LA220_0>=96 && LA220_0<=97)||(LA220_0>=123 && LA220_0<=124)||LA220_0==147||LA220_0==150||(LA220_0>=152 && LA220_0<=153)||LA220_0==174))
					{
						alt220 = 1;
					}
					} finally { DebugExitDecision(220); }
					switch (alt220)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:636:30: expr_list
						{
						DebugLocation(636, 30);
						PushFollow(Follow._expr_list_in_prefix_expr5845);
						expr_list486=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list486.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(220); }

					DebugLocation(636, 41);
					char_literal487=(IToken)Match(input,89,Follow._89_in_prefix_expr5848); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal487);



					{
					// AST REWRITE
					// elements: type_no_array, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:45: -> ^( Expr_New_Type type_no_array ( expr_list )? )
					{
						DebugLocation(636, 48);
						// SugarCpp.g:636:48: ^( Expr_New_Type type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(636, 64);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(636, 78);
						// SugarCpp.g:636:78: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(636, 78);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:637:11: '[' ( expr_list )? ']'
					{
					DebugLocation(637, 11);
					char_literal488=(IToken)Match(input,124,Follow._124_in_prefix_expr5871); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal488);

					DebugLocation(637, 15);
					// SugarCpp.g:637:15: ( expr_list )?
					int alt221=2;
					try { DebugEnterSubRule(221);
					try { DebugEnterDecision(221, false);
					int LA221_0 = input.LA(1);

					if ((LA221_0==IDENT||LA221_0==NUMBER||LA221_0==STRING||LA221_0==81||LA221_0==86||LA221_0==88||LA221_0==90||(LA221_0>=92 && LA221_0<=93)||(LA221_0>=96 && LA221_0<=97)||(LA221_0>=123 && LA221_0<=124)||LA221_0==147||LA221_0==150||(LA221_0>=152 && LA221_0<=153)||LA221_0==174))
					{
						alt221 = 1;
					}
					} finally { DebugExitDecision(221); }
					switch (alt221)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:637:15: expr_list
						{
						DebugLocation(637, 15);
						PushFollow(Follow._expr_list_in_prefix_expr5873);
						expr_list489=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list489.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(221); }

					DebugLocation(637, 26);
					char_literal490=(IToken)Match(input,125,Follow._125_in_prefix_expr5876); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal490);



					{
					// AST REWRITE
					// elements: expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 637:30: -> ^( Expr_New_Array type_no_array ( expr_list )? )
					{
						DebugLocation(637, 33);
						// SugarCpp.g:637:33: ^( Expr_New_Array type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(637, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(637, 50);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(637, 64);
						// SugarCpp.g:637:64: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(637, 64);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(222); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:639:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(639, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5902);
				suffix_expr491=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr491.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 86);
			LeaveRule("prefix_expr", 86);
			LeaveRule_prefix_expr();
		}
		DebugLocation(640, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:642:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 87);
		TraceIn("expr_list", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal493 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr492 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr494 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal493_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(642, 1);
		try
		{
			// SugarCpp.g:643:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:643:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(643, 4);
			PushFollow(Follow._expr_in_expr_list5914);
			expr492=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr492.Tree);
			DebugLocation(643, 9);
			// SugarCpp.g:643:9: ( ',' ! expr )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=2;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==95))
				{
					alt224 = 1;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:643:10: ',' ! expr
					{
					DebugLocation(643, 13);
					char_literal493=(IToken)Match(input,95,Follow._95_in_expr_list5917); if (state.failed) return retval;
					DebugLocation(643, 15);
					PushFollow(Follow._expr_in_expr_list5920);
					expr494=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr494.Tree);

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 87);
			LeaveRule("expr_list", 87);
			LeaveRule_expr_list();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:646:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 88);
		TraceIn("suffix_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal495 = default(IToken);
		IToken string_literal496 = default(IToken);
		IToken char_literal497 = default(IToken);
		IToken string_literal499 = default(IToken);
		IToken char_literal501 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken char_literal504 = default(IToken);
		IToken char_literal505 = default(IToken);
		IToken char_literal507 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal509 = default(IToken);
		IToken char_literal511 = default(IToken);
		IToken char_literal513 = default(IToken);
		IToken char_literal514 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident500 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list502 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list506 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list512 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal495_tree = default(CommonTree);
		CommonTree string_literal496_tree = default(CommonTree);
		CommonTree char_literal497_tree = default(CommonTree);
		CommonTree string_literal499_tree = default(CommonTree);
		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree char_literal504_tree = default(CommonTree);
		CommonTree char_literal505_tree = default(CommonTree);
		CommonTree char_literal507_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal509_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		CommonTree char_literal513_tree = default(CommonTree);
		CommonTree char_literal514_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(646, 1);
		try
		{
			// SugarCpp.g:647:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:647:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )*
			{
			DebugLocation(647, 4);
			// SugarCpp.g:647:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:647:5: a= atom_expr
			{
			DebugLocation(647, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5936);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 647:17: -> $a
			{
				DebugLocation(647, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(647, 24);
			// SugarCpp.g:647:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )*
			try { DebugEnterSubRule(228);
			while (true)
			{
				int alt228=8;
				try { DebugEnterDecision(228, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt228 = 1;
					}
					break;
				case 97:
					{
					alt228 = 2;
					}
					break;
				case 101:
					{
					alt228 = 3;
					}
					break;
				case 99:
					{
					alt228 = 4;
					}
					break;
				case 88:
					{
					alt228 = 5;
					}
					break;
				case 124:
					{
					alt228 = 6;
					}
					break;
				case 123:
					{
					alt228 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(228); }
				switch ( alt228 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:647:26: '++'
					{
					DebugLocation(647, 26);
					string_literal495=(IToken)Match(input,93,Follow._93_in_suffix_expr5946); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(string_literal495);



					{
					// AST REWRITE
					// elements: suffix_expr, 93
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 647:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(647, 34);
						// SugarCpp.g:647:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(647, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(647, 48);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(647, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:648:14: '--'
					{
					DebugLocation(648, 14);
					string_literal496=(IToken)Match(input,97,Follow._97_in_suffix_expr5972); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal496);



					{
					// AST REWRITE
					// elements: 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(648, 22);
						// SugarCpp.g:648:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(648, 36);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(648, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:649:11: '.' ident
					{
					DebugLocation(649, 11);
					char_literal497=(IToken)Match(input,101,Follow._101_in_suffix_expr5995); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(char_literal497);

					DebugLocation(649, 15);
					PushFollow(Follow._ident_in_suffix_expr5997);
					ident498=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident498.Tree);


					{
					// AST REWRITE
					// elements: 101, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 649:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(649, 24);
						// SugarCpp.g:649:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(649, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(649, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(649, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(649, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:650:11: '->' ident
					{
					DebugLocation(650, 11);
					string_literal499=(IToken)Match(input,99,Follow._99_in_suffix_expr6022); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal499);

					DebugLocation(650, 16);
					PushFollow(Follow._ident_in_suffix_expr6024);
					ident500=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident500.Tree);


					{
					// AST REWRITE
					// elements: 99, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 650:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(650, 25);
						// SugarCpp.g:650:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(650, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(650, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(650, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(650, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:651:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(651, 11);
					char_literal501=(IToken)Match(input,88,Follow._88_in_suffix_expr6049); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal501);

					DebugLocation(651, 15);
					// SugarCpp.g:651:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt225=2;
					try { DebugEnterSubRule(225);
					try { DebugEnterDecision(225, false);
					int LA225_0 = input.LA(1);

					if ((LA225_0==IDENT||LA225_0==NUMBER||LA225_0==STRING||LA225_0==81||LA225_0==86||LA225_0==88||LA225_0==90||(LA225_0>=92 && LA225_0<=93)||(LA225_0>=96 && LA225_0<=97)||(LA225_0>=123 && LA225_0<=124)||LA225_0==147||LA225_0==150||(LA225_0>=152 && LA225_0<=153)||LA225_0==174))
					{
						alt225 = 1;
					}
					else if ((LA225_0==89))
					{
						alt225 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 225, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(225); }
					switch (alt225)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:651:17: expr_list ')'
						{
						DebugLocation(651, 17);
						PushFollow(Follow._expr_list_in_suffix_expr6053);
						expr_list502=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list502.Tree);
						DebugLocation(651, 27);
						char_literal503=(IToken)Match(input,89,Follow._89_in_suffix_expr6055); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_89.Add(char_literal503);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 651:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(651, 34);
							// SugarCpp.g:651:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(651, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(651, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(651, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:652:17: ')'
						{
						DebugLocation(652, 17);
						char_literal504=(IToken)Match(input,89,Follow._89_in_suffix_expr6084); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_89.Add(char_literal504);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 652:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(652, 24);
							// SugarCpp.g:652:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(652, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(652, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(225); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:654:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(654, 11);
					char_literal505=(IToken)Match(input,124,Follow._124_in_suffix_expr6115); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal505);

					DebugLocation(654, 15);
					// SugarCpp.g:654:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt226=2;
					try { DebugEnterSubRule(226);
					try { DebugEnterDecision(226, false);
					int LA226_0 = input.LA(1);

					if ((LA226_0==IDENT||LA226_0==NUMBER||LA226_0==STRING||LA226_0==81||LA226_0==86||LA226_0==88||LA226_0==90||(LA226_0>=92 && LA226_0<=93)||(LA226_0>=96 && LA226_0<=97)||(LA226_0>=123 && LA226_0<=124)||LA226_0==147||LA226_0==150||(LA226_0>=152 && LA226_0<=153)||LA226_0==174))
					{
						alt226 = 1;
					}
					else if ((LA226_0==125))
					{
						alt226 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(226); }
					switch (alt226)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:654:17: expr_list ']'
						{
						DebugLocation(654, 17);
						PushFollow(Follow._expr_list_in_suffix_expr6119);
						expr_list506=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list506.Tree);
						DebugLocation(654, 27);
						char_literal507=(IToken)Match(input,125,Follow._125_in_suffix_expr6121); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_125.Add(char_literal507);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 654:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(654, 34);
							// SugarCpp.g:654:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(654, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(654, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(654, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:655:17: ']'
						{
						DebugLocation(655, 17);
						char_literal508=(IToken)Match(input,125,Follow._125_in_suffix_expr6150); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_125.Add(char_literal508);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 655:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(655, 24);
							// SugarCpp.g:655:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(655, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(655, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(226); }


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:657:11: '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) )
					{
					DebugLocation(657, 11);
					char_literal509=(IToken)Match(input,123,Follow._123_in_suffix_expr6181); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(char_literal509);

					DebugLocation(657, 15);
					PushFollow(Follow._ident_in_suffix_expr6183);
					ident510=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident510.Tree);
					DebugLocation(657, 21);
					char_literal511=(IToken)Match(input,88,Follow._88_in_suffix_expr6185); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal511);

					DebugLocation(657, 25);
					// SugarCpp.g:657:25: ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) )
					int alt227=2;
					try { DebugEnterSubRule(227);
					try { DebugEnterDecision(227, false);
					int LA227_0 = input.LA(1);

					if ((LA227_0==IDENT||LA227_0==NUMBER||LA227_0==STRING||LA227_0==81||LA227_0==86||LA227_0==88||LA227_0==90||(LA227_0>=92 && LA227_0<=93)||(LA227_0>=96 && LA227_0<=97)||(LA227_0>=123 && LA227_0<=124)||LA227_0==147||LA227_0==150||(LA227_0>=152 && LA227_0<=153)||LA227_0==174))
					{
						alt227 = 1;
					}
					else if ((LA227_0==89))
					{
						alt227 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(227); }
					switch (alt227)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:657:27: expr_list ')'
						{
						DebugLocation(657, 27);
						PushFollow(Follow._expr_list_in_suffix_expr6189);
						expr_list512=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list512.Tree);
						DebugLocation(657, 37);
						char_literal513=(IToken)Match(input,89,Follow._89_in_suffix_expr6191); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_89.Add(char_literal513);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list, ident
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 657:41: -> ^( Expr_Call_With $suffix_expr ident expr_list )
						{
							DebugLocation(657, 44);
							// SugarCpp.g:657:44: ^( Expr_Call_With $suffix_expr ident expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(657, 46);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

							DebugLocation(657, 62);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(657, 74);
							adaptor.AddChild(root_1, stream_ident.NextTree());
							DebugLocation(657, 80);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:658:15: ')'
						{
						DebugLocation(658, 15);
						char_literal514=(IToken)Match(input,89,Follow._89_in_suffix_expr6220); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_89.Add(char_literal514);



						{
						// AST REWRITE
						// elements: ident, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 658:19: -> ^( Expr_Call_With $suffix_expr ident )
						{
							DebugLocation(658, 22);
							// SugarCpp.g:658:22: ^( Expr_Call_With $suffix_expr ident )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(658, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

							DebugLocation(658, 40);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(658, 52);
							adaptor.AddChild(root_1, stream_ident.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(227); }


					}
					break;

				default:
					goto loop228;
				}
			}

			loop228:
				;

			} finally { DebugExitSubRule(228); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 88);
			LeaveRule("suffix_expr", 88);
			LeaveRule_suffix_expr();
		}
		DebugLocation(661, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:663:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 89);
		TraceIn("atom_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER515 = default(IToken);
		IToken STRING517 = default(IToken);
		IToken char_literal518 = default(IToken);
		IToken char_literal520 = default(IToken);
		IToken char_literal521 = default(IToken);
		IToken char_literal523 = default(IToken);
		IToken char_literal524 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr522 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER515_tree = default(CommonTree);
		CommonTree STRING517_tree = default(CommonTree);
		CommonTree char_literal518_tree = default(CommonTree);
		CommonTree char_literal520_tree = default(CommonTree);
		CommonTree char_literal521_tree = default(CommonTree);
		CommonTree char_literal523_tree = default(CommonTree);
		CommonTree char_literal524_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(663, 1);
		try
		{
			// SugarCpp.g:664:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt231=5;
			try { DebugEnterDecision(231, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt231 = 1;
				}
				break;
			case IDENT:
				{
				alt231 = 2;
				}
				break;
			case STRING:
				{
				alt231 = 3;
				}
				break;
			case 123:
				{
				alt231 = 4;
				}
				break;
			case 88:
				{
				alt231 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:664:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(664, 4);
				NUMBER515=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER515_tree = (CommonTree)adaptor.Create(NUMBER515);
				adaptor.AddChild(root_0, NUMBER515_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:665:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(665, 4);
				PushFollow(Follow._ident_in_atom_expr6275);
				ident516=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident516.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:666:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(666, 4);
				STRING517=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6280); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING517_tree = (CommonTree)adaptor.Create(STRING517);
				adaptor.AddChild(root_0, STRING517_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:667:4: '@' ident
				{
				DebugLocation(667, 4);
				char_literal518=(IToken)Match(input,123,Follow._123_in_atom_expr6285); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal518);

				DebugLocation(667, 8);
				PushFollow(Follow._ident_in_atom_expr6287);
				ident519=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident519.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 667:14: -> ^( '@' ident )
				{
					DebugLocation(667, 17);
					// SugarCpp.g:667:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(667, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(667, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:668:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(668, 4);
				char_literal520=(IToken)Match(input,88,Follow._88_in_atom_expr6300); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal520);

				DebugLocation(668, 9);
				PushFollow(Follow._expr_in_atom_expr6304);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(668, 15);
				// SugarCpp.g:668:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt230=2;
				try { DebugEnterSubRule(230);
				try { DebugEnterDecision(230, false);
				int LA230_0 = input.LA(1);

				if ((LA230_0==95))
				{
					alt230 = 1;
				}
				else if ((LA230_0==89))
				{
					alt230 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(230); }
				switch (alt230)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:668:17: ( ',' expr )+ ')'
					{
					DebugLocation(668, 17);
					// SugarCpp.g:668:17: ( ',' expr )+
					int cnt229=0;
					try { DebugEnterSubRule(229);
					while (true)
					{
						int alt229=2;
						try { DebugEnterDecision(229, false);
						int LA229_0 = input.LA(1);

						if ((LA229_0==95))
						{
							alt229 = 1;
						}


						} finally { DebugExitDecision(229); }
						switch (alt229)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:668:18: ',' expr
							{
							DebugLocation(668, 18);
							char_literal521=(IToken)Match(input,95,Follow._95_in_atom_expr6309); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_95.Add(char_literal521);

							DebugLocation(668, 22);
							PushFollow(Follow._expr_in_atom_expr6311);
							expr522=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr522.Tree);

							}
							break;

						default:
							if (cnt229 >= 1)
								goto loop229;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee229 = new EarlyExitException( 229, input );
							DebugRecognitionException(eee229);
							throw eee229;
						}
						cnt229++;
					}
					loop229:
						;

					} finally { DebugExitSubRule(229); }

					DebugLocation(668, 29);
					char_literal523=(IToken)Match(input,89,Follow._89_in_atom_expr6315); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal523);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 668:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(668, 36);
						// SugarCpp.g:668:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(668, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(668, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(668, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:669:17: ')' {...}?
					{
					DebugLocation(669, 17);
					char_literal524=(IToken)Match(input,89,Follow._89_in_atom_expr6342); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal524);

					DebugLocation(669, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 669:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(669, 40);
						// SugarCpp.g:669:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(669, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(669, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(230); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 89);
			LeaveRule("atom_expr", 89);
			LeaveRule_atom_expr();
		}
		DebugLocation(671, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:673:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 90);
		TraceIn("lvalue_item", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix525 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(673, 1);
		try
		{
			// SugarCpp.g:674:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:674:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(674, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6373);
			lvalue_prefix525=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix525.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 90);
			LeaveRule("lvalue_item", 90);
			LeaveRule_lvalue_item();
		}
		DebugLocation(675, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:677:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 91);
		TraceIn("lvalue_prefix", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix527 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix528 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(677, 1);
		try
		{
			// SugarCpp.g:678:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt232=2;
			try { DebugEnterDecision(232, false);
			int LA232_0 = input.LA(1);

			if ((LA232_0==81||LA232_0==86||LA232_0==90||(LA232_0>=92 && LA232_0<=93)||(LA232_0>=96 && LA232_0<=97)||LA232_0==153||LA232_0==174))
			{
				alt232 = 1;
			}
			else if ((LA232_0==IDENT||LA232_0==123))
			{
				alt232 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 232, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:678:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(678, 4);
				// SugarCpp.g:678:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:678:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(678, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6385);
				prefix_expr_op526=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op526.Tree);
				DebugLocation(678, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6387);
				lvalue_prefix527=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix527.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 678:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(678, 38);
					// SugarCpp.g:678:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(678, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(678, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(678, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:679:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(679, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6403);
				lvalue_suffix528=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix528.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 91);
			LeaveRule("lvalue_prefix", 91);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(680, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:682:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 92);
		TraceIn("lvalue_suffix", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal529 = default(IToken);
		IToken string_literal530 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken string_literal533 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken char_literal538 = default(IToken);
		IToken char_literal539 = default(IToken);
		IToken char_literal541 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident532 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident534 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list540 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal529_tree = default(CommonTree);
		CommonTree string_literal530_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree string_literal533_tree = default(CommonTree);
		CommonTree char_literal536_tree = default(CommonTree);
		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree char_literal539_tree = default(CommonTree);
		CommonTree char_literal541_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(682, 1);
		try
		{
			// SugarCpp.g:683:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:683:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(683, 4);
			// SugarCpp.g:683:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:683:5: a= lvalue_atom
			{
			DebugLocation(683, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6417);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 683:19: -> $a
			{
				DebugLocation(683, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(683, 26);
			// SugarCpp.g:683:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(236);
			while (true)
			{
				int alt236=7;
				try { DebugEnterDecision(236, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt236 = 1;
					}
					break;
				case 97:
					{
					alt236 = 2;
					}
					break;
				case 101:
					{
					alt236 = 3;
					}
					break;
				case 99:
					{
					alt236 = 4;
					}
					break;
				case 88:
				case 109:
					{
					alt236 = 5;
					}
					break;
				case 124:
					{
					alt236 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(236); }
				switch ( alt236 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:683:28: '++'
					{
					DebugLocation(683, 28);
					string_literal529=(IToken)Match(input,93,Follow._93_in_lvalue_suffix6427); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(string_literal529);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 93
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 683:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(683, 36);
						// SugarCpp.g:683:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(683, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(683, 50);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(683, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:684:16: '--'
					{
					DebugLocation(684, 16);
					string_literal530=(IToken)Match(input,97,Follow._97_in_lvalue_suffix6455); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal530);



					{
					// AST REWRITE
					// elements: 97, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 684:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(684, 24);
						// SugarCpp.g:684:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(684, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(684, 38);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(684, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:685:13: '.' ident
					{
					DebugLocation(685, 13);
					char_literal531=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6480); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(char_literal531);

					DebugLocation(685, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6482);
					ident532=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident532.Tree);


					{
					// AST REWRITE
					// elements: ident, 101, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 685:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(685, 26);
						// SugarCpp.g:685:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(685, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(685, 40);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(685, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(685, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:686:13: '->' ident
					{
					DebugLocation(686, 13);
					string_literal533=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal533);

					DebugLocation(686, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6511);
					ident534=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident534.Tree);


					{
					// AST REWRITE
					// elements: 99, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(686, 27);
						// SugarCpp.g:686:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(686, 41);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(686, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(686, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:687:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(687, 13);
					// SugarCpp.g:687:13: ( generic_parameter )?
					int alt233=2;
					try { DebugEnterSubRule(233);
					try { DebugEnterDecision(233, false);
					int LA233_0 = input.LA(1);

					if ((LA233_0==109))
					{
						alt233 = 1;
					}
					} finally { DebugExitDecision(233); }
					switch (alt233)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:687:13: generic_parameter
						{
						DebugLocation(687, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6538);
						generic_parameter535=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter535.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(233); }

					DebugLocation(687, 32);
					char_literal536=(IToken)Match(input,88,Follow._88_in_lvalue_suffix6541); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal536);

					DebugLocation(687, 36);
					// SugarCpp.g:687:36: ( expr_list )?
					int alt234=2;
					try { DebugEnterSubRule(234);
					try { DebugEnterDecision(234, false);
					int LA234_0 = input.LA(1);

					if ((LA234_0==IDENT||LA234_0==NUMBER||LA234_0==STRING||LA234_0==81||LA234_0==86||LA234_0==88||LA234_0==90||(LA234_0>=92 && LA234_0<=93)||(LA234_0>=96 && LA234_0<=97)||(LA234_0>=123 && LA234_0<=124)||LA234_0==147||LA234_0==150||(LA234_0>=152 && LA234_0<=153)||LA234_0==174))
					{
						alt234 = 1;
					}
					} finally { DebugExitDecision(234); }
					switch (alt234)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:687:36: expr_list
						{
						DebugLocation(687, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix6543);
						expr_list537=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list537.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(234); }

					DebugLocation(687, 47);
					char_literal538=(IToken)Match(input,89,Follow._89_in_lvalue_suffix6546); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal538);



					{
					// AST REWRITE
					// elements: generic_parameter, expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(687, 54);
						// SugarCpp.g:687:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(687, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(687, 81);
						// SugarCpp.g:687:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(687, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(687, 100);
						// SugarCpp.g:687:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(687, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:688:13: '[' ( expr_list )? ']'
					{
					DebugLocation(688, 13);
					char_literal539=(IToken)Match(input,124,Follow._124_in_lvalue_suffix6575); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal539);

					DebugLocation(688, 17);
					// SugarCpp.g:688:17: ( expr_list )?
					int alt235=2;
					try { DebugEnterSubRule(235);
					try { DebugEnterDecision(235, false);
					int LA235_0 = input.LA(1);

					if ((LA235_0==IDENT||LA235_0==NUMBER||LA235_0==STRING||LA235_0==81||LA235_0==86||LA235_0==88||LA235_0==90||(LA235_0>=92 && LA235_0<=93)||(LA235_0>=96 && LA235_0<=97)||(LA235_0>=123 && LA235_0<=124)||LA235_0==147||LA235_0==150||(LA235_0>=152 && LA235_0<=153)||LA235_0==174))
					{
						alt235 = 1;
					}
					} finally { DebugExitDecision(235); }
					switch (alt235)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:688:17: expr_list
						{
						DebugLocation(688, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix6577);
						expr_list540=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list540.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(235); }

					DebugLocation(688, 28);
					char_literal541=(IToken)Match(input,125,Follow._125_in_lvalue_suffix6580); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal541);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 688:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(688, 35);
						// SugarCpp.g:688:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(688, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(688, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(688, 62);
						// SugarCpp.g:688:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(688, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop236;
				}
			}

			loop236:
				;

			} finally { DebugExitSubRule(236); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 92);
			LeaveRule("lvalue_suffix", 92);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:692:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 93);
		TraceIn("lvalue_atom", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal543 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident544 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal543_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(692, 1);
		try
		{
			// SugarCpp.g:693:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt237=2;
			try { DebugEnterDecision(237, false);
			int LA237_0 = input.LA(1);

			if ((LA237_0==IDENT))
			{
				alt237 = 1;
			}
			else if ((LA237_0==123))
			{
				alt237 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 237, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(237); }
			switch (alt237)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:693:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(693, 4);
				PushFollow(Follow._ident_in_lvalue_atom6619);
				ident542=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident542.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:694:4: '@' ident
				{
				DebugLocation(694, 4);
				char_literal543=(IToken)Match(input,123,Follow._123_in_lvalue_atom6624); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal543);

				DebugLocation(694, 8);
				PushFollow(Follow._ident_in_lvalue_atom6626);
				ident544=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident544.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 694:14: -> ^( '@' ident )
				{
					DebugLocation(694, 17);
					// SugarCpp.g:694:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(694, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(694, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 93);
			LeaveRule("lvalue_atom", 93);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(695, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:697:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 94);
		TraceIn("lvalue", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal545 = default(IToken);
		IToken char_literal547 = default(IToken);
		IToken char_literal549 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item548 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item550 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal545_tree = default(CommonTree);
		CommonTree char_literal547_tree = default(CommonTree);
		CommonTree char_literal549_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(697, 1);
		try
		{
			// SugarCpp.g:698:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt239=2;
			try { DebugEnterDecision(239, false);
			int LA239_0 = input.LA(1);

			if ((LA239_0==88))
			{
				alt239 = 1;
			}
			else if ((LA239_0==IDENT||LA239_0==81||LA239_0==86||LA239_0==90||(LA239_0>=92 && LA239_0<=93)||(LA239_0>=96 && LA239_0<=97)||LA239_0==123||LA239_0==153||LA239_0==174))
			{
				alt239 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:698:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(698, 4);
				char_literal545=(IToken)Match(input,88,Follow._88_in_lvalue6645); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal545);

				DebugLocation(698, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6647);
				lvalue_item546=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item546.Tree);
				DebugLocation(698, 20);
				// SugarCpp.g:698:20: ( ',' lvalue_item )+
				int cnt238=0;
				try { DebugEnterSubRule(238);
				while (true)
				{
					int alt238=2;
					try { DebugEnterDecision(238, false);
					int LA238_0 = input.LA(1);

					if ((LA238_0==95))
					{
						alt238 = 1;
					}


					} finally { DebugExitDecision(238); }
					switch (alt238)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:698:21: ',' lvalue_item
						{
						DebugLocation(698, 21);
						char_literal547=(IToken)Match(input,95,Follow._95_in_lvalue6650); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal547);

						DebugLocation(698, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6652);
						lvalue_item548=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item548.Tree);

						}
						break;

					default:
						if (cnt238 >= 1)
							goto loop238;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee238 = new EarlyExitException( 238, input );
						DebugRecognitionException(eee238);
						throw eee238;
					}
					cnt238++;
				}
				loop238:
					;

				} finally { DebugExitSubRule(238); }

				DebugLocation(698, 39);
				char_literal549=(IToken)Match(input,89,Follow._89_in_lvalue6656); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal549);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 698:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(698, 46);
					// SugarCpp.g:698:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(698, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(698, 60);
					// SugarCpp.g:698:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(698, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:699:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6670);
				lvalue_item550=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item550.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 94);
			LeaveRule("lvalue", 94);
			LeaveRule_lvalue();
		}
		DebugLocation(700, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:702:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 95);
		TraceIn("ident", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT551 = default(IToken);
		IToken string_literal552 = default(IToken);
		IToken IDENT553 = default(IToken);

		CommonTree IDENT551_tree = default(CommonTree);
		CommonTree string_literal552_tree = default(CommonTree);
		CommonTree IDENT553_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(702, 1);
		try
		{
			// SugarCpp.g:703:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:703:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(703, 4);
			IDENT551=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6681); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT551_tree = (CommonTree)adaptor.Create(IDENT551);
			adaptor.AddChild(root_0, IDENT551_tree);
			}
			DebugLocation(703, 10);
			// SugarCpp.g:703:10: ( '::' IDENT )*
			try { DebugEnterSubRule(240);
			while (true)
			{
				int alt240=2;
				try { DebugEnterDecision(240, false);
				int LA240_0 = input.LA(1);

				if ((LA240_0==106))
				{
					alt240 = 1;
				}


				} finally { DebugExitDecision(240); }
				switch ( alt240 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:703:11: '::' IDENT
					{
					DebugLocation(703, 11);
					string_literal552=(IToken)Match(input,106,Follow._106_in_ident6684); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal552_tree = (CommonTree)adaptor.Create(string_literal552);
					adaptor.AddChild(root_0, string_literal552_tree);
					}
					DebugLocation(703, 16);
					IDENT553=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6686); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT553_tree = (CommonTree)adaptor.Create(IDENT553);
					adaptor.AddChild(root_0, IDENT553_tree);
					}

					}
					break;

				default:
					goto loop240;
				}
			}

			loop240:
				;

			} finally { DebugExitSubRule(240); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 95);
			LeaveRule("ident", 95);
			LeaveRule_ident();
		}
		DebugLocation(704, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:706:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 96);
		TraceIn("infix_func", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal554 = default(IToken);
		IToken char_literal556 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident555 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal554_tree = default(CommonTree);
		CommonTree char_literal556_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(706, 1);
		try
		{
			// SugarCpp.g:707:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:707:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(707, 7);
			char_literal554=(IToken)Match(input,128,Follow._128_in_infix_func6699); if (state.failed) return retval;
			DebugLocation(707, 9);
			PushFollow(Follow._ident_in_infix_func6702);
			ident555=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident555.Tree);
			DebugLocation(707, 18);
			char_literal556=(IToken)Match(input,128,Follow._128_in_infix_func6704); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 96);
			LeaveRule("infix_func", 96);
			LeaveRule_infix_func();
		}
		DebugLocation(708, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 97);
		TraceIn("synpred1_SugarCpp_fragment", 97);
		try
		{
			// SugarCpp.g:320:4: ( ( 'const' )? ( ( type_sign )? ( type_size )* ident | 'struct' ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:320:4: ( 'const' )? ( ( type_sign )? ( type_size )* ident | 'struct' ident )
			{
			DebugLocation(320, 4);
			// SugarCpp.g:320:4: ( 'const' )?
			int alt241=2;
			try { DebugEnterSubRule(241);
			try { DebugEnterDecision(241, false);
			int LA241_0 = input.LA(1);

			if ((LA241_0==135))
			{
				alt241 = 1;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: 'const'
				{
				DebugLocation(320, 4);
				Match(input,135,Follow._135_in_synpred1_SugarCpp1778); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(241); }

			DebugLocation(320, 13);
			// SugarCpp.g:320:13: ( ( type_sign )? ( type_size )* ident | 'struct' ident )
			int alt244=2;
			try { DebugEnterSubRule(244);
			try { DebugEnterDecision(244, false);
			int LA244_0 = input.LA(1);

			if ((LA244_0==IDENT||LA244_0==148||(LA244_0>=156 && LA244_0<=157)||LA244_0==165))
			{
				alt244 = 1;
			}
			else if ((LA244_0==158))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:15: ( type_sign )? ( type_size )* ident
				{
				DebugLocation(320, 15);
				// SugarCpp.g:320:15: ( type_sign )?
				int alt242=2;
				try { DebugEnterSubRule(242);
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==157||LA242_0==165))
				{
					alt242 = 1;
				}
				} finally { DebugExitDecision(242); }
				switch (alt242)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:15: type_sign
					{
					DebugLocation(320, 15);
					PushFollow(Follow._type_sign_in_synpred1_SugarCpp1783);
					type_sign();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(242); }

				DebugLocation(320, 26);
				// SugarCpp.g:320:26: ( type_size )*
				try { DebugEnterSubRule(243);
				while (true)
				{
					int alt243=2;
					try { DebugEnterDecision(243, false);
					int LA243_0 = input.LA(1);

					if ((LA243_0==148||LA243_0==156))
					{
						alt243 = 1;
					}


					} finally { DebugExitDecision(243); }
					switch ( alt243 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:320:26: type_size
						{
						DebugLocation(320, 26);
						PushFollow(Follow._type_size_in_synpred1_SugarCpp1786);
						type_size();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop243;
					}
				}

				loop243:
					;

				} finally { DebugExitSubRule(243); }

				DebugLocation(320, 37);
				PushFollow(Follow._ident_in_synpred1_SugarCpp1789);
				ident();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:321:9: 'struct' ident
				{
				DebugLocation(321, 9);
				Match(input,158,Follow._158_in_synpred1_SugarCpp1816); if (state.failed) return;
				DebugLocation(321, 18);
				PushFollow(Follow._ident_in_synpred1_SugarCpp1818);
				ident();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(244); }


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 97);
			LeaveRule("synpred1_SugarCpp_fragment", 97);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA43 dfa43;
	private DFA50 dfa50;
	private DFA84 dfa84;
	private DFA101 dfa101;
	private DFA110 dfa110;
	private DFA115 dfa115;
	private DFA128 dfa128;
	private DFA171 dfa171;
	private DFA160 dfa160;
	private DFA192 dfa192;
	private DFA191 dfa191;
	private DFA197 dfa197;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa43 = new DFA43( this );
		dfa50 = new DFA50( this );
		dfa84 = new DFA84( this );
		dfa101 = new DFA101( this );
		dfa110 = new DFA110( this );
		dfa115 = new DFA115( this );
		dfa128 = new DFA128( this );
		dfa171 = new DFA171( this );
		dfa160 = new DFA160( this );
		dfa192 = new DFA192( this );
		dfa191 = new DFA191( this );
		dfa197 = new DFA197( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x58\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x58\x3\x59\x2\x58\x1\x2A\x3\x59\x1\x2A\x1\x5F\x5\x2A\x1\x5F"+
			"\x1\x2A\x4\x59\x1\x58\xA\x59\x2\x2A\x1\x5F\x2\x2A\x1\x5F\x2\x2A\xA\x59"+
			"\x2\x2A\x2\x59";
		private const string DFA4_maxS =
			"\x1\xAE\x1\x87\x1\xFFFF\x1\xAE\x6\xFFFF\x2\x7D\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x87\x1\x33\x1\x39\x1\xAE\x1\x7D\x2\x5F\x1\x6A\x2\x7D\x1\xAE"+
			"\x2\x5F\x1\x6A\x1\x39\x1\x7D\x2\x2A\x3\x39\x1\x7D\x1\x2A\x2\x5F\x2\x6A"+
			"\x1\x7D\x2\x5F\x1\x6A\x2\x5F\x1\x6A\x2\x5F\x2\x6A\x1\x2A\x1\x39\x1\x7D"+
			"\x1\x2A\x1\x39\x1\x7D\x2\x2A\x1\x6A\x2\x5F\x2\x6A\x2\x5F\x3\x6A\x2\x2A"+
			"\x2\x6A";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x3\x2\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1"+
				"\x2",
				"\x1\xA\x5C\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x31\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5C\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x31\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x3\x2\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xAE\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xAE\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x4\xFFFF";
		private const string DFA43_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA43_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA43_maxS =
			"\x1\x33\x1\xAE\x2\xFFFF";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA43_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "270:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x4\xFFFF";
		private const string DFA50_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA50_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA50_maxS =
			"\x1\x33\x1\xAE\x2\xFFFF";
		private const string DFA50_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA50_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "271:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA84 : DFA
	{
		private const string DFA84_eotS =
			"\x11\xFFFF";
		private const string DFA84_eofS =
			"\x11\xFFFF";
		private const string DFA84_minS =
			"\x1\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x4\x2A\x1\x56\x3\x2A\x2\x56\x1\x2A\x1"+
			"\x56";
		private const string DFA84_maxS =
			"\x1\xAE\x1\xFFFF\x1\xAE\x1\xA5\x1\xFFFF\x1\x2A\x1\xA5\x1\x6B\x1\xAE\x1"+
			"\x7C\x1\x2A\x1\xA5\x1\xAE\x2\x7C\x1\x2A\x1\x7C";
		private const string DFA84_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA84_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA84_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x3\x1"+
				"\x6\xFFFF\x1\x1\x8\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x6\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x3\x1\x6\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1C\xFFFF\x1\x1\x11\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x3\x1\x6\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x3\x1"+
				"\x6\xFFFF\x1\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x18\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
		private static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
		private static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
		private static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
		private static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
		private static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
		private static readonly short[][] DFA84_transition;

		static DFA84()
		{
			int numStates = DFA84_transitionS.Length;
			DFA84_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA84_transition[i] = DFA.UnpackEncodedString(DFA84_transitionS[i]);
			}
		}

		public DFA84( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}

		public override string Description { get { return "356:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x9\xFFFF";
		private const string DFA101_eofS =
			"\x9\xFFFF";
		private const string DFA101_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA101_maxS =
			"\x1\xAE\x1\xAC\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xAC";
		private const string DFA101_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA101_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x13\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x13\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "396:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA110 : DFA
	{
		private const string DFA110_eotS =
			"\x4\xFFFF";
		private const string DFA110_eofS =
			"\x4\xFFFF";
		private const string DFA110_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA110_maxS =
			"\x1\x90\x1\xAE\x2\xFFFF";
		private const string DFA110_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA110_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA110_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
		private static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
		private static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
		private static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
		private static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
		private static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
		private static readonly short[][] DFA110_transition;

		static DFA110()
		{
			int numStates = DFA110_transitionS.Length;
			DFA110_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA110_transition[i] = DFA.UnpackEncodedString(DFA110_transitionS[i]);
			}
		}

		public DFA110( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 110;
			this.eot = DFA110_eot;
			this.eof = DFA110_eof;
			this.min = DFA110_min;
			this.max = DFA110_max;
			this.accept = DFA110_accept;
			this.special = DFA110_special;
			this.transition = DFA110_transition;
		}

		public override string Description { get { return "427:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA115 : DFA
	{
		private const string DFA115_eotS =
			"\x4\xFFFF";
		private const string DFA115_eofS =
			"\x4\xFFFF";
		private const string DFA115_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA115_maxS =
			"\x1\x90\x1\xAE\x2\xFFFF";
		private const string DFA115_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA115_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA115_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA115_eot = DFA.UnpackEncodedString(DFA115_eotS);
		private static readonly short[] DFA115_eof = DFA.UnpackEncodedString(DFA115_eofS);
		private static readonly char[] DFA115_min = DFA.UnpackEncodedStringToUnsignedChars(DFA115_minS);
		private static readonly char[] DFA115_max = DFA.UnpackEncodedStringToUnsignedChars(DFA115_maxS);
		private static readonly short[] DFA115_accept = DFA.UnpackEncodedString(DFA115_acceptS);
		private static readonly short[] DFA115_special = DFA.UnpackEncodedString(DFA115_specialS);
		private static readonly short[][] DFA115_transition;

		static DFA115()
		{
			int numStates = DFA115_transitionS.Length;
			DFA115_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA115_transition[i] = DFA.UnpackEncodedString(DFA115_transitionS[i]);
			}
		}

		public DFA115( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}

		public override string Description { get { return "430:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA128 : DFA
	{
		private const string DFA128_eotS =
			"\x6\xFFFF";
		private const string DFA128_eofS =
			"\x6\xFFFF";
		private const string DFA128_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA128_maxS =
			"\x1\xAE\x1\xAD\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xAD";
		private const string DFA128_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA128_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA128_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x9\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x9\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2"
			};

		private static readonly short[] DFA128_eot = DFA.UnpackEncodedString(DFA128_eotS);
		private static readonly short[] DFA128_eof = DFA.UnpackEncodedString(DFA128_eofS);
		private static readonly char[] DFA128_min = DFA.UnpackEncodedStringToUnsignedChars(DFA128_minS);
		private static readonly char[] DFA128_max = DFA.UnpackEncodedStringToUnsignedChars(DFA128_maxS);
		private static readonly short[] DFA128_accept = DFA.UnpackEncodedString(DFA128_acceptS);
		private static readonly short[] DFA128_special = DFA.UnpackEncodedString(DFA128_specialS);
		private static readonly short[][] DFA128_transition;

		static DFA128()
		{
			int numStates = DFA128_transitionS.Length;
			DFA128_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA128_transition[i] = DFA.UnpackEncodedString(DFA128_transitionS[i]);
			}
		}

		public DFA128( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 128;
			this.eot = DFA128_eot;
			this.eof = DFA128_eof;
			this.min = DFA128_min;
			this.max = DFA128_max;
			this.accept = DFA128_accept;
			this.special = DFA128_special;
			this.transition = DFA128_transition;
		}

		public override string Description { get { return "456:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA171 : DFA
	{
		private const string DFA171_eotS =
			"\x7\xFFFF";
		private const string DFA171_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA171_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA171_maxS =
			"\x1\xAA\x1\xAE\x2\xFFFF\x2\xAE\x1\xFFFF";
		private const string DFA171_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA171_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA171_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x20\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x2\xFFFF\x7\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
		private static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
		private static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
		private static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
		private static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
		private static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
		private static readonly short[][] DFA171_transition;

		static DFA171()
		{
			int numStates = DFA171_transitionS.Length;
			DFA171_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA171_transition[i] = DFA.UnpackEncodedString(DFA171_transitionS[i]);
			}
		}

		public DFA171( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 171;
			this.eot = DFA171_eot;
			this.eof = DFA171_eof;
			this.min = DFA171_min;
			this.max = DFA171_max;
			this.accept = DFA171_accept;
			this.special = DFA171_special;
			this.transition = DFA171_transition;
		}

		public override string Description { get { return "506:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA160 : DFA
	{
		private const string DFA160_eotS =
			"\x4\xFFFF";
		private const string DFA160_eofS =
			"\x4\xFFFF";
		private const string DFA160_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA160_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA160_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA160_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA160_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA160_eot = DFA.UnpackEncodedString(DFA160_eotS);
		private static readonly short[] DFA160_eof = DFA.UnpackEncodedString(DFA160_eofS);
		private static readonly char[] DFA160_min = DFA.UnpackEncodedStringToUnsignedChars(DFA160_minS);
		private static readonly char[] DFA160_max = DFA.UnpackEncodedStringToUnsignedChars(DFA160_maxS);
		private static readonly short[] DFA160_accept = DFA.UnpackEncodedString(DFA160_acceptS);
		private static readonly short[] DFA160_special = DFA.UnpackEncodedString(DFA160_specialS);
		private static readonly short[][] DFA160_transition;

		static DFA160()
		{
			int numStates = DFA160_transitionS.Length;
			DFA160_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA160_transition[i] = DFA.UnpackEncodedString(DFA160_transitionS[i]);
			}
		}

		public DFA160( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}

		public override string Description { get { return "506:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA192 : DFA
	{
		private const string DFA192_eotS =
			"\x7\xFFFF";
		private const string DFA192_eofS =
			"\x7\xFFFF";
		private const string DFA192_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA192_maxS =
			"\x5\xAE\x2\xFFFF";
		private const string DFA192_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA192_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA192_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA192_eot = DFA.UnpackEncodedString(DFA192_eotS);
		private static readonly short[] DFA192_eof = DFA.UnpackEncodedString(DFA192_eofS);
		private static readonly char[] DFA192_min = DFA.UnpackEncodedStringToUnsignedChars(DFA192_minS);
		private static readonly char[] DFA192_max = DFA.UnpackEncodedStringToUnsignedChars(DFA192_maxS);
		private static readonly short[] DFA192_accept = DFA.UnpackEncodedString(DFA192_acceptS);
		private static readonly short[] DFA192_special = DFA.UnpackEncodedString(DFA192_specialS);
		private static readonly short[][] DFA192_transition;

		static DFA192()
		{
			int numStates = DFA192_transitionS.Length;
			DFA192_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA192_transition[i] = DFA.UnpackEncodedString(DFA192_transitionS[i]);
			}
		}

		public DFA192( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}

		public override string Description { get { return "541:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA191 : DFA
	{
		private const string DFA191_eotS =
			"\x7\xFFFF";
		private const string DFA191_eofS =
			"\x7\xFFFF";
		private const string DFA191_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA191_maxS =
			"\x1\x7D\x4\xAE\x2\xFFFF";
		private const string DFA191_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA191_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA191_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA191_eot = DFA.UnpackEncodedString(DFA191_eotS);
		private static readonly short[] DFA191_eof = DFA.UnpackEncodedString(DFA191_eofS);
		private static readonly char[] DFA191_min = DFA.UnpackEncodedStringToUnsignedChars(DFA191_minS);
		private static readonly char[] DFA191_max = DFA.UnpackEncodedStringToUnsignedChars(DFA191_maxS);
		private static readonly short[] DFA191_accept = DFA.UnpackEncodedString(DFA191_acceptS);
		private static readonly short[] DFA191_special = DFA.UnpackEncodedString(DFA191_specialS);
		private static readonly short[][] DFA191_transition;

		static DFA191()
		{
			int numStates = DFA191_transitionS.Length;
			DFA191_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA191_transition[i] = DFA.UnpackEncodedString(DFA191_transitionS[i]);
			}
		}

		public DFA191( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 191;
			this.eot = DFA191_eot;
			this.eof = DFA191_eof;
			this.min = DFA191_min;
			this.max = DFA191_max;
			this.accept = DFA191_accept;
			this.special = DFA191_special;
			this.transition = DFA191_transition;
		}

		public override string Description { get { return "()* loopback of 541:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA197 : DFA
	{
		private const string DFA197_eotS =
			"\xB\xFFFF";
		private const string DFA197_eofS =
			"\xB\xFFFF";
		private const string DFA197_minS =
			"\x2\x2A\x1\xFFFF\x1\x52\x1\xFFFF\x2\x2A\x2\x52\x1\x2A\x1\x52";
		private const string DFA197_maxS =
			"\x2\xAE\x1\xFFFF\x1\xAD\x1\xFFFF\x1\x2A\x1\xAE\x2\xAD\x1\x2A\x1\xAD";
		private const string DFA197_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA197_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA197_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1C\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x14"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\x10\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\x10\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\x10\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\x10\xFFFF\x3\x2"
			};

		private static readonly short[] DFA197_eot = DFA.UnpackEncodedString(DFA197_eotS);
		private static readonly short[] DFA197_eof = DFA.UnpackEncodedString(DFA197_eofS);
		private static readonly char[] DFA197_min = DFA.UnpackEncodedStringToUnsignedChars(DFA197_minS);
		private static readonly char[] DFA197_max = DFA.UnpackEncodedStringToUnsignedChars(DFA197_maxS);
		private static readonly short[] DFA197_accept = DFA.UnpackEncodedString(DFA197_acceptS);
		private static readonly short[] DFA197_special = DFA.UnpackEncodedString(DFA197_specialS);
		private static readonly short[][] DFA197_transition;

		static DFA197()
		{
			int numStates = DFA197_transitionS.Length;
			DFA197_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA197_transition[i] = DFA.UnpackEncodedString(DFA197_transitionS[i]);
			}
		}

		public DFA197( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}

		public override string Description { get { return "545:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root559 = new BitSet(new ulong[]{0x8040000000000UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _global_block_in_root562 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block584 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block586 = new BitSet(new ulong[]{0x8040000000002UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _func_def_in_node609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item677 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item680 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item682 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item685 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item687 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_attribute_item709 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item712 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item714 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item717 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item719 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute748 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _attribute_item_in_attribute750 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_attribute753 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _attribute_item_in_attribute755 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_attribute759 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute761 = new BitSet(new ulong[]{0x8000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc780 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc783 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_global_alloc787 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_global_alloc789 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_global_alloc794 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _107_in_global_alloc798 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_global_alloc801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_global_alloc861 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_global_alloc863 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_global_alloc866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_global_alloc939 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_global_alloc942 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_global_alloc945 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_global_alloc947 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_using984 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_global_using987 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _stmt_using_item_in_global_using989 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _attribute_in_global_typedef1013 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_typedef1016 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1018 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_global_typedef1020 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_global_typedef1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_import_def1049 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1051 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1055 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1058 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1060 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1065 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1067 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_enum_def1100 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1102 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_enum_def1104 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1107 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_enum_def1110 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1112 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_namespace_def1148 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1150 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1153 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1156 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1158 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _global_block_in_namespace_def1161 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x50UL});
		public static readonly BitSet _134_in_class_def1196 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1198 = new BitSet(new ulong[]{0x8000000000002UL,0x220000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1201 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1206 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1208 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1211 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1213 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1220 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1223 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _NEWLINE_in_class_def1225 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _global_block_in_class_def1228 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_class_def1272 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_class_def1274 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1276 = new BitSet(new ulong[]{0x8000000000002UL,0x220001000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1279 = new BitSet(new ulong[]{0x8000000000002UL,0x20001000000UL});
		public static readonly BitSet _88_in_class_def1284 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_in_class_def1286 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_class_def1288 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1293 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1295 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1298 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1300 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1307 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1310 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _NEWLINE_in_class_def1312 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A8709088D0UL});
		public static readonly BitSet _global_block_in_class_def1315 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1370 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_list1373 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_type_list1375 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_single_in_type_name1397 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1401 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_type_name1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1408 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1451 = new BitSet(new ulong[]{0x40000000000UL,0x3000000UL,0x2070100080UL});
		public static readonly BitSet _type_list_in_type_name1453 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1456 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1458 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_type_name1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1465 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1491 = new BitSet(new ulong[]{0x2UL,0x1000000000400000UL});
		public static readonly BitSet _86_in_type_single1495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_single1511 = new BitSet(new ulong[]{0x210040000000000UL,0x38000003B5420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_type_single1515 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_type_single1518 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_type_single1520 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_type_single1549 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1599 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_type_no_array1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1638 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star1642 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1688 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_type_template_type1692 = new BitSet(new ulong[]{0x40000000000UL,0x20000001000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_type_template_type1695 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _95_in_type_template_type1698 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_type_template_type1700 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _117_in_type_template_type1706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_type_ident1778 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x2070100000UL});
		public static readonly BitSet _type_sign_in_type_ident1783 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10100000UL});
		public static readonly BitSet _type_size_in_type_ident1786 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10100000UL});
		public static readonly BitSet _ident_in_type_ident1789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_type_ident1816 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_type_ident1844 = new BitSet(new ulong[]{0x0UL,0x0UL,0x30100000UL});
		public static readonly BitSet _157_in_type_ident1847 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10100000UL});
		public static readonly BitSet _type_size_in_type_ident1850 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10100000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1878 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_generic_parameter_inside1881 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1883 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _109_in_generic_parameter1905 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1907 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_generic_parameter1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1924 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_func_args1927 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1929 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1951 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_func_args_item1953 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_func_args_item1955 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_func_args_item1960 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _107_in_func_args_item1964 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_func_args_item1967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_args_item2015 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_func_args_item2017 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_args_item2020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_func_args_item2077 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _modify_expr_in_func_args_item2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_name2124 = new BitSet(new ulong[]{0x0UL,0x8114000000UL});
		public static readonly BitSet _operator_in_func_name2126 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_name2128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2143 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x402070100080UL});
		public static readonly BitSet _type_name_in_func_def2146 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x400000000000UL});
		public static readonly BitSet _174_in_func_def2149 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL});
		public static readonly BitSet _func_name_in_func_def2152 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2154 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_def2157 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_func_def2159 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_def2162 = new BitSet(new ulong[]{0x8000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2165 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_func_def2221 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_func_def2223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2264 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2266 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2276 = new BitSet(new ulong[]{0x8000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2279 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _108_in_stmt_block_item2284 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2286 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2303 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2305 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2308 = new BitSet(new ulong[]{0x40000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _DEDENT_in_stmt_block2311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2397 = new BitSet(new ulong[]{0x2UL,0x0UL,0x45000006000UL});
		public static readonly BitSet _142_in_stmt_expr2407 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_expr2409 = new BitSet(new ulong[]{0x2UL,0x0UL,0x45000006000UL});
		public static readonly BitSet _164_in_stmt_expr2438 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_expr2440 = new BitSet(new ulong[]{0x2UL,0x0UL,0x45000006000UL});
		public static readonly BitSet _170_in_stmt_expr2469 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_expr2471 = new BitSet(new ulong[]{0x2UL,0x0UL,0x45000006000UL});
		public static readonly BitSet _166_in_stmt_expr2500 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_expr2502 = new BitSet(new ulong[]{0x2UL,0x0UL,0x45000006000UL});
		public static readonly BitSet _141_in_stmt_expr2531 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _for_item_in_stmt_expr2533 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x45000006000UL});
		public static readonly BitSet _95_in_stmt_expr2536 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _for_item_in_stmt_expr2538 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x45000006000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_defer2611 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _stmt_in_stmt_defer2613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_defer2626 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _stmt_in_stmt_defer2628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_typedef2647 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2649 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_typedef2651 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_stmt_typedef2653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_using_item2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_stmt_using2684 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2686 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x800000UL});
		public static readonly BitSet _155_in_stmt_return2707 = new BitSet(new ulong[]{0x210040000000002UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_return2709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2730 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_inline_stmt_block2733 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2735 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _142_in_stmt_if2757 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_if2759 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2762 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2765 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2768 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_if2771 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2773 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2808 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_if2831 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_if2833 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2836 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2839 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2842 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_if2845 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2847 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2886 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_stmt_while2919 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_while2921 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2925 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while2952 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while2978 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_while2980 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2984 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while3011 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_while3037 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_while3039 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3042 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3067 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_for_range3069 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_for_range3073 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000200UL});
		public static readonly BitSet _161_in_for_range3076 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_for_range3080 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range3083 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_for_range3087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_for_range3116 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_for_range3120 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range3123 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_for_range3127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_for3220 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _for_item_in_stmt_for3224 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_for3227 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _for_item_in_stmt_for3229 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3233 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_try3267 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3269 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3272 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3274 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_stmt_try3277 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3279 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3281 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_switch_item3307 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_switch_item3309 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x100000000UL});
		public static readonly BitSet _95_in_switch_item3312 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_switch_item3314 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3320 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_switch_item3365 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40880A000000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_switch3403 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_stmt_switch3405 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3408 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3411 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3413 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3417 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3419 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x10000000400UL});
		public static readonly BitSet _138_in_stmt_switch3425 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3427 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3430 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3432 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3463 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_ident_list3466 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3468 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3490 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_stmt_alloc3494 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_stmt_alloc3496 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_stmt_alloc3501 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _107_in_stmt_alloc3505 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_stmt_alloc3556 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3558 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_stmt_alloc3561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_alloc3622 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3626 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_alloc3629 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3631 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3657 = new BitSet(new ulong[]{0x2UL,0x8585810448900000UL,0x100000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3661 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_modify3687 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_modify3716 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_modify3747 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3797 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3807 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3810 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3812 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_where_expr3815 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_where_expr3819 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3823 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3859 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3862 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3864 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_where_expr3868 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3870 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _DEDENT_in_where_expr3875 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3877 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3930 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3933 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3935 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_where_expr3939 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3941 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _DEDENT_in_where_expr3946 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3948 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_where_expr3989 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3991 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3994 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3996 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_where_expr4000 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4002 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _DEDENT_in_where_expr4007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_let_expr4065 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_let_expr4067 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_let_expr4071 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_let_expr4075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4099 = new BitSet(new ulong[]{0x2180C0000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _INDENT_in_let_expr4104 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4106 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_let_expr4109 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4111 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4187 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4190 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _NEWLINE_in_let_expr4192 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A207100UL});
		public static readonly BitSet _where_item_in_let_expr4196 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4198 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DC8A217100UL});
		public static readonly BitSet _144_in_let_expr4203 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_let_expr4205 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4207 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_match_item4242 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_match_item4244 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_match_item4246 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _where_expr_in_match_item4248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_match_expr4269 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_match_expr4271 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4274 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4277 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4279 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _match_item_in_match_expr4283 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4285 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_list_expr4334 = new BitSet(new ulong[]{0x2180C0000000100UL,0x38000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _95_in_list_expr4338 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4342 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _INDENT_in_list_expr4346 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4350 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _list_expr_in_list_expr4354 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4358 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4362 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _INDENT_in_list_expr4366 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4370 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x400003000000UL});
		public static readonly BitSet _list_expr_in_list_expr4374 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4381 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4385 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _INDENT_in_list_expr4389 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4393 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_list_expr4397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lambda_expr4422 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4424 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lambda_expr4427 = new BitSet(new ulong[]{0x0UL,0x10000800000000UL});
		public static readonly BitSet _99_in_lambda_expr4431 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_lambda_expr4433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_lambda_expr4473 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_lambda_expr4475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4552 = new BitSet(new ulong[]{0x2UL,0x8105090448900000UL,0x100000000000UL});
		public static readonly BitSet _set_in_modify_expr4556 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_modify_expr4610 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4613 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4638 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_cond_expr4647 = new BitSet(new ulong[]{0x210040000000002UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4653 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_cond_expr4657 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4775 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200004000000UL});
		public static readonly BitSet _or_op_in_or_expr4786 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _and_expr_in_or_expr4790 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200004000000UL});
		public static readonly BitSet _bit_or_in_and_expr4832 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _and_op_in_and_expr4843 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _bit_or_in_and_expr4847 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _bit_xor_in_bit_or4878 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_bit_or4887 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _bit_xor_in_bit_or4891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4921 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_bit_xor4930 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4934 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4964 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_bit_and4973 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4977 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _chain_op_in_chain_list5069 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _shift_expr_in_chain_list5071 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5085 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _109_in_cmp_expr5095 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5099 = new BitSet(new ulong[]{0x40000000002UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _ident_in_cmp_expr5105 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000000UL});
		public static readonly BitSet _117_in_cmp_expr5108 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cmp_expr5110 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_cmp_expr5112 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cmp_expr5115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr5184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5261 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5265 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5371 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5380 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _add_expr_in_shift_expr5384 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5414 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _92_in_add_expr5424 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5428 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _96_in_add_expr5453 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5457 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5495 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _90_in_mul_expr5505 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5509 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _103_in_mul_expr5536 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5540 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _83_in_mul_expr5567 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5571 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5611 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _infix_func_in_infix_expr5621 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5625 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cast_expr_in_selector_expr5657 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _100_in_selector_expr5667 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5671 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _102_in_selector_expr5697 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5702 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5742 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_cast_expr5751 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cast_expr5753 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x2070100080UL});
		public static readonly BitSet _type_name_in_cast_expr5755 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cast_expr5757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5819 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x400003000000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_prefix_expr5837 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x2070100080UL});
		public static readonly BitSet _type_no_array_in_prefix_expr5839 = new BitSet(new ulong[]{0x0UL,0x1000000001000000UL});
		public static readonly BitSet _88_in_prefix_expr5843 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5845 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_prefix_expr5848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_prefix_expr5871 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5873 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_prefix_expr5876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5914 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_expr_list5917 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_expr_list5920 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5936 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _93_in_suffix_expr5946 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _97_in_suffix_expr5972 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _101_in_suffix_expr5995 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5997 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _99_in_suffix_expr6022 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6024 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _88_in_suffix_expr6049 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_suffix_expr6053 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr6055 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr6084 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _124_in_suffix_expr6115 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_suffix_expr6119 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_suffix_expr6121 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _125_in_suffix_expr6150 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _123_in_suffix_expr6181 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6183 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_suffix_expr6185 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_suffix_expr6189 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr6191 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr6220 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr6270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_atom_expr6285 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr6287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_atom_expr6300 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_atom_expr6304 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_atom_expr6309 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_in_atom_expr6311 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_atom_expr6315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_atom_expr6342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6385 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x400002000000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6417 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _93_in_lvalue_suffix6427 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _97_in_lvalue_suffix6455 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6480 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6482 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6509 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6511 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6538 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lvalue_suffix6541 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6543 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lvalue_suffix6546 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _124_in_lvalue_suffix6575 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x400003480000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6577 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_lvalue_suffix6580 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lvalue_atom6624 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lvalue6645 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x400002000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6647 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_lvalue6650 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x400002000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6652 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_lvalue6656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6681 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_ident6684 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident6686 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _128_in_infix_func6699 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func6702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_infix_func6704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_synpred1_SugarCpp1778 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x2070100000UL});
		public static readonly BitSet _type_sign_in_synpred1_SugarCpp1783 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10100000UL});
		public static readonly BitSet _type_size_in_synpred1_SugarCpp1786 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10100000UL});
		public static readonly BitSet _ident_in_synpred1_SugarCpp1789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_synpred1_SugarCpp1816 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_synpred1_SugarCpp1818 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
