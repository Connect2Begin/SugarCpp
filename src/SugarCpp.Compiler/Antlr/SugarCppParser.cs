//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-06-02 19:03:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Def=43;
	public const int Generic_Patameters=44;
	public const int Global_Block=45;
	public const int IDENT=46;
	public const int INDENT=47;
	public const int Ident_List=48;
	public const int Import=49;
	public const int Left_Bracket=50;
	public const int LineComment=51;
	public const int Match_Expr=52;
	public const int Match_Expr_Item=53;
	public const int Match_Tuple=54;
	public const int NEWLINE=55;
	public const int NUMBER=56;
	public const int Namespace=57;
	public const int Right_Bracket=58;
	public const int Root=59;
	public const int SP=60;
	public const int STRING=61;
	public const int Stmt_Block=62;
	public const int Stmt_Defer=63;
	public const int Stmt_Finally=64;
	public const int Stmt_For=65;
	public const int Stmt_If=66;
	public const int Stmt_Loop=67;
	public const int Stmt_Return=68;
	public const int Stmt_Switch=69;
	public const int Stmt_Try=70;
	public const int Stmt_Typedef=71;
	public const int Stmt_Unless=72;
	public const int Stmt_Until=73;
	public const int Stmt_Using=74;
	public const int Stmt_While=75;
	public const int Switch_Item=76;
	public const int Type_Array=77;
	public const int Type_Func=78;
	public const int Type_Ident=79;
	public const int Type_List=80;
	public const int Type_Ref=81;
	public const int Type_Star=82;
	public const int Type_Template=83;
	public const int White_Space=84;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:212:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(212, 1);
		try
		{
			// SugarCpp.g:213:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(213, 4);
			// SugarCpp.g:213:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:4: NEWLINE
					{
					DebugLocation(213, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root587); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(213, 13);
			PushFollow(Follow._global_block_in_root590);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(213, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:30: -> ^( Root global_block )
			{
				DebugLocation(213, 33);
				// SugarCpp.g:213:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(213, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:216:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(216, 1);
		try
		{
			// SugarCpp.g:217:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(217, 4);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==92||LA3_0==131||LA3_0==138||(LA3_0>=140 && LA3_0<=141)||LA3_0==145||LA3_0==149||LA3_0==154||LA3_0==157||(LA3_0>=162 && LA3_0<=163)||LA3_0==169||LA3_0==172||LA3_0==180))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:217:5: node ( NEWLINE )+
					{
					DebugLocation(217, 5);
					PushFollow(Follow._node_in_global_block612);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(217, 10);
					// SugarCpp.g:217:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:217:10: NEWLINE
							{
							DebugLocation(217, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(217, 24);
				// SugarCpp.g:217:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(217, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(217, 39);
				// SugarCpp.g:217:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(217, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(220, 1);
		try
		{
			// SugarCpp.g:221:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:221:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._func_def_in_node637);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:222:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._class_def_in_node642);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:223:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._enum_def_in_node647);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:224:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._global_alloc_in_node652);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:225:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._global_using_in_node657);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:226:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_typedef_in_node662);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:227:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._import_def_in_node667);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:228:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._namespace_def_in_node672);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:231:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args684); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args689); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:234:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._ident_in_attribute_args694);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:237:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt12 = 1;
				}
				break;
			case 141:
				{
				alt12 = 2;
				}
				break;
			case 162:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(238, 4);
				PushFollow(Follow._ident_in_attribute_item705);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(238, 10);
				// SugarCpp.g:238:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==92))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(238, 11);
					char_literal18=(IToken)Match(input,92,Follow._92_in_attribute_item708); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal18);

					DebugLocation(238, 15);
					PushFollow(Follow._attribute_args_in_attribute_item710);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(238, 30);
					// SugarCpp.g:238:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==99))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:238:31: ',' attribute_args
							{
							DebugLocation(238, 31);
							char_literal20=(IToken)Match(input,99,Follow._99_in_attribute_item713); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal20);

							DebugLocation(238, 35);
							PushFollow(Follow._attribute_args_in_attribute_item715);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(238, 52);
					char_literal22=(IToken)Match(input,93,Follow._93_in_attribute_item719); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(238, 61);
					// SugarCpp.g:238:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(238, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(238, 79);
					// SugarCpp.g:238:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(238, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(239, 4);
				string_literal23=(IToken)Match(input,141,Follow._141_in_attribute_item737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal23);

				DebugLocation(239, 12);
				// SugarCpp.g:239:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==92))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:239:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(239, 13);
					char_literal24=(IToken)Match(input,92,Follow._92_in_attribute_item740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal24);

					DebugLocation(239, 17);
					PushFollow(Follow._attribute_args_in_attribute_item742);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(239, 32);
					// SugarCpp.g:239:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==99))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:239:33: ',' attribute_args
							{
							DebugLocation(239, 33);
							char_literal26=(IToken)Match(input,99,Follow._99_in_attribute_item745); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal26);

							DebugLocation(239, 37);
							PushFollow(Follow._attribute_args_in_attribute_item747);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(239, 54);
					char_literal28=(IToken)Match(input,93,Follow._93_in_attribute_item751); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 141
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(239, 63);
					// SugarCpp.g:239:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(239, 75);
					adaptor.AddChild(root_1, stream_141.NextNode());
					DebugLocation(239, 83);
					// SugarCpp.g:239:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(239, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:240:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(240, 4);
				string_literal29=(IToken)Match(input,162,Follow._162_in_attribute_item769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal29);

				DebugLocation(240, 13);
				// SugarCpp.g:240:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==92))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(240, 14);
					char_literal30=(IToken)Match(input,92,Follow._92_in_attribute_item772); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal30);

					DebugLocation(240, 18);
					PushFollow(Follow._attribute_args_in_attribute_item774);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(240, 33);
					// SugarCpp.g:240:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==99))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:34: ',' attribute_args
							{
							DebugLocation(240, 34);
							char_literal32=(IToken)Match(input,99,Follow._99_in_attribute_item777); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal32);

							DebugLocation(240, 38);
							PushFollow(Follow._attribute_args_in_attribute_item779);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(240, 55);
					char_literal34=(IToken)Match(input,93,Follow._93_in_attribute_item783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: 162, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(240, 64);
					// SugarCpp.g:240:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(240, 76);
					adaptor.AddChild(root_1, stream_162.NextNode());
					DebugLocation(240, 85);
					// SugarCpp.g:240:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(240, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:243:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal35 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken NEWLINE40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item38 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree NEWLINE40_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==131))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(244, 5);
					char_literal35=(IToken)Match(input,131,Follow._131_in_attribute808); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal35);

					DebugLocation(244, 9);
					PushFollow(Follow._attribute_item_in_attribute810);
					attribute_item36=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item36.Tree);
					DebugLocation(244, 24);
					// SugarCpp.g:244:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==99))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:244:25: ',' attribute_item
							{
							DebugLocation(244, 25);
							char_literal37=(IToken)Match(input,99,Follow._99_in_attribute813); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal37);

							DebugLocation(244, 29);
							PushFollow(Follow._attribute_item_in_attribute815);
							attribute_item38=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item38.Tree);

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(244, 46);
					char_literal39=(IToken)Match(input,132,Follow._132_in_attribute819); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal39);

					DebugLocation(244, 50);
					// SugarCpp.g:244:50: ( NEWLINE )+
					int cnt14=0;
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==NEWLINE))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch (alt14)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:244:50: NEWLINE
							{
							DebugLocation(244, 50);
							NEWLINE40=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute821); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE40);


							}
							break;

						default:
							if (cnt14 >= 1)
								goto loop14;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee14 = new EarlyExitException( 14, input );
							DebugRecognitionException(eee14);
							throw eee14;
						}
						cnt14++;
					}
					loop14:
						;

					} finally { DebugExitSubRule(14); }


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:61: -> ( attribute_item )+
			{
				DebugLocation(244, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(244, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:247:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken string_literal46 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( attribute )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==131))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: attribute
				{
				DebugLocation(248, 4);
				PushFollow(Follow._attribute_in_global_alloc840);
				attribute41=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(248, 15);
			PushFollow(Follow._ident_list_in_global_alloc843);
			ident_list42=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list42.Tree);
			DebugLocation(248, 26);
			// SugarCpp.g:248:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==110))
			{
				alt20 = 1;
			}
			else if ((LA20_0==112))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(248, 28);
				char_literal43=(IToken)Match(input,110,Follow._110_in_global_alloc847); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal43);

				DebugLocation(248, 32);
				PushFollow(Follow._type_name_in_global_alloc849);
				type_name44=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name44.Tree);
				DebugLocation(248, 42);
				// SugarCpp.g:248:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt18=3;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt18 = 1;
					}
					break;
				case 92:
					{
					alt18 = 2;
					}
					break;
				case NEWLINE:
					{
					alt18 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:44: ( '=' | ':=' ) expr
					{
					DebugLocation(248, 44);
					// SugarCpp.g:248:44: ( '=' | ':=' )
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==120))
					{
						alt17 = 1;
					}
					else if ((LA17_0==112))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:248:45: '='
						{
						DebugLocation(248, 45);
						char_literal45=(IToken)Match(input,120,Follow._120_in_global_alloc854); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal45);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:248:51: ':='
						{
						DebugLocation(248, 51);
						string_literal46=(IToken)Match(input,112,Follow._112_in_global_alloc858); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal46);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(248, 57);
					PushFollow(Follow._expr_in_global_alloc861);
					expr47=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr47.Tree);


					{
					// AST REWRITE
					// elements: attribute, ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 248:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(248, 65);
						// SugarCpp.g:248:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(248, 84);
						// SugarCpp.g:248:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(248, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(248, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(248, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(248, 116);
						// SugarCpp.g:248:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(248, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:249:43: bracket_expr_list
					{
					DebugLocation(249, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc924);
					bracket_expr_list48=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list48.Tree);


					{
					// AST REWRITE
					// elements: ident_list, bracket_expr_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 249:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(249, 64);
						// SugarCpp.g:249:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(249, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(249, 85);
						// SugarCpp.g:249:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(249, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(249, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(249, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(249, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:250:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(250, 20);
						// SugarCpp.g:250:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(250, 39);
						// SugarCpp.g:250:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(250, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(250, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(250, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(250, 71);
						// SugarCpp.g:250:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:252:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(252, 10);
				string_literal49=(IToken)Match(input,112,Follow._112_in_global_alloc1000); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal49);

				DebugLocation(252, 15);
				// SugarCpp.g:252:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:252:16: expr ( ',' expr )*
				{
				DebugLocation(252, 16);
				PushFollow(Follow._expr_in_global_alloc1003);
				expr50=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr50.Tree);
				DebugLocation(252, 21);
				// SugarCpp.g:252:21: ( ',' expr )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==99))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:22: ',' expr
						{
						DebugLocation(252, 22);
						char_literal51=(IToken)Match(input,99,Follow._99_in_global_alloc1006); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal51);

						DebugLocation(252, 26);
						PushFollow(Follow._expr_in_global_alloc1008);
						expr52=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr52.Tree);

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}



				{
				// AST REWRITE
				// elements: attribute, ident_list, 112, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 252:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(252, 37);
					// SugarCpp.g:252:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(252, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(252, 44);
					// SugarCpp.g:252:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(252, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(252, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(252, 66);
					// SugarCpp.g:252:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(252, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(252, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(252, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:256:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(257, 4);
			// SugarCpp.g:257:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==131))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: attribute
				{
				DebugLocation(257, 4);
				PushFollow(Follow._attribute_in_global_using1049);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(257, 15);
			string_literal54=(IToken)Match(input,172,Follow._172_in_global_using1052); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal54);

			DebugLocation(257, 23);
			// SugarCpp.g:257:23: ( stmt_using_item )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==IDENT||LA22_0==157))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:257:23: stmt_using_item
					{
					DebugLocation(257, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1054);
					stmt_using_item55=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item55.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: attribute, stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(257, 43);
				// SugarCpp.g:257:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(257, 56);
				// SugarCpp.g:257:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(257, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(257, 67);
				// SugarCpp.g:257:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(257, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:260:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal57 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal57_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==131))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_global_typedef1078);
				attribute56=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(261, 15);
			string_literal57=(IToken)Match(input,169,Follow._169_in_global_typedef1081); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal57);

			DebugLocation(261, 22);
			PushFollow(Follow._ident_in_global_typedef1083);
			ident58=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident58.Tree);
			DebugLocation(261, 28);
			char_literal59=(IToken)Match(input,120,Follow._120_in_global_typedef1085); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal59);

			DebugLocation(261, 32);
			PushFollow(Follow._type_name_in_global_typedef1087);
			type_name60=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name60.Tree);


			{
			// AST REWRITE
			// elements: attribute, type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(261, 45);
				// SugarCpp.g:261:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(261, 60);
				// SugarCpp.g:261:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(261, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:264:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken INDENT65 = default(IToken);
		IToken NEWLINE66 = default(IToken);
		IToken STRING67 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken DEDENT69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree INDENT65_tree = default(CommonTree);
		CommonTree NEWLINE66_tree = default(CommonTree);
		CommonTree STRING67_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree DEDENT69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==131))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_import_def1111);
				attribute61=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(265, 15);
			string_literal62=(IToken)Match(input,149,Follow._149_in_import_def1114); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_149.Add(string_literal62);

			DebugLocation(265, 24);
			// SugarCpp.g:265:24: ( STRING )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==STRING))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:24: STRING
				{
				DebugLocation(265, 24);
				STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1116); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING63);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(265, 32);
			// SugarCpp.g:265:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			try
			{
				alt30 = dfa30.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(265, 33);
				// SugarCpp.g:265:33: ( NEWLINE )+
				int cnt26=0;
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:33: NEWLINE
						{
						DebugLocation(265, 33);
						NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1120); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE64);


						}
						break;

					default:
						if (cnt26 >= 1)
							goto loop26;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee26 = new EarlyExitException( 26, input );
						DebugRecognitionException(eee26);
						throw eee26;
					}
					cnt26++;
				}
				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(265, 42);
				INDENT65=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1123); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT65);

				DebugLocation(265, 49);
				// SugarCpp.g:265:49: ( NEWLINE )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==NEWLINE))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:49: NEWLINE
						{
						DebugLocation(265, 49);
						NEWLINE66=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1125); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE66);


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(265, 59);
				// SugarCpp.g:265:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==STRING))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:60: STRING ( NEWLINE )+
						{
						DebugLocation(265, 60);
						STRING67=(IToken)Match(input,STRING,Follow._STRING_in_import_def1130); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING67);

						DebugLocation(265, 67);
						// SugarCpp.g:265:67: ( NEWLINE )+
						int cnt28=0;
						try { DebugEnterSubRule(28);
						while (true)
						{
							int alt28=2;
							try { DebugEnterDecision(28, false);
							int LA28_0 = input.LA(1);

							if ((LA28_0==NEWLINE))
							{
								alt28 = 1;
							}


							} finally { DebugExitDecision(28); }
							switch (alt28)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:265:67: NEWLINE
								{
								DebugLocation(265, 67);
								NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1132); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE68);


								}
								break;

							default:
								if (cnt28 >= 1)
									goto loop28;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee28 = new EarlyExitException( 28, input );
								DebugRecognitionException(eee28);
								throw eee28;
							}
							cnt28++;
						}
						loop28:
							;

						} finally { DebugExitSubRule(28); }


						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(265, 78);
				DEDENT69=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1137); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT69);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(265, 90);
				// SugarCpp.g:265:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(265, 99);
				// SugarCpp.g:265:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 110);
				// SugarCpp.g:265:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(265, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:268:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==131))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_enum_def1162);
				attribute70=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(269, 15);
			string_literal71=(IToken)Match(input,145,Follow._145_in_enum_def1165); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_145.Add(string_literal71);

			DebugLocation(269, 22);
			PushFollow(Follow._ident_in_enum_def1167);
			ident72=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident72.Tree);
			DebugLocation(269, 28);
			char_literal73=(IToken)Match(input,120,Follow._120_in_enum_def1169); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal73);

			DebugLocation(269, 32);
			// SugarCpp.g:269:32: ( ident ( '|' ident )* )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==IDENT))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:33: ident ( '|' ident )*
				{
				DebugLocation(269, 33);
				PushFollow(Follow._ident_in_enum_def1172);
				ident74=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident74.Tree);
				DebugLocation(269, 39);
				// SugarCpp.g:269:39: ( '|' ident )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==176))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:40: '|' ident
						{
						DebugLocation(269, 40);
						char_literal75=(IToken)Match(input,176,Follow._176_in_enum_def1175); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_176.Add(char_literal75);

						DebugLocation(269, 44);
						PushFollow(Follow._ident_in_enum_def1177);
						ident76=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident76.Tree);

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(269, 57);
				// SugarCpp.g:269:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(269, 64);
				// SugarCpp.g:269:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(269, 81);
				// SugarCpp.g:269:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(269, 94);
				// SugarCpp.g:269:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(269, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:272:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal78 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken INDENT81 = default(IToken);
		IToken NEWLINE82 = default(IToken);
		IToken DEDENT84 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal78_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree INDENT81_tree = default(CommonTree);
		CommonTree NEWLINE82_tree = default(CommonTree);
		CommonTree DEDENT84_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(273, 4);
			// SugarCpp.g:273:4: ( attribute )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==131))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:4: attribute
				{
				DebugLocation(273, 4);
				PushFollow(Follow._attribute_in_namespace_def1210);
				attribute77=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute77.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(273, 15);
			string_literal78=(IToken)Match(input,157,Follow._157_in_namespace_def1213); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_157.Add(string_literal78);

			DebugLocation(273, 27);
			PushFollow(Follow._ident_in_namespace_def1215);
			ident79=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident79.Tree);
			DebugLocation(273, 33);
			// SugarCpp.g:273:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(273, 34);
				// SugarCpp.g:273:34: ( NEWLINE )+
				int cnt35=0;
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:34: NEWLINE
						{
						DebugLocation(273, 34);
						NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1218); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


						}
						break;

					default:
						if (cnt35 >= 1)
							goto loop35;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee35 = new EarlyExitException( 35, input );
						DebugRecognitionException(eee35);
						throw eee35;
					}
					cnt35++;
				}
				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(273, 43);
				INDENT81=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1221); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT81);

				DebugLocation(273, 50);
				// SugarCpp.g:273:50: ( NEWLINE )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:50: NEWLINE
						{
						DebugLocation(273, 50);
						NEWLINE82=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1223); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE82);


						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(273, 59);
				PushFollow(Follow._global_block_in_namespace_def1226);
				global_block83=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block83.Tree);
				DebugLocation(273, 72);
				DEDENT84=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1228); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT84);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(273, 84);
				// SugarCpp.g:273:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(273, 96);
				// SugarCpp.g:273:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(273, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(273, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(273, 113);
				// SugarCpp.g:273:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(273, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:276:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal86 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken NEWLINE93 = default(IToken);
		IToken INDENT94 = default(IToken);
		IToken NEWLINE95 = default(IToken);
		IToken DEDENT97 = default(IToken);
		IToken string_literal98 = default(IToken);
		IToken string_literal99 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken NEWLINE109 = default(IToken);
		IToken INDENT110 = default(IToken);
		IToken NEWLINE111 = default(IToken);
		IToken DEDENT113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal86_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree NEWLINE93_tree = default(CommonTree);
		CommonTree INDENT94_tree = default(CommonTree);
		CommonTree NEWLINE95_tree = default(CommonTree);
		CommonTree DEDENT97_tree = default(CommonTree);
		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree string_literal99_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree NEWLINE109_tree = default(CommonTree);
		CommonTree INDENT110_tree = default(CommonTree);
		CommonTree NEWLINE111_tree = default(CommonTree);
		CommonTree DEDENT113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(276, 1);
		try
		{
			// SugarCpp.g:277:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:277:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(277, 5);
			// SugarCpp.g:277:5: ( attribute )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==131))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:5: attribute
				{
				DebugLocation(277, 5);
				PushFollow(Follow._attribute_in_class_def1256);
				attribute85=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute85.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(277, 16);
			// SugarCpp.g:277:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==140))
			{
				alt52 = 1;
			}
			else if ((LA52_0==138))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(277, 18);
				string_literal86=(IToken)Match(input,140,Follow._140_in_class_def1261); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal86);

				DebugLocation(277, 26);
				PushFollow(Follow._ident_in_class_def1263);
				ident87=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident87.Tree);
				DebugLocation(277, 32);
				// SugarCpp.g:277:32: ( generic_parameter )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==114))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:33: generic_parameter
					{
					DebugLocation(277, 33);
					PushFollow(Follow._generic_parameter_in_class_def1266);
					generic_parameter88=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter88.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(277, 53);
				// SugarCpp.g:277:53: ( ':' ident ( ',' ident )* )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==110))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:54: ':' ident ( ',' ident )*
					{
					DebugLocation(277, 54);
					char_literal89=(IToken)Match(input,110,Follow._110_in_class_def1271); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal89);

					DebugLocation(277, 58);
					PushFollow(Follow._ident_in_class_def1273);
					ident90=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident90.Tree);
					DebugLocation(277, 64);
					// SugarCpp.g:277:64: ( ',' ident )*
					try { DebugEnterSubRule(40);
					while (true)
					{
						int alt40=2;
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==99))
						{
							alt40 = 1;
						}


						} finally { DebugExitDecision(40); }
						switch ( alt40 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:65: ',' ident
							{
							DebugLocation(277, 65);
							char_literal91=(IToken)Match(input,99,Follow._99_in_class_def1276); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal91);

							DebugLocation(277, 69);
							PushFollow(Follow._ident_in_class_def1278);
							ident92=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident92.Tree);

							}
							break;

						default:
							goto loop40;
						}
					}

					loop40:
						;

					} finally { DebugExitSubRule(40); }


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(277, 79);
				// SugarCpp.g:277:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				try
				{
					alt44 = dfa44.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(277, 80);
					// SugarCpp.g:277:80: ( NEWLINE )+
					int cnt42=0;
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==NEWLINE))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:80: NEWLINE
							{
							DebugLocation(277, 80);
							NEWLINE93=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1285); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE93);


							}
							break;

						default:
							if (cnt42 >= 1)
								goto loop42;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee42 = new EarlyExitException( 42, input );
							DebugRecognitionException(eee42);
							throw eee42;
						}
						cnt42++;
					}
					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(277, 89);
					INDENT94=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1288); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT94);

					DebugLocation(277, 96);
					// SugarCpp.g:277:96: ( NEWLINE )*
					try { DebugEnterSubRule(43);
					while (true)
					{
						int alt43=2;
						try { DebugEnterDecision(43, false);
						int LA43_0 = input.LA(1);

						if ((LA43_0==NEWLINE))
						{
							alt43 = 1;
						}


						} finally { DebugExitDecision(43); }
						switch ( alt43 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:96: NEWLINE
							{
							DebugLocation(277, 96);
							NEWLINE95=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1290); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE95);


							}
							break;

						default:
							goto loop43;
						}
					}

					loop43:
						;

					} finally { DebugExitSubRule(43); }

					DebugLocation(277, 105);
					PushFollow(Follow._global_block_in_class_def1293);
					global_block96=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block96.Tree);
					DebugLocation(277, 118);
					DEDENT97=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1295); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT97);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }



				{
				// AST REWRITE
				// elements: global_block, ident, attribute, generic_parameter, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 277:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(277, 130);
					// SugarCpp.g:277:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(277, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(277, 138);
					// SugarCpp.g:277:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(277, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(277, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(277, 155);
					// SugarCpp.g:277:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(277, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(277, 174);
					// SugarCpp.g:277:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(277, 175);
						// SugarCpp.g:277:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(277, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(277, 188);
						// SugarCpp.g:277:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(277, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(277, 198);
					// SugarCpp.g:277:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(277, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:278:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(278, 12);
				string_literal98=(IToken)Match(input,138,Follow._138_in_class_def1337); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_138.Add(string_literal98);

				DebugLocation(278, 19);
				string_literal99=(IToken)Match(input,140,Follow._140_in_class_def1339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal99);

				DebugLocation(278, 27);
				PushFollow(Follow._ident_in_class_def1341);
				ident100=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident100.Tree);
				DebugLocation(278, 33);
				// SugarCpp.g:278:33: ( generic_parameter )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==114))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:34: generic_parameter
					{
					DebugLocation(278, 34);
					PushFollow(Follow._generic_parameter_in_class_def1344);
					generic_parameter101=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter101.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(278, 54);
				// SugarCpp.g:278:54: ( '(' func_args ')' )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==92))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:55: '(' func_args ')'
					{
					DebugLocation(278, 55);
					char_literal102=(IToken)Match(input,92,Follow._92_in_class_def1349); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal102);

					DebugLocation(278, 59);
					PushFollow(Follow._func_args_in_class_def1351);
					func_args103=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args103.Tree);
					DebugLocation(278, 69);
					char_literal104=(IToken)Match(input,93,Follow._93_in_class_def1353); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal104);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(278, 75);
				// SugarCpp.g:278:75: ( ':' ident ( ',' ident )* )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==110))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:76: ':' ident ( ',' ident )*
					{
					DebugLocation(278, 76);
					char_literal105=(IToken)Match(input,110,Follow._110_in_class_def1358); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal105);

					DebugLocation(278, 80);
					PushFollow(Follow._ident_in_class_def1360);
					ident106=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident106.Tree);
					DebugLocation(278, 86);
					// SugarCpp.g:278:86: ( ',' ident )*
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==99))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch ( alt47 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:278:87: ',' ident
							{
							DebugLocation(278, 87);
							char_literal107=(IToken)Match(input,99,Follow._99_in_class_def1363); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal107);

							DebugLocation(278, 91);
							PushFollow(Follow._ident_in_class_def1365);
							ident108=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident108.Tree);

							}
							break;

						default:
							goto loop47;
						}
					}

					loop47:
						;

					} finally { DebugExitSubRule(47); }


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(278, 101);
				// SugarCpp.g:278:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				try
				{
					alt51 = dfa51.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(278, 102);
					// SugarCpp.g:278:102: ( NEWLINE )+
					int cnt49=0;
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==NEWLINE))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:278:102: NEWLINE
							{
							DebugLocation(278, 102);
							NEWLINE109=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1372); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE109);


							}
							break;

						default:
							if (cnt49 >= 1)
								goto loop49;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee49 = new EarlyExitException( 49, input );
							DebugRecognitionException(eee49);
							throw eee49;
						}
						cnt49++;
					}
					loop49:
						;

					} finally { DebugExitSubRule(49); }

					DebugLocation(278, 111);
					INDENT110=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1375); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT110);

					DebugLocation(278, 118);
					// SugarCpp.g:278:118: ( NEWLINE )*
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_0 = input.LA(1);

						if ((LA50_0==NEWLINE))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch ( alt50 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:278:118: NEWLINE
							{
							DebugLocation(278, 118);
							NEWLINE111=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1377); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE111);


							}
							break;

						default:
							goto loop50;
						}
					}

					loop50:
						;

					} finally { DebugExitSubRule(50); }

					DebugLocation(278, 127);
					PushFollow(Follow._global_block_in_class_def1380);
					global_block112=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block112.Tree);
					DebugLocation(278, 140);
					DEDENT113=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1382); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT113);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }



				{
				// AST REWRITE
				// elements: 138, global_block, func_args, ident, ident, generic_parameter, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(278, 152);
					// SugarCpp.g:278:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(278, 160);
					adaptor.AddChild(root_1, stream_138.NextNode());
					DebugLocation(278, 167);
					// SugarCpp.g:278:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(278, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(278, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(278, 184);
					// SugarCpp.g:278:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(278, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(278, 203);
					// SugarCpp.g:278:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(278, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(278, 214);
					// SugarCpp.g:278:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(278, 215);
						// SugarCpp.g:278:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(278, 228);
						// SugarCpp.g:278:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(278, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(278, 238);
					// SugarCpp.g:278:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(278, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:282:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal115_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(282, 1);
		try
		{
			// SugarCpp.g:283:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:283:4: type_name ( ',' type_name )*
			{
			DebugLocation(283, 4);
			PushFollow(Follow._type_name_in_type_list1435);
			type_name114=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name114.Tree);
			DebugLocation(283, 14);
			// SugarCpp.g:283:14: ( ',' type_name )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==99))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:15: ',' type_name
					{
					DebugLocation(283, 15);
					char_literal115=(IToken)Match(input,99,Follow._99_in_type_list1438); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal115);

					DebugLocation(283, 19);
					PushFollow(Follow._type_name_in_type_list1440);
					type_name116=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name116.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(283, 34);
				// SugarCpp.g:283:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(283, 46);
				// SugarCpp.g:283:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(283, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:286:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken string_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENT||LA58_0==141||LA58_0==154||(LA58_0>=162 && LA58_0<=163)))
			{
				alt58 = 1;
			}
			else if ((LA58_0==92))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(287, 4);
				PushFollow(Follow._type_single_in_type_name1462);
				type_single117=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single117.Tree);
				DebugLocation(287, 16);
				// SugarCpp.g:287:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==104))
				{
					alt55 = 1;
				}
				else if ((LA55_0==DEDENT||(LA55_0>=IDENT && LA55_0<=INDENT)||LA55_0==NEWLINE||(LA55_0>=92 && LA55_0<=93)||LA55_0==99||(LA55_0>=112 && LA55_0<=113)||LA55_0==120||(LA55_0>=123 && LA55_0<=124)||LA55_0==132||LA55_0==137||LA55_0==143||(LA55_0>=147 && LA55_0<=148)||LA55_0==150||(LA55_0>=165 && LA55_0<=167)||(LA55_0>=170 && LA55_0<=171)||(LA55_0>=174 && LA55_0<=175)||LA55_0==180))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:287:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(287, 18);
					string_literal118=(IToken)Match(input,104,Follow._104_in_type_name1466); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal118);

					DebugLocation(287, 23);
					// SugarCpp.g:287:23: ( type_name | '(' ')' )
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==IDENT||LA54_0==141||LA54_0==154||(LA54_0>=162 && LA54_0<=163)))
					{
						alt54 = 1;
					}
					else if ((LA54_0==92))
					{
						int LA54_2 = input.LA(2);

						if ((LA54_2==93))
						{
							int LA54_3 = input.LA(3);

							if ((LA54_3==104))
							{
								alt54 = 1;
							}
							else if ((LA54_3==DEDENT||(LA54_3>=IDENT && LA54_3<=INDENT)||LA54_3==NEWLINE||(LA54_3>=92 && LA54_3<=93)||LA54_3==99||(LA54_3>=112 && LA54_3<=113)||LA54_3==120||(LA54_3>=123 && LA54_3<=124)||LA54_3==132||LA54_3==137||LA54_3==143||(LA54_3>=147 && LA54_3<=148)||LA54_3==150||(LA54_3>=165 && LA54_3<=167)||(LA54_3>=170 && LA54_3<=171)||(LA54_3>=174 && LA54_3<=175)||LA54_3==180))
							{
								alt54 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 54, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA54_2==IDENT||LA54_2==92||LA54_2==141||LA54_2==154||(LA54_2>=162 && LA54_2<=163)))
						{
							alt54 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 54, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:24: type_name
						{
						DebugLocation(287, 24);
						PushFollow(Follow._type_name_in_type_name1469);
						type_name119=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name119.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:287:36: '(' ')'
						{
						DebugLocation(287, 36);
						char_literal120=(IToken)Match(input,92,Follow._92_in_type_name1473); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal120);

						DebugLocation(287, 40);
						char_literal121=(IToken)Match(input,93,Follow._93_in_type_name1475); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal121);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 287:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(287, 48);
						// SugarCpp.g:287:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(287, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(287, 60);
						// SugarCpp.g:287:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(287, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(287, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(287, 85);
						// SugarCpp.g:287:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(287, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:288:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 288:9: -> type_single
					{
						DebugLocation(288, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:290:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(290, 4);
				char_literal122=(IToken)Match(input,92,Follow._92_in_type_name1516); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal122);

				DebugLocation(290, 8);
				// SugarCpp.g:290:8: ( type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==92||LA56_0==141||LA56_0==154||(LA56_0>=162 && LA56_0<=163)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:290:8: type_list
					{
					DebugLocation(290, 8);
					PushFollow(Follow._type_list_in_type_name1518);
					type_list123=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list123.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(290, 19);
				char_literal124=(IToken)Match(input,93,Follow._93_in_type_name1521); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal124);

				DebugLocation(290, 23);
				string_literal125=(IToken)Match(input,104,Follow._104_in_type_name1523); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(string_literal125);

				DebugLocation(290, 28);
				// SugarCpp.g:290:28: ( type_name | '(' ')' )
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==141||LA57_0==154||(LA57_0>=162 && LA57_0<=163)))
				{
					alt57 = 1;
				}
				else if ((LA57_0==92))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==93))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==104))
						{
							alt57 = 1;
						}
						else if ((LA57_3==DEDENT||(LA57_3>=IDENT && LA57_3<=INDENT)||LA57_3==NEWLINE||(LA57_3>=92 && LA57_3<=93)||LA57_3==99||(LA57_3>=112 && LA57_3<=113)||LA57_3==120||(LA57_3>=123 && LA57_3<=124)||LA57_3==132||LA57_3==137||LA57_3==143||(LA57_3>=147 && LA57_3<=148)||LA57_3==150||(LA57_3>=165 && LA57_3<=167)||(LA57_3>=170 && LA57_3<=171)||(LA57_3>=174 && LA57_3<=175)||LA57_3==180))
						{
							alt57 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA57_2==IDENT||LA57_2==92||LA57_2==141||LA57_2==154||(LA57_2>=162 && LA57_2<=163)))
					{
						alt57 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:290:29: type_name
					{
					DebugLocation(290, 29);
					PushFollow(Follow._type_name_in_type_name1526);
					type_name126=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name126.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:290:41: '(' ')'
					{
					DebugLocation(290, 41);
					char_literal127=(IToken)Match(input,92,Follow._92_in_type_name1530); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal127);

					DebugLocation(290, 45);
					char_literal128=(IToken)Match(input,93,Follow._93_in_type_name1532); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal128);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(290, 53);
					// SugarCpp.g:290:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(290, 65);
					// SugarCpp.g:290:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(290, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(290, 76);
					// SugarCpp.g:290:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(290, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:293:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(293, 1);
		try
		{
			// SugarCpp.g:294:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(294, 4);
			PushFollow(Follow._type_star_in_type_single1556);
			type_star129=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star129.Tree);
			DebugLocation(294, 14);
			// SugarCpp.g:294:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt62=3;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case 90:
				{
				alt62 = 1;
				}
				break;
			case 131:
				{
				alt62 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 92:
			case 93:
			case 99:
			case 104:
			case 112:
			case 113:
			case 120:
			case 123:
			case 124:
			case 132:
			case 137:
			case 143:
			case 147:
			case 148:
			case 150:
			case 165:
			case 166:
			case 167:
			case 170:
			case 171:
			case 174:
			case 175:
			case 180:
				{
				alt62 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:294:16: '&'
				{
				DebugLocation(294, 16);
				char_literal130=(IToken)Match(input,90,Follow._90_in_type_single1560); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal130);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 294:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(294, 23);
					// SugarCpp.g:294:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(294, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(294, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:295:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(295, 7);
				char_literal131=(IToken)Match(input,131,Follow._131_in_type_single1576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal131);

				DebugLocation(295, 11);
				// SugarCpp.g:295:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==85||LA61_0==90||LA61_0==92||LA61_0==94||(LA61_0>=96 && LA61_0<=97)||(LA61_0>=100 && LA61_0<=101)||(LA61_0>=130 && LA61_0<=131)||LA61_0==153||LA61_0==156||(LA61_0>=158 && LA61_0<=159)||LA61_0==180))
				{
					alt61 = 1;
				}
				else if ((LA61_0==99||LA61_0==132))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:295:13: expr ( ',' expr )* ']'
					{
					DebugLocation(295, 13);
					PushFollow(Follow._expr_in_type_single1580);
					expr132=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr132.Tree);
					DebugLocation(295, 18);
					// SugarCpp.g:295:18: ( ',' expr )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==99))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:295:19: ',' expr
							{
							DebugLocation(295, 19);
							char_literal133=(IToken)Match(input,99,Follow._99_in_type_single1583); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal133);

							DebugLocation(295, 23);
							PushFollow(Follow._expr_in_type_single1585);
							expr134=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr134.Tree);

							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(295, 30);
					char_literal135=(IToken)Match(input,132,Follow._132_in_type_single1589); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal135);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 295:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(295, 37);
						// SugarCpp.g:295:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(295, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(295, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(295, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:296:13: ( ',' )* ']'
					{
					DebugLocation(296, 13);
					// SugarCpp.g:296:13: ( ',' )*
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==99))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch ( alt60 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:296:13: ','
							{
							DebugLocation(296, 13);
							char_literal136=(IToken)Match(input,99,Follow._99_in_type_single1614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal136);


							}
							break;

						default:
							goto loop60;
						}
					}

					loop60:
						;

					} finally { DebugExitSubRule(60); }

					DebugLocation(296, 18);
					char_literal137=(IToken)Match(input,132,Follow._132_in_type_single1617); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal137);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(296, 25);
						// SugarCpp.g:296:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(296, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(296, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(296, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(296, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:298:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:7: -> type_star
				{
					DebugLocation(298, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:302:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:303:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(303, 4);
			PushFollow(Follow._type_star_in_type_no_array1664);
			type_star138=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star138.Tree);
			DebugLocation(303, 14);
			// SugarCpp.g:303:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==90))
			{
				alt63 = 1;
			}
			else if ((LA63_0==92||LA63_0==131))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:16: '&'
				{
				DebugLocation(303, 16);
				char_literal139=(IToken)Match(input,90,Follow._90_in_type_no_array1668); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal139);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(303, 23);
					// SugarCpp.g:303:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(303, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(303, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:304:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:7: -> type_star
				{
					DebugLocation(304, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:308:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(308, 1);
		try
		{
			// SugarCpp.g:309:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:309:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(309, 4);
			PushFollow(Follow._type_template_type_in_type_star1703);
			type_template_type140=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type140.Tree);
			DebugLocation(309, 23);
			// SugarCpp.g:309:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==94))
			{
				alt65 = 1;
			}
			else if ((LA65_0==DEDENT||(LA65_0>=IDENT && LA65_0<=INDENT)||LA65_0==NEWLINE||LA65_0==90||(LA65_0>=92 && LA65_0<=93)||LA65_0==99||LA65_0==104||(LA65_0>=112 && LA65_0<=113)||LA65_0==120||(LA65_0>=123 && LA65_0<=124)||(LA65_0>=131 && LA65_0<=132)||LA65_0==137||LA65_0==143||(LA65_0>=147 && LA65_0<=148)||LA65_0==150||(LA65_0>=165 && LA65_0<=167)||(LA65_0>=170 && LA65_0<=171)||(LA65_0>=174 && LA65_0<=175)||LA65_0==180))
			{
				alt65 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:309:25: ( '*' )+
				{
				DebugLocation(309, 25);
				// SugarCpp.g:309:25: ( '*' )+
				int cnt64=0;
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==94))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:309:25: '*'
						{
						DebugLocation(309, 25);
						char_literal141=(IToken)Match(input,94,Follow._94_in_type_star1707); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal141);


						}
						break;

					default:
						if (cnt64 >= 1)
							goto loop64;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee64 = new EarlyExitException( 64, input );
						DebugRecognitionException(eee64);
						throw eee64;
					}
					cnt64++;
				}
				loop64:
					;

				} finally { DebugExitSubRule(64); }



				{
				// AST REWRITE
				// elements: 94, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(309, 33);
					// SugarCpp.g:309:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(309, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(309, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(309, 64);
					if (!(stream_94.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_94.HasNext )
					{
						DebugLocation(309, 64);
						adaptor.AddChild(root_1, stream_94.NextNode());

					}
					stream_94.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:310:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 310:10: -> type_template_type
				{
					DebugLocation(310, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:314:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(314, 1);
		try
		{
			// SugarCpp.g:315:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:315:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(315, 4);
			PushFollow(Follow._type_ident_in_type_template_type1753);
			type_ident142=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident142.Tree);
			DebugLocation(315, 15);
			// SugarCpp.g:315:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==114))
			{
				alt68 = 1;
			}
			else if ((LA68_0==DEDENT||(LA68_0>=IDENT && LA68_0<=INDENT)||LA68_0==NEWLINE||LA68_0==90||(LA68_0>=92 && LA68_0<=94)||LA68_0==99||LA68_0==104||(LA68_0>=112 && LA68_0<=113)||LA68_0==120||(LA68_0>=123 && LA68_0<=124)||(LA68_0>=131 && LA68_0<=132)||LA68_0==137||LA68_0==143||(LA68_0>=147 && LA68_0<=148)||LA68_0==150||(LA68_0>=165 && LA68_0<=167)||(LA68_0>=170 && LA68_0<=171)||(LA68_0>=174 && LA68_0<=175)||LA68_0==180))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:315:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(315, 17);
				char_literal143=(IToken)Match(input,114,Follow._114_in_type_template_type1757); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal143);

				DebugLocation(315, 21);
				// SugarCpp.g:315:21: ( type_name ( ',' type_name )* )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==92||LA67_0==141||LA67_0==154||(LA67_0>=162 && LA67_0<=163)))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:315:22: type_name ( ',' type_name )*
					{
					DebugLocation(315, 22);
					PushFollow(Follow._type_name_in_type_template_type1760);
					type_name144=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name144.Tree);
					DebugLocation(315, 32);
					// SugarCpp.g:315:32: ( ',' type_name )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==99))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:315:33: ',' type_name
							{
							DebugLocation(315, 33);
							char_literal145=(IToken)Match(input,99,Follow._99_in_type_template_type1763); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal145);

							DebugLocation(315, 37);
							PushFollow(Follow._type_name_in_type_template_type1765);
							type_name146=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name146.Tree);

							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(315, 51);
				char_literal147=(IToken)Match(input,124,Follow._124_in_type_template_type1771); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal147);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(315, 58);
					// SugarCpp.g:315:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(315, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(315, 85);
					// SugarCpp.g:315:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(315, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:316:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:8: -> type_ident
				{
					DebugLocation(316, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:320:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal148 = default(IToken);
		IToken string_literal149 = default(IToken);
		IToken string_literal150 = default(IToken);
		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(321, 4);
			// SugarCpp.g:321:4: ( 'static' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==162))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:4: 'static'
				{
				DebugLocation(321, 4);
				string_literal148=(IToken)Match(input,162,Follow._162_in_type_ident1811); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal148);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(321, 14);
			// SugarCpp.g:321:14: ( 'const' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==141))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:14: 'const'
				{
				DebugLocation(321, 14);
				string_literal149=(IToken)Match(input,141,Follow._141_in_type_ident1814); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal149);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(321, 23);
			// SugarCpp.g:321:23: ( 'struct' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==163))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:23: 'struct'
				{
				DebugLocation(321, 23);
				string_literal150=(IToken)Match(input,163,Follow._163_in_type_ident1817); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal150);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(321, 33);
			// SugarCpp.g:321:33: ( 'long' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==154))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:33: 'long'
				{
				DebugLocation(321, 33);
				string_literal151=(IToken)Match(input,154,Follow._154_in_type_ident1820); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(321, 41);
			PushFollow(Follow._ident_in_type_ident1823);
			ident152=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident152.Tree);


			{
			// AST REWRITE
			// elements: 141, 162, ident, 154, 163
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(321, 50);
				// SugarCpp.g:321:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(321, 63);
				// SugarCpp.g:321:63: ( 'static' )?
				if (stream_162.HasNext)
				{
					DebugLocation(321, 63);
					adaptor.AddChild(root_1, stream_162.NextNode());

				}
				stream_162.Reset();
				DebugLocation(321, 73);
				// SugarCpp.g:321:73: ( 'const' )?
				if (stream_141.HasNext)
				{
					DebugLocation(321, 73);
					adaptor.AddChild(root_1, stream_141.NextNode());

				}
				stream_141.Reset();
				DebugLocation(321, 82);
				// SugarCpp.g:321:82: ( 'struct' )?
				if (stream_163.HasNext)
				{
					DebugLocation(321, 82);
					adaptor.AddChild(root_1, stream_163.NextNode());

				}
				stream_163.Reset();
				DebugLocation(321, 92);
				// SugarCpp.g:321:92: ( 'long' )?
				if (stream_154.HasNext)
				{
					DebugLocation(321, 92);
					adaptor.AddChild(root_1, stream_154.NextNode());

				}
				stream_154.Reset();
				DebugLocation(321, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:324:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: ident ( ',' ident )*
			{
			DebugLocation(325, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1854);
			ident153=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident153.Tree);
			DebugLocation(325, 10);
			// SugarCpp.g:325:10: ( ',' ident )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==99))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:325:11: ',' ident
					{
					DebugLocation(325, 11);
					char_literal154=(IToken)Match(input,99,Follow._99_in_generic_parameter_inside1857); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal154);

					DebugLocation(325, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1859);
					ident155=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident155.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(325, 26);
				// SugarCpp.g:325:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(325, 47);
				// SugarCpp.g:325:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(325, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:328:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(329, 4);
			char_literal156=(IToken)Match(input,114,Follow._114_in_generic_parameter1881); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal156);

			DebugLocation(329, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1883);
			generic_parameter_inside157=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside157.Tree);
			DebugLocation(329, 33);
			char_literal158=(IToken)Match(input,124,Follow._124_in_generic_parameter1885); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(char_literal158);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:37: -> generic_parameter_inside
			{
				DebugLocation(329, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:332:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(333, 4);
			PushFollow(Follow._func_args_item_in_func_args1900);
			func_args_item159=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item159.Tree);
			DebugLocation(333, 19);
			// SugarCpp.g:333:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==99))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:20: ',' func_args_item
					{
					DebugLocation(333, 20);
					char_literal160=(IToken)Match(input,99,Follow._99_in_func_args1903); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal160);

					DebugLocation(333, 24);
					PushFollow(Follow._func_args_item_in_func_args1905);
					func_args_item161=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item161.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(333, 44);
				// SugarCpp.g:333:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(333, 56);
				// SugarCpp.g:333:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(333, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:336:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken string_literal169 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT))
			{
				alt77 = 1;
			}
			else if ((LA77_0==112))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(337, 4);
				PushFollow(Follow._ident_list_in_func_args_item1927);
				ident_list162=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list162.Tree);
				DebugLocation(337, 15);
				char_literal163=(IToken)Match(input,110,Follow._110_in_func_args_item1929); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal163);

				DebugLocation(337, 19);
				PushFollow(Follow._type_name_in_func_args_item1931);
				type_name164=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name164.Tree);
				DebugLocation(337, 29);
				// SugarCpp.g:337:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt76=3;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt76 = 1;
					}
					break;
				case 92:
					{
					alt76 = 2;
					}
					break;
				case 93:
				case 99:
					{
					alt76 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:337:31: ( '=' | ':=' ) expr
					{
					DebugLocation(337, 31);
					// SugarCpp.g:337:31: ( '=' | ':=' )
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==120))
					{
						alt75 = 1;
					}
					else if ((LA75_0==112))
					{
						alt75 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:337:32: '='
						{
						DebugLocation(337, 32);
						char_literal165=(IToken)Match(input,120,Follow._120_in_func_args_item1936); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal165);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:337:38: ':='
						{
						DebugLocation(337, 38);
						string_literal166=(IToken)Match(input,112,Follow._112_in_func_args_item1940); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal166);


						}
						break;

					}
					} finally { DebugExitSubRule(75); }

					DebugLocation(337, 44);
					PushFollow(Follow._expr_in_func_args_item1943);
					expr167=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr167.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 337:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(337, 53);
						// SugarCpp.g:337:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(337, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(337, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(337, 93);
						// SugarCpp.g:337:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(337, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:338:33: bracket_expr_list
					{
					DebugLocation(338, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item1994);
					bracket_expr_list168=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list168.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(338, 55);
						// SugarCpp.g:338:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(338, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(338, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(338, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:339:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(339, 18);
						// SugarCpp.g:339:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(339, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(339, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(339, 58);
						// SugarCpp.g:339:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:341:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(341, 8);
				string_literal169=(IToken)Match(input,112,Follow._112_in_func_args_item2054); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal169_tree = (CommonTree)adaptor.Create(string_literal169);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal169_tree, root_0);
				}
				DebugLocation(341, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2058);
				modify_expr170=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr170.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:344:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set171 = default(IToken);

		CommonTree set171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(345, 2);

			set171=(IToken)input.LT(1);
			if (input.LA(1)==94||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set171));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:348:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal173 = default(IToken);
		IToken char_literal175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:349:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENT))
			{
				alt78 = 1;
			}
			else if ((LA78_0==92))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:349:4: ident
				{
				DebugLocation(349, 4);
				PushFollow(Follow._ident_in_func_name2092);
				ident172=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident172.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:10: -> ident
				{
					DebugLocation(349, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:350:4: '(' operator ')'
				{
				DebugLocation(350, 4);
				char_literal173=(IToken)Match(input,92,Follow._92_in_func_name2101); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal173);

				DebugLocation(350, 8);
				PushFollow(Follow._operator_in_func_name2103);
				operator174=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator174.Tree);
				DebugLocation(350, 17);
				char_literal175=(IToken)Match(input,93,Follow._93_in_func_name2105); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal175);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 350:21: -> operator
				{
					DebugLocation(350, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:353:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(353, 1);
		try
		{
			// SugarCpp.g:354:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:354:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(354, 4);
			PushFollow(Follow._type_name_in_func_type2120);
			type_name176=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name176.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:357:1: func_def : ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal179 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken NEWLINE189 = default(IToken);
		IToken INDENT190 = default(IToken);
		IToken NEWLINE191 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		IToken DEDENT194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree INDENT190_tree = default(CommonTree);
		CommonTree NEWLINE191_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		CommonTree DEDENT194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(357, 4);
		try
		{
			// SugarCpp.g:358:2: ( ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:358:4: ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(358, 4);
			// SugarCpp.g:358:4: ( attribute )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==131))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:4: attribute
				{
				DebugLocation(358, 4);
				PushFollow(Follow._attribute_in_func_def2131);
				attribute177=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute177.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(358, 15);
			// SugarCpp.g:358:15: ( func_type )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			try
			{
				alt80 = dfa80.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:15: func_type
				{
				DebugLocation(358, 15);
				PushFollow(Follow._func_type_in_func_def2134);
				func_type178=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type178.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(358, 26);
			// SugarCpp.g:358:26: ( '~' )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==180))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:26: '~'
				{
				DebugLocation(358, 26);
				char_literal179=(IToken)Match(input,180,Follow._180_in_func_def2137); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(char_literal179);


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(358, 31);
			PushFollow(Follow._func_name_in_func_def2140);
			func_name180=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name180.Tree);
			DebugLocation(358, 41);
			// SugarCpp.g:358:41: ( generic_parameter )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==114))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:41: generic_parameter
				{
				DebugLocation(358, 41);
				PushFollow(Follow._generic_parameter_in_func_def2142);
				generic_parameter181=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(358, 60);
			char_literal182=(IToken)Match(input,92,Follow._92_in_func_def2145); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal182);

			DebugLocation(358, 64);
			// SugarCpp.g:358:64: ( func_args )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT||LA83_0==112))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:64: func_args
				{
				DebugLocation(358, 64);
				PushFollow(Follow._func_args_in_func_def2147);
				func_args183=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(358, 75);
			char_literal184=(IToken)Match(input,93,Follow._93_in_func_def2150); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal184);

			DebugLocation(358, 79);
			// SugarCpp.g:358:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==NEWLINE))
			{
				alt90 = 1;
			}
			else if ((LA90_0==120))
			{
				alt90 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:358:81: ( NEWLINE )+ stmt_block
				{
				DebugLocation(358, 81);
				// SugarCpp.g:358:81: ( NEWLINE )+
				int cnt84=0;
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==NEWLINE))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:358:81: NEWLINE
						{
						DebugLocation(358, 81);
						NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2154); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE185);


						}
						break;

					default:
						if (cnt84 >= 1)
							goto loop84;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee84 = new EarlyExitException( 84, input );
						DebugRecognitionException(eee84);
						throw eee84;
					}
					cnt84++;
				}
				loop84:
					;

				} finally { DebugExitSubRule(84); }

				DebugLocation(358, 90);
				PushFollow(Follow._stmt_block_in_func_def2157);
				stmt_block186=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block186.Tree);


				{
				// AST REWRITE
				// elements: 180, attribute, generic_parameter, func_args, stmt_block, func_name, func_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 358:101: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(358, 104);
					// SugarCpp.g:358:104: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(358, 106);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(358, 115);
					// SugarCpp.g:358:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(358, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(358, 126);
					// SugarCpp.g:358:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(358, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(358, 137);
					// SugarCpp.g:358:137: ( '~' )?
					if (stream_180.HasNext)
					{
						DebugLocation(358, 137);
						adaptor.AddChild(root_1, stream_180.NextNode());

					}
					stream_180.Reset();
					DebugLocation(358, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(358, 152);
					// SugarCpp.g:358:152: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(358, 152);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(358, 171);
					// SugarCpp.g:358:171: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(358, 171);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(358, 182);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:359:24: '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(359, 24);
				char_literal187=(IToken)Match(input,120,Follow._120_in_func_def2207); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_120.Add(char_literal187);

				DebugLocation(359, 28);
				// SugarCpp.g:359:28: ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==85||LA89_0==90||LA89_0==92||LA89_0==94||(LA89_0>=96 && LA89_0<=97)||(LA89_0>=100 && LA89_0<=101)||(LA89_0>=130 && LA89_0<=131)||LA89_0==153||LA89_0==156||(LA89_0>=158 && LA89_0<=159)||LA89_0==180))
				{
					alt89 = 1;
				}
				else if ((LA89_0==NEWLINE))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:359:30: where_expr
					{
					DebugLocation(359, 30);
					PushFollow(Follow._where_expr_in_func_def2211);
					where_expr188=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr188.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, func_args, func_name, func_type, where_expr, 180, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:42: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(359, 45);
						// SugarCpp.g:359:45: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(359, 56);
						// SugarCpp.g:359:56: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(359, 56);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(359, 67);
						// SugarCpp.g:359:67: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(359, 67);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(359, 78);
						// SugarCpp.g:359:78: ( '~' )?
						if (stream_180.HasNext)
						{
							DebugLocation(359, 78);
							adaptor.AddChild(root_1, stream_180.NextNode());

						}
						stream_180.Reset();
						DebugLocation(359, 83);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(359, 93);
						// SugarCpp.g:359:93: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(359, 93);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(359, 112);
						// SugarCpp.g:359:112: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(359, 112);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(359, 123);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:360:27: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(360, 27);
					// SugarCpp.g:360:27: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:360:27: NEWLINE
							{
							DebugLocation(360, 27);
							NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2265); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE189);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(360, 36);
					INDENT190=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2268); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT190);

					DebugLocation(360, 43);
					// SugarCpp.g:360:43: ( NEWLINE )*
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch ( alt86 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:360:43: NEWLINE
							{
							DebugLocation(360, 43);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2270); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							goto loop86;
						}
					}

					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(360, 52);
					// SugarCpp.g:360:52: ( match_item ( NEWLINE )+ )+
					int cnt88=0;
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==176))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch (alt88)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:360:53: match_item ( NEWLINE )+
							{
							DebugLocation(360, 53);
							PushFollow(Follow._match_item_in_func_def2274);
							match_item192=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item192.Tree);
							DebugLocation(360, 64);
							// SugarCpp.g:360:64: ( NEWLINE )+
							int cnt87=0;
							try { DebugEnterSubRule(87);
							while (true)
							{
								int alt87=2;
								try { DebugEnterDecision(87, false);
								int LA87_0 = input.LA(1);

								if ((LA87_0==NEWLINE))
								{
									alt87 = 1;
								}


								} finally { DebugExitDecision(87); }
								switch (alt87)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:360:64: NEWLINE
									{
									DebugLocation(360, 64);
									NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2276); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


									}
									break;

								default:
									if (cnt87 >= 1)
										goto loop87;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee87 = new EarlyExitException( 87, input );
									DebugRecognitionException(eee87);
									throw eee87;
								}
								cnt87++;
							}
							loop87:
								;

							} finally { DebugExitSubRule(87); }


							}
							break;

						default:
							if (cnt88 >= 1)
								goto loop88;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee88 = new EarlyExitException( 88, input );
							DebugRecognitionException(eee88);
							throw eee88;
						}
						cnt88++;
					}
					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(360, 75);
					DEDENT194=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2281); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT194);



					{
					// AST REWRITE
					// elements: match_item, func_type, generic_parameter, 180, attribute, func_name, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 360:82: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(360, 85);
						// SugarCpp.g:360:85: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(360, 96);
						// SugarCpp.g:360:96: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(360, 96);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(360, 107);
						// SugarCpp.g:360:107: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(360, 107);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(360, 118);
						// SugarCpp.g:360:118: ( '~' )?
						if (stream_180.HasNext)
						{
							DebugLocation(360, 118);
							adaptor.AddChild(root_1, stream_180.NextNode());

						}
						stream_180.Reset();
						DebugLocation(360, 123);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(360, 133);
						// SugarCpp.g:360:133: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(360, 133);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(360, 152);
						// SugarCpp.g:360:152: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(360, 152);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(360, 163);
						// SugarCpp.g:360:163: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 165);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(360, 176);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(360, 176);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(363, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:365:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE196 = default(IToken);
		IToken NEWLINE198 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken NEWLINE200 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree NEWLINE198_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		CommonTree NEWLINE200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(365, 1);
		try
		{
			// SugarCpp.g:366:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==142||(LA95_0>=146 && LA95_0<=148)||LA95_0==155||LA95_0==164||LA95_0==168||(LA95_0>=170 && LA95_0<=171)||LA95_0==175))
			{
				alt95 = 1;
			}
			else if ((LA95_0==IDENT||LA95_0==85||LA95_0==90||LA95_0==92||LA95_0==94||(LA95_0>=96 && LA95_0<=97)||(LA95_0>=100 && LA95_0<=101)||LA95_0==130||LA95_0==159||LA95_0==161||LA95_0==169||LA95_0==172||LA95_0==180))
			{
				alt95 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(366, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2374);
				stmt_complex195=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex195.Tree);
				DebugLocation(366, 17);
				// SugarCpp.g:366:17: ( NEWLINE )+
				int cnt91=0;
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==NEWLINE))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:366:17: NEWLINE
						{
						DebugLocation(366, 17);
						NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2376); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE196);


						}
						break;

					default:
						if (cnt91 >= 1)
							goto loop91;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee91 = new EarlyExitException( 91, input );
						DebugRecognitionException(eee91);
						throw eee91;
					}
					cnt91++;
				}
				loop91:
					;

				} finally { DebugExitSubRule(91); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 366:26: -> stmt_complex
				{
					DebugLocation(366, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:367:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(367, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2386);
				stmt_simple197=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple197.Tree);
				DebugLocation(367, 16);
				// SugarCpp.g:367:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==NEWLINE))
				{
					alt94 = 1;
				}
				else if ((LA94_0==113))
				{
					alt94 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:17: ( NEWLINE )+
					{
					DebugLocation(367, 17);
					// SugarCpp.g:367:17: ( NEWLINE )+
					int cnt92=0;
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch (alt92)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:367:17: NEWLINE
							{
							DebugLocation(367, 17);
							NEWLINE198=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2389); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE198);


							}
							break;

						default:
							if (cnt92 >= 1)
								goto loop92;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee92 = new EarlyExitException( 92, input );
							DebugRecognitionException(eee92);
							throw eee92;
						}
						cnt92++;
					}
					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:367:28: ';' ( NEWLINE )*
					{
					DebugLocation(367, 28);
					char_literal199=(IToken)Match(input,113,Follow._113_in_stmt_block_item2394); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal199);

					DebugLocation(367, 32);
					// SugarCpp.g:367:32: ( NEWLINE )*
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==NEWLINE))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch ( alt93 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:367:32: NEWLINE
							{
							DebugLocation(367, 32);
							NEWLINE200=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2396); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE200);


							}
							break;

						default:
							goto loop93;
						}
					}

					loop93:
						;

					} finally { DebugExitSubRule(93); }


					}
					break;

				}
				} finally { DebugExitSubRule(94); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 367:42: -> stmt_simple
				{
					DebugLocation(367, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:370:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT201 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken DEDENT204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT201_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree DEDENT204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(371, 4);
			INDENT201=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2413); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT201);

			DebugLocation(371, 11);
			// SugarCpp.g:371:11: ( NEWLINE )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==NEWLINE))
				{
					alt96 = 1;
				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:371:11: NEWLINE
					{
					DebugLocation(371, 11);
					NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE202);


					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }

			DebugLocation(371, 20);
			// SugarCpp.g:371:20: ( stmt_block_item )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==85||LA97_0==90||LA97_0==92||LA97_0==94||(LA97_0>=96 && LA97_0<=97)||(LA97_0>=100 && LA97_0<=101)||LA97_0==130||LA97_0==142||(LA97_0>=146 && LA97_0<=148)||LA97_0==155||LA97_0==159||LA97_0==161||LA97_0==164||(LA97_0>=168 && LA97_0<=172)||LA97_0==175||LA97_0==180))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:371:20: stmt_block_item
					{
					DebugLocation(371, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2418);
					stmt_block_item203=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item203.Tree);

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }

			DebugLocation(371, 37);
			DEDENT204=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2421); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT204);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(371, 47);
				// SugarCpp.g:371:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(371, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(371, 60);
				// SugarCpp.g:371:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(371, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:374:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( stmt_simple | stmt_complex )
			int alt98=2;
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==85||LA98_0==90||LA98_0==92||LA98_0==94||(LA98_0>=96 && LA98_0<=97)||(LA98_0>=100 && LA98_0<=101)||LA98_0==130||LA98_0==159||LA98_0==161||LA98_0==169||LA98_0==172||LA98_0==180))
			{
				alt98 = 1;
			}
			else if ((LA98_0==142||(LA98_0>=146 && LA98_0<=148)||LA98_0==155||LA98_0==164||LA98_0==168||(LA98_0>=170 && LA98_0<=171)||LA98_0==175))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:375:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._stmt_simple_in_stmt2441);
				stmt_simple205=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple205.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:376:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._stmt_complex_in_stmt2446);
				stmt_complex206=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex206.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:379:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(380, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2457);
			stmt_expr207=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr207.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:383:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt99=6;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case 148:
			case 170:
				{
				alt99 = 1;
				}
				break;
			case 147:
				{
				alt99 = 2;
				}
				break;
			case 155:
			case 171:
			case 175:
				{
				alt99 = 3;
				}
				break;
			case 168:
				{
				alt99 = 4;
				}
				break;
			case 164:
				{
				alt99 = 5;
				}
				break;
			case 142:
			case 146:
				{
				alt99 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2468);
				stmt_if208=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if208.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2473);
				stmt_for209=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for209.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:386:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2478);
				stmt_while210=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while210.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:387:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2483);
				stmt_try211=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try211.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:388:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2488);
				stmt_switch212=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch212.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:389:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(389, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2493);
				stmt_defer213=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer213.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:392:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken string_literal218 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken char_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(392, 1);
		try
		{
			// SugarCpp.g:393:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:393:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(393, 4);
			// SugarCpp.g:393:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:393:5: a= stmt_expr_item
			{
			DebugLocation(393, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2507);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:22: -> $a
			{
				DebugLocation(393, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(393, 29);
			// SugarCpp.g:393:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=6;
				try { DebugEnterDecision(101, false);
				switch (input.LA(1))
				{
				case 148:
					{
					alt101 = 1;
					}
					break;
				case 170:
					{
					alt101 = 2;
					}
					break;
				case 175:
					{
					alt101 = 3;
					}
					break;
				case 171:
					{
					alt101 = 4;
					}
					break;
				case 147:
					{
					alt101 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:393:31: 'if' expr
					{
					DebugLocation(393, 31);
					string_literal214=(IToken)Match(input,148,Follow._148_in_stmt_expr2517); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_148.Add(string_literal214);

					DebugLocation(393, 36);
					PushFollow(Follow._expr_in_stmt_expr2519);
					expr215=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr215.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(393, 44);
						// SugarCpp.g:393:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(393, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(393, 59);
						// SugarCpp.g:393:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(393, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:394:13: 'unless' expr
					{
					DebugLocation(394, 13);
					string_literal216=(IToken)Match(input,170,Follow._170_in_stmt_expr2548); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(string_literal216);

					DebugLocation(394, 22);
					PushFollow(Follow._expr_in_stmt_expr2550);
					expr217=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr217.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(394, 30);
						// SugarCpp.g:394:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(394, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 49);
						// SugarCpp.g:394:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(394, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:395:13: 'while' expr
					{
					DebugLocation(395, 13);
					string_literal218=(IToken)Match(input,175,Follow._175_in_stmt_expr2579); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_175.Add(string_literal218);

					DebugLocation(395, 21);
					PushFollow(Follow._expr_in_stmt_expr2581);
					expr219=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr219.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(395, 29);
						// SugarCpp.g:395:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(395, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 47);
						// SugarCpp.g:395:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(395, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:396:13: 'until' expr
					{
					DebugLocation(396, 13);
					string_literal220=(IToken)Match(input,171,Follow._171_in_stmt_expr2610); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(string_literal220);

					DebugLocation(396, 21);
					PushFollow(Follow._expr_in_stmt_expr2612);
					expr221=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr221.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(396, 29);
						// SugarCpp.g:396:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(396, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(396, 47);
						// SugarCpp.g:396:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(396, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:397:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(397, 13);
					string_literal222=(IToken)Match(input,147,Follow._147_in_stmt_expr2641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_147.Add(string_literal222);

					DebugLocation(397, 19);
					PushFollow(Follow._for_item_in_stmt_expr2643);
					for_item223=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item223.Tree);
					DebugLocation(397, 28);
					// SugarCpp.g:397:28: ( ',' for_item )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==99))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:397:29: ',' for_item
							{
							DebugLocation(397, 29);
							char_literal224=(IToken)Match(input,99,Follow._99_in_stmt_expr2646); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal224);

							DebugLocation(397, 33);
							PushFollow(Follow._for_item_in_stmt_expr2648);
							for_item225=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item225.Tree);

							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(397, 47);
						// SugarCpp.g:397:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(397, 58);
						// SugarCpp.g:397:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(397, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(397, 68);
						// SugarCpp.g:397:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(397, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:401:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt102=5;
			try { DebugEnterDecision(102, false);
			try
			{
				alt102 = dfa102.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:402:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2690);
				stmt_alloc226=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc226.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:403:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2695);
				stmt_return227=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return227.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:404:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2700);
				stmt_using228=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using228.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:405:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2705);
				stmt_typedef229=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef229.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:406:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2710);
				stmt_modify230=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify230.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:409:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==142))
			{
				alt103 = 1;
			}
			else if ((LA103_0==146))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:410:4: 'defer' stmt
				{
				DebugLocation(410, 4);
				string_literal231=(IToken)Match(input,142,Follow._142_in_stmt_defer2721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal231);

				DebugLocation(410, 12);
				PushFollow(Follow._stmt_in_stmt_defer2723);
				stmt232=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt232.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 410:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(410, 20);
					// SugarCpp.g:410:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(410, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(410, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:411:4: 'finally' stmt
				{
				DebugLocation(411, 4);
				string_literal233=(IToken)Match(input,146,Follow._146_in_stmt_defer2736); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal233);

				DebugLocation(411, 14);
				PushFollow(Follow._stmt_in_stmt_defer2738);
				stmt234=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt234.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 411:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(411, 22);
					// SugarCpp.g:411:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(411, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(411, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:414:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(414, 1);
		try
		{
			// SugarCpp.g:415:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:415:4: 'type' ident '=' type_name
			{
			DebugLocation(415, 4);
			string_literal235=(IToken)Match(input,169,Follow._169_in_stmt_typedef2757); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal235);

			DebugLocation(415, 11);
			PushFollow(Follow._ident_in_stmt_typedef2759);
			ident236=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident236.Tree);
			DebugLocation(415, 17);
			char_literal237=(IToken)Match(input,120,Follow._120_in_stmt_typedef2761); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal237);

			DebugLocation(415, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2763);
			type_name238=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name238.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 415:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(415, 34);
				// SugarCpp.g:415:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(415, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(415, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(415, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:418:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal240_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(418, 36);
		try
		{
			// SugarCpp.g:418:16: ( ident | 'namespace' )
			int alt104=2;
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==IDENT))
			{
				alt104 = 1;
			}
			else if ((LA104_0==157))
			{
				alt104 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(418, 18);
				PushFollow(Follow._ident_in_stmt_using_item2782);
				ident239=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident239.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:418:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(418, 26);
				string_literal240=(IToken)Match(input,157,Follow._157_in_stmt_using_item2786); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal240_tree = (CommonTree)adaptor.Create(string_literal240);
				adaptor.AddChild(root_0, string_literal240_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(418, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:419:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(419, 1);
		try
		{
			// SugarCpp.g:420:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:420:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(420, 4);
			string_literal241=(IToken)Match(input,172,Follow._172_in_stmt_using2794); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal241);

			DebugLocation(420, 12);
			// SugarCpp.g:420:12: ( stmt_using_item )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==IDENT||LA105_0==157))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:420:12: stmt_using_item
					{
					DebugLocation(420, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2796);
					stmt_using_item242=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item242.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(420, 32);
				// SugarCpp.g:420:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(420, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(420, 45);
				// SugarCpp.g:420:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(420, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:423:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(423, 1);
		try
		{
			// SugarCpp.g:424:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:424:4: 'return' ( expr )?
			{
			DebugLocation(424, 4);
			string_literal243=(IToken)Match(input,161,Follow._161_in_stmt_return2817); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_161.Add(string_literal243);

			DebugLocation(424, 13);
			// SugarCpp.g:424:13: ( expr )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			int LA106_0 = input.LA(1);

			if ((LA106_0==IDENT||LA106_0==NUMBER||LA106_0==STRING||LA106_0==85||LA106_0==90||LA106_0==92||LA106_0==94||(LA106_0>=96 && LA106_0<=97)||(LA106_0>=100 && LA106_0<=101)||(LA106_0>=130 && LA106_0<=131)||LA106_0==153||LA106_0==156||(LA106_0>=158 && LA106_0<=159)||LA106_0==180))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:424:13: expr
				{
				DebugLocation(424, 13);
				PushFollow(Follow._expr_in_stmt_return2819);
				expr244=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr244.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(106); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 424:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(424, 22);
				// SugarCpp.g:424:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(424, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(424, 36);
				// SugarCpp.g:424:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(424, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:427:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(427, 1);
		try
		{
			// SugarCpp.g:428:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:428:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(428, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2840);
			stmt_simple245=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple245.Tree);
			DebugLocation(428, 16);
			// SugarCpp.g:428:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==113))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:17: ';' stmt_simple
					{
					DebugLocation(428, 17);
					char_literal246=(IToken)Match(input,113,Follow._113_in_inline_stmt_block2843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal246);

					DebugLocation(428, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2845);
					stmt_simple247=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple247.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(428, 38);
				// SugarCpp.g:428:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(428, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(428, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(428, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:431:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal248 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		IToken NEWLINE252 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken NEWLINE254 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken string_literal258 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken NEWLINE262 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		CommonTree NEWLINE252_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree NEWLINE254_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree NEWLINE262_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(431, 1);
		try
		{
			// SugarCpp.g:432:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt118=2;
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==148))
			{
				alt118 = 1;
			}
			else if ((LA118_0==170))
			{
				alt118 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:432:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(432, 4);
				string_literal248=(IToken)Match(input,148,Follow._148_in_stmt_if2867); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal248);

				DebugLocation(432, 9);
				PushFollow(Follow._expr_in_stmt_if2869);
				expr249=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr249.Tree);
				DebugLocation(432, 14);
				// SugarCpp.g:432:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==NEWLINE))
				{
					alt112 = 1;
				}
				else if ((LA112_0==165))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(432, 15);
					// SugarCpp.g:432:15: ( NEWLINE )+
					int cnt108=0;
					try { DebugEnterSubRule(108);
					while (true)
					{
						int alt108=2;
						try { DebugEnterDecision(108, false);
						int LA108_0 = input.LA(1);

						if ((LA108_0==NEWLINE))
						{
							alt108 = 1;
						}


						} finally { DebugExitDecision(108); }
						switch (alt108)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:432:15: NEWLINE
							{
							DebugLocation(432, 15);
							NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2872); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE250);


							}
							break;

						default:
							if (cnt108 >= 1)
								goto loop108;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee108 = new EarlyExitException( 108, input );
							DebugRecognitionException(eee108);
							throw eee108;
						}
						cnt108++;
					}
					loop108:
						;

					} finally { DebugExitSubRule(108); }

					DebugLocation(432, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2875);
					stmt_block251=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block251.Tree);
					DebugLocation(432, 35);
					// SugarCpp.g:432:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					try
					{
						alt111 = dfa111.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:432:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(432, 36);
						// SugarCpp.g:432:36: ( NEWLINE )*
						try { DebugEnterSubRule(109);
						while (true)
						{
							int alt109=2;
							try { DebugEnterDecision(109, false);
							int LA109_0 = input.LA(1);

							if ((LA109_0==NEWLINE))
							{
								alt109 = 1;
							}


							} finally { DebugExitDecision(109); }
							switch ( alt109 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:432:36: NEWLINE
								{
								DebugLocation(432, 36);
								NEWLINE252=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2878); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE252);


								}
								break;

							default:
								goto loop109;
							}
						}

						loop109:
							;

						} finally { DebugExitSubRule(109); }

						DebugLocation(432, 45);
						string_literal253=(IToken)Match(input,144,Follow._144_in_stmt_if2881); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal253);

						DebugLocation(432, 52);
						// SugarCpp.g:432:52: ( NEWLINE )+
						int cnt110=0;
						try { DebugEnterSubRule(110);
						while (true)
						{
							int alt110=2;
							try { DebugEnterDecision(110, false);
							int LA110_0 = input.LA(1);

							if ((LA110_0==NEWLINE))
							{
								alt110 = 1;
							}


							} finally { DebugExitDecision(110); }
							switch (alt110)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:432:52: NEWLINE
								{
								DebugLocation(432, 52);
								NEWLINE254=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2883); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE254);


								}
								break;

							default:
								if (cnt110 >= 1)
									goto loop110;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee110 = new EarlyExitException( 110, input );
								DebugRecognitionException(eee110);
								throw eee110;
							}
							cnt110++;
						}
						loop110:
							;

						} finally { DebugExitSubRule(110); }

						DebugLocation(432, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2886);
						stmt_block255=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block255.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(111); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(432, 77);
						// SugarCpp.g:432:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(432, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(432, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(432, 103);
						// SugarCpp.g:432:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(432, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:433:16: 'then' inline_stmt_block
					{
					DebugLocation(433, 16);
					string_literal256=(IToken)Match(input,165,Follow._165_in_stmt_if2918); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal256);

					DebugLocation(433, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2920);
					inline_stmt_block257=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block257.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(433, 44);
						// SugarCpp.g:433:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(433, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(433, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:435:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(435, 4);
				string_literal258=(IToken)Match(input,170,Follow._170_in_stmt_if2941); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal258);

				DebugLocation(435, 13);
				PushFollow(Follow._expr_in_stmt_if2943);
				expr259=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr259.Tree);
				DebugLocation(435, 18);
				// SugarCpp.g:435:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}
				else if ((LA117_0==165))
				{
					alt117 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:435:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(435, 19);
					// SugarCpp.g:435:19: ( NEWLINE )+
					int cnt113=0;
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==NEWLINE))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:435:19: NEWLINE
							{
							DebugLocation(435, 19);
							NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2946); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE260);


							}
							break;

						default:
							if (cnt113 >= 1)
								goto loop113;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee113 = new EarlyExitException( 113, input );
							DebugRecognitionException(eee113);
							throw eee113;
						}
						cnt113++;
					}
					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(435, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2949);
					stmt_block261=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block261.Tree);
					DebugLocation(435, 39);
					// SugarCpp.g:435:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt116=2;
					try { DebugEnterSubRule(116);
					try { DebugEnterDecision(116, false);
					try
					{
						alt116 = dfa116.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:435:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(435, 40);
						// SugarCpp.g:435:40: ( NEWLINE )*
						try { DebugEnterSubRule(114);
						while (true)
						{
							int alt114=2;
							try { DebugEnterDecision(114, false);
							int LA114_0 = input.LA(1);

							if ((LA114_0==NEWLINE))
							{
								alt114 = 1;
							}


							} finally { DebugExitDecision(114); }
							switch ( alt114 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:435:40: NEWLINE
								{
								DebugLocation(435, 40);
								NEWLINE262=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2952); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE262);


								}
								break;

							default:
								goto loop114;
							}
						}

						loop114:
							;

						} finally { DebugExitSubRule(114); }

						DebugLocation(435, 49);
						string_literal263=(IToken)Match(input,144,Follow._144_in_stmt_if2955); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal263);

						DebugLocation(435, 56);
						// SugarCpp.g:435:56: ( NEWLINE )+
						int cnt115=0;
						try { DebugEnterSubRule(115);
						while (true)
						{
							int alt115=2;
							try { DebugEnterDecision(115, false);
							int LA115_0 = input.LA(1);

							if ((LA115_0==NEWLINE))
							{
								alt115 = 1;
							}


							} finally { DebugExitDecision(115); }
							switch (alt115)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:435:56: NEWLINE
								{
								DebugLocation(435, 56);
								NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2957); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE264);


								}
								break;

							default:
								if (cnt115 >= 1)
									goto loop115;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee115 = new EarlyExitException( 115, input );
								DebugRecognitionException(eee115);
								throw eee115;
							}
							cnt115++;
						}
						loop115:
							;

						} finally { DebugExitSubRule(115); }

						DebugLocation(435, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2960);
						stmt_block265=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block265.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(116); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(435, 81);
						// SugarCpp.g:435:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(435, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(435, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(435, 111);
						// SugarCpp.g:435:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(435, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:436:20: 'then' inline_stmt_block
					{
					DebugLocation(436, 20);
					string_literal266=(IToken)Match(input,165,Follow._165_in_stmt_if2996); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal266);

					DebugLocation(436, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2998);
					inline_stmt_block267=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block267.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 436:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(436, 48);
						// SugarCpp.g:436:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(436, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(436, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(436, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:440:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken string_literal272 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken NEWLINE276 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken NEWLINE282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree NEWLINE276_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree NEWLINE282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt125=3;
			try { DebugEnterDecision(125, false);
			switch (input.LA(1))
			{
			case 175:
				{
				alt125 = 1;
				}
				break;
			case 171:
				{
				alt125 = 2;
				}
				break;
			case 155:
				{
				alt125 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:441:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(441, 4);
				string_literal268=(IToken)Match(input,175,Follow._175_in_stmt_while3029); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(string_literal268);

				DebugLocation(441, 12);
				PushFollow(Follow._expr_in_stmt_while3031);
				expr269=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr269.Tree);
				DebugLocation(441, 17);
				// SugarCpp.g:441:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==NEWLINE))
				{
					alt120 = 1;
				}
				else if ((LA120_0==165))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(441, 19);
					// SugarCpp.g:441:19: ( NEWLINE )+
					int cnt119=0;
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=2;
						try { DebugEnterDecision(119, false);
						int LA119_0 = input.LA(1);

						if ((LA119_0==NEWLINE))
						{
							alt119 = 1;
						}


						} finally { DebugExitDecision(119); }
						switch (alt119)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:441:19: NEWLINE
							{
							DebugLocation(441, 19);
							NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3035); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE270);


							}
							break;

						default:
							if (cnt119 >= 1)
								goto loop119;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee119 = new EarlyExitException( 119, input );
							DebugRecognitionException(eee119);
							throw eee119;
						}
						cnt119++;
					}
					loop119:
						;

					} finally { DebugExitSubRule(119); }

					DebugLocation(441, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3038);
					stmt_block271=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block271.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(441, 42);
						// SugarCpp.g:441:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(441, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(441, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:442:13: 'then' inline_stmt_block
					{
					DebugLocation(442, 13);
					string_literal272=(IToken)Match(input,165,Follow._165_in_stmt_while3062); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal272);

					DebugLocation(442, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3064);
					inline_stmt_block273=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block273.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(442, 41);
						// SugarCpp.g:442:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(442, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(442, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:444:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(444, 4);
				string_literal274=(IToken)Match(input,171,Follow._171_in_stmt_while3088); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal274);

				DebugLocation(444, 12);
				PushFollow(Follow._expr_in_stmt_while3090);
				expr275=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr275.Tree);
				DebugLocation(444, 17);
				// SugarCpp.g:444:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==NEWLINE))
				{
					alt122 = 1;
				}
				else if ((LA122_0==165))
				{
					alt122 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(444, 19);
					// SugarCpp.g:444:19: ( NEWLINE )+
					int cnt121=0;
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						int LA121_0 = input.LA(1);

						if ((LA121_0==NEWLINE))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch (alt121)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:444:19: NEWLINE
							{
							DebugLocation(444, 19);
							NEWLINE276=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3094); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE276);


							}
							break;

						default:
							if (cnt121 >= 1)
								goto loop121;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee121 = new EarlyExitException( 121, input );
							DebugRecognitionException(eee121);
							throw eee121;
						}
						cnt121++;
					}
					loop121:
						;

					} finally { DebugExitSubRule(121); }

					DebugLocation(444, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3097);
					stmt_block277=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block277.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(444, 42);
						// SugarCpp.g:444:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(444, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(444, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:13: 'then' inline_stmt_block
					{
					DebugLocation(445, 13);
					string_literal278=(IToken)Match(input,165,Follow._165_in_stmt_while3121); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal278);

					DebugLocation(445, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3123);
					inline_stmt_block279=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block279.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(445, 41);
						// SugarCpp.g:445:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(445, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(445, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(122); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:447:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(447, 4);
				string_literal280=(IToken)Match(input,155,Follow._155_in_stmt_while3147); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(string_literal280);

				DebugLocation(447, 11);
				// SugarCpp.g:447:11: ( expr )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==IDENT||LA123_0==NUMBER||LA123_0==STRING||LA123_0==85||LA123_0==90||LA123_0==92||LA123_0==94||(LA123_0>=96 && LA123_0<=97)||(LA123_0>=100 && LA123_0<=101)||(LA123_0>=130 && LA123_0<=131)||LA123_0==153||LA123_0==156||(LA123_0>=158 && LA123_0<=159)||LA123_0==180))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:11: expr
					{
					DebugLocation(447, 11);
					PushFollow(Follow._expr_in_stmt_while3149);
					expr281=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr281.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(447, 17);
				// SugarCpp.g:447:17: ( NEWLINE )+
				int cnt124=0;
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==NEWLINE))
					{
						alt124 = 1;
					}


					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:447:17: NEWLINE
						{
						DebugLocation(447, 17);
						NEWLINE282=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3152); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE282);


						}
						break;

					default:
						if (cnt124 >= 1)
							goto loop124;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee124 = new EarlyExitException( 124, input );
						DebugRecognitionException(eee124);
						throw eee124;
					}
					cnt124++;
				}
				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(447, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3155);
				stmt_block283=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block283.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 447:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(447, 40);
					// SugarCpp.g:447:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(447, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(447, 52);
					// SugarCpp.g:447:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(447, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(447, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:450:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken string_literal289 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree string_literal287_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree string_literal289_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(451, 4);
			PushFollow(Follow._ident_in_for_range3177);
			ident284=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident284.Tree);
			DebugLocation(451, 10);
			string_literal285=(IToken)Match(input,115,Follow._115_in_for_range3179); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(string_literal285);

			DebugLocation(451, 16);
			PushFollow(Follow._expr_in_for_range3183);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(451, 22);
			// SugarCpp.g:451:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt129=4;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			switch (input.LA(1))
			{
			case 167:
				{
				alt129 = 1;
				}
				break;
			case 166:
				{
				alt129 = 2;
				}
				break;
			case 143:
				{
				alt129 = 3;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 99:
			case 113:
			case 132:
			case 147:
			case 148:
			case 150:
			case 170:
			case 171:
			case 175:
				{
				alt129 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:451:24: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(451, 24);
				string_literal286=(IToken)Match(input,167,Follow._167_in_for_range3187); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal286);

				DebugLocation(451, 30);
				PushFollow(Follow._expr_in_for_range3191);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(451, 36);
				// SugarCpp.g:451:36: ( 'by' c= expr )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==137))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:37: 'by' c= expr
					{
					DebugLocation(451, 37);
					string_literal287=(IToken)Match(input,137,Follow._137_in_for_range3194); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal287);

					DebugLocation(451, 43);
					PushFollow(Follow._expr_in_for_range3198);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(126); }



				{
				// AST REWRITE
				// elements: ident, c, a, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 451:51: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(451, 54);
					// SugarCpp.g:451:54: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(451, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(451, 68);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(451, 75);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(451, 78);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(451, 81);
					// SugarCpp.g:451:81: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(451, 81);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:452:9: 'til' b= expr ( 'by' c= expr )?
				{
				DebugLocation(452, 9);
				string_literal288=(IToken)Match(input,166,Follow._166_in_for_range3228); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal288);

				DebugLocation(452, 16);
				PushFollow(Follow._expr_in_for_range3232);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(452, 22);
				// SugarCpp.g:452:22: ( 'by' c= expr )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==137))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:452:23: 'by' c= expr
					{
					DebugLocation(452, 23);
					string_literal289=(IToken)Match(input,137,Follow._137_in_for_range3235); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal289);

					DebugLocation(452, 29);
					PushFollow(Follow._expr_in_for_range3239);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(127); }



				{
				// AST REWRITE
				// elements: c, b, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 452:37: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(452, 40);
					// SugarCpp.g:452:40: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(452, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(452, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(452, 62);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(452, 65);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(452, 68);
					// SugarCpp.g:452:68: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(452, 68);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:453:9: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(453, 9);
				string_literal290=(IToken)Match(input,143,Follow._143_in_for_range3269); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal290);

				DebugLocation(453, 19);
				PushFollow(Follow._expr_in_for_range3273);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(453, 25);
				// SugarCpp.g:453:25: ( 'by' c= expr )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==137))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:26: 'by' c= expr
					{
					DebugLocation(453, 26);
					string_literal291=(IToken)Match(input,137,Follow._137_in_for_range3276); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal291);

					DebugLocation(453, 32);
					PushFollow(Follow._expr_in_for_range3280);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(128); }



				{
				// AST REWRITE
				// elements: b, a, c, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 453:40: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(453, 43);
					// SugarCpp.g:453:43: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(453, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(453, 62);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(453, 69);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(453, 72);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(453, 75);
					// SugarCpp.g:453:75: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(453, 75);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:454:9: 
				{

				{
				// AST REWRITE
				// elements: ident, a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 454:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(454, 12);
					// SugarCpp.g:454:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(454, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(454, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(454, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:458:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr292 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(458, 1);
		try
		{
			// SugarCpp.g:459:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:459:4: expr
			{
			DebugLocation(459, 4);
			PushFollow(Follow._expr_in_for_when3338);
			expr292=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr292.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 459:9: -> ^( For_Item_When expr )
			{
				DebugLocation(459, 12);
				// SugarCpp.g:459:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(459, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(459, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:462:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(462, 1);
		try
		{
			// SugarCpp.g:463:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:463:4: ident '=>' expr
			{
			DebugLocation(463, 4);
			PushFollow(Follow._ident_in_for_map3357);
			ident293=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident293.Tree);
			DebugLocation(463, 10);
			string_literal294=(IToken)Match(input,123,Follow._123_in_for_map3359); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal294);

			DebugLocation(463, 15);
			PushFollow(Follow._expr_in_for_map3361);
			expr295=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr295.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 463:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(463, 23);
				// SugarCpp.g:463:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(463, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(463, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(463, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:466:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map298 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(466, 1);
		try
		{
			// SugarCpp.g:467:2: ( for_range | for_when | for_map )
			int alt130=3;
			try { DebugEnterDecision(130, false);
			try
			{
				alt130 = dfa130.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:467:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(467, 4);
				PushFollow(Follow._for_range_in_for_item3382);
				for_range296=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range296.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:468:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(468, 4);
				PushFollow(Follow._for_when_in_for_item3387);
				for_when297=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when297.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:469:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 4);
				PushFollow(Follow._for_map_in_for_item3392);
				for_map298=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map298.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:472:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal299 = default(IToken);
		IToken char_literal301 = default(IToken);
		IToken NEWLINE303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block304 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal299_tree = default(CommonTree);
		CommonTree char_literal301_tree = default(CommonTree);
		CommonTree NEWLINE303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:473:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(473, 4);
			string_literal299=(IToken)Match(input,147,Follow._147_in_stmt_for3403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_147.Add(string_literal299);

			DebugLocation(473, 10);
			// SugarCpp.g:473:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:473:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(473, 12);
			PushFollow(Follow._for_item_in_stmt_for3407);
			for_item300=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item300.Tree);
			DebugLocation(473, 21);
			// SugarCpp.g:473:21: ( ',' for_item )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==99))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:22: ',' for_item
					{
					DebugLocation(473, 22);
					char_literal301=(IToken)Match(input,99,Follow._99_in_stmt_for3410); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal301);

					DebugLocation(473, 26);
					PushFollow(Follow._for_item_in_stmt_for3412);
					for_item302=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item302.Tree);

					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(473, 37);
			// SugarCpp.g:473:37: ( NEWLINE )+
			int cnt132=0;
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:37: NEWLINE
					{
					DebugLocation(473, 37);
					NEWLINE303=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3416); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE303);


					}
					break;

				default:
					if (cnt132 >= 1)
						goto loop132;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee132 = new EarlyExitException( 132, input );
					DebugRecognitionException(eee132);
					throw eee132;
				}
				cnt132++;
			}
			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(473, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3419);
			stmt_block304=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block304.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 473:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(473, 60);
				// SugarCpp.g:473:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(473, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(473, 71);
				// SugarCpp.g:473:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(473, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(473, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:478:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal305 = default(IToken);
		IToken NEWLINE306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken string_literal309 = default(IToken);
		IToken NEWLINE311 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block312 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal305_tree = default(CommonTree);
		CommonTree NEWLINE306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree string_literal309_tree = default(CommonTree);
		CommonTree NEWLINE311_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(479, 4);
			string_literal305=(IToken)Match(input,168,Follow._168_in_stmt_try3450); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_168.Add(string_literal305);

			DebugLocation(479, 10);
			// SugarCpp.g:479:10: ( NEWLINE )+
			int cnt133=0;
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==NEWLINE))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:10: NEWLINE
					{
					DebugLocation(479, 10);
					NEWLINE306=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3452); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE306);


					}
					break;

				default:
					if (cnt133 >= 1)
						goto loop133;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee133 = new EarlyExitException( 133, input );
					DebugRecognitionException(eee133);
					throw eee133;
				}
				cnt133++;
			}
			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(479, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3455);
			stmt_block307=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block307.Tree);
			DebugLocation(479, 30);
			// SugarCpp.g:479:30: ( NEWLINE )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==NEWLINE))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:30: NEWLINE
					{
					DebugLocation(479, 30);
					NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3457); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE308);


					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(479, 39);
			string_literal309=(IToken)Match(input,139,Follow._139_in_stmt_try3460); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal309);

			DebugLocation(479, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3462);
			stmt_alloc310=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc310.Tree);
			DebugLocation(479, 58);
			// SugarCpp.g:479:58: ( NEWLINE )+
			int cnt135=0;
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==NEWLINE))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:58: NEWLINE
					{
					DebugLocation(479, 58);
					NEWLINE311=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE311);


					}
					break;

				default:
					if (cnt135 >= 1)
						goto loop135;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee135 = new EarlyExitException( 135, input );
					DebugRecognitionException(eee135);
					throw eee135;
				}
				cnt135++;
			}
			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(479, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3467);
			stmt_block312=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block312.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 479:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(479, 81);
				// SugarCpp.g:479:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(479, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(479, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(479, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(479, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:482:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal313 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken NEWLINE317 = default(IToken);
		IToken string_literal319 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block320 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal313_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree NEWLINE317_tree = default(CommonTree);
		CommonTree string_literal319_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(482, 1);
		try
		{
			// SugarCpp.g:483:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:483:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(483, 4);
			string_literal313=(IToken)Match(input,173,Follow._173_in_switch_item3490); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(string_literal313);

			DebugLocation(483, 11);
			PushFollow(Follow._expr_in_switch_item3492);
			expr314=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr314.Tree);
			DebugLocation(483, 16);
			// SugarCpp.g:483:16: ( ',' expr )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==99))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:483:17: ',' expr
					{
					DebugLocation(483, 17);
					char_literal315=(IToken)Match(input,99,Follow._99_in_switch_item3495); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal315);

					DebugLocation(483, 21);
					PushFollow(Follow._expr_in_switch_item3497);
					expr316=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr316.Tree);

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(483, 28);
			// SugarCpp.g:483:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_0 = input.LA(1);

			if ((LA138_0==NEWLINE))
			{
				alt138 = 1;
			}
			else if ((LA138_0==165))
			{
				alt138 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 138, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:483:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(483, 30);
				// SugarCpp.g:483:30: ( NEWLINE )+
				int cnt137=0;
				try { DebugEnterSubRule(137);
				while (true)
				{
					int alt137=2;
					try { DebugEnterDecision(137, false);
					int LA137_0 = input.LA(1);

					if ((LA137_0==NEWLINE))
					{
						alt137 = 1;
					}


					} finally { DebugExitDecision(137); }
					switch (alt137)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:483:30: NEWLINE
						{
						DebugLocation(483, 30);
						NEWLINE317=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3503); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE317);


						}
						break;

					default:
						if (cnt137 >= 1)
							goto loop137;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee137 = new EarlyExitException( 137, input );
						DebugRecognitionException(eee137);
						throw eee137;
					}
					cnt137++;
				}
				loop137:
					;

				} finally { DebugExitSubRule(137); }

				DebugLocation(483, 39);
				PushFollow(Follow._stmt_block_in_switch_item3506);
				stmt_block318=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block318.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 483:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(483, 53);
					// SugarCpp.g:483:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(483, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(483, 67);
					// SugarCpp.g:483:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(483, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(483, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(483, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(483, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:484:30: 'then' inline_stmt_block
				{
				DebugLocation(484, 30);
				string_literal319=(IToken)Match(input,165,Follow._165_in_switch_item3552); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal319);

				DebugLocation(484, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3554);
				inline_stmt_block320=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block320.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 484:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(484, 58);
					// SugarCpp.g:484:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(484, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(484, 72);
					// SugarCpp.g:484:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(484, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(484, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(484, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(484, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:488:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal321 = default(IToken);
		IToken NEWLINE323 = default(IToken);
		IToken INDENT324 = default(IToken);
		IToken NEWLINE325 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken string_literal328 = default(IToken);
		IToken NEWLINE329 = default(IToken);
		IToken NEWLINE331 = default(IToken);
		IToken DEDENT332 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block330 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree NEWLINE323_tree = default(CommonTree);
		CommonTree INDENT324_tree = default(CommonTree);
		CommonTree NEWLINE325_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree string_literal328_tree = default(CommonTree);
		CommonTree NEWLINE329_tree = default(CommonTree);
		CommonTree NEWLINE331_tree = default(CommonTree);
		CommonTree DEDENT332_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(489, 4);
			string_literal321=(IToken)Match(input,164,Follow._164_in_stmt_switch3594); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_164.Add(string_literal321);

			DebugLocation(489, 13);
			// SugarCpp.g:489:13: ( expr )?
			int alt139=2;
			try { DebugEnterSubRule(139);
			try { DebugEnterDecision(139, false);
			int LA139_0 = input.LA(1);

			if ((LA139_0==IDENT||LA139_0==NUMBER||LA139_0==STRING||LA139_0==85||LA139_0==90||LA139_0==92||LA139_0==94||(LA139_0>=96 && LA139_0<=97)||(LA139_0>=100 && LA139_0<=101)||(LA139_0>=130 && LA139_0<=131)||LA139_0==153||LA139_0==156||(LA139_0>=158 && LA139_0<=159)||LA139_0==180))
			{
				alt139 = 1;
			}
			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:13: expr
				{
				DebugLocation(489, 13);
				PushFollow(Follow._expr_in_stmt_switch3596);
				expr322=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr322.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(139); }

			DebugLocation(489, 19);
			// SugarCpp.g:489:19: ( NEWLINE )+
			int cnt140=0;
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==NEWLINE))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:19: NEWLINE
					{
					DebugLocation(489, 19);
					NEWLINE323=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3599); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE323);


					}
					break;

				default:
					if (cnt140 >= 1)
						goto loop140;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee140 = new EarlyExitException( 140, input );
					DebugRecognitionException(eee140);
					throw eee140;
				}
				cnt140++;
			}
			loop140:
				;

			} finally { DebugExitSubRule(140); }

			DebugLocation(489, 28);
			INDENT324=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3602); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT324);

			DebugLocation(489, 35);
			// SugarCpp.g:489:35: ( NEWLINE )*
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==NEWLINE))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch ( alt141 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:35: NEWLINE
					{
					DebugLocation(489, 35);
					NEWLINE325=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3604); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE325);


					}
					break;

				default:
					goto loop141;
				}
			}

			loop141:
				;

			} finally { DebugExitSubRule(141); }

			DebugLocation(489, 44);
			// SugarCpp.g:489:44: ( switch_item ( NEWLINE )+ )+
			int cnt143=0;
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==173))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:45: switch_item ( NEWLINE )+
					{
					DebugLocation(489, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3608);
					switch_item326=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item326.Tree);
					DebugLocation(489, 57);
					// SugarCpp.g:489:57: ( NEWLINE )+
					int cnt142=0;
					try { DebugEnterSubRule(142);
					while (true)
					{
						int alt142=2;
						try { DebugEnterDecision(142, false);
						int LA142_0 = input.LA(1);

						if ((LA142_0==NEWLINE))
						{
							alt142 = 1;
						}


						} finally { DebugExitDecision(142); }
						switch (alt142)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:489:57: NEWLINE
							{
							DebugLocation(489, 57);
							NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3610); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE327);


							}
							break;

						default:
							if (cnt142 >= 1)
								goto loop142;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee142 = new EarlyExitException( 142, input );
							DebugRecognitionException(eee142);
							throw eee142;
						}
						cnt142++;
					}
					loop142:
						;

					} finally { DebugExitSubRule(142); }


					}
					break;

				default:
					if (cnt143 >= 1)
						goto loop143;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee143 = new EarlyExitException( 143, input );
					DebugRecognitionException(eee143);
					throw eee143;
				}
				cnt143++;
			}
			loop143:
				;

			} finally { DebugExitSubRule(143); }

			DebugLocation(489, 68);
			// SugarCpp.g:489:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_0 = input.LA(1);

			if ((LA146_0==144))
			{
				alt146 = 1;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(489, 69);
				string_literal328=(IToken)Match(input,144,Follow._144_in_stmt_switch3616); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal328);

				DebugLocation(489, 76);
				// SugarCpp.g:489:76: ( NEWLINE )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==NEWLINE))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:76: NEWLINE
						{
						DebugLocation(489, 76);
						NEWLINE329=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3618); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE329);


						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }

				DebugLocation(489, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3621);
				stmt_block330=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block330.Tree);
				DebugLocation(489, 96);
				// SugarCpp.g:489:96: ( NEWLINE )*
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==NEWLINE))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch ( alt145 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:96: NEWLINE
						{
						DebugLocation(489, 96);
						NEWLINE331=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3623); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE331);


						}
						break;

					default:
						goto loop145;
					}
				}

				loop145:
					;

				} finally { DebugExitSubRule(145); }


				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(489, 107);
			DEDENT332=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3628); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT332);



			{
			// AST REWRITE
			// elements: switch_item, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 489:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(489, 117);
				// SugarCpp.g:489:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(489, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(489, 131);
				// SugarCpp.g:489:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(489, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(489, 137);
				// SugarCpp.g:489:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(489, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(489, 150);
				// SugarCpp.g:489:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(489, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:492:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal334 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident335 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal334_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(492, 1);
		try
		{
			// SugarCpp.g:493:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:493:4: ident ( ',' ident )*
			{
			DebugLocation(493, 4);
			PushFollow(Follow._ident_in_ident_list3654);
			ident333=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident333.Tree);
			DebugLocation(493, 10);
			// SugarCpp.g:493:10: ( ',' ident )*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=2;
				try { DebugEnterDecision(147, false);
				int LA147_0 = input.LA(1);

				if ((LA147_0==99))
				{
					alt147 = 1;
				}


				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:493:11: ',' ident
					{
					DebugLocation(493, 11);
					char_literal334=(IToken)Match(input,99,Follow._99_in_ident_list3657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal334);

					DebugLocation(493, 15);
					PushFollow(Follow._ident_in_ident_list3659);
					ident335=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident335.Tree);

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 493:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(493, 26);
				// SugarCpp.g:493:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(493, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(493, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(493, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:496:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal337 = default(IToken);
		IToken char_literal339 = default(IToken);
		IToken string_literal340 = default(IToken);
		IToken string_literal343 = default(IToken);
		IToken char_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		CommonTree string_literal340_tree = default(CommonTree);
		CommonTree string_literal343_tree = default(CommonTree);
		CommonTree char_literal345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(497, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3681);
			ident_list336=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list336.Tree);
			DebugLocation(497, 15);
			// SugarCpp.g:497:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt151=2;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			int LA151_0 = input.LA(1);

			if ((LA151_0==110))
			{
				alt151 = 1;
			}
			else if ((LA151_0==112))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:497:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(497, 17);
				char_literal337=(IToken)Match(input,110,Follow._110_in_stmt_alloc3685); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal337);

				DebugLocation(497, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3687);
				type_name338=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name338.Tree);
				DebugLocation(497, 31);
				// SugarCpp.g:497:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt149=3;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt149 = 1;
					}
					break;
				case 92:
					{
					alt149 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 113:
				case 147:
				case 148:
				case 150:
				case 170:
				case 171:
				case 175:
					{
					alt149 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 149, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:497:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(497, 33);
					// SugarCpp.g:497:33: ( '=' | ':=' )
					int alt148=2;
					try { DebugEnterSubRule(148);
					try { DebugEnterDecision(148, false);
					int LA148_0 = input.LA(1);

					if ((LA148_0==120))
					{
						alt148 = 1;
					}
					else if ((LA148_0==112))
					{
						alt148 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 148, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(148); }
					switch (alt148)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:497:34: '='
						{
						DebugLocation(497, 34);
						char_literal339=(IToken)Match(input,120,Follow._120_in_stmt_alloc3692); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal339);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:497:40: ':='
						{
						DebugLocation(497, 40);
						string_literal340=(IToken)Match(input,112,Follow._112_in_stmt_alloc3696); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal340);


						}
						break;

					}
					} finally { DebugExitSubRule(148); }

					DebugLocation(497, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3699);
					where_expr341=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr341.Tree);


					{
					// AST REWRITE
					// elements: type_name, where_expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 497:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(497, 61);
						// SugarCpp.g:497:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(497, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(497, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(497, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(497, 101);
						// SugarCpp.g:497:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(497, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(497, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:498:33: bracket_expr_list
					{
					DebugLocation(498, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3750);
					bracket_expr_list342=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list342.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 498:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(498, 55);
						// SugarCpp.g:498:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(498, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(498, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(498, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(498, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:499:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 499:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(499, 18);
						// SugarCpp.g:499:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(499, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(499, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(499, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(499, 58);
						// SugarCpp.g:499:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(499, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(149); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:501:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(501, 8);
				string_literal343=(IToken)Match(input,112,Follow._112_in_stmt_alloc3814); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal343);

				DebugLocation(501, 14);
				// SugarCpp.g:501:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:501:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(501, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3818);
				where_expr344=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr344.Tree);
				DebugLocation(501, 26);
				// SugarCpp.g:501:26: ( ',' where_expr )*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==99))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:501:27: ',' where_expr
						{
						DebugLocation(501, 27);
						char_literal345=(IToken)Match(input,99,Follow._99_in_stmt_alloc3821); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal345);

						DebugLocation(501, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3823);
						where_expr346=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr346.Tree);

						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }


				}



				{
				// AST REWRITE
				// elements: 112, ident_list, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 501:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(501, 48);
					// SugarCpp.g:501:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(501, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(501, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(501, 66);
					// SugarCpp.g:501:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(501, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(501, 78);
					// SugarCpp.g:501:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(501, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:504:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal350 = default(IToken);
		IToken string_literal352 = default(IToken);
		IToken string_literal354 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op348 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr355 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal350_tree = default(CommonTree);
		CommonTree string_literal352_tree = default(CommonTree);
		CommonTree string_literal354_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:505:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(505, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3853);
			lvalue347=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue347.Tree);
			DebugLocation(505, 11);
			// SugarCpp.g:505:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt152=5;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			switch (input.LA(1))
			{
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 117:
			case 120:
			case 127:
			case 134:
			case 177:
				{
				alt152 = 1;
				}
				break;
			case 129:
				{
				alt152 = 2;
				}
				break;
			case 116:
				{
				alt152 = 3;
				}
				break;
			case 126:
				{
				alt152 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 113:
			case 147:
			case 148:
			case 150:
			case 170:
			case 171:
			case 175:
				{
				alt152 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:505:13: modify_expr_op where_expr
				{
				DebugLocation(505, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3857);
				modify_expr_op348=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op348.Tree);
				DebugLocation(505, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3859);
				where_expr349=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr349.Tree);


				{
				// AST REWRITE
				// elements: where_expr, modify_expr_op, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(505, 42);
					// SugarCpp.g:505:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(505, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(505, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:506:13: '?=' where_expr
				{
				DebugLocation(506, 13);
				string_literal350=(IToken)Match(input,129,Follow._129_in_stmt_modify3883); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(string_literal350);

				DebugLocation(506, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3885);
				where_expr351=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr351.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 506:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(506, 32);
					// SugarCpp.g:506:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(506, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(506, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(506, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:507:16: '<<' where_expr
				{
				DebugLocation(507, 16);
				string_literal352=(IToken)Match(input,116,Follow._116_in_stmt_modify3912); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(string_literal352);

				DebugLocation(507, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3914);
				where_expr353=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr353.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 116
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 507:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(507, 35);
					// SugarCpp.g:507:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(507, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(507, 46);
					adaptor.AddChild(root_1, stream_116.NextNode());
					DebugLocation(507, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(507, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:508:16: '>>' where_expr
				{
				DebugLocation(508, 16);
				string_literal354=(IToken)Match(input,126,Follow._126_in_stmt_modify3943); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(string_literal354);

				DebugLocation(508, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3945);
				where_expr355=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr355.Tree);


				{
				// AST REWRITE
				// elements: lvalue, 126, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 508:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(508, 35);
					// SugarCpp.g:508:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(508, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(508, 46);
					adaptor.AddChild(root_1, stream_126.NextNode());
					DebugLocation(508, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(508, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:509:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 509:7: -> lvalue
				{
					DebugLocation(509, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:512:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt356 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(512, 1);
		try
		{
			// SugarCpp.g:513:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:513:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(513, 4);
			PushFollow(Follow._stmt_in_where_item3979);
			stmt356=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt356.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(514, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:516:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE357 = default(IToken);
		IToken INDENT358 = default(IToken);
		IToken NEWLINE359 = default(IToken);
		IToken string_literal360 = default(IToken);
		IToken NEWLINE362 = default(IToken);
		IToken DEDENT363 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken INDENT365 = default(IToken);
		IToken NEWLINE366 = default(IToken);
		IToken NEWLINE368 = default(IToken);
		IToken DEDENT369 = default(IToken);
		IToken NEWLINE370 = default(IToken);
		IToken DEDENT371 = default(IToken);
		IToken NEWLINE372 = default(IToken);
		IToken INDENT373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken DEDENT377 = default(IToken);
		IToken NEWLINE378 = default(IToken);
		IToken DEDENT379 = default(IToken);
		IToken string_literal380 = default(IToken);
		IToken NEWLINE381 = default(IToken);
		IToken INDENT382 = default(IToken);
		IToken NEWLINE383 = default(IToken);
		IToken NEWLINE385 = default(IToken);
		IToken DEDENT386 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item361 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item367 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item384 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree INDENT358_tree = default(CommonTree);
		CommonTree NEWLINE359_tree = default(CommonTree);
		CommonTree string_literal360_tree = default(CommonTree);
		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree DEDENT363_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree INDENT365_tree = default(CommonTree);
		CommonTree NEWLINE366_tree = default(CommonTree);
		CommonTree NEWLINE368_tree = default(CommonTree);
		CommonTree DEDENT369_tree = default(CommonTree);
		CommonTree NEWLINE370_tree = default(CommonTree);
		CommonTree DEDENT371_tree = default(CommonTree);
		CommonTree NEWLINE372_tree = default(CommonTree);
		CommonTree INDENT373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree DEDENT377_tree = default(CommonTree);
		CommonTree NEWLINE378_tree = default(CommonTree);
		CommonTree DEDENT379_tree = default(CommonTree);
		CommonTree string_literal380_tree = default(CommonTree);
		CommonTree NEWLINE381_tree = default(CommonTree);
		CommonTree INDENT382_tree = default(CommonTree);
		CommonTree NEWLINE383_tree = default(CommonTree);
		CommonTree NEWLINE385_tree = default(CommonTree);
		CommonTree DEDENT386_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(516, 1);
		try
		{
			// SugarCpp.g:517:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:517:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(517, 4);
			// SugarCpp.g:517:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:517:5: a= expr
			{
			DebugLocation(517, 6);
			PushFollow(Follow._expr_in_where_expr3993);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 517:12: -> $a
			{
				DebugLocation(517, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(517, 19);
			// SugarCpp.g:517:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt172=3;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			try
			{
				alt172 = dfa172.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:517:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(517, 21);
				// SugarCpp.g:517:21: ( NEWLINE )+
				int cnt153=0;
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:21: NEWLINE
						{
						DebugLocation(517, 21);
						NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4003); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE357);


						}
						break;

					default:
						if (cnt153 >= 1)
							goto loop153;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee153 = new EarlyExitException( 153, input );
						DebugRecognitionException(eee153);
						throw eee153;
					}
					cnt153++;
				}
				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(517, 30);
				INDENT358=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4006); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT358);

				DebugLocation(517, 37);
				// SugarCpp.g:517:37: ( NEWLINE )*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==NEWLINE))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:37: NEWLINE
						{
						DebugLocation(517, 37);
						NEWLINE359=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4008); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE359);


						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(517, 46);
				string_literal360=(IToken)Match(input,174,Follow._174_in_where_expr4011); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal360);

				DebugLocation(517, 54);
				// SugarCpp.g:517:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_0 = input.LA(1);

				if ((LA167_0==IDENT||LA167_0==85||LA167_0==90||LA167_0==92||LA167_0==94||(LA167_0>=96 && LA167_0<=97)||(LA167_0>=100 && LA167_0<=101)||LA167_0==130||LA167_0==142||(LA167_0>=146 && LA167_0<=148)||LA167_0==155||LA167_0==159||LA167_0==161||LA167_0==164||(LA167_0>=168 && LA167_0<=172)||LA167_0==175||LA167_0==180))
				{
					alt167 = 1;
				}
				else if ((LA167_0==NEWLINE))
				{
					alt167 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 167, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:517:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(517, 56);
					PushFollow(Follow._where_item_in_where_expr4015);
					where_item361=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item361.Tree);
					DebugLocation(517, 67);
					// SugarCpp.g:517:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt161=2;
					try { DebugEnterSubRule(161);
					try { DebugEnterDecision(161, false);
					try
					{
						alt161 = dfa161.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(161); }
					switch (alt161)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(517, 69);
						// SugarCpp.g:517:69: ( NEWLINE )*
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==NEWLINE))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch ( alt155 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:517:69: NEWLINE
								{
								DebugLocation(517, 69);
								NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4019); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE362);


								}
								break;

							default:
								goto loop155;
							}
						}

						loop155:
							;

						} finally { DebugExitSubRule(155); }

						DebugLocation(517, 78);
						DEDENT363=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4022); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT363);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 517:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(517, 88);
							// SugarCpp.g:517:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(517, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(517, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(517, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:518:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(518, 21);
						// SugarCpp.g:518:21: ( NEWLINE )+
						int cnt156=0;
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch (alt156)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:21: NEWLINE
								{
								DebugLocation(518, 21);
								NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4055); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE364);


								}
								break;

							default:
								if (cnt156 >= 1)
									goto loop156;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee156 = new EarlyExitException( 156, input );
								DebugRecognitionException(eee156);
								throw eee156;
							}
							cnt156++;
						}
						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(518, 30);
						INDENT365=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4058); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT365);

						DebugLocation(518, 37);
						// SugarCpp.g:518:37: ( NEWLINE )*
						try { DebugEnterSubRule(157);
						while (true)
						{
							int alt157=2;
							try { DebugEnterDecision(157, false);
							int LA157_0 = input.LA(1);

							if ((LA157_0==NEWLINE))
							{
								alt157 = 1;
							}


							} finally { DebugExitDecision(157); }
							switch ( alt157 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:37: NEWLINE
								{
								DebugLocation(518, 37);
								NEWLINE366=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4060); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE366);


								}
								break;

							default:
								goto loop157;
							}
						}

						loop157:
							;

						} finally { DebugExitSubRule(157); }

						DebugLocation(518, 46);
						// SugarCpp.g:518:46: ( where_item ( NEWLINE )+ )+
						int cnt159=0;
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==IDENT||LA159_0==85||LA159_0==90||LA159_0==92||LA159_0==94||(LA159_0>=96 && LA159_0<=97)||(LA159_0>=100 && LA159_0<=101)||LA159_0==130||LA159_0==142||(LA159_0>=146 && LA159_0<=148)||LA159_0==155||LA159_0==159||LA159_0==161||LA159_0==164||(LA159_0>=168 && LA159_0<=172)||LA159_0==175||LA159_0==180))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch (alt159)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:47: where_item ( NEWLINE )+
								{
								DebugLocation(518, 47);
								PushFollow(Follow._where_item_in_where_expr4064);
								where_item367=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item367.Tree);
								DebugLocation(518, 58);
								// SugarCpp.g:518:58: ( NEWLINE )+
								int cnt158=0;
								try { DebugEnterSubRule(158);
								while (true)
								{
									int alt158=2;
									try { DebugEnterDecision(158, false);
									int LA158_0 = input.LA(1);

									if ((LA158_0==NEWLINE))
									{
										alt158 = 1;
									}


									} finally { DebugExitDecision(158); }
									switch (alt158)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:518:58: NEWLINE
										{
										DebugLocation(518, 58);
										NEWLINE368=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4066); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE368);


										}
										break;

									default:
										if (cnt158 >= 1)
											goto loop158;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee158 = new EarlyExitException( 158, input );
										DebugRecognitionException(eee158);
										throw eee158;
									}
									cnt158++;
								}
								loop158:
									;

								} finally { DebugExitSubRule(158); }


								}
								break;

							default:
								if (cnt159 >= 1)
									goto loop159;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee159 = new EarlyExitException( 159, input );
								DebugRecognitionException(eee159);
								throw eee159;
							}
							cnt159++;
						}
						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(518, 69);
						DEDENT369=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4071); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT369);

						DebugLocation(518, 76);
						// SugarCpp.g:518:76: ( NEWLINE )*
						try { DebugEnterSubRule(160);
						while (true)
						{
							int alt160=2;
							try { DebugEnterDecision(160, false);
							int LA160_0 = input.LA(1);

							if ((LA160_0==NEWLINE))
							{
								alt160 = 1;
							}


							} finally { DebugExitDecision(160); }
							switch ( alt160 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:518:76: NEWLINE
								{
								DebugLocation(518, 76);
								NEWLINE370=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4073); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE370);


								}
								break;

							default:
								goto loop160;
							}
						}

						loop160:
							;

						} finally { DebugExitSubRule(160); }

						DebugLocation(518, 85);
						DEDENT371=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4076); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT371);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 518:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(518, 95);
							// SugarCpp.g:518:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(518, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(518, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(518, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(518, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(161); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:520:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(520, 17);
					// SugarCpp.g:520:17: ( NEWLINE )+
					int cnt162=0;
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==NEWLINE))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch (alt162)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:520:17: NEWLINE
							{
							DebugLocation(520, 17);
							NEWLINE372=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4126); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE372);


							}
							break;

						default:
							if (cnt162 >= 1)
								goto loop162;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee162 = new EarlyExitException( 162, input );
							DebugRecognitionException(eee162);
							throw eee162;
						}
						cnt162++;
					}
					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(520, 26);
					INDENT373=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4129); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT373);

					DebugLocation(520, 33);
					// SugarCpp.g:520:33: ( NEWLINE )*
					try { DebugEnterSubRule(163);
					while (true)
					{
						int alt163=2;
						try { DebugEnterDecision(163, false);
						int LA163_0 = input.LA(1);

						if ((LA163_0==NEWLINE))
						{
							alt163 = 1;
						}


						} finally { DebugExitDecision(163); }
						switch ( alt163 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:520:33: NEWLINE
							{
							DebugLocation(520, 33);
							NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4131); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


							}
							break;

						default:
							goto loop163;
						}
					}

					loop163:
						;

					} finally { DebugExitSubRule(163); }

					DebugLocation(520, 42);
					// SugarCpp.g:520:42: ( where_item ( NEWLINE )+ )+
					int cnt165=0;
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==IDENT||LA165_0==85||LA165_0==90||LA165_0==92||LA165_0==94||(LA165_0>=96 && LA165_0<=97)||(LA165_0>=100 && LA165_0<=101)||LA165_0==130||LA165_0==142||(LA165_0>=146 && LA165_0<=148)||LA165_0==155||LA165_0==159||LA165_0==161||LA165_0==164||(LA165_0>=168 && LA165_0<=172)||LA165_0==175||LA165_0==180))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch (alt165)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:520:43: where_item ( NEWLINE )+
							{
							DebugLocation(520, 43);
							PushFollow(Follow._where_item_in_where_expr4135);
							where_item375=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item375.Tree);
							DebugLocation(520, 54);
							// SugarCpp.g:520:54: ( NEWLINE )+
							int cnt164=0;
							try { DebugEnterSubRule(164);
							while (true)
							{
								int alt164=2;
								try { DebugEnterDecision(164, false);
								int LA164_0 = input.LA(1);

								if ((LA164_0==NEWLINE))
								{
									alt164 = 1;
								}


								} finally { DebugExitDecision(164); }
								switch (alt164)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:520:54: NEWLINE
									{
									DebugLocation(520, 54);
									NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4137); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


									}
									break;

								default:
									if (cnt164 >= 1)
										goto loop164;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee164 = new EarlyExitException( 164, input );
									DebugRecognitionException(eee164);
									throw eee164;
								}
								cnt164++;
							}
							loop164:
								;

							} finally { DebugExitSubRule(164); }


							}
							break;

						default:
							if (cnt165 >= 1)
								goto loop165;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee165 = new EarlyExitException( 165, input );
							DebugRecognitionException(eee165);
							throw eee165;
						}
						cnt165++;
					}
					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(520, 65);
					DEDENT377=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4142); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT377);

					DebugLocation(520, 72);
					// SugarCpp.g:520:72: ( NEWLINE )*
					try { DebugEnterSubRule(166);
					while (true)
					{
						int alt166=2;
						try { DebugEnterDecision(166, false);
						int LA166_0 = input.LA(1);

						if ((LA166_0==NEWLINE))
						{
							alt166 = 1;
						}


						} finally { DebugExitDecision(166); }
						switch ( alt166 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:520:72: NEWLINE
							{
							DebugLocation(520, 72);
							NEWLINE378=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4144); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE378);


							}
							break;

						default:
							goto loop166;
						}
					}

					loop166:
						;

					} finally { DebugExitSubRule(166); }

					DebugLocation(520, 81);
					DEDENT379=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4147); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT379);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 520:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(520, 91);
						// SugarCpp.g:520:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(520, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(520, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(520, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(520, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(167); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:522:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(522, 9);
				string_literal380=(IToken)Match(input,174,Follow._174_in_where_expr4185); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal380);

				DebugLocation(522, 17);
				// SugarCpp.g:522:17: ( NEWLINE )+
				int cnt168=0;
				try { DebugEnterSubRule(168);
				while (true)
				{
					int alt168=2;
					try { DebugEnterDecision(168, false);
					int LA168_0 = input.LA(1);

					if ((LA168_0==NEWLINE))
					{
						alt168 = 1;
					}


					} finally { DebugExitDecision(168); }
					switch (alt168)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:17: NEWLINE
						{
						DebugLocation(522, 17);
						NEWLINE381=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4187); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE381);


						}
						break;

					default:
						if (cnt168 >= 1)
							goto loop168;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee168 = new EarlyExitException( 168, input );
						DebugRecognitionException(eee168);
						throw eee168;
					}
					cnt168++;
				}
				loop168:
					;

				} finally { DebugExitSubRule(168); }

				DebugLocation(522, 26);
				INDENT382=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT382);

				DebugLocation(522, 33);
				// SugarCpp.g:522:33: ( NEWLINE )*
				try { DebugEnterSubRule(169);
				while (true)
				{
					int alt169=2;
					try { DebugEnterDecision(169, false);
					int LA169_0 = input.LA(1);

					if ((LA169_0==NEWLINE))
					{
						alt169 = 1;
					}


					} finally { DebugExitDecision(169); }
					switch ( alt169 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:33: NEWLINE
						{
						DebugLocation(522, 33);
						NEWLINE383=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4192); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE383);


						}
						break;

					default:
						goto loop169;
					}
				}

				loop169:
					;

				} finally { DebugExitSubRule(169); }

				DebugLocation(522, 42);
				// SugarCpp.g:522:42: ( where_item ( NEWLINE )+ )+
				int cnt171=0;
				try { DebugEnterSubRule(171);
				while (true)
				{
					int alt171=2;
					try { DebugEnterDecision(171, false);
					int LA171_0 = input.LA(1);

					if ((LA171_0==IDENT||LA171_0==85||LA171_0==90||LA171_0==92||LA171_0==94||(LA171_0>=96 && LA171_0<=97)||(LA171_0>=100 && LA171_0<=101)||LA171_0==130||LA171_0==142||(LA171_0>=146 && LA171_0<=148)||LA171_0==155||LA171_0==159||LA171_0==161||LA171_0==164||(LA171_0>=168 && LA171_0<=172)||LA171_0==175||LA171_0==180))
					{
						alt171 = 1;
					}


					} finally { DebugExitDecision(171); }
					switch (alt171)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:43: where_item ( NEWLINE )+
						{
						DebugLocation(522, 43);
						PushFollow(Follow._where_item_in_where_expr4196);
						where_item384=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item384.Tree);
						DebugLocation(522, 54);
						// SugarCpp.g:522:54: ( NEWLINE )+
						int cnt170=0;
						try { DebugEnterSubRule(170);
						while (true)
						{
							int alt170=2;
							try { DebugEnterDecision(170, false);
							int LA170_0 = input.LA(1);

							if ((LA170_0==NEWLINE))
							{
								alt170 = 1;
							}


							} finally { DebugExitDecision(170); }
							switch (alt170)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:522:54: NEWLINE
								{
								DebugLocation(522, 54);
								NEWLINE385=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4198); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE385);


								}
								break;

							default:
								if (cnt170 >= 1)
									goto loop170;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee170 = new EarlyExitException( 170, input );
								DebugRecognitionException(eee170);
								throw eee170;
							}
							cnt170++;
						}
						loop170:
							;

						} finally { DebugExitSubRule(170); }


						}
						break;

					default:
						if (cnt171 >= 1)
							goto loop171;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee171 = new EarlyExitException( 171, input );
						DebugRecognitionException(eee171);
						throw eee171;
					}
					cnt171++;
				}
				loop171:
					;

				} finally { DebugExitSubRule(171); }

				DebugLocation(522, 65);
				DEDENT386=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4203); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT386);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 522:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(522, 75);
					// SugarCpp.g:522:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(522, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(522, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(522, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(522, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:523:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 523:15: -> expr
				{
					DebugLocation(523, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:527:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal387 = default(IToken);
		IToken string_literal389 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken INDENT392 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken NEWLINE395 = default(IToken);
		IToken DEDENT396 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken INDENT399 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken NEWLINE402 = default(IToken);
		IToken string_literal403 = default(IToken);
		IToken NEWLINE405 = default(IToken);
		IToken DEDENT406 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr397 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr404 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal387_tree = default(CommonTree);
		CommonTree string_literal389_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree INDENT392_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree NEWLINE395_tree = default(CommonTree);
		CommonTree DEDENT396_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree INDENT399_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree NEWLINE402_tree = default(CommonTree);
		CommonTree string_literal403_tree = default(CommonTree);
		CommonTree NEWLINE405_tree = default(CommonTree);
		CommonTree DEDENT406_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(527, 1);
		try
		{
			// SugarCpp.g:528:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:528:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(528, 4);
			string_literal387=(IToken)Match(input,153,Follow._153_in_let_expr4261); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_153.Add(string_literal387);

			DebugLocation(528, 10);
			PushFollow(Follow._where_item_in_let_expr4263);
			where_item388=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item388.Tree);
			DebugLocation(528, 21);
			// SugarCpp.g:528:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_0 = input.LA(1);

			if ((LA183_0==150))
			{
				alt183 = 1;
			}
			else if ((LA183_0==NEWLINE))
			{
				alt183 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 183, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:528:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(528, 23);
				string_literal389=(IToken)Match(input,150,Follow._150_in_let_expr4267); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal389);

				DebugLocation(528, 28);
				// SugarCpp.g:528:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt177=2;
				try { DebugEnterSubRule(177);
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==IDENT||LA177_0==NUMBER||LA177_0==STRING||LA177_0==85||LA177_0==90||LA177_0==92||LA177_0==94||(LA177_0>=96 && LA177_0<=97)||(LA177_0>=100 && LA177_0<=101)||(LA177_0>=130 && LA177_0<=131)||LA177_0==153||LA177_0==156||(LA177_0>=158 && LA177_0<=159)||LA177_0==180))
				{
					alt177 = 1;
				}
				else if ((LA177_0==NEWLINE))
				{
					alt177 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 177, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(177); }
				switch (alt177)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:528:30: expr
					{
					DebugLocation(528, 30);
					PushFollow(Follow._expr_in_let_expr4271);
					expr390=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr390.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 528:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(528, 38);
						// SugarCpp.g:528:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(528, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(528, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(528, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(528, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:529:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(529, 12);
					// SugarCpp.g:529:12: ( NEWLINE )+
					int cnt173=0;
					try { DebugEnterSubRule(173);
					while (true)
					{
						int alt173=2;
						try { DebugEnterDecision(173, false);
						int LA173_0 = input.LA(1);

						if ((LA173_0==NEWLINE))
						{
							alt173 = 1;
						}


						} finally { DebugExitDecision(173); }
						switch (alt173)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:529:12: NEWLINE
							{
							DebugLocation(529, 12);
							NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4295); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE391);


							}
							break;

						default:
							if (cnt173 >= 1)
								goto loop173;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee173 = new EarlyExitException( 173, input );
							DebugRecognitionException(eee173);
							throw eee173;
						}
						cnt173++;
					}
					loop173:
						;

					} finally { DebugExitSubRule(173); }

					DebugLocation(529, 21);
					// SugarCpp.g:529:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt176=2;
					try { DebugEnterSubRule(176);
					try { DebugEnterDecision(176, false);
					int LA176_0 = input.LA(1);

					if ((LA176_0==INDENT))
					{
						alt176 = 1;
					}
					else if ((LA176_0==IDENT||LA176_0==NUMBER||LA176_0==STRING||LA176_0==85||LA176_0==90||LA176_0==92||LA176_0==94||(LA176_0>=96 && LA176_0<=97)||(LA176_0>=100 && LA176_0<=101)||(LA176_0>=130 && LA176_0<=131)||LA176_0==153||LA176_0==156||(LA176_0>=158 && LA176_0<=159)||LA176_0==180))
					{
						alt176 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 176, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(176); }
					switch (alt176)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:529:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(529, 23);
						INDENT392=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4300); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT392);

						DebugLocation(529, 30);
						// SugarCpp.g:529:30: ( NEWLINE )*
						try { DebugEnterSubRule(174);
						while (true)
						{
							int alt174=2;
							try { DebugEnterDecision(174, false);
							int LA174_0 = input.LA(1);

							if ((LA174_0==NEWLINE))
							{
								alt174 = 1;
							}


							} finally { DebugExitDecision(174); }
							switch ( alt174 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:529:30: NEWLINE
								{
								DebugLocation(529, 30);
								NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4302); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE393);


								}
								break;

							default:
								goto loop174;
							}
						}

						loop174:
							;

						} finally { DebugExitSubRule(174); }

						DebugLocation(529, 39);
						PushFollow(Follow._expr_in_let_expr4305);
						expr394=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr394.Tree);
						DebugLocation(529, 44);
						// SugarCpp.g:529:44: ( NEWLINE )+
						int cnt175=0;
						try { DebugEnterSubRule(175);
						while (true)
						{
							int alt175=2;
							try { DebugEnterDecision(175, false);
							int LA175_0 = input.LA(1);

							if ((LA175_0==NEWLINE))
							{
								alt175 = 1;
							}


							} finally { DebugExitDecision(175); }
							switch (alt175)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:529:44: NEWLINE
								{
								DebugLocation(529, 44);
								NEWLINE395=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4307); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE395);


								}
								break;

							default:
								if (cnt175 >= 1)
									goto loop175;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee175 = new EarlyExitException( 175, input );
								DebugRecognitionException(eee175);
								throw eee175;
							}
							cnt175++;
						}
						loop175:
							;

						} finally { DebugExitSubRule(175); }

						DebugLocation(529, 53);
						DEDENT396=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4310); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT396);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 529:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(529, 63);
							// SugarCpp.g:529:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(529, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(529, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(529, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(529, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:530:14: expr
						{
						DebugLocation(530, 14);
						PushFollow(Follow._expr_in_let_expr4336);
						expr397=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr397.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 530:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(530, 22);
							// SugarCpp.g:530:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(530, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(530, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(530, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(530, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(176); }


					}
					break;

				}
				} finally { DebugExitSubRule(177); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:533:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(533, 11);
				// SugarCpp.g:533:11: ( NEWLINE )+
				int cnt178=0;
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==NEWLINE))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:533:11: NEWLINE
						{
						DebugLocation(533, 11);
						NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4383); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE398);


						}
						break;

					default:
						if (cnt178 >= 1)
							goto loop178;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee178 = new EarlyExitException( 178, input );
						DebugRecognitionException(eee178);
						throw eee178;
					}
					cnt178++;
				}
				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(533, 20);
				INDENT399=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4386); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT399);

				DebugLocation(533, 27);
				// SugarCpp.g:533:27: ( NEWLINE )*
				try { DebugEnterSubRule(179);
				while (true)
				{
					int alt179=2;
					try { DebugEnterDecision(179, false);
					int LA179_0 = input.LA(1);

					if ((LA179_0==NEWLINE))
					{
						alt179 = 1;
					}


					} finally { DebugExitDecision(179); }
					switch ( alt179 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:533:27: NEWLINE
						{
						DebugLocation(533, 27);
						NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4388); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE400);


						}
						break;

					default:
						goto loop179;
					}
				}

				loop179:
					;

				} finally { DebugExitSubRule(179); }

				DebugLocation(533, 36);
				// SugarCpp.g:533:36: ( where_item ( NEWLINE )+ )+
				int cnt181=0;
				try { DebugEnterSubRule(181);
				while (true)
				{
					int alt181=2;
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==IDENT||LA181_0==85||LA181_0==90||LA181_0==92||LA181_0==94||(LA181_0>=96 && LA181_0<=97)||(LA181_0>=100 && LA181_0<=101)||LA181_0==130||LA181_0==142||(LA181_0>=146 && LA181_0<=148)||LA181_0==155||LA181_0==159||LA181_0==161||LA181_0==164||(LA181_0>=168 && LA181_0<=172)||LA181_0==175||LA181_0==180))
					{
						alt181 = 1;
					}


					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:533:37: where_item ( NEWLINE )+
						{
						DebugLocation(533, 37);
						PushFollow(Follow._where_item_in_let_expr4392);
						where_item401=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item401.Tree);
						DebugLocation(533, 48);
						// SugarCpp.g:533:48: ( NEWLINE )+
						int cnt180=0;
						try { DebugEnterSubRule(180);
						while (true)
						{
							int alt180=2;
							try { DebugEnterDecision(180, false);
							int LA180_0 = input.LA(1);

							if ((LA180_0==NEWLINE))
							{
								alt180 = 1;
							}


							} finally { DebugExitDecision(180); }
							switch (alt180)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:533:48: NEWLINE
								{
								DebugLocation(533, 48);
								NEWLINE402=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4394); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE402);


								}
								break;

							default:
								if (cnt180 >= 1)
									goto loop180;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee180 = new EarlyExitException( 180, input );
								DebugRecognitionException(eee180);
								throw eee180;
							}
							cnt180++;
						}
						loop180:
							;

						} finally { DebugExitSubRule(180); }


						}
						break;

					default:
						if (cnt181 >= 1)
							goto loop181;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee181 = new EarlyExitException( 181, input );
						DebugRecognitionException(eee181);
						throw eee181;
					}
					cnt181++;
				}
				loop181:
					;

				} finally { DebugExitSubRule(181); }

				DebugLocation(533, 59);
				string_literal403=(IToken)Match(input,150,Follow._150_in_let_expr4399); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal403);

				DebugLocation(533, 64);
				PushFollow(Follow._expr_in_let_expr4401);
				expr404=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr404.Tree);
				DebugLocation(533, 69);
				// SugarCpp.g:533:69: ( NEWLINE )+
				int cnt182=0;
				try { DebugEnterSubRule(182);
				while (true)
				{
					int alt182=2;
					try { DebugEnterDecision(182, false);
					int LA182_0 = input.LA(1);

					if ((LA182_0==NEWLINE))
					{
						alt182 = 1;
					}


					} finally { DebugExitDecision(182); }
					switch (alt182)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:533:69: NEWLINE
						{
						DebugLocation(533, 69);
						NEWLINE405=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4403); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE405);


						}
						break;

					default:
						if (cnt182 >= 1)
							goto loop182;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee182 = new EarlyExitException( 182, input );
						DebugRecognitionException(eee182);
						throw eee182;
					}
					cnt182++;
				}
				loop182:
					;

				} finally { DebugExitSubRule(182); }

				DebugLocation(533, 78);
				DEDENT406=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT406);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 533:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(533, 88);
					// SugarCpp.g:533:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(533, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(533, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(533, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(533, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(183); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:537:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal407 = default(IToken);
		IToken string_literal409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr408 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal407_tree = default(CommonTree);
		CommonTree string_literal409_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(537, 1);
		try
		{
			// SugarCpp.g:538:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:538:4: '|' expr '=>' where_expr
			{
			DebugLocation(538, 4);
			char_literal407=(IToken)Match(input,176,Follow._176_in_match_item4438); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_176.Add(char_literal407);

			DebugLocation(538, 8);
			PushFollow(Follow._expr_in_match_item4440);
			expr408=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr408.Tree);
			DebugLocation(538, 13);
			string_literal409=(IToken)Match(input,123,Follow._123_in_match_item4442); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal409);

			DebugLocation(538, 18);
			PushFollow(Follow._where_expr_in_match_item4444);
			where_expr410=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr410.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 538:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(538, 32);
				// SugarCpp.g:538:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(538, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(538, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(538, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(539, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:541:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal411 = default(IToken);
		IToken NEWLINE413 = default(IToken);
		IToken INDENT414 = default(IToken);
		IToken NEWLINE415 = default(IToken);
		IToken NEWLINE417 = default(IToken);
		IToken DEDENT418 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item416 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal411_tree = default(CommonTree);
		CommonTree NEWLINE413_tree = default(CommonTree);
		CommonTree INDENT414_tree = default(CommonTree);
		CommonTree NEWLINE415_tree = default(CommonTree);
		CommonTree NEWLINE417_tree = default(CommonTree);
		CommonTree DEDENT418_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(541, 1);
		try
		{
			// SugarCpp.g:542:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:542:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(542, 4);
			string_literal411=(IToken)Match(input,156,Follow._156_in_match_expr4465); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_156.Add(string_literal411);

			DebugLocation(542, 12);
			// SugarCpp.g:542:12: ( expr )?
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			int LA184_0 = input.LA(1);

			if ((LA184_0==IDENT||LA184_0==NUMBER||LA184_0==STRING||LA184_0==85||LA184_0==90||LA184_0==92||LA184_0==94||(LA184_0>=96 && LA184_0<=97)||(LA184_0>=100 && LA184_0<=101)||(LA184_0>=130 && LA184_0<=131)||LA184_0==153||LA184_0==156||(LA184_0>=158 && LA184_0<=159)||LA184_0==180))
			{
				alt184 = 1;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:542:12: expr
				{
				DebugLocation(542, 12);
				PushFollow(Follow._expr_in_match_expr4467);
				expr412=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr412.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(184); }

			DebugLocation(542, 18);
			// SugarCpp.g:542:18: ( NEWLINE )+
			int cnt185=0;
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==NEWLINE))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:542:18: NEWLINE
					{
					DebugLocation(542, 18);
					NEWLINE413=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4470); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE413);


					}
					break;

				default:
					if (cnt185 >= 1)
						goto loop185;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee185 = new EarlyExitException( 185, input );
					DebugRecognitionException(eee185);
					throw eee185;
				}
				cnt185++;
			}
			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(542, 27);
			INDENT414=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4473); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT414);

			DebugLocation(542, 34);
			// SugarCpp.g:542:34: ( NEWLINE )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==NEWLINE))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:542:34: NEWLINE
					{
					DebugLocation(542, 34);
					NEWLINE415=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4475); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE415);


					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }

			DebugLocation(542, 43);
			// SugarCpp.g:542:43: ( match_item ( NEWLINE )+ )+
			int cnt188=0;
			try { DebugEnterSubRule(188);
			while (true)
			{
				int alt188=2;
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==176))
				{
					alt188 = 1;
				}


				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:542:44: match_item ( NEWLINE )+
					{
					DebugLocation(542, 44);
					PushFollow(Follow._match_item_in_match_expr4479);
					match_item416=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item416.Tree);
					DebugLocation(542, 55);
					// SugarCpp.g:542:55: ( NEWLINE )+
					int cnt187=0;
					try { DebugEnterSubRule(187);
					while (true)
					{
						int alt187=2;
						try { DebugEnterDecision(187, false);
						int LA187_0 = input.LA(1);

						if ((LA187_0==NEWLINE))
						{
							alt187 = 1;
						}


						} finally { DebugExitDecision(187); }
						switch (alt187)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:542:55: NEWLINE
							{
							DebugLocation(542, 55);
							NEWLINE417=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4481); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE417);


							}
							break;

						default:
							if (cnt187 >= 1)
								goto loop187;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee187 = new EarlyExitException( 187, input );
							DebugRecognitionException(eee187);
							throw eee187;
						}
						cnt187++;
					}
					loop187:
						;

					} finally { DebugExitSubRule(187); }


					}
					break;

				default:
					if (cnt188 >= 1)
						goto loop188;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee188 = new EarlyExitException( 188, input );
					DebugRecognitionException(eee188);
					throw eee188;
				}
				cnt188++;
			}
			loop188:
				;

			} finally { DebugExitSubRule(188); }

			DebugLocation(542, 66);
			DEDENT418=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4486); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT418);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 542:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(542, 76);
				// SugarCpp.g:542:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(542, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(542, 89);
				// SugarCpp.g:542:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(542, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(542, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(542, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:545:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr421 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(545, 1);
		try
		{
			// SugarCpp.g:546:2: ( feed_expr | match_expr | let_expr )
			int alt189=3;
			try { DebugEnterDecision(189, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 85:
			case 90:
			case 92:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 130:
			case 131:
			case 158:
			case 159:
			case 180:
				{
				alt189 = 1;
				}
				break;
			case 156:
				{
				alt189 = 2;
				}
				break;
			case 153:
				{
				alt189 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:546:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(546, 4);
				PushFollow(Follow._feed_expr_in_expr4509);
				feed_expr419=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr419.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:547:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(547, 4);
				PushFollow(Follow._match_expr_in_expr4514);
				match_expr420=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr420.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:548:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(548, 4);
				PushFollow(Follow._let_expr_in_expr4519);
				let_expr421=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr421.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:551:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 61);
		TraceIn("feed_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal422 = default(IToken);
		IToken string_literal424 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr425 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr426 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal422_tree = default(CommonTree);
		CommonTree string_literal424_tree = default(CommonTree);
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(551, 1);
		try
		{
			// SugarCpp.g:552:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt191=2;
			try { DebugEnterDecision(191, false);
			switch (input.LA(1))
			{
			case 92:
				{
				int LA191_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 159:
			case 180:
				{
				int LA191_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 158:
				{
				int LA191_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA191_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA191_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA191_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA191_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt191 = 1;
				}
				else if ((true))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				alt191 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:552:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(552, 36);
				// SugarCpp.g:552:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:552:37: a= modify_expr
				{
				DebugLocation(552, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4548);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 552:51: -> $a
				{
					DebugLocation(552, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(552, 58);
				// SugarCpp.g:552:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt190=2;
				try { DebugEnterSubRule(190);
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==119))
				{
					alt190 = 1;
				}
				else if ((LA190_0==178))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:552:60: '<|' list_expr
					{
					DebugLocation(552, 60);
					string_literal422=(IToken)Match(input,119,Follow._119_in_feed_expr4558); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_119.Add(string_literal422);

					DebugLocation(552, 65);
					PushFollow(Follow._list_expr_in_feed_expr4560);
					list_expr423=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr423.Tree);


					{
					// AST REWRITE
					// elements: list_expr, feed_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 552:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(552, 78);
						// SugarCpp.g:552:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(552, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(552, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(552, 101);
						// SugarCpp.g:552:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(552, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(552, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:553:18: '|>' list_expr
					{
					DebugLocation(553, 18);
					string_literal424=(IToken)Match(input,178,Follow._178_in_feed_expr4594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_178.Add(string_literal424);

					DebugLocation(553, 23);
					PushFollow(Follow._list_expr_in_feed_expr4596);
					list_expr425=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr425.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 553:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(553, 36);
						// SugarCpp.g:553:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(553, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(553, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(553, 58);
						// SugarCpp.g:553:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(553, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(553, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(190); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:555:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(555, 4);
				PushFollow(Follow._list_expr_in_feed_expr4633);
				list_expr426=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr426.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 61);
			LeaveRule("feed_expr", 61);
			LeaveRule_feed_expr();
		}
		DebugLocation(556, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:558:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 62);
		TraceIn("list_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal427 = default(IToken);
		IToken string_literal429 = default(IToken);
		IToken char_literal431 = default(IToken);
		IToken char_literal433 = default(IToken);
		IToken char_literal434 = default(IToken);
		IToken char_literal436 = default(IToken);
		IToken char_literal437 = default(IToken);
		IToken NEWLINE438 = default(IToken);
		IToken INDENT439 = default(IToken);
		IToken DEDENT440 = default(IToken);
		IToken char_literal442 = default(IToken);
		IToken NEWLINE443 = default(IToken);
		IToken INDENT444 = default(IToken);
		IToken DEDENT445 = default(IToken);
		IToken char_literal447 = default(IToken);
		IToken NEWLINE448 = default(IToken);
		IToken INDENT449 = default(IToken);
		IToken DEDENT450 = default(IToken);
		IToken char_literal451 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr428 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr446 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr452 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal427_tree = default(CommonTree);
		CommonTree string_literal429_tree = default(CommonTree);
		CommonTree char_literal431_tree = default(CommonTree);
		CommonTree char_literal433_tree = default(CommonTree);
		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree char_literal436_tree = default(CommonTree);
		CommonTree char_literal437_tree = default(CommonTree);
		CommonTree NEWLINE438_tree = default(CommonTree);
		CommonTree INDENT439_tree = default(CommonTree);
		CommonTree DEDENT440_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		CommonTree NEWLINE443_tree = default(CommonTree);
		CommonTree INDENT444_tree = default(CommonTree);
		CommonTree DEDENT445_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree NEWLINE448_tree = default(CommonTree);
		CommonTree INDENT449_tree = default(CommonTree);
		CommonTree DEDENT450_tree = default(CommonTree);
		CommonTree char_literal451_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(558, 1);
		try
		{
			// SugarCpp.g:559:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt198=3;
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==131))
			{
				int LA198_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt198 = 1;
				}
				else if ((true))
				{
					alt198 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 198, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA198_0==IDENT||LA198_0==NUMBER||LA198_0==STRING||LA198_0==85||LA198_0==90||LA198_0==92||LA198_0==94||(LA198_0>=96 && LA198_0<=97)||(LA198_0>=100 && LA198_0<=101)||LA198_0==130||(LA198_0>=158 && LA198_0<=159)||LA198_0==180))
			{
				alt198 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 198, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:559:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(559, 29);
				char_literal427=(IToken)Match(input,131,Follow._131_in_list_expr4654); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal427);

				DebugLocation(559, 33);
				PushFollow(Follow._feed_expr_in_list_expr4656);
				feed_expr428=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr428.Tree);
				DebugLocation(559, 43);
				string_literal429=(IToken)Match(input,147,Follow._147_in_list_expr4658); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal429);

				DebugLocation(559, 49);
				PushFollow(Follow._for_item_in_list_expr4660);
				for_item430=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item430.Tree);
				DebugLocation(559, 58);
				// SugarCpp.g:559:58: ( ',' for_item )*
				try { DebugEnterSubRule(192);
				while (true)
				{
					int alt192=2;
					try { DebugEnterDecision(192, false);
					int LA192_0 = input.LA(1);

					if ((LA192_0==99))
					{
						alt192 = 1;
					}


					} finally { DebugExitDecision(192); }
					switch ( alt192 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:559:59: ',' for_item
						{
						DebugLocation(559, 59);
						char_literal431=(IToken)Match(input,99,Follow._99_in_list_expr4663); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal431);

						DebugLocation(559, 63);
						PushFollow(Follow._for_item_in_list_expr4665);
						for_item432=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item432.Tree);

						}
						break;

					default:
						goto loop192;
					}
				}

				loop192:
					;

				} finally { DebugExitSubRule(192); }

				DebugLocation(559, 74);
				char_literal433=(IToken)Match(input,132,Follow._132_in_list_expr4669); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal433);

				DebugLocation(559, 78);
				char_literal434=(IToken)Match(input,110,Follow._110_in_list_expr4671); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal434);

				DebugLocation(559, 82);
				PushFollow(Follow._type_name_in_list_expr4673);
				type_name435=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name435.Tree);


				{
				// AST REWRITE
				// elements: feed_expr, for_item, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 559:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(559, 96);
					// SugarCpp.g:559:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(559, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(559, 119);
					// SugarCpp.g:559:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(559, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(559, 130);
					// SugarCpp.g:559:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(559, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(559, 141);
					// SugarCpp.g:559:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(559, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(559, 151);
					// SugarCpp.g:559:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(559, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(559, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:560:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(560, 4);
				char_literal436=(IToken)Match(input,131,Follow._131_in_list_expr4701); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal436);

				DebugLocation(560, 8);
				// SugarCpp.g:560:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				try
				{
					alt196 = dfa196.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:560:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(560, 9);
					// SugarCpp.g:560:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(193);
					while (true)
					{
						int alt193=5;
						try { DebugEnterDecision(193, false);
						switch (input.LA(1))
						{
						case 99:
							{
							alt193 = 1;
							}
							break;
						case NEWLINE:
							{
							alt193 = 2;
							}
							break;
						case INDENT:
							{
							alt193 = 3;
							}
							break;
						case DEDENT:
							{
							alt193 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(193); }
						switch ( alt193 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:560:10: ','
							{
							DebugLocation(560, 10);
							char_literal437=(IToken)Match(input,99,Follow._99_in_list_expr4705); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal437);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:560:16: NEWLINE
							{
							DebugLocation(560, 16);
							NEWLINE438=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4709); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE438);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:560:26: INDENT
							{
							DebugLocation(560, 26);
							INDENT439=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4713); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT439);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:560:35: DEDENT
							{
							DebugLocation(560, 35);
							DEDENT440=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4717); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT440);


							}
							break;

						default:
							goto loop193;
						}
					}

					loop193:
						;

					} finally { DebugExitSubRule(193); }

					DebugLocation(560, 44);
					PushFollow(Follow._feed_expr_in_list_expr4721);
					feed_expr441=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr441.Tree);
					DebugLocation(560, 54);
					// SugarCpp.g:560:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(195);
					while (true)
					{
						int alt195=2;
						try { DebugEnterDecision(195, false);
						try
						{
							alt195 = dfa195.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(195); }
						switch ( alt195 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:560:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(560, 55);
							// SugarCpp.g:560:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt194=0;
							try { DebugEnterSubRule(194);
							while (true)
							{
								int alt194=5;
								try { DebugEnterDecision(194, false);
								switch (input.LA(1))
								{
								case 99:
									{
									alt194 = 1;
									}
									break;
								case NEWLINE:
									{
									alt194 = 2;
									}
									break;
								case INDENT:
									{
									alt194 = 3;
									}
									break;
								case DEDENT:
									{
									alt194 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(194); }
								switch (alt194)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:560:56: ','
									{
									DebugLocation(560, 56);
									char_literal442=(IToken)Match(input,99,Follow._99_in_list_expr4725); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal442);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:560:62: NEWLINE
									{
									DebugLocation(560, 62);
									NEWLINE443=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4729); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE443);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:560:72: INDENT
									{
									DebugLocation(560, 72);
									INDENT444=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4733); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT444);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:560:81: DEDENT
									{
									DebugLocation(560, 81);
									DEDENT445=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4737); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT445);


									}
									break;

								default:
									if (cnt194 >= 1)
										goto loop194;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee194 = new EarlyExitException( 194, input );
									DebugRecognitionException(eee194);
									throw eee194;
								}
								cnt194++;
							}
							loop194:
								;

							} finally { DebugExitSubRule(194); }

							DebugLocation(560, 90);
							PushFollow(Follow._feed_expr_in_list_expr4741);
							feed_expr446=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr446.Tree);

							}
							break;

						default:
							goto loop195;
						}
					}

					loop195:
						;

					} finally { DebugExitSubRule(195); }


					}
					break;

				}
				} finally { DebugExitSubRule(196); }

				DebugLocation(560, 104);
				// SugarCpp.g:560:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(197);
				while (true)
				{
					int alt197=5;
					try { DebugEnterDecision(197, false);
					switch (input.LA(1))
					{
					case 99:
						{
						alt197 = 1;
						}
						break;
					case NEWLINE:
						{
						alt197 = 2;
						}
						break;
					case INDENT:
						{
						alt197 = 3;
						}
						break;
					case DEDENT:
						{
						alt197 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(197); }
					switch ( alt197 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:560:105: ','
						{
						DebugLocation(560, 105);
						char_literal447=(IToken)Match(input,99,Follow._99_in_list_expr4748); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal447);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:560:111: NEWLINE
						{
						DebugLocation(560, 111);
						NEWLINE448=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4752); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE448);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:560:121: INDENT
						{
						DebugLocation(560, 121);
						INDENT449=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4756); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT449);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:560:130: DEDENT
						{
						DebugLocation(560, 130);
						DEDENT450=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4760); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT450);


						}
						break;

					default:
						goto loop197;
					}
				}

				loop197:
					;

				} finally { DebugExitSubRule(197); }

				DebugLocation(560, 139);
				char_literal451=(IToken)Match(input,132,Follow._132_in_list_expr4764); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal451);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 560:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(560, 146);
					// SugarCpp.g:560:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(560, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(560, 158);
					// SugarCpp.g:560:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(560, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:561:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(561, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4778);
				lambda_expr452=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr452.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 62);
			LeaveRule("list_expr", 62);
			LeaveRule_list_expr();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:564:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 63);
		TraceIn("lambda_value", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE454 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr453 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block455 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE454_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(564, 1);
		try
		{
			// SugarCpp.g:565:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt200=2;
			try { DebugEnterDecision(200, false);
			int LA200_0 = input.LA(1);

			if ((LA200_0==IDENT||LA200_0==NUMBER||LA200_0==STRING||LA200_0==85||LA200_0==90||LA200_0==92||LA200_0==94||(LA200_0>=96 && LA200_0<=97)||(LA200_0>=100 && LA200_0<=101)||(LA200_0>=130 && LA200_0<=131)||LA200_0==153||LA200_0==156||(LA200_0>=158 && LA200_0<=159)||LA200_0==180))
			{
				alt200 = 1;
			}
			else if ((LA200_0==NEWLINE))
			{
				alt200 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:565:4: expr
				{
				DebugLocation(565, 4);
				PushFollow(Follow._expr_in_lambda_value4789);
				expr453=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr453.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 565:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(565, 12);
					// SugarCpp.g:565:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(565, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(565, 25);
					// SugarCpp.g:565:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(565, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(565, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:566:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(566, 4);
				// SugarCpp.g:566:4: ( NEWLINE )+
				int cnt199=0;
				try { DebugEnterSubRule(199);
				while (true)
				{
					int alt199=2;
					try { DebugEnterDecision(199, false);
					int LA199_0 = input.LA(1);

					if ((LA199_0==NEWLINE))
					{
						alt199 = 1;
					}


					} finally { DebugExitDecision(199); }
					switch (alt199)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:566:4: NEWLINE
						{
						DebugLocation(566, 4);
						NEWLINE454=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4806); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE454);


						}
						break;

					default:
						if (cnt199 >= 1)
							goto loop199;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee199 = new EarlyExitException( 199, input );
						DebugRecognitionException(eee199);
						throw eee199;
					}
					cnt199++;
				}
				loop199:
					;

				} finally { DebugExitSubRule(199); }

				DebugLocation(566, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4809);
				stmt_block455=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block455.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 566:24: -> stmt_block
				{
					DebugLocation(566, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 63);
			LeaveRule("lambda_value", 63);
			LeaveRule_lambda_value();
		}
		DebugLocation(567, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:569:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 64);
		TraceIn("lambda_type", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal456 = default(IToken);
		IToken char_literal458 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name457 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal456_tree = default(CommonTree);
		CommonTree char_literal458_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(569, 1);
		try
		{
			// SugarCpp.g:570:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:570:4: '(' type_name ')'
			{
			DebugLocation(570, 4);
			char_literal456=(IToken)Match(input,92,Follow._92_in_lambda_type4824); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal456);

			DebugLocation(570, 8);
			PushFollow(Follow._type_name_in_lambda_type4826);
			type_name457=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name457.Tree);
			DebugLocation(570, 18);
			char_literal458=(IToken)Match(input,93,Follow._93_in_lambda_type4828); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal458);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 570:22: -> type_name
			{
				DebugLocation(570, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 64);
			LeaveRule("lambda_type", 64);
			LeaveRule_lambda_type();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:573:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 65);
		TraceIn("lambda_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal459 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken string_literal463 = default(IToken);
		IToken string_literal465 = default(IToken);
		IToken string_literal467 = default(IToken);
		IToken string_literal469 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr471 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal459_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree string_literal463_tree = default(CommonTree);
		CommonTree string_literal465_tree = default(CommonTree);
		CommonTree string_literal467_tree = default(CommonTree);
		CommonTree string_literal469_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(573, 1);
		try
		{
			// SugarCpp.g:574:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt204=2;
			try { DebugEnterDecision(204, false);
			try
			{
				alt204 = dfa204.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:574:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(574, 4);
				char_literal459=(IToken)Match(input,92,Follow._92_in_lambda_expr4843); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal459);

				DebugLocation(574, 8);
				// SugarCpp.g:574:8: ( func_args )?
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==IDENT||LA201_0==112))
				{
					alt201 = 1;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:574:8: func_args
					{
					DebugLocation(574, 8);
					PushFollow(Follow._func_args_in_lambda_expr4845);
					func_args460=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args460.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(201); }

				DebugLocation(574, 19);
				char_literal461=(IToken)Match(input,93,Follow._93_in_lambda_expr4848); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal461);

				DebugLocation(574, 23);
				// SugarCpp.g:574:23: ( lambda_type )?
				int alt202=2;
				try { DebugEnterSubRule(202);
				try { DebugEnterDecision(202, false);
				int LA202_0 = input.LA(1);

				if ((LA202_0==92))
				{
					alt202 = 1;
				}
				} finally { DebugExitDecision(202); }
				switch (alt202)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:574:23: lambda_type
					{
					DebugLocation(574, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4850);
					lambda_type462=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type462.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(202); }

				DebugLocation(574, 36);
				// SugarCpp.g:574:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt203=4;
				try { DebugEnterSubRule(203);
				try { DebugEnterDecision(203, false);
				switch (input.LA(1))
				{
				case 104:
					{
					alt203 = 1;
					}
					break;
				case 123:
					{
					alt203 = 2;
					}
					break;
				case 102:
					{
					alt203 = 3;
					}
					break;
				case 122:
					{
					alt203 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:574:38: '->' lambda_value
					{
					DebugLocation(574, 38);
					string_literal463=(IToken)Match(input,104,Follow._104_in_lambda_expr4855); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal463);

					DebugLocation(574, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4857);
					lambda_value464=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value464.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, 104, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(574, 60);
						// SugarCpp.g:574:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(574, 74);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(574, 79);
						// SugarCpp.g:574:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(574, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(574, 90);
						// SugarCpp.g:574:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(574, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(574, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:575:17: '=>' lambda_value
					{
					DebugLocation(575, 17);
					string_literal465=(IToken)Match(input,123,Follow._123_in_lambda_expr4892); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(string_literal465);

					DebugLocation(575, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4894);
					lambda_value466=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value466.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, func_args, lambda_type, 123
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 575:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(575, 39);
						// SugarCpp.g:575:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(575, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(575, 53);
						adaptor.AddChild(root_1, stream_123.NextNode());
						DebugLocation(575, 58);
						// SugarCpp.g:575:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(575, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(575, 69);
						// SugarCpp.g:575:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(575, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(575, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:576:14: '-->' lambda_value
					{
					DebugLocation(576, 14);
					string_literal467=(IToken)Match(input,102,Follow._102_in_lambda_expr4926); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal467);

					DebugLocation(576, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr4928);
					lambda_value468=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value468.Tree);


					{
					// AST REWRITE
					// elements: 102, lambda_type, func_args, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 576:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(576, 37);
						// SugarCpp.g:576:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(576, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(576, 51);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(576, 57);
						// SugarCpp.g:576:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(576, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(576, 68);
						// SugarCpp.g:576:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(576, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(576, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:577:17: '==>' lambda_value
					{
					DebugLocation(577, 17);
					string_literal469=(IToken)Match(input,122,Follow._122_in_lambda_expr4963); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(string_literal469);

					DebugLocation(577, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr4965);
					lambda_value470=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value470.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 122
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(577, 40);
						// SugarCpp.g:577:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(577, 54);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(577, 60);
						// SugarCpp.g:577:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(577, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(577, 71);
						// SugarCpp.g:577:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(577, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(577, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(203); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:579:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(579, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr5000);
				modify_expr471=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr471.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 65);
			LeaveRule("lambda_expr", 65);
			LeaveRule_lambda_expr();
		}
		DebugLocation(580, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:582:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 66);
		TraceIn("modify_expr_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set472 = default(IToken);

		CommonTree set472_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(582, 91);
		try
		{
			// SugarCpp.g:582:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(582, 15);

			set472=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==117||input.LA(1)==120||input.LA(1)==127||input.LA(1)==134||input.LA(1)==177)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set472));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 66);
			LeaveRule("modify_expr_op", 66);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(582, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:583:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 67);
		TraceIn("modify_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set474 = default(IToken);
		IToken char_literal476 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr477 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set474_tree = default(CommonTree);
		CommonTree char_literal476_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(583, 1);
		try
		{
			// SugarCpp.g:584:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:584:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(584, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5057);
			cond_expr473=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr473.Tree);
			DebugLocation(584, 14);
			// SugarCpp.g:584:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt206=3;
			try { DebugEnterSubRule(206);
			try { DebugEnterDecision(206, false);
			int LA206_0 = input.LA(1);

			if ((LA206_0==88||LA206_0==91||LA206_0==95||LA206_0==98||LA206_0==103||LA206_0==109||LA206_0==112||LA206_0==117||LA206_0==127||LA206_0==134||LA206_0==177))
			{
				alt206 = 1;
			}
			else if ((LA206_0==120))
			{
				alt206 = 2;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:584:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(584, 94);

				set474=(IToken)input.LT(1);
				set474=(IToken)input.LT(1);
				if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==112||input.LA(1)==117||input.LA(1)==127||input.LA(1)==134||input.LA(1)==177)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set474), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(584, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5106);
				cond_expr475=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr475.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:585:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(585, 7);
				// SugarCpp.g:585:7: ( '=' ^ cond_expr )+
				int cnt205=0;
				try { DebugEnterSubRule(205);
				while (true)
				{
					int alt205=2;
					try { DebugEnterDecision(205, false);
					int LA205_0 = input.LA(1);

					if ((LA205_0==120))
					{
						alt205 = 1;
					}


					} finally { DebugExitDecision(205); }
					switch (alt205)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:585:8: '=' ^ cond_expr
						{
						DebugLocation(585, 11);
						char_literal476=(IToken)Match(input,120,Follow._120_in_modify_expr5115); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal476_tree = (CommonTree)adaptor.Create(char_literal476);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal476_tree, root_0);
						}
						DebugLocation(585, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5118);
						cond_expr477=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr477.Tree);

						}
						break;

					default:
						if (cnt205 >= 1)
							goto loop205;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee205 = new EarlyExitException( 205, input );
						DebugRecognitionException(eee205);
						throw eee205;
					}
					cnt205++;
				}
				loop205:
					;

				} finally { DebugExitSubRule(205); }


				}
				break;

			}
			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 67);
			LeaveRule("modify_expr", 67);
			LeaveRule_modify_expr();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:588:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 68);
		TraceIn("cond_expr_item", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr478 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(588, 24);
		try
		{
			// SugarCpp.g:588:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:588:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(588, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5131);
			or_expr478=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr478.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 68);
			LeaveRule("cond_expr_item", 68);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(588, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:589:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 69);
		TraceIn("cond_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal479 = default(IToken);
		IToken char_literal480 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal479_tree = default(CommonTree);
		CommonTree char_literal480_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(589, 1);
		try
		{
			// SugarCpp.g:590:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:590:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(590, 4);
			// SugarCpp.g:590:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:590:5: a= or_expr
			{
			DebugLocation(590, 6);
			PushFollow(Follow._or_expr_in_cond_expr5143);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 590:15: -> $a
			{
				DebugLocation(590, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(590, 22);
			// SugarCpp.g:590:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt209=2;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, false);
			int LA209_0 = input.LA(1);

			if ((LA209_0==128))
			{
				alt209 = 1;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:590:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(590, 23);
				char_literal479=(IToken)Match(input,128,Follow._128_in_cond_expr5152); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(char_literal479);

				DebugLocation(590, 27);
				// SugarCpp.g:590:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt208=2;
				try { DebugEnterSubRule(208);
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==IDENT||LA208_0==NUMBER||LA208_0==STRING||LA208_0==85||LA208_0==90||LA208_0==92||LA208_0==94||(LA208_0>=96 && LA208_0<=97)||(LA208_0>=100 && LA208_0<=101)||LA208_0==130||(LA208_0>=158 && LA208_0<=159)||LA208_0==180))
				{
					alt208 = 1;
				}
				else if ((LA208_0==DEDENT||LA208_0==INDENT||LA208_0==NEWLINE||LA208_0==88||LA208_0==91||LA208_0==93||LA208_0==95||(LA208_0>=98 && LA208_0<=99)||LA208_0==103||LA208_0==109||(LA208_0>=112 && LA208_0<=113)||LA208_0==117||(LA208_0>=119 && LA208_0<=120)||LA208_0==123||LA208_0==127||LA208_0==132||LA208_0==134||LA208_0==137||LA208_0==143||(LA208_0>=147 && LA208_0<=148)||LA208_0==150||(LA208_0>=165 && LA208_0<=167)||(LA208_0>=170 && LA208_0<=171)||(LA208_0>=174 && LA208_0<=175)||(LA208_0>=177 && LA208_0<=178)))
				{
					alt208 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:590:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(590, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5158);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(590, 46);
					// SugarCpp.g:590:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt207=2;
					try { DebugEnterSubRule(207);
					try { DebugEnterDecision(207, false);
					int LA207_0 = input.LA(1);

					if ((LA207_0==110))
					{
						alt207 = 1;
					}
					else if ((LA207_0==DEDENT||LA207_0==INDENT||LA207_0==NEWLINE||LA207_0==88||LA207_0==91||LA207_0==93||LA207_0==95||(LA207_0>=98 && LA207_0<=99)||LA207_0==103||LA207_0==109||(LA207_0>=112 && LA207_0<=113)||LA207_0==117||(LA207_0>=119 && LA207_0<=120)||LA207_0==123||LA207_0==127||LA207_0==132||LA207_0==134||LA207_0==137||LA207_0==143||(LA207_0>=147 && LA207_0<=148)||LA207_0==150||(LA207_0>=165 && LA207_0<=167)||(LA207_0>=170 && LA207_0<=171)||(LA207_0>=174 && LA207_0<=175)||(LA207_0>=177 && LA207_0<=178)))
					{
						alt207 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(207); }
					switch (alt207)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:590:48: ':' b= cond_expr_item
						{
						DebugLocation(590, 48);
						char_literal480=(IToken)Match(input,110,Follow._110_in_cond_expr5162); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_110.Add(char_literal480);

						DebugLocation(590, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5166);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, b, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 590:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(590, 72);
							// SugarCpp.g:590:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(590, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(590, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(590, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(590, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:591:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 591:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(591, 20);
							// SugarCpp.g:591:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(591, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(591, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(591, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(207); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:593:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 593:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(593, 14);
						// SugarCpp.g:593:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(593, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(593, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(208); }


				}
				break;

			}
			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 69);
			LeaveRule("cond_expr", 69);
			LeaveRule_cond_expr();
		}
		DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:597:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 70);
		TraceIn("or_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set481 = default(IToken);

		CommonTree set481_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(597, 19);
		try
		{
			// SugarCpp.g:597:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 6);

			set481=(IToken)input.LT(1);
			if (input.LA(1)==160||input.LA(1)==179)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set481));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 70);
			LeaveRule("or_op", 70);
			LeaveRule_or_op();
		}
		DebugLocation(597, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:598:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 71);
		TraceIn("or_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(598, 1);
		try
		{
			// SugarCpp.g:599:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:599:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(599, 4);
			// SugarCpp.g:599:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:599:5: a= and_expr
			{
			DebugLocation(599, 6);
			PushFollow(Follow._and_expr_in_or_expr5280);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 599:16: -> $a
			{
				DebugLocation(599, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(599, 23);
			// SugarCpp.g:599:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=2;
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==160||LA210_0==179))
				{
					alt210 = 1;
				}


				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:599:24: op= or_op b= and_expr
					{
					DebugLocation(599, 26);
					PushFollow(Follow._or_op_in_or_expr5291);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(599, 34);
					PushFollow(Follow._and_expr_in_or_expr5295);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 599:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(599, 47);
						// SugarCpp.g:599:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(599, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(599, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(599, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(599, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 71);
			LeaveRule("or_expr", 71);
			LeaveRule_or_expr();
		}
		DebugLocation(600, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:602:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 72);
		TraceIn("and_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set482 = default(IToken);

		CommonTree set482_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(602, 21);
		try
		{
			// SugarCpp.g:602:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(602, 7);

			set482=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set482));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 72);
			LeaveRule("and_op", 72);
			LeaveRule_and_op();
		}
		DebugLocation(602, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:603:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 73);
		TraceIn("and_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(603, 1);
		try
		{
			// SugarCpp.g:604:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:604:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(604, 4);
			// SugarCpp.g:604:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:604:5: a= bit_or
			{
			DebugLocation(604, 6);
			PushFollow(Follow._bit_or_in_and_expr5337);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 604:14: -> $a
			{
				DebugLocation(604, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(604, 21);
			// SugarCpp.g:604:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==89||LA211_0==136))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:604:22: op= and_op b= bit_or
					{
					DebugLocation(604, 24);
					PushFollow(Follow._and_op_in_and_expr5348);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(604, 33);
					PushFollow(Follow._bit_or_in_and_expr5352);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 604:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(604, 44);
						// SugarCpp.g:604:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(604, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(604, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(604, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(604, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 73);
			LeaveRule("and_expr", 73);
			LeaveRule_and_expr();
		}
		DebugLocation(605, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:607:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 74);
		TraceIn("bit_or", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal483 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal483_tree = default(CommonTree);
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(607, 1);
		try
		{
			// SugarCpp.g:608:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:608:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(608, 4);
			// SugarCpp.g:608:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:608:5: a= bit_xor
			{
			DebugLocation(608, 6);
			PushFollow(Follow._bit_xor_in_bit_or5383);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 608:15: -> $a
			{
				DebugLocation(608, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(608, 22);
			// SugarCpp.g:608:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==176))
				{
					alt212 = 1;
				}


				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:608:23: '|' b= bit_xor
					{
					DebugLocation(608, 23);
					char_literal483=(IToken)Match(input,176,Follow._176_in_bit_or5392); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal483);

					DebugLocation(608, 28);
					PushFollow(Follow._bit_xor_in_bit_or5396);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 176, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(608, 40);
						// SugarCpp.g:608:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(608, 51);
						adaptor.AddChild(root_1, stream_176.NextNode());
						DebugLocation(608, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 74);
			LeaveRule("bit_or", 74);
			LeaveRule_bit_or();
		}
		DebugLocation(609, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:611:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 75);
		TraceIn("bit_xor", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal484 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal484_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(611, 1);
		try
		{
			// SugarCpp.g:612:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:612:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(612, 4);
			// SugarCpp.g:612:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:612:5: a= bit_and
			{
			DebugLocation(612, 6);
			PushFollow(Follow._bit_and_in_bit_xor5426);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 612:15: -> $a
			{
				DebugLocation(612, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(612, 22);
			// SugarCpp.g:612:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==133))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:612:23: '^' b= bit_and
					{
					DebugLocation(612, 23);
					char_literal484=(IToken)Match(input,133,Follow._133_in_bit_xor5435); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal484);

					DebugLocation(612, 28);
					PushFollow(Follow._bit_and_in_bit_xor5439);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 133, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 612:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(612, 40);
						// SugarCpp.g:612:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(612, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(612, 51);
						adaptor.AddChild(root_1, stream_133.NextNode());
						DebugLocation(612, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(612, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 75);
			LeaveRule("bit_xor", 75);
			LeaveRule_bit_xor();
		}
		DebugLocation(613, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:615:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 76);
		TraceIn("bit_and", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal485 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal485_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(615, 1);
		try
		{
			// SugarCpp.g:616:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:616:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(616, 4);
			// SugarCpp.g:616:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:616:5: a= cmp_expr
			{
			DebugLocation(616, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5469);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 616:16: -> $a
			{
				DebugLocation(616, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(616, 23);
			// SugarCpp.g:616:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==90))
				{
					alt214 = 1;
				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:616:24: '&' b= cmp_expr
					{
					DebugLocation(616, 24);
					char_literal485=(IToken)Match(input,90,Follow._90_in_bit_and5478); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal485);

					DebugLocation(616, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5482);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 90, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 616:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(616, 42);
						// SugarCpp.g:616:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(616, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(616, 53);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(616, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(616, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 76);
			LeaveRule("bit_and", 76);
			LeaveRule_bit_and();
		}
		DebugLocation(617, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:619:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 77);
		TraceIn("chain_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set486 = default(IToken);

		CommonTree set486_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(619, 64);
		try
		{
			// SugarCpp.g:619:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(619, 9);

			set486=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==114||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=151 && input.LA(1)<=152))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set486));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 77);
			LeaveRule("chain_op", 77);
			LeaveRule_chain_op();
		}
		DebugLocation(619, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:620:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 78);
		TraceIn("no_less_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set487 = default(IToken);

		CommonTree set487_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(620, 60);
		try
		{
			// SugarCpp.g:620:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(620, 11);

			set487=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=151 && input.LA(1)<=152))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set487));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 78);
			LeaveRule("no_less_op", 78);
			LeaveRule_no_less_op();
		}
		DebugLocation(620, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:621:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 79);
		TraceIn("chain_list", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr489 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(621, 35);
		try
		{
			// SugarCpp.g:621:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:621:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(621, 13);
			// SugarCpp.g:621:13: ( chain_op shift_expr )+
			int cnt215=0;
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=2;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==86||LA215_0==114||LA215_0==118||LA215_0==121||(LA215_0>=124 && LA215_0<=125)||(LA215_0>=151 && LA215_0<=152)))
				{
					alt215 = 1;
				}


				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:621:14: chain_op shift_expr
					{
					DebugLocation(621, 14);
					PushFollow(Follow._chain_op_in_chain_list5574);
					chain_op488=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op488.Tree);
					DebugLocation(621, 23);
					PushFollow(Follow._shift_expr_in_chain_list5576);
					shift_expr489=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr489.Tree);

					}
					break;

				default:
					if (cnt215 >= 1)
						goto loop215;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee215 = new EarlyExitException( 215, input );
					DebugRecognitionException(eee215);
					throw eee215;
				}
				cnt215++;
			}
			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 79);
			LeaveRule("chain_list", 79);
			LeaveRule_chain_list();
		}
		DebugLocation(621, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:622:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 80);
		TraceIn("cmp_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal490 = default(IToken);
		IToken char_literal492 = default(IToken);
		IToken char_literal494 = default(IToken);
		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list498 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(622, 1);
		try
		{
			// SugarCpp.g:623:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:623:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(623, 4);
			// SugarCpp.g:623:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:623:5: a= shift_expr
			{
			DebugLocation(623, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5590);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 623:18: -> $a
			{
				DebugLocation(623, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(623, 25);
			// SugarCpp.g:623:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt219=4;
			try { DebugEnterSubRule(219);
			try { DebugEnterDecision(219, false);
			int LA219_0 = input.LA(1);

			if ((LA219_0==114))
			{
				int LA219_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt219 = 1;
				}
				else if ((true))
				{
					alt219 = 2;
				}
			}
			else if ((LA219_0==86||LA219_0==118||LA219_0==121||(LA219_0>=124 && LA219_0<=125)||(LA219_0>=151 && LA219_0<=152)))
			{
				alt219 = 3;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:623:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(623, 77);
				char_literal490=(IToken)Match(input,114,Follow._114_in_cmp_expr5619); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal490);

				DebugLocation(623, 81);
				PushFollow(Follow._ident_in_cmp_expr5621);
				ident491=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident491.Tree);
				DebugLocation(623, 87);
				// SugarCpp.g:623:87: ( ',' ident )*
				try { DebugEnterSubRule(216);
				while (true)
				{
					int alt216=2;
					try { DebugEnterDecision(216, false);
					int LA216_0 = input.LA(1);

					if ((LA216_0==99))
					{
						alt216 = 1;
					}


					} finally { DebugExitDecision(216); }
					switch ( alt216 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:623:88: ',' ident
						{
						DebugLocation(623, 88);
						char_literal492=(IToken)Match(input,99,Follow._99_in_cmp_expr5624); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal492);

						DebugLocation(623, 92);
						PushFollow(Follow._ident_in_cmp_expr5626);
						ident493=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident493.Tree);

						}
						break;

					default:
						goto loop216;
					}
				}

				loop216:
					;

				} finally { DebugExitSubRule(216); }

				DebugLocation(623, 100);
				char_literal494=(IToken)Match(input,124,Follow._124_in_cmp_expr5630); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal494);

				DebugLocation(623, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5632);
				bracket_expr_list495=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list495.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, bracket_expr_list, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 623:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(623, 125);
					// SugarCpp.g:623:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(623, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(623, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(623, 147);
					// SugarCpp.g:623:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(623, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(623, 168);
					// SugarCpp.g:623:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(623, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(623, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:624:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(624, 12);
				char_literal496=(IToken)Match(input,114,Follow._114_in_cmp_expr5663); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal496);

				DebugLocation(624, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5667);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(624, 29);
				// SugarCpp.g:624:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt217=2;
				try { DebugEnterSubRule(217);
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==86||LA217_0==114||LA217_0==118||LA217_0==121||(LA217_0>=124 && LA217_0<=125)||(LA217_0>=151 && LA217_0<=152)))
				{
					alt217 = 1;
				}
				else if ((LA217_0==DEDENT||LA217_0==INDENT||LA217_0==NEWLINE||(LA217_0>=88 && LA217_0<=91)||LA217_0==93||LA217_0==95||(LA217_0>=98 && LA217_0<=99)||LA217_0==103||(LA217_0>=109 && LA217_0<=110)||(LA217_0>=112 && LA217_0<=113)||LA217_0==117||(LA217_0>=119 && LA217_0<=120)||LA217_0==123||(LA217_0>=127 && LA217_0<=128)||(LA217_0>=132 && LA217_0<=134)||(LA217_0>=136 && LA217_0<=137)||LA217_0==143||(LA217_0>=147 && LA217_0<=148)||LA217_0==150||LA217_0==160||(LA217_0>=165 && LA217_0<=167)||(LA217_0>=170 && LA217_0<=171)||(LA217_0>=174 && LA217_0<=179)))
				{
					alt217 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 217, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(217); }
				switch (alt217)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:624:31: chain_list
					{
					DebugLocation(624, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5671);
					chain_list497=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list497.Tree);


					{
					// AST REWRITE
					// elements: 114, chain_list, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(624, 45);
						// SugarCpp.g:624:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(624, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(624, 69);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(624, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(624, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:625:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 114, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(625, 19);
						// SugarCpp.g:625:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(625, 30);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(625, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(217); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:626:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(626, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5748);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(626, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5752);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(626, 54);
				// SugarCpp.g:626:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt218=2;
				try { DebugEnterSubRule(218);
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==86||LA218_0==114||LA218_0==118||LA218_0==121||(LA218_0>=124 && LA218_0<=125)||(LA218_0>=151 && LA218_0<=152)))
				{
					alt218 = 1;
				}
				else if ((LA218_0==DEDENT||LA218_0==INDENT||LA218_0==NEWLINE||(LA218_0>=88 && LA218_0<=91)||LA218_0==93||LA218_0==95||(LA218_0>=98 && LA218_0<=99)||LA218_0==103||(LA218_0>=109 && LA218_0<=110)||(LA218_0>=112 && LA218_0<=113)||LA218_0==117||(LA218_0>=119 && LA218_0<=120)||LA218_0==123||(LA218_0>=127 && LA218_0<=128)||(LA218_0>=132 && LA218_0<=134)||(LA218_0>=136 && LA218_0<=137)||LA218_0==143||(LA218_0>=147 && LA218_0<=148)||LA218_0==150||LA218_0==160||(LA218_0>=165 && LA218_0<=167)||(LA218_0>=170 && LA218_0<=171)||(LA218_0>=174 && LA218_0<=179)))
				{
					alt218 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:626:56: chain_list
					{
					DebugLocation(626, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5756);
					chain_list498=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list498.Tree);


					{
					// AST REWRITE
					// elements: op, b, chain_list, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(626, 70);
						// SugarCpp.g:626:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(626, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(626, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(626, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(626, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:627:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 627:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(627, 20);
						// SugarCpp.g:627:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(627, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(627, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(627, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(627, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(218); }


				}
				break;

			}
			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 80);
			LeaveRule("cmp_expr", 80);
			LeaveRule_cmp_expr();
		}
		DebugLocation(630, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:632:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 81);
		TraceIn("shift_expr_op", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set499 = default(IToken);

		CommonTree set499_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(632, 27);
		try
		{
			// SugarCpp.g:632:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(632, 14);

			set499=(IToken)input.LT(1);
			if (input.LA(1)==116||input.LA(1)==126)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set499));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 81);
			LeaveRule("shift_expr_op", 81);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(632, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:633:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 82);
		TraceIn("shift_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op500 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(633, 1);
		try
		{
			// SugarCpp.g:634:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:634:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(634, 4);
			// SugarCpp.g:634:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:634:5: a= add_expr
			{
			DebugLocation(634, 6);
			PushFollow(Follow._add_expr_in_shift_expr5858);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 634:16: -> $a
			{
				DebugLocation(634, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(634, 23);
			// SugarCpp.g:634:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==116||LA220_0==126))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:634:24: shift_expr_op b= add_expr
					{
					DebugLocation(634, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5867);
					shift_expr_op500=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op500.Tree);
					DebugLocation(634, 39);
					PushFollow(Follow._add_expr_in_shift_expr5871);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 634:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(634, 52);
						// SugarCpp.g:634:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(634, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(634, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(634, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(634, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 82);
			LeaveRule("shift_expr", 82);
			LeaveRule_shift_expr();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:637:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 83);
		TraceIn("add_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal501 = default(IToken);
		IToken char_literal502 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal502_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(637, 1);
		try
		{
			// SugarCpp.g:638:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:638:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(638, 4);
			// SugarCpp.g:638:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:638:5: a= mul_expr
			{
			DebugLocation(638, 6);
			PushFollow(Follow._mul_expr_in_add_expr5901);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 638:16: -> $a
			{
				DebugLocation(638, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(638, 23);
			// SugarCpp.g:638:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=3;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==96))
				{
					alt221 = 1;
				}
				else if ((LA221_0==100))
				{
					alt221 = 2;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:638:25: '+' b= mul_expr
					{
					DebugLocation(638, 25);
					char_literal501=(IToken)Match(input,96,Follow._96_in_add_expr5911); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal501);

					DebugLocation(638, 30);
					PushFollow(Follow._mul_expr_in_add_expr5915);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 96, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 638:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(638, 43);
						// SugarCpp.g:638:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(638, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(638, 54);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(638, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(638, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:639:10: '-' b= mul_expr
					{
					DebugLocation(639, 10);
					char_literal502=(IToken)Match(input,100,Follow._100_in_add_expr5940); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal502);

					DebugLocation(639, 15);
					PushFollow(Follow._mul_expr_in_add_expr5944);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 100, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 639:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(639, 28);
						// SugarCpp.g:639:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(639, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(639, 39);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(639, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(639, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 83);
			LeaveRule("add_expr", 83);
			LeaveRule_add_expr();
		}
		DebugLocation(641, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:643:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 84);
		TraceIn("mul_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal503 = default(IToken);
		IToken char_literal504 = default(IToken);
		IToken char_literal505 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree char_literal504_tree = default(CommonTree);
		CommonTree char_literal505_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(643, 1);
		try
		{
			// SugarCpp.g:644:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:644:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(644, 4);
			// SugarCpp.g:644:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:644:5: a= infix_expr
			{
			DebugLocation(644, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5982);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 644:18: -> $a
			{
				DebugLocation(644, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(644, 25);
			// SugarCpp.g:644:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=4;
				try { DebugEnterDecision(222, false);
				switch (input.LA(1))
				{
				case 94:
					{
					alt222 = 1;
					}
					break;
				case 108:
					{
					alt222 = 2;
					}
					break;
				case 87:
					{
					alt222 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:644:27: '*' b= infix_expr
					{
					DebugLocation(644, 27);
					char_literal503=(IToken)Match(input,94,Follow._94_in_mul_expr5992); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal503);

					DebugLocation(644, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5996);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(644, 47);
						// SugarCpp.g:644:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(644, 58);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(644, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(644, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:645:12: '/' b= infix_expr
					{
					DebugLocation(645, 12);
					char_literal504=(IToken)Match(input,108,Follow._108_in_mul_expr6023); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(char_literal504);

					DebugLocation(645, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6027);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 108, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 645:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(645, 32);
						// SugarCpp.g:645:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(645, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(645, 43);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(645, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(645, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:646:12: '%' b= infix_expr
					{
					DebugLocation(646, 12);
					char_literal505=(IToken)Match(input,87,Follow._87_in_mul_expr6054); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_87.Add(char_literal505);

					DebugLocation(646, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6058);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 87, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 646:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(646, 32);
						// SugarCpp.g:646:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(646, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(646, 43);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(646, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(646, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 84);
			LeaveRule("mul_expr", 84);
			LeaveRule_mul_expr();
		}
		DebugLocation(648, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:650:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 85);
		TraceIn("infix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func506 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(650, 1);
		try
		{
			// SugarCpp.g:651:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:651:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(651, 4);
			// SugarCpp.g:651:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:651:5: a= selector_expr
			{
			DebugLocation(651, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6098);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 651:21: -> $a
			{
				DebugLocation(651, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(651, 28);
			// SugarCpp.g:651:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==135))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:651:30: infix_func b= selector_expr
					{
					DebugLocation(651, 30);
					PushFollow(Follow._infix_func_in_infix_expr6108);
					infix_func506=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func506.Tree);
					DebugLocation(651, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6112);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 651:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(651, 61);
						// SugarCpp.g:651:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(651, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(651, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(651, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(651, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 85);
			LeaveRule("infix_expr", 85);
			LeaveRule_infix_expr();
		}
		DebugLocation(652, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:654:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 86);
		TraceIn("selector_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal507 = default(IToken);
		IToken string_literal508 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal507_tree = default(CommonTree);
		CommonTree string_literal508_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(654, 1);
		try
		{
			// SugarCpp.g:655:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:655:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(655, 4);
			// SugarCpp.g:655:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:655:5: a= cast_expr
			{
			DebugLocation(655, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6144);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 655:17: -> $a
			{
				DebugLocation(655, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(655, 24);
			// SugarCpp.g:655:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=3;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==105))
				{
					alt224 = 1;
				}
				else if ((LA224_0==107))
				{
					alt224 = 2;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:655:26: '->*' b= ident
					{
					DebugLocation(655, 26);
					string_literal507=(IToken)Match(input,105,Follow._105_in_selector_expr6154); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal507);

					DebugLocation(655, 33);
					PushFollow(Follow._ident_in_selector_expr6158);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 105, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 655:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(655, 43);
						// SugarCpp.g:655:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(655, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(655, 57);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(655, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(655, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:656:11: '.*' b= ident
					{
					DebugLocation(656, 11);
					string_literal508=(IToken)Match(input,107,Follow._107_in_selector_expr6184); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(string_literal508);

					DebugLocation(656, 18);
					PushFollow(Follow._ident_in_selector_expr6189);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 107, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 656:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(656, 28);
						// SugarCpp.g:656:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(656, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(656, 42);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(656, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(656, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 86);
			LeaveRule("selector_expr", 86);
			LeaveRule_selector_expr();
		}
		DebugLocation(658, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:660:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 87);
		TraceIn("cast_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal509 = default(IToken);
		IToken char_literal511 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr512 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr513 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal509_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(660, 1);
		try
		{
			// SugarCpp.g:661:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt225=2;
			try { DebugEnterDecision(225, false);
			int LA225_0 = input.LA(1);

			if ((LA225_0==92))
			{
				int LA225_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt225 = 1;
				}
				else if ((true))
				{
					alt225 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 225, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA225_0==IDENT||LA225_0==NUMBER||LA225_0==STRING||LA225_0==85||LA225_0==90||LA225_0==94||(LA225_0>=96 && LA225_0<=97)||(LA225_0>=100 && LA225_0<=101)||LA225_0==130||(LA225_0>=158 && LA225_0<=159)||LA225_0==180))
			{
				alt225 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 225, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(225); }
			switch (alt225)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:661:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(661, 39);
				char_literal509=(IToken)Match(input,92,Follow._92_in_cast_expr6238); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal509);

				DebugLocation(661, 43);
				PushFollow(Follow._type_name_in_cast_expr6240);
				type_name510=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name510.Tree);
				DebugLocation(661, 53);
				char_literal511=(IToken)Match(input,93,Follow._93_in_cast_expr6242); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal511);

				DebugLocation(661, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6244);
				prefix_expr512=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr512.Tree);


				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 661:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(661, 72);
					// SugarCpp.g:661:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(661, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(661, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(661, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:662:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(662, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6259);
				prefix_expr513=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr513.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 87);
			LeaveRule("cast_expr", 87);
			LeaveRule_cast_expr();
		}
		DebugLocation(663, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:665:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 88);
		TraceIn("prefix_expr_op", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set514 = default(IToken);

		CommonTree set514_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(665, 71);
		try
		{
			// SugarCpp.g:665:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(665, 15);

			set514=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==90||input.LA(1)==94||(input.LA(1)>=96 && input.LA(1)<=97)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==159||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set514));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 88);
			LeaveRule("prefix_expr_op", 88);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(665, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:666:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 89);
		TraceIn("prefix_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal517 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr521 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal517_tree = default(CommonTree);
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(666, 1);
		try
		{
			// SugarCpp.g:667:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt227=3;
			try { DebugEnterDecision(227, false);
			switch (input.LA(1))
			{
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 159:
			case 180:
				{
				alt227 = 1;
				}
				break;
			case 158:
				{
				alt227 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 92:
			case 130:
				{
				alt227 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 227, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(227); }
			switch (alt227)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:667:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(667, 4);
				// SugarCpp.g:667:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:667:5: prefix_expr_op prefix_expr
				{
				DebugLocation(667, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6309);
				prefix_expr_op515=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op515.Tree);
				DebugLocation(667, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6311);
				prefix_expr516=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr516.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 667:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(667, 36);
					// SugarCpp.g:667:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(667, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(667, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(667, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:668:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(668, 4);
				string_literal517=(IToken)Match(input,158,Follow._158_in_prefix_expr6327); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_158.Add(string_literal517);

				DebugLocation(668, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6329);
				type_no_array518=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array518.Tree);
				DebugLocation(668, 24);
				// SugarCpp.g:668:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt226=2;
				try { DebugEnterSubRule(226);
				try { DebugEnterDecision(226, false);
				int LA226_0 = input.LA(1);

				if ((LA226_0==92))
				{
					alt226 = 1;
				}
				else if ((LA226_0==131))
				{
					alt226 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(226); }
				switch (alt226)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:668:26: bracket_expr_list
					{
					DebugLocation(668, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6333);
					bracket_expr_list519=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list519.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 668:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(668, 47);
						// SugarCpp.g:668:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(668, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(668, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(668, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:669:11: square_expr_list
					{
					DebugLocation(669, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6355);
					square_expr_list520=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list520.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 669:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(669, 31);
						// SugarCpp.g:669:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(669, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(669, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(669, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(226); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:671:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(671, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6380);
				suffix_expr521=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr521.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 89);
			LeaveRule("prefix_expr", 89);
			LeaveRule_prefix_expr();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:674:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 90);
		TraceIn("square_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal522 = default(IToken);
		IToken char_literal524 = default(IToken);
		IToken char_literal526 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr525 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal522_tree = default(CommonTree);
		CommonTree char_literal524_tree = default(CommonTree);
		CommonTree char_literal526_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(674, 1);
		try
		{
			// SugarCpp.g:675:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:675:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(675, 4);
			char_literal522=(IToken)Match(input,131,Follow._131_in_square_expr_list6392); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(char_literal522);

			DebugLocation(675, 8);
			PushFollow(Follow._expr_in_square_expr_list6394);
			expr523=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr523.Tree);
			DebugLocation(675, 13);
			// SugarCpp.g:675:13: ( ',' expr )*
			try { DebugEnterSubRule(228);
			while (true)
			{
				int alt228=2;
				try { DebugEnterDecision(228, false);
				int LA228_0 = input.LA(1);

				if ((LA228_0==99))
				{
					alt228 = 1;
				}


				} finally { DebugExitDecision(228); }
				switch ( alt228 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:675:14: ',' expr
					{
					DebugLocation(675, 14);
					char_literal524=(IToken)Match(input,99,Follow._99_in_square_expr_list6397); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal524);

					DebugLocation(675, 18);
					PushFollow(Follow._expr_in_square_expr_list6399);
					expr525=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr525.Tree);

					}
					break;

				default:
					goto loop228;
				}
			}

			loop228:
				;

			} finally { DebugExitSubRule(228); }

			DebugLocation(675, 25);
			char_literal526=(IToken)Match(input,132,Follow._132_in_square_expr_list6403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal526);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 675:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(675, 32);
				// SugarCpp.g:675:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(675, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(675, 44);
				// SugarCpp.g:675:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(675, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 90);
			LeaveRule("square_expr_list", 90);
			LeaveRule_square_expr_list();
		}
		DebugLocation(676, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:678:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 91);
		TraceIn("bracket_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal527 = default(IToken);
		IToken char_literal529 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken NEWLINE532 = default(IToken);
		IToken INDENT533 = default(IToken);
		IToken NEWLINE534 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken NEWLINE537 = default(IToken);
		IToken NEWLINE539 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken NEWLINE541 = default(IToken);
		IToken DEDENT542 = default(IToken);
		IToken DEDENT543 = default(IToken);
		IToken NEWLINE544 = default(IToken);
		IToken char_literal545 = default(IToken);
		IToken char_literal547 = default(IToken);
		IToken NEWLINE548 = default(IToken);
		IToken char_literal550 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr538 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr549 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal527_tree = default(CommonTree);
		CommonTree char_literal529_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree NEWLINE532_tree = default(CommonTree);
		CommonTree INDENT533_tree = default(CommonTree);
		CommonTree NEWLINE534_tree = default(CommonTree);
		CommonTree char_literal536_tree = default(CommonTree);
		CommonTree NEWLINE537_tree = default(CommonTree);
		CommonTree NEWLINE539_tree = default(CommonTree);
		CommonTree char_literal540_tree = default(CommonTree);
		CommonTree NEWLINE541_tree = default(CommonTree);
		CommonTree DEDENT542_tree = default(CommonTree);
		CommonTree DEDENT543_tree = default(CommonTree);
		CommonTree NEWLINE544_tree = default(CommonTree);
		CommonTree char_literal545_tree = default(CommonTree);
		CommonTree char_literal547_tree = default(CommonTree);
		CommonTree NEWLINE548_tree = default(CommonTree);
		CommonTree char_literal550_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(678, 1);
		try
		{
			// SugarCpp.g:679:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:679:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(679, 4);
			char_literal527=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6423); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal527);

			DebugLocation(679, 8);
			// SugarCpp.g:679:8: ( expr ( ',' expr )* )?
			int alt230=2;
			try { DebugEnterSubRule(230);
			try { DebugEnterDecision(230, false);
			int LA230_0 = input.LA(1);

			if ((LA230_0==IDENT||LA230_0==NUMBER||LA230_0==STRING||LA230_0==85||LA230_0==90||LA230_0==92||LA230_0==94||(LA230_0>=96 && LA230_0<=97)||(LA230_0>=100 && LA230_0<=101)||(LA230_0>=130 && LA230_0<=131)||LA230_0==153||LA230_0==156||(LA230_0>=158 && LA230_0<=159)||LA230_0==180))
			{
				alt230 = 1;
			}
			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:679:9: expr ( ',' expr )*
				{
				DebugLocation(679, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6426);
				expr528=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr528.Tree);
				DebugLocation(679, 14);
				// SugarCpp.g:679:14: ( ',' expr )*
				try { DebugEnterSubRule(229);
				while (true)
				{
					int alt229=2;
					try { DebugEnterDecision(229, false);
					int LA229_0 = input.LA(1);

					if ((LA229_0==99))
					{
						alt229 = 1;
					}


					} finally { DebugExitDecision(229); }
					switch ( alt229 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:679:15: ',' expr
						{
						DebugLocation(679, 15);
						char_literal529=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6429); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal529);

						DebugLocation(679, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6431);
						expr530=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr530.Tree);

						}
						break;

					default:
						goto loop229;
					}
				}

				loop229:
					;

				} finally { DebugExitSubRule(229); }


				}
				break;

			}
			} finally { DebugExitSubRule(230); }

			DebugLocation(679, 28);
			// SugarCpp.g:679:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt243=2;
			try { DebugEnterSubRule(243);
			try { DebugEnterDecision(243, false);
			int LA243_0 = input.LA(1);

			if ((LA243_0==93))
			{
				alt243 = 1;
			}
			else if ((LA243_0==NEWLINE))
			{
				alt243 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 243, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(243); }
			switch (alt243)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:679:30: ')'
				{
				DebugLocation(679, 30);
				char_literal531=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6439); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal531);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 679:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(679, 37);
					// SugarCpp.g:679:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(679, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(679, 49);
					// SugarCpp.g:679:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(679, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:680:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(680, 12);
				// SugarCpp.g:680:12: ( NEWLINE )+
				int cnt231=0;
				try { DebugEnterSubRule(231);
				while (true)
				{
					int alt231=2;
					try { DebugEnterDecision(231, false);
					int LA231_0 = input.LA(1);

					if ((LA231_0==NEWLINE))
					{
						alt231 = 1;
					}


					} finally { DebugExitDecision(231); }
					switch (alt231)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:680:12: NEWLINE
						{
						DebugLocation(680, 12);
						NEWLINE532=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6461); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE532);


						}
						break;

					default:
						if (cnt231 >= 1)
							goto loop231;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee231 = new EarlyExitException( 231, input );
						DebugRecognitionException(eee231);
						throw eee231;
					}
					cnt231++;
				}
				loop231:
					;

				} finally { DebugExitSubRule(231); }

				DebugLocation(680, 21);
				// SugarCpp.g:680:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt242=2;
				try { DebugEnterSubRule(242);
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==INDENT))
				{
					alt242 = 1;
				}
				else if ((LA242_0==IDENT||LA242_0==NUMBER||LA242_0==STRING||LA242_0==85||LA242_0==90||(LA242_0>=92 && LA242_0<=94)||(LA242_0>=96 && LA242_0<=97)||(LA242_0>=100 && LA242_0<=101)||(LA242_0>=130 && LA242_0<=131)||LA242_0==153||LA242_0==156||(LA242_0>=158 && LA242_0<=159)||LA242_0==180))
				{
					alt242 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(242); }
				switch (alt242)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:680:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(680, 23);
					INDENT533=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6466); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT533);

					DebugLocation(680, 30);
					// SugarCpp.g:680:30: ( NEWLINE )*
					try { DebugEnterSubRule(232);
					while (true)
					{
						int alt232=2;
						try { DebugEnterDecision(232, false);
						int LA232_0 = input.LA(1);

						if ((LA232_0==NEWLINE))
						{
							alt232 = 1;
						}


						} finally { DebugExitDecision(232); }
						switch ( alt232 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:680:30: NEWLINE
							{
							DebugLocation(680, 30);
							NEWLINE534=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6468); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE534);


							}
							break;

						default:
							goto loop232;
						}
					}

					loop232:
						;

					} finally { DebugExitSubRule(232); }

					DebugLocation(680, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6471);
					expr535=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr535.Tree);
					DebugLocation(680, 44);
					// SugarCpp.g:680:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(234);
					while (true)
					{
						int alt234=2;
						try { DebugEnterDecision(234, false);
						try
						{
							alt234 = dfa234.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(234); }
						switch ( alt234 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:680:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(680, 45);
							// SugarCpp.g:680:45: ( ',' | NEWLINE )+
							int cnt233=0;
							try { DebugEnterSubRule(233);
							while (true)
							{
								int alt233=3;
								try { DebugEnterDecision(233, false);
								int LA233_0 = input.LA(1);

								if ((LA233_0==99))
								{
									alt233 = 1;
								}
								else if ((LA233_0==NEWLINE))
								{
									alt233 = 2;
								}


								} finally { DebugExitDecision(233); }
								switch (alt233)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:680:46: ','
									{
									DebugLocation(680, 46);
									char_literal536=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6475); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal536);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:680:52: NEWLINE
									{
									DebugLocation(680, 52);
									NEWLINE537=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6479); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE537);


									}
									break;

								default:
									if (cnt233 >= 1)
										goto loop233;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee233 = new EarlyExitException( 233, input );
									DebugRecognitionException(eee233);
									throw eee233;
								}
								cnt233++;
							}
							loop233:
								;

							} finally { DebugExitSubRule(233); }

							DebugLocation(680, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6483);
							expr538=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr538.Tree);

							}
							break;

						default:
							goto loop234;
						}
					}

					loop234:
						;

					} finally { DebugExitSubRule(234); }

					DebugLocation(680, 69);
					// SugarCpp.g:680:69: ( NEWLINE )*
					try { DebugEnterSubRule(235);
					while (true)
					{
						int alt235=2;
						try { DebugEnterDecision(235, false);
						int LA235_0 = input.LA(1);

						if ((LA235_0==NEWLINE))
						{
							alt235 = 1;
						}


						} finally { DebugExitDecision(235); }
						switch ( alt235 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:680:69: NEWLINE
							{
							DebugLocation(680, 69);
							NEWLINE539=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6487); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE539);


							}
							break;

						default:
							goto loop235;
						}
					}

					loop235:
						;

					} finally { DebugExitSubRule(235); }

					DebugLocation(680, 78);
					// SugarCpp.g:680:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt238=2;
					try { DebugEnterSubRule(238);
					try { DebugEnterDecision(238, false);
					int LA238_0 = input.LA(1);

					if ((LA238_0==93))
					{
						alt238 = 1;
					}
					else if ((LA238_0==DEDENT))
					{
						alt238 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 238, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(238); }
					switch (alt238)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:680:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(680, 80);
						char_literal540=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal540);

						DebugLocation(680, 84);
						// SugarCpp.g:680:84: ( NEWLINE )*
						try { DebugEnterSubRule(236);
						while (true)
						{
							int alt236=2;
							try { DebugEnterDecision(236, false);
							int LA236_0 = input.LA(1);

							if ((LA236_0==NEWLINE))
							{
								alt236 = 1;
							}


							} finally { DebugExitDecision(236); }
							switch ( alt236 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:680:84: NEWLINE
								{
								DebugLocation(680, 84);
								NEWLINE541=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6494); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE541);


								}
								break;

							default:
								goto loop236;
							}
						}

						loop236:
							;

						} finally { DebugExitSubRule(236); }

						DebugLocation(680, 93);
						DEDENT542=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6497); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT542);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:680:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(680, 102);
						DEDENT543=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6501); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT543);

						DebugLocation(680, 109);
						// SugarCpp.g:680:109: ( NEWLINE )*
						try { DebugEnterSubRule(237);
						while (true)
						{
							int alt237=2;
							try { DebugEnterDecision(237, false);
							int LA237_0 = input.LA(1);

							if ((LA237_0==NEWLINE))
							{
								alt237 = 1;
							}


							} finally { DebugExitDecision(237); }
							switch ( alt237 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:680:109: NEWLINE
								{
								DebugLocation(680, 109);
								NEWLINE544=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6503); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE544);


								}
								break;

							default:
								goto loop237;
							}
						}

						loop237:
							;

						} finally { DebugExitSubRule(237); }

						DebugLocation(680, 118);
						char_literal545=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6506); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal545);


						}
						break;

					}
					} finally { DebugExitSubRule(238); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 680:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(680, 127);
						// SugarCpp.g:680:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(680, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(680, 139);
						// SugarCpp.g:680:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(680, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:681:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(681, 14);
					// SugarCpp.g:681:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt241=2;
					try { DebugEnterSubRule(241);
					try { DebugEnterDecision(241, false);
					int LA241_0 = input.LA(1);

					if ((LA241_0==IDENT||LA241_0==NUMBER||LA241_0==STRING||LA241_0==85||LA241_0==90||LA241_0==92||LA241_0==94||(LA241_0>=96 && LA241_0<=97)||(LA241_0>=100 && LA241_0<=101)||(LA241_0>=130 && LA241_0<=131)||LA241_0==153||LA241_0==156||(LA241_0>=158 && LA241_0<=159)||LA241_0==180))
					{
						alt241 = 1;
					}
					} finally { DebugExitDecision(241); }
					switch (alt241)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:681:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(681, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6533);
						expr546=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr546.Tree);
						DebugLocation(681, 20);
						// SugarCpp.g:681:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(240);
						while (true)
						{
							int alt240=2;
							try { DebugEnterDecision(240, false);
							int LA240_0 = input.LA(1);

							if ((LA240_0==NEWLINE||LA240_0==99))
							{
								alt240 = 1;
							}


							} finally { DebugExitDecision(240); }
							switch ( alt240 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:681:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(681, 21);
								// SugarCpp.g:681:21: ( ',' | NEWLINE )+
								int cnt239=0;
								try { DebugEnterSubRule(239);
								while (true)
								{
									int alt239=3;
									try { DebugEnterDecision(239, false);
									int LA239_0 = input.LA(1);

									if ((LA239_0==99))
									{
										alt239 = 1;
									}
									else if ((LA239_0==NEWLINE))
									{
										alt239 = 2;
									}


									} finally { DebugExitDecision(239); }
									switch (alt239)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:681:22: ','
										{
										DebugLocation(681, 22);
										char_literal547=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6537); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_99.Add(char_literal547);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:681:28: NEWLINE
										{
										DebugLocation(681, 28);
										NEWLINE548=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6541); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE548);


										}
										break;

									default:
										if (cnt239 >= 1)
											goto loop239;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee239 = new EarlyExitException( 239, input );
										DebugRecognitionException(eee239);
										throw eee239;
									}
									cnt239++;
								}
								loop239:
									;

								} finally { DebugExitSubRule(239); }

								DebugLocation(681, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6545);
								expr549=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr549.Tree);

								}
								break;

							default:
								goto loop240;
							}
						}

						loop240:
							;

						} finally { DebugExitSubRule(240); }


						}
						break;

					}
					} finally { DebugExitSubRule(241); }

					DebugLocation(681, 47);
					char_literal550=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6551); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal550);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 681:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(681, 54);
						// SugarCpp.g:681:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(681, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(681, 66);
						// SugarCpp.g:681:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(681, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(242); }


				}
				break;

			}
			} finally { DebugExitSubRule(243); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 91);
			LeaveRule("bracket_expr_list", 91);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(684, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:686:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 92);
		TraceIn("suffix_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal551 = default(IToken);
		IToken string_literal552 = default(IToken);
		IToken char_literal553 = default(IToken);
		IToken string_literal555 = default(IToken);
		IToken char_literal559 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident556 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list558 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident560 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list561 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal551_tree = default(CommonTree);
		CommonTree string_literal552_tree = default(CommonTree);
		CommonTree char_literal553_tree = default(CommonTree);
		CommonTree string_literal555_tree = default(CommonTree);
		CommonTree char_literal559_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(686, 1);
		try
		{
			// SugarCpp.g:687:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:687:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(687, 4);
			// SugarCpp.g:687:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:687:5: a= atom_expr
			{
			DebugLocation(687, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6598);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 687:17: -> $a
			{
				DebugLocation(687, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(687, 24);
			// SugarCpp.g:687:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=8;
				try { DebugEnterDecision(244, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt244 = 1;
					}
					break;
				case 101:
					{
					alt244 = 2;
					}
					break;
				case 106:
					{
					alt244 = 3;
					}
					break;
				case 104:
					{
					alt244 = 4;
					}
					break;
				case 92:
					{
					alt244 = 5;
					}
					break;
				case 131:
					{
					alt244 = 6;
					}
					break;
				case 130:
					{
					alt244 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:687:26: '++'
					{
					DebugLocation(687, 26);
					string_literal551=(IToken)Match(input,97,Follow._97_in_suffix_expr6608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal551);



					{
					// AST REWRITE
					// elements: 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(687, 34);
						// SugarCpp.g:687:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(687, 48);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(687, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:688:14: '--'
					{
					DebugLocation(688, 14);
					string_literal552=(IToken)Match(input,101,Follow._101_in_suffix_expr6634); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal552);



					{
					// AST REWRITE
					// elements: 101, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 688:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(688, 22);
						// SugarCpp.g:688:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(688, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(688, 36);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(688, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:689:11: '.' ident
					{
					DebugLocation(689, 11);
					char_literal553=(IToken)Match(input,106,Follow._106_in_suffix_expr6657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal553);

					DebugLocation(689, 15);
					PushFollow(Follow._ident_in_suffix_expr6659);
					ident554=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident554.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 106
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 689:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(689, 24);
						// SugarCpp.g:689:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(689, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(689, 38);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(689, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(689, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:690:11: '->' ident
					{
					DebugLocation(690, 11);
					string_literal555=(IToken)Match(input,104,Follow._104_in_suffix_expr6684); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal555);

					DebugLocation(690, 16);
					PushFollow(Follow._ident_in_suffix_expr6686);
					ident556=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident556.Tree);


					{
					// AST REWRITE
					// elements: 104, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(690, 25);
						// SugarCpp.g:690:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(690, 39);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(690, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(690, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:691:11: bracket_expr_list
					{
					DebugLocation(691, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6711);
					bracket_expr_list557=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list557.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 691:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(691, 32);
						// SugarCpp.g:691:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(691, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(691, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(691, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:692:11: square_expr_list
					{
					DebugLocation(692, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6734);
					square_expr_list558=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list558.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 692:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(692, 31);
						// SugarCpp.g:692:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(692, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(692, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(692, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:693:11: '@' ident bracket_expr_list
					{
					DebugLocation(693, 11);
					char_literal559=(IToken)Match(input,130,Follow._130_in_suffix_expr6757); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal559);

					DebugLocation(693, 15);
					PushFollow(Follow._ident_in_suffix_expr6759);
					ident560=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident560.Tree);
					DebugLocation(693, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6761);
					bracket_expr_list561=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list561.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 693:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(693, 42);
						// SugarCpp.g:693:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(693, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(693, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(693, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(693, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 92);
			LeaveRule("suffix_expr", 92);
			LeaveRule_suffix_expr();
		}
		DebugLocation(695, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:697:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 93);
		TraceIn("atom_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER562 = default(IToken);
		IToken STRING564 = default(IToken);
		IToken char_literal565 = default(IToken);
		IToken char_literal567 = default(IToken);
		IToken char_literal568 = default(IToken);
		IToken char_literal570 = default(IToken);
		IToken char_literal571 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident563 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident566 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr569 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER562_tree = default(CommonTree);
		CommonTree STRING564_tree = default(CommonTree);
		CommonTree char_literal565_tree = default(CommonTree);
		CommonTree char_literal567_tree = default(CommonTree);
		CommonTree char_literal568_tree = default(CommonTree);
		CommonTree char_literal570_tree = default(CommonTree);
		CommonTree char_literal571_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(697, 1);
		try
		{
			// SugarCpp.g:698:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt247=5;
			try { DebugEnterDecision(247, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt247 = 1;
				}
				break;
			case IDENT:
				{
				alt247 = 2;
				}
				break;
			case STRING:
				{
				alt247 = 3;
				}
				break;
			case 130:
				{
				alt247 = 4;
				}
				break;
			case 92:
				{
				alt247 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 247, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:698:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(698, 4);
				NUMBER562=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6799); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER562_tree = (CommonTree)adaptor.Create(NUMBER562);
				adaptor.AddChild(root_0, NUMBER562_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:699:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 4);
				PushFollow(Follow._ident_in_atom_expr6804);
				ident563=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident563.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:700:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 4);
				STRING564=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING564_tree = (CommonTree)adaptor.Create(STRING564);
				adaptor.AddChild(root_0, STRING564_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:701:4: '@' ident
				{
				DebugLocation(701, 4);
				char_literal565=(IToken)Match(input,130,Follow._130_in_atom_expr6814); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal565);

				DebugLocation(701, 8);
				PushFollow(Follow._ident_in_atom_expr6816);
				ident566=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident566.Tree);


				{
				// AST REWRITE
				// elements: ident, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 701:14: -> ^( '@' ident )
				{
					DebugLocation(701, 17);
					// SugarCpp.g:701:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(701, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(701, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:702:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(702, 4);
				char_literal567=(IToken)Match(input,92,Follow._92_in_atom_expr6829); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal567);

				DebugLocation(702, 9);
				PushFollow(Follow._expr_in_atom_expr6833);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(702, 15);
				// SugarCpp.g:702:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt246=2;
				try { DebugEnterSubRule(246);
				try { DebugEnterDecision(246, false);
				int LA246_0 = input.LA(1);

				if ((LA246_0==99))
				{
					alt246 = 1;
				}
				else if ((LA246_0==93))
				{
					alt246 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(246); }
				switch (alt246)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:702:17: ( ',' expr )+ ')'
					{
					DebugLocation(702, 17);
					// SugarCpp.g:702:17: ( ',' expr )+
					int cnt245=0;
					try { DebugEnterSubRule(245);
					while (true)
					{
						int alt245=2;
						try { DebugEnterDecision(245, false);
						int LA245_0 = input.LA(1);

						if ((LA245_0==99))
						{
							alt245 = 1;
						}


						} finally { DebugExitDecision(245); }
						switch (alt245)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:702:18: ',' expr
							{
							DebugLocation(702, 18);
							char_literal568=(IToken)Match(input,99,Follow._99_in_atom_expr6838); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal568);

							DebugLocation(702, 22);
							PushFollow(Follow._expr_in_atom_expr6840);
							expr569=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr569.Tree);

							}
							break;

						default:
							if (cnt245 >= 1)
								goto loop245;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee245 = new EarlyExitException( 245, input );
							DebugRecognitionException(eee245);
							throw eee245;
						}
						cnt245++;
					}
					loop245:
						;

					} finally { DebugExitSubRule(245); }

					DebugLocation(702, 29);
					char_literal570=(IToken)Match(input,93,Follow._93_in_atom_expr6844); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal570);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 702:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(702, 36);
						// SugarCpp.g:702:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(702, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(702, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(702, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:703:17: ')' {...}?
					{
					DebugLocation(703, 17);
					char_literal571=(IToken)Match(input,93,Follow._93_in_atom_expr6871); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal571);

					DebugLocation(703, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 703:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(703, 40);
						// SugarCpp.g:703:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(703, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(703, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(246); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 93);
			LeaveRule("atom_expr", 93);
			LeaveRule_atom_expr();
		}
		DebugLocation(705, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:707:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 94);
		TraceIn("lvalue_item", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix572 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(707, 1);
		try
		{
			// SugarCpp.g:708:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:708:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(708, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6902);
			lvalue_prefix572=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix572.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 94);
			LeaveRule("lvalue_item", 94);
			LeaveRule_lvalue_item();
		}
		DebugLocation(709, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:711:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 95);
		TraceIn("lvalue_prefix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op573 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix574 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix575 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(711, 1);
		try
		{
			// SugarCpp.g:712:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt248=2;
			try { DebugEnterDecision(248, false);
			int LA248_0 = input.LA(1);

			if ((LA248_0==85||LA248_0==90||LA248_0==94||(LA248_0>=96 && LA248_0<=97)||(LA248_0>=100 && LA248_0<=101)||LA248_0==159||LA248_0==180))
			{
				alt248 = 1;
			}
			else if ((LA248_0==IDENT||LA248_0==130))
			{
				alt248 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 248, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:712:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(712, 4);
				// SugarCpp.g:712:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:712:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(712, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6914);
				prefix_expr_op573=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op573.Tree);
				DebugLocation(712, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6916);
				lvalue_prefix574=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix574.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 712:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(712, 38);
					// SugarCpp.g:712:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(712, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(712, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(712, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:713:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(713, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6932);
				lvalue_suffix575=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix575.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 95);
			LeaveRule("lvalue_prefix", 95);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(714, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:716:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 96);
		TraceIn("lvalue_suffix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal576 = default(IToken);
		IToken string_literal577 = default(IToken);
		IToken char_literal578 = default(IToken);
		IToken string_literal580 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident579 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident581 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list584 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal576_tree = default(CommonTree);
		CommonTree string_literal577_tree = default(CommonTree);
		CommonTree char_literal578_tree = default(CommonTree);
		CommonTree string_literal580_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(716, 1);
		try
		{
			// SugarCpp.g:717:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:717:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(717, 4);
			// SugarCpp.g:717:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:717:5: a= lvalue_atom
			{
			DebugLocation(717, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6946);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 717:19: -> $a
			{
				DebugLocation(717, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(717, 26);
			// SugarCpp.g:717:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(250);
			while (true)
			{
				int alt250=7;
				try { DebugEnterDecision(250, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt250 = 1;
					}
					break;
				case 101:
					{
					alt250 = 2;
					}
					break;
				case 106:
					{
					alt250 = 3;
					}
					break;
				case 104:
					{
					alt250 = 4;
					}
					break;
				case 92:
				case 114:
					{
					alt250 = 5;
					}
					break;
				case 131:
					{
					alt250 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(250); }
				switch ( alt250 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:717:28: '++'
					{
					DebugLocation(717, 28);
					string_literal576=(IToken)Match(input,97,Follow._97_in_lvalue_suffix6956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal576);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 717:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(717, 36);
						// SugarCpp.g:717:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(717, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(717, 50);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(717, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:718:16: '--'
					{
					DebugLocation(718, 16);
					string_literal577=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6984); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal577);



					{
					// AST REWRITE
					// elements: 101, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 718:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(718, 24);
						// SugarCpp.g:718:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(718, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(718, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(718, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:719:13: '.' ident
					{
					DebugLocation(719, 13);
					char_literal578=(IToken)Match(input,106,Follow._106_in_lvalue_suffix7009); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal578);

					DebugLocation(719, 17);
					PushFollow(Follow._ident_in_lvalue_suffix7011);
					ident579=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident579.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 106
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 719:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(719, 26);
						// SugarCpp.g:719:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(719, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(719, 40);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(719, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(719, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:720:13: '->' ident
					{
					DebugLocation(720, 13);
					string_literal580=(IToken)Match(input,104,Follow._104_in_lvalue_suffix7038); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal580);

					DebugLocation(720, 18);
					PushFollow(Follow._ident_in_lvalue_suffix7040);
					ident581=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident581.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 720:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(720, 27);
						// SugarCpp.g:720:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(720, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(720, 41);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(720, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(720, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:721:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(721, 13);
					// SugarCpp.g:721:13: ( generic_parameter )?
					int alt249=2;
					try { DebugEnterSubRule(249);
					try { DebugEnterDecision(249, false);
					int LA249_0 = input.LA(1);

					if ((LA249_0==114))
					{
						alt249 = 1;
					}
					} finally { DebugExitDecision(249); }
					switch (alt249)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:721:13: generic_parameter
						{
						DebugLocation(721, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix7067);
						generic_parameter582=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter582.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(249); }

					DebugLocation(721, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7070);
					bracket_expr_list583=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list583.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, lvalue_suffix, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 721:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(721, 53);
						// SugarCpp.g:721:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(721, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(721, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(721, 80);
						// SugarCpp.g:721:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(721, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(721, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:722:13: square_expr_list
					{
					DebugLocation(722, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7098);
					square_expr_list584=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list584.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 722:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(722, 33);
						// SugarCpp.g:722:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(722, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(722, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(722, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop250;
				}
			}

			loop250:
				;

			} finally { DebugExitSubRule(250); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 96);
			LeaveRule("lvalue_suffix", 96);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(724, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:726:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 97);
		TraceIn("lvalue_atom", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal586 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident585 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident587 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal586_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(726, 1);
		try
		{
			// SugarCpp.g:727:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt251=2;
			try { DebugEnterDecision(251, false);
			int LA251_0 = input.LA(1);

			if ((LA251_0==IDENT))
			{
				alt251 = 1;
			}
			else if ((LA251_0==130))
			{
				alt251 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 251, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:727:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(727, 4);
				PushFollow(Follow._ident_in_lvalue_atom7136);
				ident585=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident585.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:728:4: '@' ident
				{
				DebugLocation(728, 4);
				char_literal586=(IToken)Match(input,130,Follow._130_in_lvalue_atom7141); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal586);

				DebugLocation(728, 8);
				PushFollow(Follow._ident_in_lvalue_atom7143);
				ident587=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident587.Tree);


				{
				// AST REWRITE
				// elements: ident, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 728:14: -> ^( '@' ident )
				{
					DebugLocation(728, 17);
					// SugarCpp.g:728:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(728, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(728, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 97);
			LeaveRule("lvalue_atom", 97);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(729, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:731:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 98);
		TraceIn("lvalue", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal588 = default(IToken);
		IToken char_literal590 = default(IToken);
		IToken char_literal592 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item591 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item593 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal588_tree = default(CommonTree);
		CommonTree char_literal590_tree = default(CommonTree);
		CommonTree char_literal592_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(731, 1);
		try
		{
			// SugarCpp.g:732:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt253=2;
			try { DebugEnterDecision(253, false);
			int LA253_0 = input.LA(1);

			if ((LA253_0==92))
			{
				alt253 = 1;
			}
			else if ((LA253_0==IDENT||LA253_0==85||LA253_0==90||LA253_0==94||(LA253_0>=96 && LA253_0<=97)||(LA253_0>=100 && LA253_0<=101)||LA253_0==130||LA253_0==159||LA253_0==180))
			{
				alt253 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 253, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(253); }
			switch (alt253)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:732:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(732, 4);
				char_literal588=(IToken)Match(input,92,Follow._92_in_lvalue7162); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal588);

				DebugLocation(732, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7164);
				lvalue_item589=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item589.Tree);
				DebugLocation(732, 20);
				// SugarCpp.g:732:20: ( ',' lvalue_item )+
				int cnt252=0;
				try { DebugEnterSubRule(252);
				while (true)
				{
					int alt252=2;
					try { DebugEnterDecision(252, false);
					int LA252_0 = input.LA(1);

					if ((LA252_0==99))
					{
						alt252 = 1;
					}


					} finally { DebugExitDecision(252); }
					switch (alt252)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:732:21: ',' lvalue_item
						{
						DebugLocation(732, 21);
						char_literal590=(IToken)Match(input,99,Follow._99_in_lvalue7167); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal590);

						DebugLocation(732, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7169);
						lvalue_item591=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item591.Tree);

						}
						break;

					default:
						if (cnt252 >= 1)
							goto loop252;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee252 = new EarlyExitException( 252, input );
						DebugRecognitionException(eee252);
						throw eee252;
					}
					cnt252++;
				}
				loop252:
					;

				} finally { DebugExitSubRule(252); }

				DebugLocation(732, 39);
				char_literal592=(IToken)Match(input,93,Follow._93_in_lvalue7173); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal592);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 732:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(732, 46);
					// SugarCpp.g:732:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(732, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(732, 60);
					// SugarCpp.g:732:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(732, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:733:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(733, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7187);
				lvalue_item593=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item593.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 98);
			LeaveRule("lvalue", 98);
			LeaveRule_lvalue();
		}
		DebugLocation(734, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:736:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 99);
		TraceIn("ident", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT594 = default(IToken);
		IToken string_literal595 = default(IToken);
		IToken IDENT596 = default(IToken);

		CommonTree IDENT594_tree = default(CommonTree);
		CommonTree string_literal595_tree = default(CommonTree);
		CommonTree IDENT596_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(736, 1);
		try
		{
			// SugarCpp.g:737:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:737:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(737, 4);
			IDENT594=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7198); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT594_tree = (CommonTree)adaptor.Create(IDENT594);
			adaptor.AddChild(root_0, IDENT594_tree);
			}
			DebugLocation(737, 10);
			// SugarCpp.g:737:10: ( '::' IDENT )*
			try { DebugEnterSubRule(254);
			while (true)
			{
				int alt254=2;
				try { DebugEnterDecision(254, false);
				int LA254_0 = input.LA(1);

				if ((LA254_0==111))
				{
					alt254 = 1;
				}


				} finally { DebugExitDecision(254); }
				switch ( alt254 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:737:11: '::' IDENT
					{
					DebugLocation(737, 11);
					string_literal595=(IToken)Match(input,111,Follow._111_in_ident7201); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal595_tree = (CommonTree)adaptor.Create(string_literal595);
					adaptor.AddChild(root_0, string_literal595_tree);
					}
					DebugLocation(737, 16);
					IDENT596=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7203); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT596_tree = (CommonTree)adaptor.Create(IDENT596);
					adaptor.AddChild(root_0, IDENT596_tree);
					}

					}
					break;

				default:
					goto loop254;
				}
			}

			loop254:
				;

			} finally { DebugExitSubRule(254); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 99);
			LeaveRule("ident", 99);
			LeaveRule_ident();
		}
		DebugLocation(738, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:740:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 100);
		TraceIn("infix_func", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal597 = default(IToken);
		IToken char_literal599 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident598 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal597_tree = default(CommonTree);
		CommonTree char_literal599_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(740, 1);
		try
		{
			// SugarCpp.g:741:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:741:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(741, 7);
			char_literal597=(IToken)Match(input,135,Follow._135_in_infix_func7216); if (state.failed) return retval;
			DebugLocation(741, 9);
			PushFollow(Follow._ident_in_infix_func7219);
			ident598=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident598.Tree);
			DebugLocation(741, 18);
			char_literal599=(IToken)Match(input,135,Follow._135_in_infix_func7221); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 100);
			LeaveRule("infix_func", 100);
			LeaveRule_infix_func();
		}
		DebugLocation(742, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 101);
		TraceIn("synpred1_SugarCpp_fragment", 101);
		try
		{
			// SugarCpp.g:552:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:552:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(552, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4531);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(552, 17);
			if (input.LA(1)==119||input.LA(1)==178)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 101);
			LeaveRule("synpred1_SugarCpp_fragment", 101);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 102);
		TraceIn("synpred2_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:559:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:559:5: '[' feed_expr 'for'
			{
			DebugLocation(559, 5);
			Match(input,131,Follow._131_in_synpred2_SugarCpp4645); if (state.failed) return;
			DebugLocation(559, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4647);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(559, 19);
			Match(input,147,Follow._147_in_synpred2_SugarCpp4649); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 102);
			LeaveRule("synpred2_SugarCpp_fragment", 102);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 103);
		TraceIn("synpred3_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:623:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:623:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(623, 28);
			Match(input,114,Follow._114_in_synpred3_SugarCpp5601); if (state.failed) return;
			DebugLocation(623, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5603);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(623, 38);
			// SugarCpp.g:623:38: ( ',' ident )*
			try { DebugEnterSubRule(255);
			while (true)
			{
				int alt255=2;
				try { DebugEnterDecision(255, false);
				int LA255_0 = input.LA(1);

				if ((LA255_0==99))
				{
					alt255 = 1;
				}


				} finally { DebugExitDecision(255); }
				switch ( alt255 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:39: ',' ident
					{
					DebugLocation(623, 39);
					Match(input,99,Follow._99_in_synpred3_SugarCpp5606); if (state.failed) return;
					DebugLocation(623, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5608);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop255;
				}
			}

			loop255:
				;

			} finally { DebugExitSubRule(255); }

			DebugLocation(623, 51);
			Match(input,124,Follow._124_in_synpred3_SugarCpp5612); if (state.failed) return;
			DebugLocation(623, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5614);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 103);
			LeaveRule("synpred3_SugarCpp_fragment", 103);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 104);
		TraceIn("synpred4_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:661:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:661:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(661, 5);
			Match(input,92,Follow._92_in_synpred4_SugarCpp6227); if (state.failed) return;
			DebugLocation(661, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6229);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(661, 19);
			Match(input,93,Follow._93_in_synpred4_SugarCpp6231); if (state.failed) return;
			DebugLocation(661, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6233);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 104);
			LeaveRule("synpred4_SugarCpp_fragment", 104);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA30 dfa30;
	private DFA37 dfa37;
	private DFA44 dfa44;
	private DFA51 dfa51;
	private DFA80 dfa80;
	private DFA102 dfa102;
	private DFA111 dfa111;
	private DFA116 dfa116;
	private DFA130 dfa130;
	private DFA172 dfa172;
	private DFA161 dfa161;
	private DFA196 dfa196;
	private DFA195 dfa195;
	private DFA204 dfa204;
	private DFA234 dfa234;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa30 = new DFA30( this );
		dfa37 = new DFA37( this );
		dfa44 = new DFA44( this );
		dfa51 = new DFA51( this );
		dfa80 = new DFA80( this );
		dfa102 = new DFA102( this );
		dfa111 = new DFA111( this );
		dfa116 = new DFA116( this );
		dfa130 = new DFA130( this );
		dfa172 = new DFA172( this );
		dfa161 = new DFA161( this );
		dfa196 = new DFA196( this );
		dfa195 = new DFA195( this );
		dfa204 = new DFA204( this );
		dfa234 = new DFA234( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x68\xFFFF";
		private const string DFA4_eofS =
			"\x68\xFFFF";
		private const string DFA4_minS =
			"\x2\x2E\x1\xFFFF\x1\x2E\x6\xFFFF\x3\x5C\x1\x2E\x1\xFFFF\x3\x2E\x1\x37"+
			"\x3\x2E\x1\x5C\x3\x5D\x3\x5C\x1\x2E\x6\x5D\x1\x2E\x1\x63\x6\x2E\x1\x63"+
			"\x2\x2E\x1\x63\x1\x2E\x4\x5D\x1\x5C\x11\x5D\x2\x2E\x1\x63\x2\x2E\x1\x63"+
			"\x2\x2E\x1\x63\x3\x2E\xF\x5D\x3\x2E\x3\x5D";
		private const string DFA4_maxS =
			"\x1\xB4\x1\xA2\x1\xFFFF\x1\xB4\x6\xFFFF\x3\x84\x1\x2E\x1\xFFFF\x1\x2E"+
			"\x1\x3D\x1\xA2\x1\x37\x2\x3D\x1\xB4\x1\x84\x2\x63\x1\x6F\x3\x84\x1\xB4"+
			"\x2\x63\x1\x6F\x2\x63\x1\x6F\x1\x3D\x1\x84\x2\x2E\x4\x3D\x1\x84\x1\x2E"+
			"\x1\x3D\x1\x84\x1\x2E\x2\x63\x2\x6F\x1\x84\x2\x63\x1\x6F\x2\x63\x1\x6F"+
			"\x2\x63\x1\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x1\x2E\x1\x3D\x1\x84\x1\x2E"+
			"\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84\x3\x2E\x1\x6F\x2\x63\x2\x6F\x2\x63"+
			"\x2\x6F\x2\x63\x4\x6F\x3\x2E\x3\x6F";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x4\xFFFF"+
			"\x1\x4\x59\xFFFF";
		private const string DFA4_specialS =
			"\x68\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x2\x2\x5\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF\x1\x2",
				"\x1\xA\x5E\xFFFF\x1\xB\x14\xFFFF\x1\xC",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xE"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xE\x1\xD\x1\xE\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x30\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x10\x6\xFFFF\x1\x11\xB\xFFFF\x1\xF\x14\xFFFF\x1\x12",
				"\x1\x13\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x14\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x15",
				"",
				"\x1\x16",
				"\x1\x19\x9\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x1A\x5E\xFFFF\x1\x1B\x14\xFFFF\x1\x1C",
				"\x1\x1D",
				"\x1\x20\x9\xFFFF\x1\x1E\x4\xFFFF\x1\x1F",
				"\x1\x23\x9\xFFFF\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xE"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xE\x1\xD\x1\xE\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x30\xFFFF\x1\x2",
				"\x1\x10\x6\xFFFF\x1\x11\xB\xFFFF\x1\xF\x14\xFFFF\x1\x12",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x28\x6\xFFFF\x1\x11\xB\xFFFF\x1\x27\x14\xFFFF\x1\x12",
				"\x1\x29\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x2A\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x3\x8\xFFFF\x1\x1D\x24\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x2\x2\x5\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF"+
				"\x1\x2",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x2D",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x30",
				"\x1\x33\x9\xFFFF\x1\x31\x4\xFFFF\x1\x32",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x34",
				"\x1\x35",
				"\x1\x38\x9\xFFFF\x1\x36\x4\xFFFF\x1\x37",
				"\x1\x3B\x9\xFFFF\x1\x39\x4\xFFFF\x1\x3A",
				"\x1\x3E\x9\xFFFF\x1\x3C\x4\xFFFF\x1\x3D",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x46",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x47",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x28\x6\xFFFF\x1\x11\xB\xFFFF\x1\x27\x14\xFFFF\x1\x12",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x4A",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x4D",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x50",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x51",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x2D",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x52",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x30",
				"\x1\x53",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x57",
				"\x1\x5A\x9\xFFFF\x1\x58\x4\xFFFF\x1\x59",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x5B",
				"\x1\x5E\x9\xFFFF\x1\x5C\x4\xFFFF\x1\x5D",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x47",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x62",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x4A",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x63",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x4D",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x64",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x50",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x51",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x52",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x62",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x63",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x64"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\x4\xFFFF";
		private const string DFA30_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA30_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA30_maxS =
			"\x1\x37\x1\xB4\x2\xFFFF";
		private const string DFA30_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA30_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "265:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x4\xFFFF";
		private const string DFA37_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA37_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA37_maxS =
			"\x1\x37\x1\xB4\x2\xFFFF";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA37_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "273:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x37\x1\xB4\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "277:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA51_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA51_maxS =
			"\x1\x37\x1\xB4\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "278:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA80 : DFA
	{
		private const string DFA80_eotS =
			"\x11\xFFFF";
		private const string DFA80_eofS =
			"\x11\xFFFF";
		private const string DFA80_minS =
			"\x1\x2E\x1\xFFFF\x2\x2E\x1\xFFFF\x4\x2E\x1\x5A\x3\x2E\x2\x5A\x1\x2E\x1"+
			"\x5A";
		private const string DFA80_maxS =
			"\x1\xB4\x1\xFFFF\x1\xB4\x1\xA3\x1\xFFFF\x1\x2E\x1\xA3\x1\x70\x1\xB4\x1"+
			"\x83\x1\x2E\x1\xA3\x1\xB4\x2\x83\x1\x2E\x1\x83";
		private const string DFA80_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA80_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA80_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1"+
				"\x10\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x30\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x20\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x2\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x30\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x30\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
		private static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
		private static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
		private static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
		private static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
		private static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
		private static readonly short[][] DFA80_transition;

		static DFA80()
		{
			int numStates = DFA80_transitionS.Length;
			DFA80_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA80_transition[i] = DFA.UnpackEncodedString(DFA80_transitionS[i]);
			}
		}

		public DFA80( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 80;
			this.eot = DFA80_eot;
			this.eof = DFA80_eof;
			this.min = DFA80_min;
			this.max = DFA80_max;
			this.accept = DFA80_accept;
			this.special = DFA80_special;
			this.transition = DFA80_transition;
		}

		public override string Description { get { return "358:15: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA102 : DFA
	{
		private const string DFA102_eotS =
			"\x9\xFFFF";
		private const string DFA102_eofS =
			"\x9\xFFFF";
		private const string DFA102_minS =
			"\x1\x2E\x1\x8\x4\xFFFF\x1\x2E\x1\xFFFF\x1\x8";
		private const string DFA102_maxS =
			"\x1\xB4\x1\xB1\x4\xFFFF\x1\x2E\x1\xFFFF\x1\xB1";
		private const string DFA102_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA102_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA102_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x4\x2\xFFFF\x1\x3\x7\xFFFF\x1\x5",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x13\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x13\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA102_eot = DFA.UnpackEncodedString(DFA102_eotS);
		private static readonly short[] DFA102_eof = DFA.UnpackEncodedString(DFA102_eofS);
		private static readonly char[] DFA102_min = DFA.UnpackEncodedStringToUnsignedChars(DFA102_minS);
		private static readonly char[] DFA102_max = DFA.UnpackEncodedStringToUnsignedChars(DFA102_maxS);
		private static readonly short[] DFA102_accept = DFA.UnpackEncodedString(DFA102_acceptS);
		private static readonly short[] DFA102_special = DFA.UnpackEncodedString(DFA102_specialS);
		private static readonly short[][] DFA102_transition;

		static DFA102()
		{
			int numStates = DFA102_transitionS.Length;
			DFA102_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA102_transition[i] = DFA.UnpackEncodedString(DFA102_transitionS[i]);
			}
		}

		public DFA102( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 102;
			this.eot = DFA102_eot;
			this.eof = DFA102_eof;
			this.min = DFA102_min;
			this.max = DFA102_max;
			this.accept = DFA102_accept;
			this.special = DFA102_special;
			this.transition = DFA102_transition;
		}

		public override string Description { get { return "401:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA111 : DFA
	{
		private const string DFA111_eotS =
			"\x4\xFFFF";
		private const string DFA111_eofS =
			"\x4\xFFFF";
		private const string DFA111_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA111_maxS =
			"\x1\x96\x1\xB4\x2\xFFFF";
		private const string DFA111_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA111_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA111_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
		private static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
		private static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
		private static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
		private static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
		private static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
		private static readonly short[][] DFA111_transition;

		static DFA111()
		{
			int numStates = DFA111_transitionS.Length;
			DFA111_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA111_transition[i] = DFA.UnpackEncodedString(DFA111_transitionS[i]);
			}
		}

		public DFA111( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 111;
			this.eot = DFA111_eot;
			this.eof = DFA111_eof;
			this.min = DFA111_min;
			this.max = DFA111_max;
			this.accept = DFA111_accept;
			this.special = DFA111_special;
			this.transition = DFA111_transition;
		}

		public override string Description { get { return "432:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA116 : DFA
	{
		private const string DFA116_eotS =
			"\x4\xFFFF";
		private const string DFA116_eofS =
			"\x4\xFFFF";
		private const string DFA116_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA116_maxS =
			"\x1\x96\x1\xB4\x2\xFFFF";
		private const string DFA116_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA116_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA116_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA116_eot = DFA.UnpackEncodedString(DFA116_eotS);
		private static readonly short[] DFA116_eof = DFA.UnpackEncodedString(DFA116_eofS);
		private static readonly char[] DFA116_min = DFA.UnpackEncodedStringToUnsignedChars(DFA116_minS);
		private static readonly char[] DFA116_max = DFA.UnpackEncodedStringToUnsignedChars(DFA116_maxS);
		private static readonly short[] DFA116_accept = DFA.UnpackEncodedString(DFA116_acceptS);
		private static readonly short[] DFA116_special = DFA.UnpackEncodedString(DFA116_specialS);
		private static readonly short[][] DFA116_transition;

		static DFA116()
		{
			int numStates = DFA116_transitionS.Length;
			DFA116_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA116_transition[i] = DFA.UnpackEncodedString(DFA116_transitionS[i]);
			}
		}

		public DFA116( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 116;
			this.eot = DFA116_eot;
			this.eof = DFA116_eof;
			this.min = DFA116_min;
			this.max = DFA116_max;
			this.accept = DFA116_accept;
			this.special = DFA116_special;
			this.transition = DFA116_transition;
		}

		public override string Description { get { return "435:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x7\xFFFF";
		private const string DFA130_eofS =
			"\x7\xFFFF";
		private const string DFA130_minS =
			"\x1\x2E\x1\x8\x1\xFFFF\x1\x2E\x2\xFFFF\x1\x8";
		private const string DFA130_maxS =
			"\x1\xB4\x1\xB3\x1\xFFFF\x1\x2E\x2\xFFFF\x1\xB3";
		private const string DFA130_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA130_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x9\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x9\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "466:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA172 : DFA
	{
		private const string DFA172_eotS =
			"\x7\xFFFF";
		private const string DFA172_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA172_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA172_maxS =
			"\x1\xAF\x1\xB4\x2\xFFFF\x2\xB4\x1\xFFFF";
		private const string DFA172_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA172_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA172_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x13\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x6\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x3\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA172_eot = DFA.UnpackEncodedString(DFA172_eotS);
		private static readonly short[] DFA172_eof = DFA.UnpackEncodedString(DFA172_eofS);
		private static readonly char[] DFA172_min = DFA.UnpackEncodedStringToUnsignedChars(DFA172_minS);
		private static readonly char[] DFA172_max = DFA.UnpackEncodedStringToUnsignedChars(DFA172_maxS);
		private static readonly short[] DFA172_accept = DFA.UnpackEncodedString(DFA172_acceptS);
		private static readonly short[] DFA172_special = DFA.UnpackEncodedString(DFA172_specialS);
		private static readonly short[][] DFA172_transition;

		static DFA172()
		{
			int numStates = DFA172_transitionS.Length;
			DFA172_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA172_transition[i] = DFA.UnpackEncodedString(DFA172_transitionS[i]);
			}
		}

		public DFA172( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 172;
			this.eot = DFA172_eot;
			this.eof = DFA172_eof;
			this.min = DFA172_min;
			this.max = DFA172_max;
			this.accept = DFA172_accept;
			this.special = DFA172_special;
			this.transition = DFA172_transition;
		}

		public override string Description { get { return "517:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA161 : DFA
	{
		private const string DFA161_eotS =
			"\x4\xFFFF";
		private const string DFA161_eofS =
			"\x4\xFFFF";
		private const string DFA161_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA161_maxS =
			"\x2\x37\x2\xFFFF";
		private const string DFA161_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA161_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA161_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1",
				"\x1\x2\x26\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA161_eot = DFA.UnpackEncodedString(DFA161_eotS);
		private static readonly short[] DFA161_eof = DFA.UnpackEncodedString(DFA161_eofS);
		private static readonly char[] DFA161_min = DFA.UnpackEncodedStringToUnsignedChars(DFA161_minS);
		private static readonly char[] DFA161_max = DFA.UnpackEncodedStringToUnsignedChars(DFA161_maxS);
		private static readonly short[] DFA161_accept = DFA.UnpackEncodedString(DFA161_acceptS);
		private static readonly short[] DFA161_special = DFA.UnpackEncodedString(DFA161_specialS);
		private static readonly short[][] DFA161_transition;

		static DFA161()
		{
			int numStates = DFA161_transitionS.Length;
			DFA161_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA161_transition[i] = DFA.UnpackEncodedString(DFA161_transitionS[i]);
			}
		}

		public DFA161( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 161;
			this.eot = DFA161_eot;
			this.eof = DFA161_eof;
			this.min = DFA161_min;
			this.max = DFA161_max;
			this.accept = DFA161_accept;
			this.special = DFA161_special;
			this.transition = DFA161_transition;
		}

		public override string Description { get { return "517:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA196 : DFA
	{
		private const string DFA196_eotS =
			"\x7\xFFFF";
		private const string DFA196_eofS =
			"\x7\xFFFF";
		private const string DFA196_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA196_maxS =
			"\x5\xB4\x2\xFFFF";
		private const string DFA196_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA196_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA196_transitionS =
			{
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x14\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA196_eot = DFA.UnpackEncodedString(DFA196_eotS);
		private static readonly short[] DFA196_eof = DFA.UnpackEncodedString(DFA196_eofS);
		private static readonly char[] DFA196_min = DFA.UnpackEncodedStringToUnsignedChars(DFA196_minS);
		private static readonly char[] DFA196_max = DFA.UnpackEncodedStringToUnsignedChars(DFA196_maxS);
		private static readonly short[] DFA196_accept = DFA.UnpackEncodedString(DFA196_acceptS);
		private static readonly short[] DFA196_special = DFA.UnpackEncodedString(DFA196_specialS);
		private static readonly short[][] DFA196_transition;

		static DFA196()
		{
			int numStates = DFA196_transitionS.Length;
			DFA196_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA196_transition[i] = DFA.UnpackEncodedString(DFA196_transitionS[i]);
			}
		}

		public DFA196( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 196;
			this.eot = DFA196_eot;
			this.eof = DFA196_eof;
			this.min = DFA196_min;
			this.max = DFA196_max;
			this.accept = DFA196_accept;
			this.special = DFA196_special;
			this.transition = DFA196_transition;
		}

		public override string Description { get { return "560:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA195 : DFA
	{
		private const string DFA195_eotS =
			"\x7\xFFFF";
		private const string DFA195_eofS =
			"\x7\xFFFF";
		private const string DFA195_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA195_maxS =
			"\x1\x84\x4\xB4\x2\xFFFF";
		private const string DFA195_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA195_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA195_transitionS =
			{
				"\x1\x4\x26\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x14\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA195_eot = DFA.UnpackEncodedString(DFA195_eotS);
		private static readonly short[] DFA195_eof = DFA.UnpackEncodedString(DFA195_eofS);
		private static readonly char[] DFA195_min = DFA.UnpackEncodedStringToUnsignedChars(DFA195_minS);
		private static readonly char[] DFA195_max = DFA.UnpackEncodedStringToUnsignedChars(DFA195_maxS);
		private static readonly short[] DFA195_accept = DFA.UnpackEncodedString(DFA195_acceptS);
		private static readonly short[] DFA195_special = DFA.UnpackEncodedString(DFA195_specialS);
		private static readonly short[][] DFA195_transition;

		static DFA195()
		{
			int numStates = DFA195_transitionS.Length;
			DFA195_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA195_transition[i] = DFA.UnpackEncodedString(DFA195_transitionS[i]);
			}
		}

		public DFA195( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 195;
			this.eot = DFA195_eot;
			this.eof = DFA195_eof;
			this.min = DFA195_min;
			this.max = DFA195_max;
			this.accept = DFA195_accept;
			this.special = DFA195_special;
			this.transition = DFA195_transition;
		}

		public override string Description { get { return "()* loopback of 560:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA204 : DFA
	{
		private const string DFA204_eotS =
			"\xB\xFFFF";
		private const string DFA204_eofS =
			"\xB\xFFFF";
		private const string DFA204_minS =
			"\x2\x2E\x1\xFFFF\x1\x56\x1\xFFFF\x2\x2E\x2\x56\x1\x2E\x1\x56";
		private const string DFA204_maxS =
			"\x2\xB4\x1\xFFFF\x1\xB3\x1\xFFFF\x1\x2E\x1\xB4\x2\xB3\x1\x2E\x1\xB3";
		private const string DFA204_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA204_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA204_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x9\xFFFF\x1\x2\xB\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x10\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x14\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF\x4\x2"
			};

		private static readonly short[] DFA204_eot = DFA.UnpackEncodedString(DFA204_eotS);
		private static readonly short[] DFA204_eof = DFA.UnpackEncodedString(DFA204_eofS);
		private static readonly char[] DFA204_min = DFA.UnpackEncodedStringToUnsignedChars(DFA204_minS);
		private static readonly char[] DFA204_max = DFA.UnpackEncodedStringToUnsignedChars(DFA204_maxS);
		private static readonly short[] DFA204_accept = DFA.UnpackEncodedString(DFA204_acceptS);
		private static readonly short[] DFA204_special = DFA.UnpackEncodedString(DFA204_specialS);
		private static readonly short[][] DFA204_transition;

		static DFA204()
		{
			int numStates = DFA204_transitionS.Length;
			DFA204_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA204_transition[i] = DFA.UnpackEncodedString(DFA204_transitionS[i]);
			}
		}

		public DFA204( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 204;
			this.eot = DFA204_eot;
			this.eof = DFA204_eof;
			this.min = DFA204_min;
			this.max = DFA204_max;
			this.accept = DFA204_accept;
			this.special = DFA204_special;
			this.transition = DFA204_transition;
		}

		public override string Description { get { return "573:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA234 : DFA
	{
		private const string DFA234_eotS =
			"\x4\xFFFF";
		private const string DFA234_eofS =
			"\x4\xFFFF";
		private const string DFA234_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA234_maxS =
			"\x1\x63\x1\xB4\x2\xFFFF";
		private const string DFA234_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA234_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA234_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x14\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA234_eot = DFA.UnpackEncodedString(DFA234_eotS);
		private static readonly short[] DFA234_eof = DFA.UnpackEncodedString(DFA234_eofS);
		private static readonly char[] DFA234_min = DFA.UnpackEncodedStringToUnsignedChars(DFA234_minS);
		private static readonly char[] DFA234_max = DFA.UnpackEncodedStringToUnsignedChars(DFA234_maxS);
		private static readonly short[] DFA234_accept = DFA.UnpackEncodedString(DFA234_acceptS);
		private static readonly short[] DFA234_special = DFA.UnpackEncodedString(DFA234_specialS);
		private static readonly short[][] DFA234_transition;

		static DFA234()
		{
			int numStates = DFA234_transitionS.Length;
			DFA234_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA234_transition[i] = DFA.UnpackEncodedString(DFA234_transitionS[i]);
			}
		}

		public DFA234( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 234;
			this.eot = DFA234_eot;
			this.eof = DFA234_eof;
			this.min = DFA234_min;
			this.max = DFA234_max;
			this.accept = DFA234_accept;
			this.special = DFA234_special;
			this.transition = DFA234_transition;
		}

		public override string Description { get { return "()* loopback of 680:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root587 = new BitSet(new ulong[]{0x80400000000000UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _global_block_in_root590 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block612 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block614 = new BitSet(new ulong[]{0x80400000000002UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _func_def_in_node637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item705 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item708 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item710 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item713 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item715 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_attribute_item737 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item740 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item742 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item745 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item747 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_attribute_item769 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item772 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item774 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item777 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item779 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_attribute808 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400002000UL});
		public static readonly BitSet _attribute_item_in_attribute810 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_attribute813 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400002000UL});
		public static readonly BitSet _attribute_item_in_attribute815 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_attribute819 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute821 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _attribute_in_global_alloc840 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc843 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_global_alloc847 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_global_alloc849 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_global_alloc854 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _112_in_global_alloc858 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_global_alloc1000 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc1003 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_global_alloc1006 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_global_alloc1008 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _attribute_in_global_using1049 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_global_using1052 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1054 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _attribute_in_global_typedef1078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_global_typedef1081 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_global_typedef1083 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_global_typedef1085 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_global_typedef1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1111 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_import_def1114 = new BitSet(new ulong[]{0x2080000000000002UL});
		public static readonly BitSet _STRING_in_import_def1116 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1120 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_import_def1123 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1125 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _STRING_in_import_def1130 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1132 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1162 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_enum_def1165 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1167 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_enum_def1169 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _ident_in_enum_def1172 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_enum_def1175 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1177 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1210 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_namespace_def1213 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_namespace_def1215 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1218 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1221 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1223 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _global_block_in_namespace_def1226 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1400UL});
		public static readonly BitSet _140_in_class_def1261 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1263 = new BitSet(new ulong[]{0x80000000000002UL,0x4400000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1266 = new BitSet(new ulong[]{0x80000000000002UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def1271 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1273 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1276 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1278 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1285 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_class_def1288 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _NEWLINE_in_class_def1290 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _global_block_in_class_def1293 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_class_def1337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_class_def1339 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1341 = new BitSet(new ulong[]{0x80000000000002UL,0x4400010000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1344 = new BitSet(new ulong[]{0x80000000000002UL,0x400010000000UL});
		public static readonly BitSet _92_in_class_def1349 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000UL});
		public static readonly BitSet _func_args_in_class_def1351 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_class_def1353 = new BitSet(new ulong[]{0x80000000000002UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def1358 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1360 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1363 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1365 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1372 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_class_def1375 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _NEWLINE_in_class_def1377 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x10120C24223408UL});
		public static readonly BitSet _global_block_in_class_def1380 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1435 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_list1438 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_type_list1440 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _type_single_in_type_name1462 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1466 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_type_name1469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1473 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1516 = new BitSet(new ulong[]{0x400000000000UL,0x30000000UL,0xC04002000UL});
		public static readonly BitSet _type_list_in_type_name1518 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1521 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1523 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_type_name1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1530 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1556 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x8UL});
		public static readonly BitSet _90_in_type_single1560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_type_single1576 = new BitSet(new ulong[]{0x2100400000000000UL,0x3B54200000UL,0x100000D200001CUL});
		public static readonly BitSet _expr_in_type_single1580 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_type_single1583 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_type_single1585 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_type_single1614 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1664 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_no_array1668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1703 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _94_in_type_star1707 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1753 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_type_template_type1757 = new BitSet(new ulong[]{0x400000000000UL,0x1000000010000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_type_template_type1760 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_type_template_type1763 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_type_template_type1765 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_type_template_type1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_type_ident1811 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x804002000UL});
		public static readonly BitSet _141_in_type_ident1814 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x804000000UL});
		public static readonly BitSet _163_in_type_ident1817 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_type_ident1820 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_type_ident1823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1854 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter_inside1857 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1859 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _114_in_generic_parameter1881 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1883 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_generic_parameter1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1900 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_func_args1903 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1905 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1927 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_func_args_item1929 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_func_args_item1931 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_func_args_item1936 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _112_in_func_args_item1940 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_func_args_item1943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item1994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_func_args_item2054 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _modify_expr_in_func_args_item2058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_func_name2101 = new BitSet(new ulong[]{0x0UL,0x101140000000UL});
		public static readonly BitSet _operator_in_func_name2103 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_name2105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2131 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x10000C04002000UL});
		public static readonly BitSet _func_type_in_func_def2134 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x10000000000000UL});
		public static readonly BitSet _180_in_func_def2137 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL});
		public static readonly BitSet _func_name_in_func_def2140 = new BitSet(new ulong[]{0x0UL,0x4000010000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2142 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_def2145 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_func_def2147 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_def2150 = new BitSet(new ulong[]{0x80000000000000UL,0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2154 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_func_def2207 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_func_def2211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2265 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_func_def2268 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2270 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _match_item_in_func_def2274 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2276 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2374 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2376 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2386 = new BitSet(new ulong[]{0x80000000000000UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2389 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _113_in_stmt_block_item2394 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2396 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2413 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2415 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2418 = new BitSet(new ulong[]{0x400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _DEDENT_in_stmt_block2421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2507 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8C0000180000UL});
		public static readonly BitSet _148_in_stmt_expr2517 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2519 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8C0000180000UL});
		public static readonly BitSet _170_in_stmt_expr2548 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2550 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8C0000180000UL});
		public static readonly BitSet _175_in_stmt_expr2579 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2581 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8C0000180000UL});
		public static readonly BitSet _171_in_stmt_expr2610 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_expr2612 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8C0000180000UL});
		public static readonly BitSet _147_in_stmt_expr2641 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2643 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x8C0000180000UL});
		public static readonly BitSet _99_in_stmt_expr2646 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2648 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x8C0000180000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2721 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _stmt_in_stmt_defer2723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_defer2736 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _stmt_in_stmt_defer2738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_typedef2757 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2759 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_stmt_typedef2761 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_using_item2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_using2794 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2796 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x20000000UL});
		public static readonly BitSet _161_in_stmt_return2817 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_return2819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2840 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_inline_stmt_block2843 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2845 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _148_in_stmt_if2867 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_if2869 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2872 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2875 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2878 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if2881 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2883 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_if2918 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_stmt_if2941 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_if2943 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2946 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2949 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2952 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if2955 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2957 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_if2996 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stmt_while3029 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3031 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3035 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while3062 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_stmt_while3088 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3090 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3094 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while3121 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_while3147 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_while3149 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3152 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3177 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_for_range3179 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3183 = new BitSet(new ulong[]{0x2UL,0x0UL,0xC000008000UL});
		public static readonly BitSet _167_in_for_range3187 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3191 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3194 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_for_range3228 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3232 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3235 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_for_range3269 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3273 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3276 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_range3280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3357 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_for_map3359 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_for_map3361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_for3403 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_for3407 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_for3410 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_stmt_for3412 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3416 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_try3450 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3452 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3455 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3457 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_stmt_try3460 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3462 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3464 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_switch_item3490 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_switch_item3492 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x2000000000UL});
		public static readonly BitSet _99_in_switch_item3495 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_switch_item3497 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3503 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_switch_item3552 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x10120280000004UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_switch3594 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_stmt_switch3596 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3599 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3602 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3604 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3608 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3610 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x200000010000UL});
		public static readonly BitSet _144_in_stmt_switch3616 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3618 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3621 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3623 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3654 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_ident_list3657 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_ident_list3659 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3681 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_stmt_alloc3685 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3687 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_stmt_alloc3692 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _112_in_stmt_alloc3696 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_alloc3814 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3818 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_alloc3821 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3823 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3853 = new BitSet(new ulong[]{0x2UL,0xC130208489000000UL,0x2000000000042UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3857 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_modify3883 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_modify3912 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_modify3943 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3993 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4003 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4006 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4008 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_where_expr4011 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4015 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4019 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4055 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4058 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4060 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4064 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4066 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4071 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4073 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4126 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4129 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4131 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4135 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4137 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4142 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4144 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_where_expr4185 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4187 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4190 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4192 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_where_expr4196 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4198 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _DEDENT_in_where_expr4203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_let_expr4261 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_let_expr4263 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_let_expr4267 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4295 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _INDENT_in_let_expr4300 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _NEWLINE_in_let_expr4302 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4305 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4307 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4383 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4386 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _NEWLINE_in_let_expr4388 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12881C4004UL});
		public static readonly BitSet _where_item_in_let_expr4392 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4394 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x109F12885C4004UL});
		public static readonly BitSet _150_in_let_expr4399 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_let_expr4401 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4403 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_match_item4438 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_match_item4440 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_match_item4442 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _where_expr_in_match_item4444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_match_expr4465 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_match_expr4467 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4470 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4473 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4475 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _match_item_in_match_expr4479 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4481 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4548 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x4000000000000UL});
		public static readonly BitSet _119_in_feed_expr4558 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_feed_expr4594 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4654 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_list_expr4658 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_list_expr4660 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4663 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _for_item_in_list_expr4665 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4669 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_list_expr4671 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_list_expr4673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4701 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000001CUL});
		public static readonly BitSet _99_in_list_expr4705 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4709 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4713 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4717 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4721 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4725 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4729 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4733 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4737 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x100000C000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4741 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4748 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_list_expr4752 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _INDENT_in_list_expr4756 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _DEDENT_in_list_expr4760 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4806 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_type4824 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_lambda_type4826 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_type4828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_expr4843 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4845 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_expr4848 = new BitSet(new ulong[]{0x0UL,0xC00014010000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4850 = new BitSet(new ulong[]{0x0UL,0xC00014000000000UL});
		public static readonly BitSet _104_in_lambda_expr4855 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lambda_expr4892 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_lambda_expr4926 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_lambda_expr4963 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr5000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5057 = new BitSet(new ulong[]{0x2UL,0x8121208489000000UL,0x2000000000040UL});
		public static readonly BitSet _set_in_modify_expr5061 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_modify_expr5115 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5118 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5143 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_cond_expr5152 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5158 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_cond_expr5162 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5280 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000100000000UL});
		public static readonly BitSet _or_op_in_or_expr5291 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _and_expr_in_or_expr5295 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000100000000UL});
		public static readonly BitSet _bit_or_in_and_expr5337 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _and_op_in_and_expr5348 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _bit_or_in_and_expr5352 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _bit_xor_in_bit_or5383 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_bit_or5392 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _bit_xor_in_bit_or5396 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5426 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_bit_xor5435 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _bit_and_in_bit_xor5439 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_bit_and5469 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_bit_and5478 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _cmp_expr_in_bit_and5482 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _chain_op_in_chain_list5574 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _shift_expr_in_chain_list5576 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5590 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _114_in_cmp_expr5619 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5621 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_cmp_expr5624 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5626 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_cmp_expr5630 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_cmp_expr5663 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5667 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5748 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5752 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0x1800000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5858 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5867 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _add_expr_in_shift_expr5871 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5901 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _96_in_add_expr5911 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _mul_expr_in_add_expr5915 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _100_in_add_expr5940 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _mul_expr_in_add_expr5944 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5982 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _94_in_mul_expr5992 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr5996 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _108_in_mul_expr6023 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6027 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _87_in_mul_expr6054 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6058 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6098 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _infix_func_in_infix_expr6108 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _selector_expr_in_infix_expr6112 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _cast_expr_in_selector_expr6144 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _105_in_selector_expr6154 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6158 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _107_in_selector_expr6184 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6189 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _92_in_cast_expr6238 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_cast_expr6240 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_cast_expr6242 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6309 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_prefix_expr6327 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0xC04002000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6329 = new BitSet(new ulong[]{0x0UL,0x10000000UL,0x8UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_square_expr_list6392 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_square_expr_list6394 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_square_expr_list6397 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_square_expr_list6399 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_square_expr_list6403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_bracket_expr_list6423 = new BitSet(new ulong[]{0x2180400000000000UL,0x3374200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6426 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6429 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6431 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6461 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3374200000UL,0x100000D200000CUL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6466 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6468 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6471 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6475 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x100000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6479 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6483 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6487 = new BitSet(new ulong[]{0x80000000000100UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6492 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6494 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6501 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6503 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6533 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6537 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x100000D200000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6541 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6545 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6598 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _97_in_suffix_expr6608 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _101_in_suffix_expr6634 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _106_in_suffix_expr6657 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6659 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _104_in_suffix_expr6684 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6686 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6711 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6734 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _130_in_suffix_expr6757 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6759 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6761 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _NUMBER_in_atom_expr6799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_atom_expr6814 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_atom_expr6816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_atom_expr6829 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_atom_expr6833 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_atom_expr6838 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000D200000CUL});
		public static readonly BitSet _expr_in_atom_expr6840 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_atom_expr6844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr6871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6914 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x10000080000004UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6946 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _97_in_lvalue_suffix6956 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _101_in_lvalue_suffix6984 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _106_in_lvalue_suffix7009 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7011 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _104_in_lvalue_suffix7038 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7040 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix7067 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7070 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7098 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _ident_in_lvalue_atom7136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_lvalue_atom7141 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lvalue7162 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x10000080000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7164 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_lvalue7167 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x10000080000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7169 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_lvalue7173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7198 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_ident7201 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _IDENT_in_ident7203 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _135_in_infix_func7216 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_infix_func7219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_infix_func7221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4531 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x4000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_synpred2_SugarCpp4645 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C000000CUL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4647 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_synpred2_SugarCpp4649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_synpred3_SugarCpp5601 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5603 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_synpred3_SugarCpp5606 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5608 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_synpred3_SugarCpp5612 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_synpred4_SugarCpp6227 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC04002000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6229 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_synpred4_SugarCpp6231 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x100000C0000004UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6233 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
