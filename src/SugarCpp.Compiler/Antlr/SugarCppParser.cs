//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-23 11:24:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Func=74;
	public const int Type_Ident=75;
	public const int Type_List=76;
	public const int Type_Ref=77;
	public const int Type_Star=78;
	public const int Type_Template=79;
	public const int White_Space=80;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:206:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(207, 4);
			// SugarCpp.g:207:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:4: NEWLINE
					{
					DebugLocation(207, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root559);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(207, 13);
			PushFollow(Follow._global_block_in_root562);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(207, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root564);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 207:30: -> ^( Root global_block )
			{
				DebugLocation(207, 33);
				// SugarCpp.g:207:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(207, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:210:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(211, 4);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==88||LA3_0==124||(LA3_0>=133 && LA3_0<=134)||LA3_0==138||LA3_0==142||LA3_0==149||LA3_0==154||LA3_0==159||LA3_0==161||LA3_0==163||LA3_0==170))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:5: node ( NEWLINE )+
					{
					DebugLocation(211, 5);
					PushFollow(Follow._node_in_global_block584);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(211, 10);
					// SugarCpp.g:211:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:211:10: NEWLINE
							{
							DebugLocation(211, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block586);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(211, 24);
				// SugarCpp.g:211:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(211, 39);
				// SugarCpp.g:211:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(211, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._func_def_in_node609);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._class_def_in_node614);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._enum_def_in_node619);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:218:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._global_alloc_in_node624);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:219:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._global_using_in_node629);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:220:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._global_typedef_in_node634);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:221:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._import_def_in_node639);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:222:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._namespace_def_in_node644);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:225:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args656); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args661); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:228:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._ident_in_attribute_args666);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:231:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==134))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(232, 4);
				PushFollow(Follow._ident_in_attribute_item677);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(232, 10);
				// SugarCpp.g:232:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==88))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(232, 11);
					char_literal18=(IToken)Match(input,88,Follow._88_in_attribute_item680);  
					stream_88.Add(char_literal18);

					DebugLocation(232, 15);
					PushFollow(Follow._attribute_args_in_attribute_item682);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(232, 30);
					// SugarCpp.g:232:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==95))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:31: ',' attribute_args
							{
							DebugLocation(232, 31);
							char_literal20=(IToken)Match(input,95,Follow._95_in_attribute_item685);  
							stream_95.Add(char_literal20);

							DebugLocation(232, 35);
							PushFollow(Follow._attribute_args_in_attribute_item687);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(232, 52);
					char_literal22=(IToken)Match(input,89,Follow._89_in_attribute_item691);  
					stream_89.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(232, 61);
					// SugarCpp.g:232:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(232, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(232, 79);
					// SugarCpp.g:232:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(232, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(233, 4);
				string_literal23=(IToken)Match(input,134,Follow._134_in_attribute_item709);  
				stream_134.Add(string_literal23);

				DebugLocation(233, 12);
				// SugarCpp.g:233:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==88))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(233, 13);
					char_literal24=(IToken)Match(input,88,Follow._88_in_attribute_item712);  
					stream_88.Add(char_literal24);

					DebugLocation(233, 17);
					PushFollow(Follow._attribute_args_in_attribute_item714);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(233, 32);
					// SugarCpp.g:233:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==95))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:233:33: ',' attribute_args
							{
							DebugLocation(233, 33);
							char_literal26=(IToken)Match(input,95,Follow._95_in_attribute_item717);  
							stream_95.Add(char_literal26);

							DebugLocation(233, 37);
							PushFollow(Follow._attribute_args_in_attribute_item719);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(233, 54);
					char_literal28=(IToken)Match(input,89,Follow._89_in_attribute_item723);  
					stream_89.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 134
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(233, 63);
					// SugarCpp.g:233:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(233, 75);
					adaptor.AddChild(root_1, stream_134.NextNode());
					DebugLocation(233, 83);
					// SugarCpp.g:233:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(233, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:236:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==124))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(237, 5);
					char_literal29=(IToken)Match(input,124,Follow._124_in_attribute748);  
					stream_124.Add(char_literal29);

					DebugLocation(237, 9);
					PushFollow(Follow._attribute_item_in_attribute750);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(237, 24);
					// SugarCpp.g:237:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==95))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:25: ',' attribute_item
							{
							DebugLocation(237, 25);
							char_literal31=(IToken)Match(input,95,Follow._95_in_attribute753);  
							stream_95.Add(char_literal31);

							DebugLocation(237, 29);
							PushFollow(Follow._attribute_item_in_attribute755);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(237, 46);
					char_literal33=(IToken)Match(input,125,Follow._125_in_attribute759);  
					stream_125.Add(char_literal33);

					DebugLocation(237, 50);
					// SugarCpp.g:237:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:50: NEWLINE
							{
							DebugLocation(237, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute761);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:61: -> ( attribute_item )+
			{
				DebugLocation(237, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(237, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:240:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==124))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: attribute
				{
				DebugLocation(241, 4);
				PushFollow(Follow._attribute_in_global_alloc780);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(241, 15);
			PushFollow(Follow._ident_list_in_global_alloc783);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(241, 26);
			// SugarCpp.g:241:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==105))
			{
				alt19 = 1;
			}
			else if ((LA19_0==107))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(241, 28);
				char_literal37=(IToken)Match(input,105,Follow._105_in_global_alloc787);  
				stream_105.Add(char_literal37);

				DebugLocation(241, 32);
				PushFollow(Follow._type_name_in_global_alloc789);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(241, 42);
				// SugarCpp.g:241:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt17 = 1;
					}
					break;
				case 88:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:44: ( '=' | ':=' ) expr
					{
					DebugLocation(241, 44);
					// SugarCpp.g:241:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==114))
					{
						alt15 = 1;
					}
					else if ((LA15_0==107))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:241:45: '='
						{
						DebugLocation(241, 45);
						char_literal39=(IToken)Match(input,114,Follow._114_in_global_alloc794);  
						stream_114.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:241:51: ':='
						{
						DebugLocation(241, 51);
						string_literal40=(IToken)Match(input,107,Follow._107_in_global_alloc798);  
						stream_107.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(241, 57);
					PushFollow(Follow._expr_in_global_alloc801);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 241:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(241, 65);
						// SugarCpp.g:241:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(241, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(241, 84);
						// SugarCpp.g:241:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(241, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(241, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(241, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(241, 116);
						// SugarCpp.g:241:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(241, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:242:43: '(' ( expr_list )? ')'
					{
					DebugLocation(242, 43);
					char_literal42=(IToken)Match(input,88,Follow._88_in_global_alloc861);  
					stream_88.Add(char_literal42);

					DebugLocation(242, 47);
					// SugarCpp.g:242:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==81||LA16_0==86||LA16_0==88||LA16_0==90||(LA16_0>=92 && LA16_0<=93)||(LA16_0>=96 && LA16_0<=97)||(LA16_0>=123 && LA16_0<=124)||LA16_0==146||LA16_0==148||(LA16_0>=150 && LA16_0<=151)||LA16_0==170))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:47: expr_list
						{
						DebugLocation(242, 47);
						PushFollow(Follow._expr_list_in_global_alloc863);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(242, 58);
					char_literal44=(IToken)Match(input,89,Follow._89_in_global_alloc866);  
					stream_89.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 242:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(242, 65);
						// SugarCpp.g:242:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(242, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(242, 86);
						// SugarCpp.g:242:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(242, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(242, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(242, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(242, 118);
						// SugarCpp.g:242:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(242, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:243:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 243:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(243, 20);
						// SugarCpp.g:243:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(243, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(243, 39);
						// SugarCpp.g:243:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(243, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(243, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(243, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(245, 10);
				string_literal45=(IToken)Match(input,107,Follow._107_in_global_alloc939);  
				stream_107.Add(string_literal45);

				DebugLocation(245, 15);
				// SugarCpp.g:245:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:245:16: expr ( ',' expr )*
				{
				DebugLocation(245, 16);
				PushFollow(Follow._expr_in_global_alloc942);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(245, 21);
				// SugarCpp.g:245:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==95))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:245:22: ',' expr
						{
						DebugLocation(245, 22);
						char_literal47=(IToken)Match(input,95,Follow._95_in_global_alloc945);  
						stream_95.Add(char_literal47);

						DebugLocation(245, 26);
						PushFollow(Follow._expr_in_global_alloc947);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 107, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(245, 37);
					// SugarCpp.g:245:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(245, 44);
					// SugarCpp.g:245:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(245, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(245, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(245, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(245, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:249:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_using984);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			string_literal50=(IToken)Match(input,163,Follow._163_in_global_using987);  
			stream_163.Add(string_literal50);

			DebugLocation(250, 23);
			// SugarCpp.g:250:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==149))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:23: stmt_using_item
					{
					DebugLocation(250, 23);
					PushFollow(Follow._stmt_using_item_in_global_using989);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(250, 43);
				// SugarCpp.g:250:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(250, 56);
				// SugarCpp.g:250:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(250, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(250, 67);
				// SugarCpp.g:250:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(250, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:253:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(253, 1);
		try
		{
			// SugarCpp.g:254:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(254, 4);
			// SugarCpp.g:254:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==124))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:4: attribute
				{
				DebugLocation(254, 4);
				PushFollow(Follow._attribute_in_global_typedef1013);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(254, 15);
			string_literal53=(IToken)Match(input,159,Follow._159_in_global_typedef1016);  
			stream_159.Add(string_literal53);

			DebugLocation(254, 22);
			PushFollow(Follow._ident_in_global_typedef1018);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(254, 28);
			char_literal55=(IToken)Match(input,114,Follow._114_in_global_typedef1020);  
			stream_114.Add(char_literal55);

			DebugLocation(254, 32);
			PushFollow(Follow._type_name_in_global_typedef1022);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(254, 45);
				// SugarCpp.g:254:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(254, 60);
				// SugarCpp.g:254:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(254, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(254, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(254, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:257:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(257, 1);
		try
		{
			// SugarCpp.g:258:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(258, 4);
			// SugarCpp.g:258:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==124))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:4: attribute
				{
				DebugLocation(258, 4);
				PushFollow(Follow._attribute_in_import_def1046);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(258, 15);
			string_literal58=(IToken)Match(input,142,Follow._142_in_import_def1049);  
			stream_142.Add(string_literal58);

			DebugLocation(258, 24);
			// SugarCpp.g:258:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:24: STRING
				{
				DebugLocation(258, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1051);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(258, 32);
			// SugarCpp.g:258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(258, 33);
				// SugarCpp.g:258:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:33: NEWLINE
						{
						DebugLocation(258, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1055);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(258, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1058);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(258, 49);
				// SugarCpp.g:258:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:49: NEWLINE
						{
						DebugLocation(258, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1060);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(258, 59);
				// SugarCpp.g:258:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:60: STRING ( NEWLINE )+
						{
						DebugLocation(258, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1065);  
						stream_STRING.Add(STRING63);

						DebugLocation(258, 67);
						// SugarCpp.g:258:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:258:67: NEWLINE
								{
								DebugLocation(258, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1067);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(258, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1072);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(258, 90);
				// SugarCpp.g:258:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(258, 99);
				// SugarCpp.g:258:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(258, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(258, 110);
				// SugarCpp.g:258:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(258, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:261:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==124))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:4: attribute
				{
				DebugLocation(262, 4);
				PushFollow(Follow._attribute_in_enum_def1097);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(262, 15);
			string_literal67=(IToken)Match(input,138,Follow._138_in_enum_def1100);  
			stream_138.Add(string_literal67);

			DebugLocation(262, 22);
			PushFollow(Follow._ident_in_enum_def1102);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(262, 28);
			char_literal69=(IToken)Match(input,114,Follow._114_in_enum_def1104);  
			stream_114.Add(char_literal69);

			DebugLocation(262, 32);
			// SugarCpp.g:262:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:33: ident ( '|' ident )*
				{
				DebugLocation(262, 33);
				PushFollow(Follow._ident_in_enum_def1107);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(262, 39);
				// SugarCpp.g:262:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==167))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:262:40: '|' ident
						{
						DebugLocation(262, 40);
						char_literal71=(IToken)Match(input,167,Follow._167_in_enum_def1110);  
						stream_167.Add(char_literal71);

						DebugLocation(262, 44);
						PushFollow(Follow._ident_in_enum_def1112);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(262, 57);
				// SugarCpp.g:262:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(262, 64);
				// SugarCpp.g:262:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(262, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(262, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(262, 81);
				// SugarCpp.g:262:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(262, 94);
				// SugarCpp.g:262:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(262, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:265:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==124))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: attribute
				{
				DebugLocation(266, 4);
				PushFollow(Follow._attribute_in_namespace_def1145);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(266, 15);
			string_literal74=(IToken)Match(input,149,Follow._149_in_namespace_def1148);  
			stream_149.Add(string_literal74);

			DebugLocation(266, 27);
			PushFollow(Follow._ident_in_namespace_def1150);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(266, 33);
			// SugarCpp.g:266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(266, 34);
				// SugarCpp.g:266:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:34: NEWLINE
						{
						DebugLocation(266, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1153);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(266, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1156);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(266, 50);
				// SugarCpp.g:266:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:50: NEWLINE
						{
						DebugLocation(266, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1158);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(266, 59);
				PushFollow(Follow._global_block_in_namespace_def1161);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(266, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1163);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(266, 84);
				// SugarCpp.g:266:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(266, 96);
				// SugarCpp.g:266:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(266, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(266, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(266, 113);
				// SugarCpp.g:266:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(266, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:269:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(270, 5);
			// SugarCpp.g:270:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==124))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:5: attribute
				{
				DebugLocation(270, 5);
				PushFollow(Follow._attribute_in_class_def1191);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(270, 16);
			string_literal82=(IToken)Match(input,133,Follow._133_in_class_def1194);  
			stream_133.Add(string_literal82);

			DebugLocation(270, 24);
			PushFollow(Follow._ident_in_class_def1196);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(270, 30);
			// SugarCpp.g:270:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==109))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:31: generic_parameter
				{
				DebugLocation(270, 31);
				PushFollow(Follow._generic_parameter_in_class_def1199);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(270, 51);
			// SugarCpp.g:270:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==88))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:52: '(' func_args ')'
				{
				DebugLocation(270, 52);
				char_literal85=(IToken)Match(input,88,Follow._88_in_class_def1204);  
				stream_88.Add(char_literal85);

				DebugLocation(270, 56);
				PushFollow(Follow._func_args_in_class_def1206);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(270, 66);
				char_literal87=(IToken)Match(input,89,Follow._89_in_class_def1208);  
				stream_89.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(270, 72);
			// SugarCpp.g:270:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==105))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:73: ':' ident ( ',' ident )*
				{
				DebugLocation(270, 73);
				char_literal88=(IToken)Match(input,105,Follow._105_in_class_def1213);  
				stream_105.Add(char_literal88);

				DebugLocation(270, 77);
				PushFollow(Follow._ident_in_class_def1215);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(270, 83);
				// SugarCpp.g:270:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==95))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:84: ',' ident
						{
						DebugLocation(270, 84);
						char_literal90=(IToken)Match(input,95,Follow._95_in_class_def1218);  
						stream_95.Add(char_literal90);

						DebugLocation(270, 88);
						PushFollow(Follow._ident_in_class_def1220);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(270, 98);
			// SugarCpp.g:270:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(270, 99);
				// SugarCpp.g:270:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:99: NEWLINE
						{
						DebugLocation(270, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1227);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(270, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1230);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(270, 115);
				// SugarCpp.g:270:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:115: NEWLINE
						{
						DebugLocation(270, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1232);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(270, 124);
				PushFollow(Follow._global_block_in_class_def1235);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(270, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1237);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 270:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(270, 149);
				// SugarCpp.g:270:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(270, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(270, 157);
				// SugarCpp.g:270:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(270, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(270, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(270, 174);
				// SugarCpp.g:270:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(270, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(270, 193);
				// SugarCpp.g:270:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(270, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(270, 204);
				// SugarCpp.g:270:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(270, 205);
					// SugarCpp.g:270:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(270, 218);
					// SugarCpp.g:270:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(270, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(270, 228);
				// SugarCpp.g:270:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(270, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:273:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(273, 1);
		try
		{
			// SugarCpp.g:274:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:274:4: type_name ( ',' type_name )*
			{
			DebugLocation(274, 4);
			PushFollow(Follow._type_name_in_type_list1280);
			type_name97=type_name();
			PopFollow();

			stream_type_name.Add(type_name97.Tree);
			DebugLocation(274, 14);
			// SugarCpp.g:274:14: ( ',' type_name )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==95))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:15: ',' type_name
					{
					DebugLocation(274, 15);
					char_literal98=(IToken)Match(input,95,Follow._95_in_type_list1283);  
					stream_95.Add(char_literal98);

					DebugLocation(274, 19);
					PushFollow(Follow._type_name_in_type_list1285);
					type_name99=type_name();
					PopFollow();

					stream_type_name.Add(type_name99.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 274:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(274, 34);
				// SugarCpp.g:274:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(274, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(274, 46);
				// SugarCpp.g:274:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(274, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:277:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken string_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree string_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IDENT||LA50_0==134||LA50_0==154||LA50_0==161))
			{
				alt50 = 1;
			}
			else if ((LA50_0==88))
			{
				alt50 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(278, 4);
				PushFollow(Follow._type_single_in_type_name1307);
				type_single100=type_single();
				PopFollow();

				stream_type_single.Add(type_single100.Tree);
				DebugLocation(278, 16);
				// SugarCpp.g:278:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==99))
				{
					alt47 = 1;
				}
				else if ((LA47_0==DEDENT||LA47_0==IDENT||LA47_0==NEWLINE||(LA47_0>=88 && LA47_0<=89)||LA47_0==95||(LA47_0>=107 && LA47_0<=108)||LA47_0==114||LA47_0==117||(LA47_0>=140 && LA47_0<=141)||LA47_0==143||LA47_0==160||LA47_0==162||LA47_0==166||LA47_0==170))
				{
					alt47 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(278, 18);
					string_literal101=(IToken)Match(input,99,Follow._99_in_type_name1311);  
					stream_99.Add(string_literal101);

					DebugLocation(278, 23);
					// SugarCpp.g:278:23: ( type_name | '(' ')' )
					int alt46=2;
					try { DebugEnterSubRule(46);
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==IDENT||LA46_0==134||LA46_0==154||LA46_0==161))
					{
						alt46 = 1;
					}
					else if ((LA46_0==88))
					{
						int LA46_2 = input.LA(2);

						if ((LA46_2==89))
						{
							int LA46_3 = input.LA(3);

							if ((LA46_3==99))
							{
								alt46 = 1;
							}
							else if ((LA46_3==DEDENT||LA46_3==IDENT||LA46_3==NEWLINE||(LA46_3>=88 && LA46_3<=89)||LA46_3==95||(LA46_3>=107 && LA46_3<=108)||LA46_3==114||LA46_3==117||(LA46_3>=140 && LA46_3<=141)||LA46_3==143||LA46_3==160||LA46_3==162||LA46_3==166||LA46_3==170))
							{
								alt46 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 46, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA46_2==IDENT||LA46_2==88||LA46_2==134||LA46_2==154||LA46_2==161))
						{
							alt46 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 46, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:278:24: type_name
						{
						DebugLocation(278, 24);
						PushFollow(Follow._type_name_in_type_name1314);
						type_name102=type_name();
						PopFollow();

						stream_type_name.Add(type_name102.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:278:36: '(' ')'
						{
						DebugLocation(278, 36);
						char_literal103=(IToken)Match(input,88,Follow._88_in_type_name1318);  
						stream_88.Add(char_literal103);

						DebugLocation(278, 40);
						char_literal104=(IToken)Match(input,89,Follow._89_in_type_name1320);  
						stream_89.Add(char_literal104);


						}
						break;

					}
					} finally { DebugExitSubRule(46); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 278:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(278, 48);
						// SugarCpp.g:278:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(278, 60);
						// SugarCpp.g:278:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(278, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(278, 85);
						// SugarCpp.g:278:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(278, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:279:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 279:9: -> type_single
					{
						DebugLocation(279, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(281, 4);
				char_literal105=(IToken)Match(input,88,Follow._88_in_type_name1361);  
				stream_88.Add(char_literal105);

				DebugLocation(281, 8);
				// SugarCpp.g:281:8: ( type_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==IDENT||LA48_0==88||LA48_0==134||LA48_0==154||LA48_0==161))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:8: type_list
					{
					DebugLocation(281, 8);
					PushFollow(Follow._type_list_in_type_name1363);
					type_list106=type_list();
					PopFollow();

					stream_type_list.Add(type_list106.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(281, 19);
				char_literal107=(IToken)Match(input,89,Follow._89_in_type_name1366);  
				stream_89.Add(char_literal107);

				DebugLocation(281, 23);
				string_literal108=(IToken)Match(input,99,Follow._99_in_type_name1368);  
				stream_99.Add(string_literal108);

				DebugLocation(281, 28);
				// SugarCpp.g:281:28: ( type_name | '(' ')' )
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==IDENT||LA49_0==134||LA49_0==154||LA49_0==161))
				{
					alt49 = 1;
				}
				else if ((LA49_0==88))
				{
					int LA49_2 = input.LA(2);

					if ((LA49_2==89))
					{
						int LA49_3 = input.LA(3);

						if ((LA49_3==99))
						{
							alt49 = 1;
						}
						else if ((LA49_3==DEDENT||LA49_3==IDENT||LA49_3==NEWLINE||(LA49_3>=88 && LA49_3<=89)||LA49_3==95||(LA49_3>=107 && LA49_3<=108)||LA49_3==114||LA49_3==117||(LA49_3>=140 && LA49_3<=141)||LA49_3==143||LA49_3==160||LA49_3==162||LA49_3==166||LA49_3==170))
						{
							alt49 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA49_2==IDENT||LA49_2==88||LA49_2==134||LA49_2==154||LA49_2==161))
					{
						alt49 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 49, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:29: type_name
					{
					DebugLocation(281, 29);
					PushFollow(Follow._type_name_in_type_name1371);
					type_name109=type_name();
					PopFollow();

					stream_type_name.Add(type_name109.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:41: '(' ')'
					{
					DebugLocation(281, 41);
					char_literal110=(IToken)Match(input,88,Follow._88_in_type_name1375);  
					stream_88.Add(char_literal110);

					DebugLocation(281, 45);
					char_literal111=(IToken)Match(input,89,Follow._89_in_type_name1377);  
					stream_89.Add(char_literal111);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(281, 53);
					// SugarCpp.g:281:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(281, 65);
					// SugarCpp.g:281:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(281, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(281, 76);
					// SugarCpp.g:281:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(281, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:284:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(285, 4);
			PushFollow(Follow._type_star_in_type_single1401);
			type_star112=type_star();
			PopFollow();

			stream_type_star.Add(type_star112.Tree);
			DebugLocation(285, 14);
			// SugarCpp.g:285:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt52=3;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt52 = 1;
				}
				break;
			case 124:
				{
				alt52 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 88:
			case 89:
			case 95:
			case 99:
			case 107:
			case 108:
			case 114:
			case 117:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
			case 170:
				{
				alt52 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:16: '&'
				{
				DebugLocation(285, 16);
				char_literal113=(IToken)Match(input,86,Follow._86_in_type_single1405);  
				stream_86.Add(char_literal113);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(285, 23);
					// SugarCpp.g:285:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(285, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(286, 7);
				char_literal114=(IToken)Match(input,124,Follow._124_in_type_single1421);  
				stream_124.Add(char_literal114);

				DebugLocation(286, 11);
				PushFollow(Follow._expr_in_type_single1423);
				expr115=expr();
				PopFollow();

				stream_expr.Add(expr115.Tree);
				DebugLocation(286, 16);
				// SugarCpp.g:286:16: ( ',' expr )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==95))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:286:17: ',' expr
						{
						DebugLocation(286, 17);
						char_literal116=(IToken)Match(input,95,Follow._95_in_type_single1426);  
						stream_95.Add(char_literal116);

						DebugLocation(286, 21);
						PushFollow(Follow._expr_in_type_single1428);
						expr117=expr();
						PopFollow();

						stream_expr.Add(expr117.Tree);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(286, 28);
				char_literal118=(IToken)Match(input,125,Follow._125_in_type_single1432);  
				stream_125.Add(char_literal118);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(286, 35);
					// SugarCpp.g:286:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(286, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(286, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(286, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:287:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:7: -> type_star
				{
					DebugLocation(287, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:291:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(292, 4);
			PushFollow(Follow._type_star_in_type_no_array1470);
			type_star119=type_star();
			PopFollow();

			stream_type_star.Add(type_star119.Tree);
			DebugLocation(292, 14);
			// SugarCpp.g:292:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==86))
			{
				alt53 = 1;
			}
			else if ((LA53_0==88||LA53_0==124))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:16: '&'
				{
				DebugLocation(292, 16);
				char_literal120=(IToken)Match(input,86,Follow._86_in_type_no_array1474);  
				stream_86.Add(char_literal120);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(292, 23);
					// SugarCpp.g:292:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(292, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:293:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:7: -> type_star
				{
					DebugLocation(293, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:297:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(298, 4);
			PushFollow(Follow._type_template_type_in_type_star1509);
			type_template_type121=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type121.Tree);
			DebugLocation(298, 23);
			// SugarCpp.g:298:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==90))
			{
				alt55 = 1;
			}
			else if ((LA55_0==DEDENT||LA55_0==IDENT||LA55_0==NEWLINE||LA55_0==86||(LA55_0>=88 && LA55_0<=89)||LA55_0==95||LA55_0==99||(LA55_0>=107 && LA55_0<=108)||LA55_0==114||LA55_0==117||LA55_0==124||(LA55_0>=140 && LA55_0<=141)||LA55_0==143||LA55_0==160||LA55_0==162||LA55_0==166||LA55_0==170))
			{
				alt55 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:298:25: ( '*' )+
				{
				DebugLocation(298, 25);
				// SugarCpp.g:298:25: ( '*' )+
				int cnt54=0;
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==90))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:298:25: '*'
						{
						DebugLocation(298, 25);
						char_literal122=(IToken)Match(input,90,Follow._90_in_type_star1513);  
						stream_90.Add(char_literal122);


						}
						break;

					default:
						if (cnt54 >= 1)
							goto loop54;

						EarlyExitException eee54 = new EarlyExitException( 54, input );
						DebugRecognitionException(eee54);
						throw eee54;
					}
					cnt54++;
				}
				loop54:
					;

				} finally { DebugExitSubRule(54); }



				{
				// AST REWRITE
				// elements: type_template_type, 90
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(298, 33);
					// SugarCpp.g:298:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(298, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(298, 64);
					if (!(stream_90.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_90.HasNext )
					{
						DebugLocation(298, 64);
						adaptor.AddChild(root_1, stream_90.NextNode());

					}
					stream_90.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:299:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:10: -> type_template_type
				{
					DebugLocation(299, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:303:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name127 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(303, 1);
		try
		{
			// SugarCpp.g:304:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(304, 4);
			PushFollow(Follow._type_ident_in_type_template_type1559);
			type_ident123=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident123.Tree);
			DebugLocation(304, 15);
			// SugarCpp.g:304:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==109))
			{
				alt58 = 1;
			}
			else if ((LA58_0==DEDENT||LA58_0==IDENT||LA58_0==NEWLINE||LA58_0==86||(LA58_0>=88 && LA58_0<=90)||LA58_0==95||LA58_0==99||(LA58_0>=107 && LA58_0<=108)||LA58_0==114||LA58_0==117||LA58_0==124||(LA58_0>=140 && LA58_0<=141)||LA58_0==143||LA58_0==160||LA58_0==162||LA58_0==166||LA58_0==170))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(304, 17);
				char_literal124=(IToken)Match(input,109,Follow._109_in_type_template_type1563);  
				stream_109.Add(char_literal124);

				DebugLocation(304, 21);
				// SugarCpp.g:304:21: ( type_name ( ',' type_name )* )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==88||LA57_0==134||LA57_0==154||LA57_0==161))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:304:22: type_name ( ',' type_name )*
					{
					DebugLocation(304, 22);
					PushFollow(Follow._type_name_in_type_template_type1566);
					type_name125=type_name();
					PopFollow();

					stream_type_name.Add(type_name125.Tree);
					DebugLocation(304, 32);
					// SugarCpp.g:304:32: ( ',' type_name )*
					try { DebugEnterSubRule(56);
					while (true)
					{
						int alt56=2;
						try { DebugEnterDecision(56, false);
						int LA56_0 = input.LA(1);

						if ((LA56_0==95))
						{
							alt56 = 1;
						}


						} finally { DebugExitDecision(56); }
						switch ( alt56 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:33: ',' type_name
							{
							DebugLocation(304, 33);
							char_literal126=(IToken)Match(input,95,Follow._95_in_type_template_type1569);  
							stream_95.Add(char_literal126);

							DebugLocation(304, 37);
							PushFollow(Follow._type_name_in_type_template_type1571);
							type_name127=type_name();
							PopFollow();

							stream_type_name.Add(type_name127.Tree);

							}
							break;

						default:
							goto loop56;
						}
					}

					loop56:
						;

					} finally { DebugExitSubRule(56); }


					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(304, 51);
				char_literal128=(IToken)Match(input,117,Follow._117_in_type_template_type1577);  
				stream_117.Add(char_literal128);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(304, 58);
					// SugarCpp.g:304:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(304, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(304, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(304, 85);
					// SugarCpp.g:304:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(304, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:305:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:8: -> type_ident
				{
					DebugLocation(305, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:309:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal129 = default(IToken);
		IToken string_literal130 = default(IToken);
		IToken string_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree string_literal130_tree = default(CommonTree);
		CommonTree string_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(309, 1);
		try
		{
			// SugarCpp.g:310:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:310:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(310, 4);
			// SugarCpp.g:310:4: ( 'const' )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==134))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:310:4: 'const'
				{
				DebugLocation(310, 4);
				string_literal129=(IToken)Match(input,134,Follow._134_in_type_ident1617);  
				stream_134.Add(string_literal129);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(310, 13);
			// SugarCpp.g:310:13: ( 'unsigned' )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==161))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:310:13: 'unsigned'
				{
				DebugLocation(310, 13);
				string_literal130=(IToken)Match(input,161,Follow._161_in_type_ident1620);  
				stream_161.Add(string_literal130);


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(310, 25);
			// SugarCpp.g:310:25: ( 'struct' )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==154))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:310:25: 'struct'
				{
				DebugLocation(310, 25);
				string_literal131=(IToken)Match(input,154,Follow._154_in_type_ident1623);  
				stream_154.Add(string_literal131);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(310, 35);
			PushFollow(Follow._ident_in_type_ident1626);
			ident132=ident();
			PopFollow();

			stream_ident.Add(ident132.Tree);


			{
			// AST REWRITE
			// elements: 154, 134, 161, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 310:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(310, 44);
				// SugarCpp.g:310:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(310, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(310, 57);
				// SugarCpp.g:310:57: ( 'const' )?
				if (stream_134.HasNext)
				{
					DebugLocation(310, 57);
					adaptor.AddChild(root_1, stream_134.NextNode());

				}
				stream_134.Reset();
				DebugLocation(310, 66);
				// SugarCpp.g:310:66: ( 'unsigned' )?
				if (stream_161.HasNext)
				{
					DebugLocation(310, 66);
					adaptor.AddChild(root_1, stream_161.NextNode());

				}
				stream_161.Reset();
				DebugLocation(310, 78);
				// SugarCpp.g:310:78: ( 'struct' )?
				if (stream_154.HasNext)
				{
					DebugLocation(310, 78);
					adaptor.AddChild(root_1, stream_154.NextNode());

				}
				stream_154.Reset();
				DebugLocation(310, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:313:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: ident ( ',' ident )*
			{
			DebugLocation(314, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1654);
			ident133=ident();
			PopFollow();

			stream_ident.Add(ident133.Tree);
			DebugLocation(314, 10);
			// SugarCpp.g:314:10: ( ',' ident )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==95))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:314:11: ',' ident
					{
					DebugLocation(314, 11);
					char_literal134=(IToken)Match(input,95,Follow._95_in_generic_parameter_inside1657);  
					stream_95.Add(char_literal134);

					DebugLocation(314, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1659);
					ident135=ident();
					PopFollow();

					stream_ident.Add(ident135.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 314:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(314, 26);
				// SugarCpp.g:314:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(314, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(314, 47);
				// SugarCpp.g:314:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(314, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:317:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(317, 1);
		try
		{
			// SugarCpp.g:318:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:318:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(318, 4);
			char_literal136=(IToken)Match(input,109,Follow._109_in_generic_parameter1681);  
			stream_109.Add(char_literal136);

			DebugLocation(318, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1683);
			generic_parameter_inside137=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside137.Tree);
			DebugLocation(318, 33);
			char_literal138=(IToken)Match(input,117,Follow._117_in_generic_parameter1685);  
			stream_117.Add(char_literal138);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:37: -> generic_parameter_inside
			{
				DebugLocation(318, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:321:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(321, 1);
		try
		{
			// SugarCpp.g:322:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:322:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(322, 4);
			PushFollow(Follow._func_args_item_in_func_args1700);
			func_args_item139=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item139.Tree);
			DebugLocation(322, 19);
			// SugarCpp.g:322:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==95))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:322:20: ',' func_args_item
					{
					DebugLocation(322, 20);
					char_literal140=(IToken)Match(input,95,Follow._95_in_func_args1703);  
					stream_95.Add(char_literal140);

					DebugLocation(322, 24);
					PushFollow(Follow._func_args_item_in_func_args1705);
					func_args_item141=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item141.Tree);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 322:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(322, 44);
				// SugarCpp.g:322:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(322, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(322, 56);
				// SugarCpp.g:322:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(322, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:325:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken string_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal150 = default(IToken);
		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(325, 1);
		try
		{
			// SugarCpp.g:326:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==IDENT))
			{
				alt67 = 1;
			}
			else if ((LA67_0==107))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:326:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(326, 4);
				PushFollow(Follow._ident_list_in_func_args_item1727);
				ident_list142=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list142.Tree);
				DebugLocation(326, 15);
				char_literal143=(IToken)Match(input,105,Follow._105_in_func_args_item1729);  
				stream_105.Add(char_literal143);

				DebugLocation(326, 19);
				PushFollow(Follow._type_name_in_func_args_item1731);
				type_name144=type_name();
				PopFollow();

				stream_type_name.Add(type_name144.Tree);
				DebugLocation(326, 29);
				// SugarCpp.g:326:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt66=3;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt66 = 1;
					}
					break;
				case 88:
					{
					alt66 = 2;
					}
					break;
				case 89:
				case 95:
					{
					alt66 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:326:31: ( '=' | ':=' ) expr
					{
					DebugLocation(326, 31);
					// SugarCpp.g:326:31: ( '=' | ':=' )
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==114))
					{
						alt64 = 1;
					}
					else if ((LA64_0==107))
					{
						alt64 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:326:32: '='
						{
						DebugLocation(326, 32);
						char_literal145=(IToken)Match(input,114,Follow._114_in_func_args_item1736);  
						stream_114.Add(char_literal145);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:326:38: ':='
						{
						DebugLocation(326, 38);
						string_literal146=(IToken)Match(input,107,Follow._107_in_func_args_item1740);  
						stream_107.Add(string_literal146);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(326, 44);
					PushFollow(Follow._expr_in_func_args_item1743);
					expr147=expr();
					PopFollow();

					stream_expr.Add(expr147.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 326:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(326, 53);
						// SugarCpp.g:326:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(326, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(326, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(326, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(326, 93);
						// SugarCpp.g:326:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(326, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:327:33: '(' ( expr_list )? ')'
					{
					DebugLocation(327, 33);
					char_literal148=(IToken)Match(input,88,Follow._88_in_func_args_item1791);  
					stream_88.Add(char_literal148);

					DebugLocation(327, 37);
					// SugarCpp.g:327:37: ( expr_list )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==IDENT||LA65_0==NUMBER||LA65_0==STRING||LA65_0==81||LA65_0==86||LA65_0==88||LA65_0==90||(LA65_0>=92 && LA65_0<=93)||(LA65_0>=96 && LA65_0<=97)||(LA65_0>=123 && LA65_0<=124)||LA65_0==146||LA65_0==148||(LA65_0>=150 && LA65_0<=151)||LA65_0==170))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:327:37: expr_list
						{
						DebugLocation(327, 37);
						PushFollow(Follow._expr_list_in_func_args_item1793);
						expr_list149=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list149.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(327, 48);
					char_literal150=(IToken)Match(input,89,Follow._89_in_func_args_item1796);  
					stream_89.Add(char_literal150);



					{
					// AST REWRITE
					// elements: expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(327, 56);
						// SugarCpp.g:327:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(327, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(327, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(327, 98);
						// SugarCpp.g:327:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(327, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:328:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 328:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(328, 18);
						// SugarCpp.g:328:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(328, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(328, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(328, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:330:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(330, 8);
				string_literal151=(IToken)Match(input,107,Follow._107_in_func_args_item1853); 
				string_literal151_tree = (CommonTree)adaptor.Create(string_literal151);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal151_tree, root_0);
				DebugLocation(330, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1857);
				modify_expr152=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr152.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:333:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set153 = default(IToken);

		CommonTree set153_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(333, 1);
		try
		{
			// SugarCpp.g:334:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(334, 2);

			set153=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set153));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:337:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENT))
			{
				alt68 = 1;
			}
			else if ((LA68_0==88))
			{
				alt68 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:338:4: ident
				{
				DebugLocation(338, 4);
				PushFollow(Follow._ident_in_func_name1891);
				ident154=ident();
				PopFollow();

				stream_ident.Add(ident154.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 338:10: -> ident
				{
					DebugLocation(338, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:339:4: '(' operator ')'
				{
				DebugLocation(339, 4);
				char_literal155=(IToken)Match(input,88,Follow._88_in_func_name1900);  
				stream_88.Add(char_literal155);

				DebugLocation(339, 8);
				PushFollow(Follow._operator_in_func_name1902);
				operator156=@operator();
				PopFollow();

				stream_operator.Add(operator156.Tree);
				DebugLocation(339, 17);
				char_literal157=(IToken)Match(input,89,Follow._89_in_func_name1904);  
				stream_89.Add(char_literal157);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 339:21: -> operator
				{
					DebugLocation(339, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:342:1: func_def : ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 27);
		TraceIn("func_def", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal160 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken NEWLINE166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree NEWLINE166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(342, 4);
		try
		{
			// SugarCpp.g:343:2: ( ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:343:4: ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(343, 4);
			// SugarCpp.g:343:4: ( attribute )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==124))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:4: attribute
				{
				DebugLocation(343, 4);
				PushFollow(Follow._attribute_in_func_def1919);
				attribute158=attribute();
				PopFollow();

				stream_attribute.Add(attribute158.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(343, 15);
			// SugarCpp.g:343:15: ( type_name )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			try
			{
				alt70 = dfa70.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:15: type_name
				{
				DebugLocation(343, 15);
				PushFollow(Follow._type_name_in_func_def1922);
				type_name159=type_name();
				PopFollow();

				stream_type_name.Add(type_name159.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(343, 26);
			// SugarCpp.g:343:26: ( '~' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==170))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:26: '~'
				{
				DebugLocation(343, 26);
				char_literal160=(IToken)Match(input,170,Follow._170_in_func_def1925);  
				stream_170.Add(char_literal160);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(343, 31);
			PushFollow(Follow._func_name_in_func_def1928);
			func_name161=func_name();
			PopFollow();

			stream_func_name.Add(func_name161.Tree);
			DebugLocation(343, 41);
			// SugarCpp.g:343:41: ( generic_parameter )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==109))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:41: generic_parameter
				{
				DebugLocation(343, 41);
				PushFollow(Follow._generic_parameter_in_func_def1930);
				generic_parameter162=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter162.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(343, 60);
			char_literal163=(IToken)Match(input,88,Follow._88_in_func_def1933);  
			stream_88.Add(char_literal163);

			DebugLocation(343, 64);
			// SugarCpp.g:343:64: ( func_args )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==IDENT||LA73_0==107))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:64: func_args
				{
				DebugLocation(343, 64);
				PushFollow(Follow._func_args_in_func_def1935);
				func_args164=func_args();
				PopFollow();

				stream_func_args.Add(func_args164.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(343, 75);
			char_literal165=(IToken)Match(input,89,Follow._89_in_func_def1938);  
			stream_89.Add(char_literal165);

			DebugLocation(343, 79);
			// SugarCpp.g:343:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==NEWLINE))
			{
				alt75 = 1;
			}
			else if ((LA75_0==114))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:80: ( NEWLINE )+ stmt_block
				{
				DebugLocation(343, 80);
				// SugarCpp.g:343:80: ( NEWLINE )+
				int cnt74=0;
				try { DebugEnterSubRule(74);
				while (true)
				{
					int alt74=2;
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==NEWLINE))
					{
						alt74 = 1;
					}


					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:343:80: NEWLINE
						{
						DebugLocation(343, 80);
						NEWLINE166=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1941);  
						stream_NEWLINE.Add(NEWLINE166);


						}
						break;

					default:
						if (cnt74 >= 1)
							goto loop74;

						EarlyExitException eee74 = new EarlyExitException( 74, input );
						DebugRecognitionException(eee74);
						throw eee74;
					}
					cnt74++;
				}
				loop74:
					;

				} finally { DebugExitSubRule(74); }

				DebugLocation(343, 89);
				PushFollow(Follow._stmt_block_in_func_def1944);
				stmt_block167=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block167.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, func_args, generic_parameter, func_name, type_name, 170, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:100: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(343, 103);
					// SugarCpp.g:343:103: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 105);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(343, 114);
					// SugarCpp.g:343:114: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(343, 114);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(343, 125);
					// SugarCpp.g:343:125: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(343, 125);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(343, 136);
					// SugarCpp.g:343:136: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(343, 136);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(343, 141);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(343, 151);
					// SugarCpp.g:343:151: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(343, 151);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(343, 170);
					// SugarCpp.g:343:170: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(343, 170);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(343, 181);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:344:27: '=' where_expr
				{
				DebugLocation(344, 27);
				char_literal168=(IToken)Match(input,114,Follow._114_in_func_def1997);  
				stream_114.Add(char_literal168);

				DebugLocation(344, 31);
				PushFollow(Follow._where_expr_in_func_def1999);
				where_expr169=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr169.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 170, type_name, func_args, func_name, generic_parameter, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:43: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(344, 46);
					// SugarCpp.g:344:46: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(344, 57);
					// SugarCpp.g:344:57: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(344, 57);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(344, 68);
					// SugarCpp.g:344:68: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(344, 68);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(344, 79);
					// SugarCpp.g:344:79: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(344, 79);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(344, 84);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(344, 94);
					// SugarCpp.g:344:94: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(344, 94);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(344, 113);
					// SugarCpp.g:344:113: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(344, 113);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(344, 124);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 27);
			LeaveRule("func_def", 27);
			LeaveRule_func_def();
		}
		DebugLocation(345, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:347:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 28);
		TraceIn("stmt_block_item", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE171 = default(IToken);
		IToken NEWLINE173 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken NEWLINE175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple172 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE171_tree = default(CommonTree);
		CommonTree NEWLINE173_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		CommonTree NEWLINE175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==135||(LA80_0>=139 && LA80_0<=141)||LA80_0==147||LA80_0==155||LA80_0==158||LA80_0==160||LA80_0==162||LA80_0==166))
			{
				alt80 = 1;
			}
			else if ((LA80_0==IDENT||LA80_0==81||LA80_0==86||LA80_0==88||LA80_0==90||(LA80_0>=92 && LA80_0<=93)||(LA80_0>=96 && LA80_0<=97)||LA80_0==123||LA80_0==151||LA80_0==153||LA80_0==159||LA80_0==163||LA80_0==170))
			{
				alt80 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:348:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(348, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2040);
				stmt_complex170=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex170.Tree);
				DebugLocation(348, 17);
				// SugarCpp.g:348:17: ( NEWLINE )+
				int cnt76=0;
				try { DebugEnterSubRule(76);
				while (true)
				{
					int alt76=2;
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==NEWLINE))
					{
						alt76 = 1;
					}


					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:348:17: NEWLINE
						{
						DebugLocation(348, 17);
						NEWLINE171=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2042);  
						stream_NEWLINE.Add(NEWLINE171);


						}
						break;

					default:
						if (cnt76 >= 1)
							goto loop76;

						EarlyExitException eee76 = new EarlyExitException( 76, input );
						DebugRecognitionException(eee76);
						throw eee76;
					}
					cnt76++;
				}
				loop76:
					;

				} finally { DebugExitSubRule(76); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:26: -> stmt_complex
				{
					DebugLocation(348, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:349:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(349, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2052);
				stmt_simple172=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple172.Tree);
				DebugLocation(349, 16);
				// SugarCpp.g:349:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==NEWLINE))
				{
					alt79 = 1;
				}
				else if ((LA79_0==108))
				{
					alt79 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:17: ( NEWLINE )+
					{
					DebugLocation(349, 17);
					// SugarCpp.g:349:17: ( NEWLINE )+
					int cnt77=0;
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_0 = input.LA(1);

						if ((LA77_0==NEWLINE))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch (alt77)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:349:17: NEWLINE
							{
							DebugLocation(349, 17);
							NEWLINE173=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2055);  
							stream_NEWLINE.Add(NEWLINE173);


							}
							break;

						default:
							if (cnt77 >= 1)
								goto loop77;

							EarlyExitException eee77 = new EarlyExitException( 77, input );
							DebugRecognitionException(eee77);
							throw eee77;
						}
						cnt77++;
					}
					loop77:
						;

					} finally { DebugExitSubRule(77); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:349:28: ';' ( NEWLINE )*
					{
					DebugLocation(349, 28);
					char_literal174=(IToken)Match(input,108,Follow._108_in_stmt_block_item2060);  
					stream_108.Add(char_literal174);

					DebugLocation(349, 32);
					// SugarCpp.g:349:32: ( NEWLINE )*
					try { DebugEnterSubRule(78);
					while (true)
					{
						int alt78=2;
						try { DebugEnterDecision(78, false);
						int LA78_0 = input.LA(1);

						if ((LA78_0==NEWLINE))
						{
							alt78 = 1;
						}


						} finally { DebugExitDecision(78); }
						switch ( alt78 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:349:32: NEWLINE
							{
							DebugLocation(349, 32);
							NEWLINE175=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2062);  
							stream_NEWLINE.Add(NEWLINE175);


							}
							break;

						default:
							goto loop78;
						}
					}

					loop78:
						;

					} finally { DebugExitSubRule(78); }


					}
					break;

				}
				} finally { DebugExitSubRule(79); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:42: -> stmt_simple
				{
					DebugLocation(349, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 28);
			LeaveRule("stmt_block_item", 28);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:352:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 29);
		TraceIn("stmt_block", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT176 = default(IToken);
		IToken NEWLINE177 = default(IToken);
		IToken DEDENT179 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT176_tree = default(CommonTree);
		CommonTree NEWLINE177_tree = default(CommonTree);
		CommonTree DEDENT179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(353, 4);
			INDENT176=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2079);  
			stream_INDENT.Add(INDENT176);

			DebugLocation(353, 11);
			// SugarCpp.g:353:11: ( NEWLINE )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==NEWLINE))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:11: NEWLINE
					{
					DebugLocation(353, 11);
					NEWLINE177=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2081);  
					stream_NEWLINE.Add(NEWLINE177);


					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(353, 20);
			// SugarCpp.g:353:20: ( stmt_block_item )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==IDENT||LA82_0==81||LA82_0==86||LA82_0==88||LA82_0==90||(LA82_0>=92 && LA82_0<=93)||(LA82_0>=96 && LA82_0<=97)||LA82_0==123||LA82_0==135||(LA82_0>=139 && LA82_0<=141)||LA82_0==147||LA82_0==151||LA82_0==153||LA82_0==155||(LA82_0>=158 && LA82_0<=160)||(LA82_0>=162 && LA82_0<=163)||LA82_0==166||LA82_0==170))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:20: stmt_block_item
					{
					DebugLocation(353, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2084);
					stmt_block_item178=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item178.Tree);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(353, 37);
			DEDENT179=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2087);  
			stream_DEDENT.Add(DEDENT179);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 353:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(353, 47);
				// SugarCpp.g:353:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(353, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(353, 60);
				// SugarCpp.g:353:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(353, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 29);
			LeaveRule("stmt_block", 29);
			LeaveRule_stmt_block();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:356:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 30);
		TraceIn("stmt", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( stmt_simple | stmt_complex )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT||LA83_0==81||LA83_0==86||LA83_0==88||LA83_0==90||(LA83_0>=92 && LA83_0<=93)||(LA83_0>=96 && LA83_0<=97)||LA83_0==123||LA83_0==151||LA83_0==153||LA83_0==159||LA83_0==163||LA83_0==170))
			{
				alt83 = 1;
			}
			else if ((LA83_0==135||(LA83_0>=139 && LA83_0<=141)||LA83_0==147||LA83_0==155||LA83_0==158||LA83_0==160||LA83_0==162||LA83_0==166))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(357, 4);
				PushFollow(Follow._stmt_simple_in_stmt2107);
				stmt_simple180=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple180.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:358:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(358, 4);
				PushFollow(Follow._stmt_complex_in_stmt2112);
				stmt_complex181=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex181.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 30);
			LeaveRule("stmt", 30);
			LeaveRule_stmt();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:361:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 31);
		TraceIn("stmt_simple", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(361, 1);
		try
		{
			// SugarCpp.g:362:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:362:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(362, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2123);
			stmt_expr182=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr182.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 31);
			LeaveRule("stmt_simple", 31);
			LeaveRule_stmt_simple();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:365:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 32);
		TraceIn("stmt_complex", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(365, 1);
		try
		{
			// SugarCpp.g:366:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt84=6;
			try { DebugEnterDecision(84, false);
			switch (input.LA(1))
			{
			case 141:
			case 160:
				{
				alt84 = 1;
				}
				break;
			case 140:
				{
				alt84 = 2;
				}
				break;
			case 147:
			case 162:
			case 166:
				{
				alt84 = 3;
				}
				break;
			case 158:
				{
				alt84 = 4;
				}
				break;
			case 155:
				{
				alt84 = 5;
				}
				break;
			case 135:
			case 139:
				{
				alt84 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(366, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2134);
				stmt_if183=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:367:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(367, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2139);
				stmt_for184=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for184.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:368:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2144);
				stmt_while185=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while185.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:369:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(369, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2149);
				stmt_try186=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try186.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:370:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2154);
				stmt_switch187=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch187.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:371:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2159);
				stmt_defer188=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer188.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 32);
			LeaveRule("stmt_complex", 32);
			LeaveRule_stmt_complex();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:374:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 33);
		TraceIn("stmt_expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken string_literal195 = default(IToken);
		IToken string_literal197 = default(IToken);
		IToken char_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree string_literal197_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= stmt_expr_item
			{
			DebugLocation(375, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2173);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:22: -> $a
			{
				DebugLocation(375, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(375, 29);
			// SugarCpp.g:375:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=6;
				try { DebugEnterDecision(86, false);
				switch (input.LA(1))
				{
				case 141:
					{
					alt86 = 1;
					}
					break;
				case 160:
					{
					alt86 = 2;
					}
					break;
				case 166:
					{
					alt86 = 3;
					}
					break;
				case 162:
					{
					alt86 = 4;
					}
					break;
				case 140:
					{
					alt86 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:31: 'if' expr
					{
					DebugLocation(375, 31);
					string_literal189=(IToken)Match(input,141,Follow._141_in_stmt_expr2183);  
					stream_141.Add(string_literal189);

					DebugLocation(375, 36);
					PushFollow(Follow._expr_in_stmt_expr2185);
					expr190=expr();
					PopFollow();

					stream_expr.Add(expr190.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(375, 44);
						// SugarCpp.g:375:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(375, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(375, 59);
						// SugarCpp.g:375:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(375, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:376:13: 'unless' expr
					{
					DebugLocation(376, 13);
					string_literal191=(IToken)Match(input,160,Follow._160_in_stmt_expr2214);  
					stream_160.Add(string_literal191);

					DebugLocation(376, 22);
					PushFollow(Follow._expr_in_stmt_expr2216);
					expr192=expr();
					PopFollow();

					stream_expr.Add(expr192.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 376:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(376, 30);
						// SugarCpp.g:376:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(376, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(376, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(376, 49);
						// SugarCpp.g:376:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(376, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(376, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:377:13: 'while' expr
					{
					DebugLocation(377, 13);
					string_literal193=(IToken)Match(input,166,Follow._166_in_stmt_expr2245);  
					stream_166.Add(string_literal193);

					DebugLocation(377, 21);
					PushFollow(Follow._expr_in_stmt_expr2247);
					expr194=expr();
					PopFollow();

					stream_expr.Add(expr194.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(377, 29);
						// SugarCpp.g:377:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(377, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(377, 47);
						// SugarCpp.g:377:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(377, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:378:13: 'until' expr
					{
					DebugLocation(378, 13);
					string_literal195=(IToken)Match(input,162,Follow._162_in_stmt_expr2276);  
					stream_162.Add(string_literal195);

					DebugLocation(378, 21);
					PushFollow(Follow._expr_in_stmt_expr2278);
					expr196=expr();
					PopFollow();

					stream_expr.Add(expr196.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(378, 29);
						// SugarCpp.g:378:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(378, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(378, 47);
						// SugarCpp.g:378:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(378, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:379:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(379, 13);
					string_literal197=(IToken)Match(input,140,Follow._140_in_stmt_expr2307);  
					stream_140.Add(string_literal197);

					DebugLocation(379, 19);
					PushFollow(Follow._for_item_in_stmt_expr2309);
					for_item198=for_item();
					PopFollow();

					stream_for_item.Add(for_item198.Tree);
					DebugLocation(379, 28);
					// SugarCpp.g:379:28: ( ',' for_item )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==95))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:379:29: ',' for_item
							{
							DebugLocation(379, 29);
							char_literal199=(IToken)Match(input,95,Follow._95_in_stmt_expr2312);  
							stream_95.Add(char_literal199);

							DebugLocation(379, 33);
							PushFollow(Follow._for_item_in_stmt_expr2314);
							for_item200=for_item();
							PopFollow();

							stream_for_item.Add(for_item200.Tree);

							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(379, 47);
						// SugarCpp.g:379:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(379, 58);
						// SugarCpp.g:379:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(379, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(379, 68);
						// SugarCpp.g:379:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(379, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 33);
			LeaveRule("stmt_expr", 33);
			LeaveRule_stmt_expr();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:383:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 34);
		TraceIn("stmt_expr_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt87=5;
			try { DebugEnterDecision(87, false);
			try
			{
				alt87 = dfa87.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2356);
				stmt_alloc201=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc201.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2361);
				stmt_return202=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return202.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:386:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2366);
				stmt_using203=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using203.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:387:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2371);
				stmt_typedef204=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef204.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:388:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2376);
				stmt_modify205=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify205.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 34);
			LeaveRule("stmt_expr_item", 34);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:391:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 35);
		TraceIn("stmt_defer", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal206 = default(IToken);
		IToken string_literal208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(391, 1);
		try
		{
			// SugarCpp.g:392:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==135))
			{
				alt88 = 1;
			}
			else if ((LA88_0==139))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:392:4: 'defer' stmt
				{
				DebugLocation(392, 4);
				string_literal206=(IToken)Match(input,135,Follow._135_in_stmt_defer2387);  
				stream_135.Add(string_literal206);

				DebugLocation(392, 12);
				PushFollow(Follow._stmt_in_stmt_defer2389);
				stmt207=stmt();
				PopFollow();

				stream_stmt.Add(stmt207.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 392:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(392, 20);
					// SugarCpp.g:392:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(392, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(392, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:393:4: 'finally' stmt
				{
				DebugLocation(393, 4);
				string_literal208=(IToken)Match(input,139,Follow._139_in_stmt_defer2402);  
				stream_139.Add(string_literal208);

				DebugLocation(393, 14);
				PushFollow(Follow._stmt_in_stmt_defer2404);
				stmt209=stmt();
				PopFollow();

				stream_stmt.Add(stmt209.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 393:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(393, 22);
					// SugarCpp.g:393:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(393, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(393, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 35);
			LeaveRule("stmt_defer", 35);
			LeaveRule_stmt_defer();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:396:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 36);
		TraceIn("stmt_typedef", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal210 = default(IToken);
		IToken char_literal212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(396, 1);
		try
		{
			// SugarCpp.g:397:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:397:4: 'type' ident '=' type_name
			{
			DebugLocation(397, 4);
			string_literal210=(IToken)Match(input,159,Follow._159_in_stmt_typedef2423);  
			stream_159.Add(string_literal210);

			DebugLocation(397, 11);
			PushFollow(Follow._ident_in_stmt_typedef2425);
			ident211=ident();
			PopFollow();

			stream_ident.Add(ident211.Tree);
			DebugLocation(397, 17);
			char_literal212=(IToken)Match(input,114,Follow._114_in_stmt_typedef2427);  
			stream_114.Add(char_literal212);

			DebugLocation(397, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2429);
			type_name213=type_name();
			PopFollow();

			stream_type_name.Add(type_name213.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 397:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(397, 34);
				// SugarCpp.g:397:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(397, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(397, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(397, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 36);
			LeaveRule("stmt_typedef", 36);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:400:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 37);
		TraceIn("stmt_using_item", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal215 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident214 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal215_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(400, 36);
		try
		{
			// SugarCpp.g:400:16: ( ident | 'namespace' )
			int alt89=2;
			try { DebugEnterDecision(89, false);
			int LA89_0 = input.LA(1);

			if ((LA89_0==IDENT))
			{
				alt89 = 1;
			}
			else if ((LA89_0==149))
			{
				alt89 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:400:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 18);
				PushFollow(Follow._ident_in_stmt_using_item2448);
				ident214=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident214.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:400:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 26);
				string_literal215=(IToken)Match(input,149,Follow._149_in_stmt_using_item2452); 
				string_literal215_tree = (CommonTree)adaptor.Create(string_literal215);
				adaptor.AddChild(root_0, string_literal215_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 37);
			LeaveRule("stmt_using_item", 37);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(400, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:401:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 38);
		TraceIn("stmt_using", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(402, 4);
			string_literal216=(IToken)Match(input,163,Follow._163_in_stmt_using2460);  
			stream_163.Add(string_literal216);

			DebugLocation(402, 12);
			// SugarCpp.g:402:12: ( stmt_using_item )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==IDENT||LA90_0==149))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:12: stmt_using_item
					{
					DebugLocation(402, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2462);
					stmt_using_item217=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item217.Tree);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 402:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(402, 32);
				// SugarCpp.g:402:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(402, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(402, 45);
				// SugarCpp.g:402:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(402, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 38);
			LeaveRule("stmt_using", 38);
			LeaveRule_stmt_using();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:405:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 39);
		TraceIn("stmt_return", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:406:4: 'return' ( expr )?
			{
			DebugLocation(406, 4);
			string_literal218=(IToken)Match(input,153,Follow._153_in_stmt_return2483);  
			stream_153.Add(string_literal218);

			DebugLocation(406, 13);
			// SugarCpp.g:406:13: ( expr )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==IDENT||LA91_0==NUMBER||LA91_0==STRING||LA91_0==81||LA91_0==86||LA91_0==88||LA91_0==90||(LA91_0>=92 && LA91_0<=93)||(LA91_0>=96 && LA91_0<=97)||(LA91_0>=123 && LA91_0<=124)||LA91_0==146||LA91_0==148||(LA91_0>=150 && LA91_0<=151)||LA91_0==170))
			{
				alt91 = 1;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:406:13: expr
				{
				DebugLocation(406, 13);
				PushFollow(Follow._expr_in_stmt_return2485);
				expr219=expr();
				PopFollow();

				stream_expr.Add(expr219.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(91); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(406, 22);
				// SugarCpp.g:406:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(406, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(406, 36);
				// SugarCpp.g:406:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(406, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 39);
			LeaveRule("stmt_return", 39);
			LeaveRule_stmt_return();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:409:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 40);
		TraceIn("inline_stmt_block", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(410, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2506);
			stmt_simple220=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple220.Tree);
			DebugLocation(410, 16);
			// SugarCpp.g:410:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==108))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:17: ';' stmt_simple
					{
					DebugLocation(410, 17);
					char_literal221=(IToken)Match(input,108,Follow._108_in_inline_stmt_block2509);  
					stream_108.Add(char_literal221);

					DebugLocation(410, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2511);
					stmt_simple222=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple222.Tree);

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(410, 38);
				// SugarCpp.g:410:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(410, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(410, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(410, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 40);
			LeaveRule("inline_stmt_block", 40);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:413:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 41);
		TraceIn("stmt_if", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal223 = default(IToken);
		IToken NEWLINE225 = default(IToken);
		IToken NEWLINE227 = default(IToken);
		IToken string_literal228 = default(IToken);
		IToken NEWLINE229 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken NEWLINE235 = default(IToken);
		IToken NEWLINE237 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken NEWLINE239 = default(IToken);
		IToken string_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree NEWLINE225_tree = default(CommonTree);
		CommonTree NEWLINE227_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree NEWLINE229_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree NEWLINE235_tree = default(CommonTree);
		CommonTree NEWLINE237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree NEWLINE239_tree = default(CommonTree);
		CommonTree string_literal241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==141))
			{
				alt103 = 1;
			}
			else if ((LA103_0==160))
			{
				alt103 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(414, 4);
				string_literal223=(IToken)Match(input,141,Follow._141_in_stmt_if2533);  
				stream_141.Add(string_literal223);

				DebugLocation(414, 9);
				PushFollow(Follow._expr_in_stmt_if2535);
				expr224=expr();
				PopFollow();

				stream_expr.Add(expr224.Tree);
				DebugLocation(414, 14);
				// SugarCpp.g:414:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}
				else if ((LA97_0==156))
				{
					alt97 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(414, 15);
					// SugarCpp.g:414:15: ( NEWLINE )+
					int cnt93=0;
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==NEWLINE))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch (alt93)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:15: NEWLINE
							{
							DebugLocation(414, 15);
							NEWLINE225=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2538);  
							stream_NEWLINE.Add(NEWLINE225);


							}
							break;

						default:
							if (cnt93 >= 1)
								goto loop93;

							EarlyExitException eee93 = new EarlyExitException( 93, input );
							DebugRecognitionException(eee93);
							throw eee93;
						}
						cnt93++;
					}
					loop93:
						;

					} finally { DebugExitSubRule(93); }

					DebugLocation(414, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2541);
					stmt_block226=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block226.Tree);
					DebugLocation(414, 35);
					// SugarCpp.g:414:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt96=2;
					try { DebugEnterSubRule(96);
					try { DebugEnterDecision(96, false);
					try
					{
						alt96 = dfa96.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:414:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(414, 36);
						// SugarCpp.g:414:36: ( NEWLINE )*
						try { DebugEnterSubRule(94);
						while (true)
						{
							int alt94=2;
							try { DebugEnterDecision(94, false);
							int LA94_0 = input.LA(1);

							if ((LA94_0==NEWLINE))
							{
								alt94 = 1;
							}


							} finally { DebugExitDecision(94); }
							switch ( alt94 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:414:36: NEWLINE
								{
								DebugLocation(414, 36);
								NEWLINE227=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2544);  
								stream_NEWLINE.Add(NEWLINE227);


								}
								break;

							default:
								goto loop94;
							}
						}

						loop94:
							;

						} finally { DebugExitSubRule(94); }

						DebugLocation(414, 45);
						string_literal228=(IToken)Match(input,137,Follow._137_in_stmt_if2547);  
						stream_137.Add(string_literal228);

						DebugLocation(414, 52);
						// SugarCpp.g:414:52: ( NEWLINE )+
						int cnt95=0;
						try { DebugEnterSubRule(95);
						while (true)
						{
							int alt95=2;
							try { DebugEnterDecision(95, false);
							int LA95_0 = input.LA(1);

							if ((LA95_0==NEWLINE))
							{
								alt95 = 1;
							}


							} finally { DebugExitDecision(95); }
							switch (alt95)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:414:52: NEWLINE
								{
								DebugLocation(414, 52);
								NEWLINE229=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2549);  
								stream_NEWLINE.Add(NEWLINE229);


								}
								break;

							default:
								if (cnt95 >= 1)
									goto loop95;

								EarlyExitException eee95 = new EarlyExitException( 95, input );
								DebugRecognitionException(eee95);
								throw eee95;
							}
							cnt95++;
						}
						loop95:
							;

						} finally { DebugExitSubRule(95); }

						DebugLocation(414, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2552);
						stmt_block230=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block230.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(96); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 414:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(414, 77);
						// SugarCpp.g:414:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(414, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(414, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(414, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(414, 103);
						// SugarCpp.g:414:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(414, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:415:16: 'then' inline_stmt_block
					{
					DebugLocation(415, 16);
					string_literal231=(IToken)Match(input,156,Follow._156_in_stmt_if2584);  
					stream_156.Add(string_literal231);

					DebugLocation(415, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2586);
					inline_stmt_block232=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block232.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 415:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(415, 44);
						// SugarCpp.g:415:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(415, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(415, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:417:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(417, 4);
				string_literal233=(IToken)Match(input,160,Follow._160_in_stmt_if2607);  
				stream_160.Add(string_literal233);

				DebugLocation(417, 13);
				PushFollow(Follow._expr_in_stmt_if2609);
				expr234=expr();
				PopFollow();

				stream_expr.Add(expr234.Tree);
				DebugLocation(417, 18);
				// SugarCpp.g:417:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==NEWLINE))
				{
					alt102 = 1;
				}
				else if ((LA102_0==156))
				{
					alt102 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:417:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(417, 19);
					// SugarCpp.g:417:19: ( NEWLINE )+
					int cnt98=0;
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=2;
						try { DebugEnterDecision(98, false);
						int LA98_0 = input.LA(1);

						if ((LA98_0==NEWLINE))
						{
							alt98 = 1;
						}


						} finally { DebugExitDecision(98); }
						switch (alt98)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:417:19: NEWLINE
							{
							DebugLocation(417, 19);
							NEWLINE235=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2612);  
							stream_NEWLINE.Add(NEWLINE235);


							}
							break;

						default:
							if (cnt98 >= 1)
								goto loop98;

							EarlyExitException eee98 = new EarlyExitException( 98, input );
							DebugRecognitionException(eee98);
							throw eee98;
						}
						cnt98++;
					}
					loop98:
						;

					} finally { DebugExitSubRule(98); }

					DebugLocation(417, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2615);
					stmt_block236=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block236.Tree);
					DebugLocation(417, 39);
					// SugarCpp.g:417:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt101=2;
					try { DebugEnterSubRule(101);
					try { DebugEnterDecision(101, false);
					try
					{
						alt101 = dfa101.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:417:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(417, 40);
						// SugarCpp.g:417:40: ( NEWLINE )*
						try { DebugEnterSubRule(99);
						while (true)
						{
							int alt99=2;
							try { DebugEnterDecision(99, false);
							int LA99_0 = input.LA(1);

							if ((LA99_0==NEWLINE))
							{
								alt99 = 1;
							}


							} finally { DebugExitDecision(99); }
							switch ( alt99 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:417:40: NEWLINE
								{
								DebugLocation(417, 40);
								NEWLINE237=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2618);  
								stream_NEWLINE.Add(NEWLINE237);


								}
								break;

							default:
								goto loop99;
							}
						}

						loop99:
							;

						} finally { DebugExitSubRule(99); }

						DebugLocation(417, 49);
						string_literal238=(IToken)Match(input,137,Follow._137_in_stmt_if2621);  
						stream_137.Add(string_literal238);

						DebugLocation(417, 56);
						// SugarCpp.g:417:56: ( NEWLINE )+
						int cnt100=0;
						try { DebugEnterSubRule(100);
						while (true)
						{
							int alt100=2;
							try { DebugEnterDecision(100, false);
							int LA100_0 = input.LA(1);

							if ((LA100_0==NEWLINE))
							{
								alt100 = 1;
							}


							} finally { DebugExitDecision(100); }
							switch (alt100)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:417:56: NEWLINE
								{
								DebugLocation(417, 56);
								NEWLINE239=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2623);  
								stream_NEWLINE.Add(NEWLINE239);


								}
								break;

							default:
								if (cnt100 >= 1)
									goto loop100;

								EarlyExitException eee100 = new EarlyExitException( 100, input );
								DebugRecognitionException(eee100);
								throw eee100;
							}
							cnt100++;
						}
						loop100:
							;

						} finally { DebugExitSubRule(100); }

						DebugLocation(417, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2626);
						stmt_block240=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block240.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(101); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(417, 81);
						// SugarCpp.g:417:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(417, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(417, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(417, 111);
						// SugarCpp.g:417:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(417, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:418:20: 'then' inline_stmt_block
					{
					DebugLocation(418, 20);
					string_literal241=(IToken)Match(input,156,Follow._156_in_stmt_if2662);  
					stream_156.Add(string_literal241);

					DebugLocation(418, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2664);
					inline_stmt_block242=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block242.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(418, 48);
						// SugarCpp.g:418:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(418, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(418, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(102); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 41);
			LeaveRule("stmt_if", 41);
			LeaveRule_stmt_if();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:422:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 42);
		TraceIn("stmt_while", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		IToken NEWLINE245 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken string_literal249 = default(IToken);
		IToken NEWLINE251 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken string_literal255 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree NEWLINE245_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree NEWLINE251_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt110=3;
			try { DebugEnterDecision(110, false);
			switch (input.LA(1))
			{
			case 166:
				{
				alt110 = 1;
				}
				break;
			case 162:
				{
				alt110 = 2;
				}
				break;
			case 147:
				{
				alt110 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:423:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(423, 4);
				string_literal243=(IToken)Match(input,166,Follow._166_in_stmt_while2695);  
				stream_166.Add(string_literal243);

				DebugLocation(423, 12);
				PushFollow(Follow._expr_in_stmt_while2697);
				expr244=expr();
				PopFollow();

				stream_expr.Add(expr244.Tree);
				DebugLocation(423, 17);
				// SugarCpp.g:423:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==NEWLINE))
				{
					alt105 = 1;
				}
				else if ((LA105_0==156))
				{
					alt105 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(423, 19);
					// SugarCpp.g:423:19: ( NEWLINE )+
					int cnt104=0;
					try { DebugEnterSubRule(104);
					while (true)
					{
						int alt104=2;
						try { DebugEnterDecision(104, false);
						int LA104_0 = input.LA(1);

						if ((LA104_0==NEWLINE))
						{
							alt104 = 1;
						}


						} finally { DebugExitDecision(104); }
						switch (alt104)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:423:19: NEWLINE
							{
							DebugLocation(423, 19);
							NEWLINE245=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2701);  
							stream_NEWLINE.Add(NEWLINE245);


							}
							break;

						default:
							if (cnt104 >= 1)
								goto loop104;

							EarlyExitException eee104 = new EarlyExitException( 104, input );
							DebugRecognitionException(eee104);
							throw eee104;
						}
						cnt104++;
					}
					loop104:
						;

					} finally { DebugExitSubRule(104); }

					DebugLocation(423, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2704);
					stmt_block246=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block246.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(423, 42);
						// SugarCpp.g:423:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(423, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(423, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:424:13: 'then' inline_stmt_block
					{
					DebugLocation(424, 13);
					string_literal247=(IToken)Match(input,156,Follow._156_in_stmt_while2728);  
					stream_156.Add(string_literal247);

					DebugLocation(424, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2730);
					inline_stmt_block248=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block248.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 424:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(424, 41);
						// SugarCpp.g:424:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(424, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(424, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(424, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:426:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(426, 4);
				string_literal249=(IToken)Match(input,162,Follow._162_in_stmt_while2754);  
				stream_162.Add(string_literal249);

				DebugLocation(426, 12);
				PushFollow(Follow._expr_in_stmt_while2756);
				expr250=expr();
				PopFollow();

				stream_expr.Add(expr250.Tree);
				DebugLocation(426, 17);
				// SugarCpp.g:426:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==NEWLINE))
				{
					alt107 = 1;
				}
				else if ((LA107_0==156))
				{
					alt107 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(426, 19);
					// SugarCpp.g:426:19: ( NEWLINE )+
					int cnt106=0;
					try { DebugEnterSubRule(106);
					while (true)
					{
						int alt106=2;
						try { DebugEnterDecision(106, false);
						int LA106_0 = input.LA(1);

						if ((LA106_0==NEWLINE))
						{
							alt106 = 1;
						}


						} finally { DebugExitDecision(106); }
						switch (alt106)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:426:19: NEWLINE
							{
							DebugLocation(426, 19);
							NEWLINE251=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2760);  
							stream_NEWLINE.Add(NEWLINE251);


							}
							break;

						default:
							if (cnt106 >= 1)
								goto loop106;

							EarlyExitException eee106 = new EarlyExitException( 106, input );
							DebugRecognitionException(eee106);
							throw eee106;
						}
						cnt106++;
					}
					loop106:
						;

					} finally { DebugExitSubRule(106); }

					DebugLocation(426, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2763);
					stmt_block252=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block252.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 426:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(426, 42);
						// SugarCpp.g:426:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(426, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(426, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(426, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:427:13: 'then' inline_stmt_block
					{
					DebugLocation(427, 13);
					string_literal253=(IToken)Match(input,156,Follow._156_in_stmt_while2787);  
					stream_156.Add(string_literal253);

					DebugLocation(427, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2789);
					inline_stmt_block254=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block254.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 427:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(427, 41);
						// SugarCpp.g:427:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(427, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(427, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(427, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(107); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:429:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(429, 4);
				string_literal255=(IToken)Match(input,147,Follow._147_in_stmt_while2813);  
				stream_147.Add(string_literal255);

				DebugLocation(429, 11);
				// SugarCpp.g:429:11: ( expr )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==IDENT||LA108_0==NUMBER||LA108_0==STRING||LA108_0==81||LA108_0==86||LA108_0==88||LA108_0==90||(LA108_0>=92 && LA108_0<=93)||(LA108_0>=96 && LA108_0<=97)||(LA108_0>=123 && LA108_0<=124)||LA108_0==146||LA108_0==148||(LA108_0>=150 && LA108_0<=151)||LA108_0==170))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:11: expr
					{
					DebugLocation(429, 11);
					PushFollow(Follow._expr_in_stmt_while2815);
					expr256=expr();
					PopFollow();

					stream_expr.Add(expr256.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(429, 17);
				// SugarCpp.g:429:17: ( NEWLINE )+
				int cnt109=0;
				try { DebugEnterSubRule(109);
				while (true)
				{
					int alt109=2;
					try { DebugEnterDecision(109, false);
					int LA109_0 = input.LA(1);

					if ((LA109_0==NEWLINE))
					{
						alt109 = 1;
					}


					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:429:17: NEWLINE
						{
						DebugLocation(429, 17);
						NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2818);  
						stream_NEWLINE.Add(NEWLINE257);


						}
						break;

					default:
						if (cnt109 >= 1)
							goto loop109;

						EarlyExitException eee109 = new EarlyExitException( 109, input );
						DebugRecognitionException(eee109);
						throw eee109;
					}
					cnt109++;
				}
				loop109:
					;

				} finally { DebugExitSubRule(109); }

				DebugLocation(429, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2821);
				stmt_block258=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block258.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 429:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(429, 40);
					// SugarCpp.g:429:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(429, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(429, 52);
					// SugarCpp.g:429:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(429, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(429, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 42);
			LeaveRule("stmt_while", 42);
			LeaveRule_stmt_while();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:432:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 43);
		TraceIn("for_range", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal260 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken string_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(433, 4);
			PushFollow(Follow._ident_in_for_range2843);
			ident259=ident();
			PopFollow();

			stream_ident.Add(ident259.Tree);
			DebugLocation(433, 10);
			string_literal260=(IToken)Match(input,110,Follow._110_in_for_range2845);  
			stream_110.Add(string_literal260);

			DebugLocation(433, 16);
			PushFollow(Follow._expr_in_for_range2849);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(433, 22);
			// SugarCpp.g:433:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt113=3;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			switch (input.LA(1))
			{
			case 157:
				{
				alt113 = 1;
				}
				break;
			case 136:
				{
				alt113 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 95:
			case 108:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
				{
				alt113 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(433, 23);
				string_literal261=(IToken)Match(input,157,Follow._157_in_for_range2852);  
				stream_157.Add(string_literal261);

				DebugLocation(433, 29);
				PushFollow(Follow._expr_in_for_range2856);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(433, 35);
				// SugarCpp.g:433:35: ( 'by' c= expr )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==131))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:36: 'by' c= expr
					{
					DebugLocation(433, 36);
					string_literal262=(IToken)Match(input,131,Follow._131_in_for_range2859);  
					stream_131.Add(string_literal262);

					DebugLocation(433, 42);
					PushFollow(Follow._expr_in_for_range2863);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(111); }



				{
				// AST REWRITE
				// elements: c, a, ident, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 433:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(433, 53);
					// SugarCpp.g:433:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(433, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(433, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(433, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(433, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(433, 80);
					// SugarCpp.g:433:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(433, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:434:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(434, 8);
				string_literal263=(IToken)Match(input,136,Follow._136_in_for_range2892);  
				stream_136.Add(string_literal263);

				DebugLocation(434, 18);
				PushFollow(Follow._expr_in_for_range2896);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(434, 24);
				// SugarCpp.g:434:24: ( 'by' c= expr )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==131))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:25: 'by' c= expr
					{
					DebugLocation(434, 25);
					string_literal264=(IToken)Match(input,131,Follow._131_in_for_range2899);  
					stream_131.Add(string_literal264);

					DebugLocation(434, 31);
					PushFollow(Follow._expr_in_for_range2903);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(112); }



				{
				// AST REWRITE
				// elements: b, a, c, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 434:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(434, 42);
					// SugarCpp.g:434:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(434, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(434, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(434, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(434, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(434, 74);
					// SugarCpp.g:434:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(434, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:435:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 435:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(435, 12);
					// SugarCpp.g:435:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(435, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(435, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(435, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 43);
			LeaveRule("for_range", 43);
			LeaveRule_for_range();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:439:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 44);
		TraceIn("for_when", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(439, 1);
		try
		{
			// SugarCpp.g:440:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:440:4: expr
			{
			DebugLocation(440, 4);
			PushFollow(Follow._expr_in_for_when2961);
			expr265=expr();
			PopFollow();

			stream_expr.Add(expr265.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 440:9: -> ^( For_Item_When expr )
			{
				DebugLocation(440, 12);
				// SugarCpp.g:440:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(440, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(440, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 44);
			LeaveRule("for_when", 44);
			LeaveRule_for_when();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:443:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 45);
		TraceIn("for_item", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( for_range | for_when )
			int alt114=2;
			try { DebugEnterDecision(114, false);
			try
			{
				alt114 = dfa114.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(444, 4);
				PushFollow(Follow._for_range_in_for_item2980);
				for_range266=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range266.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:445:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(445, 4);
				PushFollow(Follow._for_when_in_for_item2985);
				for_when267=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when267.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 45);
			LeaveRule("for_item", 45);
			LeaveRule_for_item();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:448:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 46);
		TraceIn("stmt_for", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken char_literal270 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block273 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree char_literal270_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:449:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(449, 4);
			string_literal268=(IToken)Match(input,140,Follow._140_in_stmt_for2996);  
			stream_140.Add(string_literal268);

			DebugLocation(449, 10);
			// SugarCpp.g:449:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:449:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(449, 12);
			PushFollow(Follow._for_item_in_stmt_for3000);
			for_item269=for_item();
			PopFollow();

			stream_for_item.Add(for_item269.Tree);
			DebugLocation(449, 21);
			// SugarCpp.g:449:21: ( ',' for_item )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==95))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:22: ',' for_item
					{
					DebugLocation(449, 22);
					char_literal270=(IToken)Match(input,95,Follow._95_in_stmt_for3003);  
					stream_95.Add(char_literal270);

					DebugLocation(449, 26);
					PushFollow(Follow._for_item_in_stmt_for3005);
					for_item271=for_item();
					PopFollow();

					stream_for_item.Add(for_item271.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(449, 37);
			// SugarCpp.g:449:37: ( NEWLINE )+
			int cnt116=0;
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==NEWLINE))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:37: NEWLINE
					{
					DebugLocation(449, 37);
					NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3009);  
					stream_NEWLINE.Add(NEWLINE272);


					}
					break;

				default:
					if (cnt116 >= 1)
						goto loop116;

					EarlyExitException eee116 = new EarlyExitException( 116, input );
					DebugRecognitionException(eee116);
					throw eee116;
				}
				cnt116++;
			}
			loop116:
				;

			} finally { DebugExitSubRule(116); }

			DebugLocation(449, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3012);
			stmt_block273=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block273.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 449:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(449, 60);
				// SugarCpp.g:449:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(449, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(449, 71);
				// SugarCpp.g:449:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(449, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(449, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 46);
			LeaveRule("stmt_for", 46);
			LeaveRule_stmt_for();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:454:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 47);
		TraceIn("stmt_try", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal274 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		IToken NEWLINE277 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken NEWLINE280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		CommonTree NEWLINE277_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree NEWLINE280_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(454, 1);
		try
		{
			// SugarCpp.g:455:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:455:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(455, 4);
			string_literal274=(IToken)Match(input,158,Follow._158_in_stmt_try3043);  
			stream_158.Add(string_literal274);

			DebugLocation(455, 10);
			// SugarCpp.g:455:10: ( NEWLINE )+
			int cnt117=0;
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:10: NEWLINE
					{
					DebugLocation(455, 10);
					NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3045);  
					stream_NEWLINE.Add(NEWLINE275);


					}
					break;

				default:
					if (cnt117 >= 1)
						goto loop117;

					EarlyExitException eee117 = new EarlyExitException( 117, input );
					DebugRecognitionException(eee117);
					throw eee117;
				}
				cnt117++;
			}
			loop117:
				;

			} finally { DebugExitSubRule(117); }

			DebugLocation(455, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3048);
			stmt_block276=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block276.Tree);
			DebugLocation(455, 30);
			// SugarCpp.g:455:30: ( NEWLINE )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==NEWLINE))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:30: NEWLINE
					{
					DebugLocation(455, 30);
					NEWLINE277=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3050);  
					stream_NEWLINE.Add(NEWLINE277);


					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }

			DebugLocation(455, 39);
			string_literal278=(IToken)Match(input,132,Follow._132_in_stmt_try3053);  
			stream_132.Add(string_literal278);

			DebugLocation(455, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3055);
			stmt_alloc279=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc279.Tree);
			DebugLocation(455, 58);
			// SugarCpp.g:455:58: ( NEWLINE )+
			int cnt119=0;
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==NEWLINE))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:58: NEWLINE
					{
					DebugLocation(455, 58);
					NEWLINE280=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3057);  
					stream_NEWLINE.Add(NEWLINE280);


					}
					break;

				default:
					if (cnt119 >= 1)
						goto loop119;

					EarlyExitException eee119 = new EarlyExitException( 119, input );
					DebugRecognitionException(eee119);
					throw eee119;
				}
				cnt119++;
			}
			loop119:
				;

			} finally { DebugExitSubRule(119); }

			DebugLocation(455, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3060);
			stmt_block281=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block281.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 455:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(455, 81);
				// SugarCpp.g:455:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(455, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(455, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(455, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(455, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 47);
			LeaveRule("stmt_try", 47);
			LeaveRule_stmt_try();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:458:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 48);
		TraceIn("switch_item", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal282 = default(IToken);
		IToken char_literal284 = default(IToken);
		IToken NEWLINE286 = default(IToken);
		IToken string_literal288 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree NEWLINE286_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(458, 1);
		try
		{
			// SugarCpp.g:459:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:459:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(459, 4);
			string_literal282=(IToken)Match(input,164,Follow._164_in_switch_item3083);  
			stream_164.Add(string_literal282);

			DebugLocation(459, 11);
			PushFollow(Follow._expr_in_switch_item3085);
			expr283=expr();
			PopFollow();

			stream_expr.Add(expr283.Tree);
			DebugLocation(459, 16);
			// SugarCpp.g:459:16: ( ',' expr )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==95))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:17: ',' expr
					{
					DebugLocation(459, 17);
					char_literal284=(IToken)Match(input,95,Follow._95_in_switch_item3088);  
					stream_95.Add(char_literal284);

					DebugLocation(459, 21);
					PushFollow(Follow._expr_in_switch_item3090);
					expr285=expr();
					PopFollow();

					stream_expr.Add(expr285.Tree);

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }

			DebugLocation(459, 28);
			// SugarCpp.g:459:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==NEWLINE))
			{
				alt122 = 1;
			}
			else if ((LA122_0==156))
			{
				alt122 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:459:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(459, 30);
				// SugarCpp.g:459:30: ( NEWLINE )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:459:30: NEWLINE
						{
						DebugLocation(459, 30);
						NEWLINE286=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3096);  
						stream_NEWLINE.Add(NEWLINE286);


						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(459, 39);
				PushFollow(Follow._stmt_block_in_switch_item3099);
				stmt_block287=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block287.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 459:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(459, 53);
					// SugarCpp.g:459:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(459, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(459, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(459, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(459, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:460:30: 'then' inline_stmt_block
				{
				DebugLocation(460, 30);
				string_literal288=(IToken)Match(input,156,Follow._156_in_switch_item3141);  
				stream_156.Add(string_literal288);

				DebugLocation(460, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3143);
				inline_stmt_block289=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block289.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 460:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(460, 58);
					// SugarCpp.g:460:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(460, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(460, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(460, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(460, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 48);
			LeaveRule("switch_item", 48);
			LeaveRule_switch_item();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:464:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 49);
		TraceIn("stmt_switch", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		IToken INDENT293 = default(IToken);
		IToken NEWLINE294 = default(IToken);
		IToken NEWLINE296 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken NEWLINE298 = default(IToken);
		IToken NEWLINE300 = default(IToken);
		IToken DEDENT301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block299 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		CommonTree INDENT293_tree = default(CommonTree);
		CommonTree NEWLINE294_tree = default(CommonTree);
		CommonTree NEWLINE296_tree = default(CommonTree);
		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree NEWLINE298_tree = default(CommonTree);
		CommonTree NEWLINE300_tree = default(CommonTree);
		CommonTree DEDENT301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(465, 4);
			string_literal290=(IToken)Match(input,155,Follow._155_in_stmt_switch3179);  
			stream_155.Add(string_literal290);

			DebugLocation(465, 13);
			// SugarCpp.g:465:13: ( expr )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==IDENT||LA123_0==NUMBER||LA123_0==STRING||LA123_0==81||LA123_0==86||LA123_0==88||LA123_0==90||(LA123_0>=92 && LA123_0<=93)||(LA123_0>=96 && LA123_0<=97)||(LA123_0>=123 && LA123_0<=124)||LA123_0==146||LA123_0==148||(LA123_0>=150 && LA123_0<=151)||LA123_0==170))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:465:13: expr
				{
				DebugLocation(465, 13);
				PushFollow(Follow._expr_in_stmt_switch3181);
				expr291=expr();
				PopFollow();

				stream_expr.Add(expr291.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(465, 19);
			// SugarCpp.g:465:19: ( NEWLINE )+
			int cnt124=0;
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==NEWLINE))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:19: NEWLINE
					{
					DebugLocation(465, 19);
					NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3184);  
					stream_NEWLINE.Add(NEWLINE292);


					}
					break;

				default:
					if (cnt124 >= 1)
						goto loop124;

					EarlyExitException eee124 = new EarlyExitException( 124, input );
					DebugRecognitionException(eee124);
					throw eee124;
				}
				cnt124++;
			}
			loop124:
				;

			} finally { DebugExitSubRule(124); }

			DebugLocation(465, 28);
			INDENT293=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3187);  
			stream_INDENT.Add(INDENT293);

			DebugLocation(465, 35);
			// SugarCpp.g:465:35: ( NEWLINE )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:35: NEWLINE
					{
					DebugLocation(465, 35);
					NEWLINE294=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3189);  
					stream_NEWLINE.Add(NEWLINE294);


					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }

			DebugLocation(465, 44);
			// SugarCpp.g:465:44: ( switch_item ( NEWLINE )+ )+
			int cnt127=0;
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==164))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:45: switch_item ( NEWLINE )+
					{
					DebugLocation(465, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3193);
					switch_item295=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item295.Tree);
					DebugLocation(465, 57);
					// SugarCpp.g:465:57: ( NEWLINE )+
					int cnt126=0;
					try { DebugEnterSubRule(126);
					while (true)
					{
						int alt126=2;
						try { DebugEnterDecision(126, false);
						int LA126_0 = input.LA(1);

						if ((LA126_0==NEWLINE))
						{
							alt126 = 1;
						}


						} finally { DebugExitDecision(126); }
						switch (alt126)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:465:57: NEWLINE
							{
							DebugLocation(465, 57);
							NEWLINE296=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3195);  
							stream_NEWLINE.Add(NEWLINE296);


							}
							break;

						default:
							if (cnt126 >= 1)
								goto loop126;

							EarlyExitException eee126 = new EarlyExitException( 126, input );
							DebugRecognitionException(eee126);
							throw eee126;
						}
						cnt126++;
					}
					loop126:
						;

					} finally { DebugExitSubRule(126); }


					}
					break;

				default:
					if (cnt127 >= 1)
						goto loop127;

					EarlyExitException eee127 = new EarlyExitException( 127, input );
					DebugRecognitionException(eee127);
					throw eee127;
				}
				cnt127++;
			}
			loop127:
				;

			} finally { DebugExitSubRule(127); }

			DebugLocation(465, 68);
			// SugarCpp.g:465:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==137))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:465:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(465, 69);
				string_literal297=(IToken)Match(input,137,Follow._137_in_stmt_switch3201);  
				stream_137.Add(string_literal297);

				DebugLocation(465, 76);
				// SugarCpp.g:465:76: ( NEWLINE )+
				int cnt128=0;
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==NEWLINE))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:465:76: NEWLINE
						{
						DebugLocation(465, 76);
						NEWLINE298=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3203);  
						stream_NEWLINE.Add(NEWLINE298);


						}
						break;

					default:
						if (cnt128 >= 1)
							goto loop128;

						EarlyExitException eee128 = new EarlyExitException( 128, input );
						DebugRecognitionException(eee128);
						throw eee128;
					}
					cnt128++;
				}
				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(465, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3206);
				stmt_block299=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block299.Tree);
				DebugLocation(465, 96);
				// SugarCpp.g:465:96: ( NEWLINE )*
				try { DebugEnterSubRule(129);
				while (true)
				{
					int alt129=2;
					try { DebugEnterDecision(129, false);
					int LA129_0 = input.LA(1);

					if ((LA129_0==NEWLINE))
					{
						alt129 = 1;
					}


					} finally { DebugExitDecision(129); }
					switch ( alt129 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:465:96: NEWLINE
						{
						DebugLocation(465, 96);
						NEWLINE300=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3208);  
						stream_NEWLINE.Add(NEWLINE300);


						}
						break;

					default:
						goto loop129;
					}
				}

				loop129:
					;

				} finally { DebugExitSubRule(129); }


				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(465, 107);
			DEDENT301=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3213);  
			stream_DEDENT.Add(DEDENT301);



			{
			// AST REWRITE
			// elements: stmt_block, switch_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 465:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(465, 117);
				// SugarCpp.g:465:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(465, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(465, 131);
				// SugarCpp.g:465:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(465, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(465, 137);
				// SugarCpp.g:465:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(465, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(465, 150);
				// SugarCpp.g:465:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(465, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 49);
			LeaveRule("stmt_switch", 49);
			LeaveRule_stmt_switch();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:468:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 50);
		TraceIn("ident_list", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident304 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:469:4: ident ( ',' ident )*
			{
			DebugLocation(469, 4);
			PushFollow(Follow._ident_in_ident_list3239);
			ident302=ident();
			PopFollow();

			stream_ident.Add(ident302.Tree);
			DebugLocation(469, 10);
			// SugarCpp.g:469:10: ( ',' ident )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==95))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:469:11: ',' ident
					{
					DebugLocation(469, 11);
					char_literal303=(IToken)Match(input,95,Follow._95_in_ident_list3242);  
					stream_95.Add(char_literal303);

					DebugLocation(469, 15);
					PushFollow(Follow._ident_in_ident_list3244);
					ident304=ident();
					PopFollow();

					stream_ident.Add(ident304.Tree);

					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 469:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(469, 26);
				// SugarCpp.g:469:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(469, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(469, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(469, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 50);
			LeaveRule("ident_list", 50);
			LeaveRule_ident_list();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:472:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 51);
		TraceIn("stmt_alloc", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		IToken string_literal309 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal316 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr317 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		CommonTree string_literal309_tree = default(CommonTree);
		CommonTree char_literal311_tree = default(CommonTree);
		CommonTree char_literal313_tree = default(CommonTree);
		CommonTree string_literal314_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:473:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(473, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3266);
			ident_list305=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list305.Tree);
			DebugLocation(473, 15);
			// SugarCpp.g:473:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_0 = input.LA(1);

			if ((LA136_0==105))
			{
				alt136 = 1;
			}
			else if ((LA136_0==107))
			{
				alt136 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 136, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:473:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(473, 17);
				char_literal306=(IToken)Match(input,105,Follow._105_in_stmt_alloc3270);  
				stream_105.Add(char_literal306);

				DebugLocation(473, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3272);
				type_name307=type_name();
				PopFollow();

				stream_type_name.Add(type_name307.Tree);
				DebugLocation(473, 31);
				// SugarCpp.g:473:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt134=3;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt134 = 1;
					}
					break;
				case 88:
					{
					alt134 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 108:
				case 140:
				case 141:
				case 143:
				case 160:
				case 162:
				case 166:
					{
					alt134 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(473, 33);
					// SugarCpp.g:473:33: ( '=' | ':=' )
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==114))
					{
						alt132 = 1;
					}
					else if ((LA132_0==107))
					{
						alt132 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:473:34: '='
						{
						DebugLocation(473, 34);
						char_literal308=(IToken)Match(input,114,Follow._114_in_stmt_alloc3277);  
						stream_114.Add(char_literal308);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:473:40: ':='
						{
						DebugLocation(473, 40);
						string_literal309=(IToken)Match(input,107,Follow._107_in_stmt_alloc3281);  
						stream_107.Add(string_literal309);


						}
						break;

					}
					} finally { DebugExitSubRule(132); }

					DebugLocation(473, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3284);
					where_expr310=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr310.Tree);


					{
					// AST REWRITE
					// elements: type_name, where_expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(473, 61);
						// SugarCpp.g:473:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(473, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(473, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(473, 101);
						// SugarCpp.g:473:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(473, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:474:33: '(' ( expr_list )? ')'
					{
					DebugLocation(474, 33);
					char_literal311=(IToken)Match(input,88,Follow._88_in_stmt_alloc3332);  
					stream_88.Add(char_literal311);

					DebugLocation(474, 37);
					// SugarCpp.g:474:37: ( expr_list )?
					int alt133=2;
					try { DebugEnterSubRule(133);
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==IDENT||LA133_0==NUMBER||LA133_0==STRING||LA133_0==81||LA133_0==86||LA133_0==88||LA133_0==90||(LA133_0>=92 && LA133_0<=93)||(LA133_0>=96 && LA133_0<=97)||(LA133_0>=123 && LA133_0<=124)||LA133_0==146||LA133_0==148||(LA133_0>=150 && LA133_0<=151)||LA133_0==170))
					{
						alt133 = 1;
					}
					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:37: expr_list
						{
						DebugLocation(474, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3334);
						expr_list312=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list312.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(133); }

					DebugLocation(474, 48);
					char_literal313=(IToken)Match(input,89,Follow._89_in_stmt_alloc3337);  
					stream_89.Add(char_literal313);



					{
					// AST REWRITE
					// elements: expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 474:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(474, 56);
						// SugarCpp.g:474:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(474, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(474, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(474, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(474, 98);
						// SugarCpp.g:474:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(474, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:475:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 475:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(475, 18);
						// SugarCpp.g:475:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(475, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(475, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(475, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(134); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:477:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(477, 8);
				string_literal314=(IToken)Match(input,107,Follow._107_in_stmt_alloc3398);  
				stream_107.Add(string_literal314);

				DebugLocation(477, 14);
				// SugarCpp.g:477:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:477:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(477, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3402);
				where_expr315=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr315.Tree);
				DebugLocation(477, 26);
				// SugarCpp.g:477:26: ( ',' where_expr )*
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==95))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch ( alt135 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:477:27: ',' where_expr
						{
						DebugLocation(477, 27);
						char_literal316=(IToken)Match(input,95,Follow._95_in_stmt_alloc3405);  
						stream_95.Add(char_literal316);

						DebugLocation(477, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3407);
						where_expr317=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr317.Tree);

						}
						break;

					default:
						goto loop135;
					}
				}

				loop135:
					;

				} finally { DebugExitSubRule(135); }


				}



				{
				// AST REWRITE
				// elements: where_expr, ident_list, 107
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 477:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(477, 48);
					// SugarCpp.g:477:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(477, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(477, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(477, 66);
					// SugarCpp.g:477:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(477, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 51);
			LeaveRule("stmt_alloc", 51);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:480:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 52);
		TraceIn("stmt_modify", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal321 = default(IToken);
		IToken string_literal323 = default(IToken);
		IToken string_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr326 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree string_literal323_tree = default(CommonTree);
		CommonTree string_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(481, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3433);
			lvalue318=lvalue();
			PopFollow();

			stream_lvalue.Add(lvalue318.Tree);
			DebugLocation(481, 11);
			// SugarCpp.g:481:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt137=5;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 127:
			case 168:
				{
				alt137 = 1;
				}
				break;
			case 122:
				{
				alt137 = 2;
				}
				break;
			case 111:
				{
				alt137 = 3;
				}
				break;
			case 119:
				{
				alt137 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 108:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
				{
				alt137 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:13: modify_expr_op where_expr
				{
				DebugLocation(481, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3437);
				modify_expr_op319=modify_expr_op();
				PopFollow();

				stream_modify_expr_op.Add(modify_expr_op319.Tree);
				DebugLocation(481, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3439);
				where_expr320=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr320.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 481:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(481, 42);
					// SugarCpp.g:481:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(481, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(481, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(481, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:482:13: '?=' where_expr
				{
				DebugLocation(482, 13);
				string_literal321=(IToken)Match(input,122,Follow._122_in_stmt_modify3463);  
				stream_122.Add(string_literal321);

				DebugLocation(482, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3465);
				where_expr322=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr322.Tree);


				{
				// AST REWRITE
				// elements: 122, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 482:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(482, 32);
					// SugarCpp.g:482:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(482, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_122.NextNode(), root_1);

					DebugLocation(482, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(482, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:483:16: '<<' where_expr
				{
				DebugLocation(483, 16);
				string_literal323=(IToken)Match(input,111,Follow._111_in_stmt_modify3492);  
				stream_111.Add(string_literal323);

				DebugLocation(483, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3494);
				where_expr324=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr324.Tree);


				{
				// AST REWRITE
				// elements: 111, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 483:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(483, 35);
					// SugarCpp.g:483:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(483, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(483, 46);
					adaptor.AddChild(root_1, stream_111.NextNode());
					DebugLocation(483, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(483, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:484:16: '>>' where_expr
				{
				DebugLocation(484, 16);
				string_literal325=(IToken)Match(input,119,Follow._119_in_stmt_modify3523);  
				stream_119.Add(string_literal325);

				DebugLocation(484, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3525);
				where_expr326=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr326.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 119
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 484:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(484, 35);
					// SugarCpp.g:484:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(484, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(484, 46);
					adaptor.AddChild(root_1, stream_119.NextNode());
					DebugLocation(484, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(484, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:485:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 485:7: -> lvalue
				{
					DebugLocation(485, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 52);
			LeaveRule("stmt_modify", 52);
			LeaveRule_stmt_modify();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:488:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 53);
		TraceIn("where_item", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt327 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(489, 4);
			PushFollow(Follow._stmt_in_where_item3559);
			stmt327=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt327.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 53);
			LeaveRule("where_item", 53);
			LeaveRule_where_item();
		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:492:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 54);
		TraceIn("where_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE328 = default(IToken);
		IToken INDENT329 = default(IToken);
		IToken NEWLINE330 = default(IToken);
		IToken string_literal331 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken DEDENT334 = default(IToken);
		IToken NEWLINE335 = default(IToken);
		IToken INDENT336 = default(IToken);
		IToken NEWLINE337 = default(IToken);
		IToken NEWLINE339 = default(IToken);
		IToken DEDENT340 = default(IToken);
		IToken NEWLINE341 = default(IToken);
		IToken DEDENT342 = default(IToken);
		IToken NEWLINE343 = default(IToken);
		IToken INDENT344 = default(IToken);
		IToken NEWLINE345 = default(IToken);
		IToken NEWLINE347 = default(IToken);
		IToken DEDENT348 = default(IToken);
		IToken NEWLINE349 = default(IToken);
		IToken DEDENT350 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken NEWLINE352 = default(IToken);
		IToken INDENT353 = default(IToken);
		IToken NEWLINE354 = default(IToken);
		IToken NEWLINE356 = default(IToken);
		IToken DEDENT357 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item355 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE328_tree = default(CommonTree);
		CommonTree INDENT329_tree = default(CommonTree);
		CommonTree NEWLINE330_tree = default(CommonTree);
		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree DEDENT334_tree = default(CommonTree);
		CommonTree NEWLINE335_tree = default(CommonTree);
		CommonTree INDENT336_tree = default(CommonTree);
		CommonTree NEWLINE337_tree = default(CommonTree);
		CommonTree NEWLINE339_tree = default(CommonTree);
		CommonTree DEDENT340_tree = default(CommonTree);
		CommonTree NEWLINE341_tree = default(CommonTree);
		CommonTree DEDENT342_tree = default(CommonTree);
		CommonTree NEWLINE343_tree = default(CommonTree);
		CommonTree INDENT344_tree = default(CommonTree);
		CommonTree NEWLINE345_tree = default(CommonTree);
		CommonTree NEWLINE347_tree = default(CommonTree);
		CommonTree DEDENT348_tree = default(CommonTree);
		CommonTree NEWLINE349_tree = default(CommonTree);
		CommonTree DEDENT350_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree NEWLINE352_tree = default(CommonTree);
		CommonTree INDENT353_tree = default(CommonTree);
		CommonTree NEWLINE354_tree = default(CommonTree);
		CommonTree NEWLINE356_tree = default(CommonTree);
		CommonTree DEDENT357_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(492, 1);
		try
		{
			// SugarCpp.g:493:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:493:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(493, 4);
			// SugarCpp.g:493:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:493:5: a= expr
			{
			DebugLocation(493, 6);
			PushFollow(Follow._expr_in_where_expr3573);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 493:12: -> $a
			{
				DebugLocation(493, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(493, 19);
			// SugarCpp.g:493:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt157=3;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			try
			{
				alt157 = dfa157.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:493:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(493, 21);
				// SugarCpp.g:493:21: ( NEWLINE )+
				int cnt138=0;
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_0 = input.LA(1);

					if ((LA138_0==NEWLINE))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch (alt138)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:493:21: NEWLINE
						{
						DebugLocation(493, 21);
						NEWLINE328=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3583);  
						stream_NEWLINE.Add(NEWLINE328);


						}
						break;

					default:
						if (cnt138 >= 1)
							goto loop138;

						EarlyExitException eee138 = new EarlyExitException( 138, input );
						DebugRecognitionException(eee138);
						throw eee138;
					}
					cnt138++;
				}
				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(493, 30);
				INDENT329=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3586);  
				stream_INDENT.Add(INDENT329);

				DebugLocation(493, 37);
				// SugarCpp.g:493:37: ( NEWLINE )*
				try { DebugEnterSubRule(139);
				while (true)
				{
					int alt139=2;
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==NEWLINE))
					{
						alt139 = 1;
					}


					} finally { DebugExitDecision(139); }
					switch ( alt139 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:493:37: NEWLINE
						{
						DebugLocation(493, 37);
						NEWLINE330=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3588);  
						stream_NEWLINE.Add(NEWLINE330);


						}
						break;

					default:
						goto loop139;
					}
				}

				loop139:
					;

				} finally { DebugExitSubRule(139); }

				DebugLocation(493, 46);
				string_literal331=(IToken)Match(input,165,Follow._165_in_where_expr3591);  
				stream_165.Add(string_literal331);

				DebugLocation(493, 54);
				// SugarCpp.g:493:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, false);
				int LA152_0 = input.LA(1);

				if ((LA152_0==IDENT||LA152_0==81||LA152_0==86||LA152_0==88||LA152_0==90||(LA152_0>=92 && LA152_0<=93)||(LA152_0>=96 && LA152_0<=97)||LA152_0==123||LA152_0==135||(LA152_0>=139 && LA152_0<=141)||LA152_0==147||LA152_0==151||LA152_0==153||LA152_0==155||(LA152_0>=158 && LA152_0<=160)||(LA152_0>=162 && LA152_0<=163)||LA152_0==166||LA152_0==170))
				{
					alt152 = 1;
				}
				else if ((LA152_0==NEWLINE))
				{
					alt152 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:493:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(493, 56);
					PushFollow(Follow._where_item_in_where_expr3595);
					where_item332=where_item();
					PopFollow();

					stream_where_item.Add(where_item332.Tree);
					DebugLocation(493, 67);
					// SugarCpp.g:493:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt146=2;
					try { DebugEnterSubRule(146);
					try { DebugEnterDecision(146, false);
					try
					{
						alt146 = dfa146.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:493:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(493, 69);
						// SugarCpp.g:493:69: ( NEWLINE )*
						try { DebugEnterSubRule(140);
						while (true)
						{
							int alt140=2;
							try { DebugEnterDecision(140, false);
							int LA140_0 = input.LA(1);

							if ((LA140_0==NEWLINE))
							{
								alt140 = 1;
							}


							} finally { DebugExitDecision(140); }
							switch ( alt140 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:493:69: NEWLINE
								{
								DebugLocation(493, 69);
								NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3599);  
								stream_NEWLINE.Add(NEWLINE333);


								}
								break;

							default:
								goto loop140;
							}
						}

						loop140:
							;

						} finally { DebugExitSubRule(140); }

						DebugLocation(493, 78);
						DEDENT334=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3602);  
						stream_DEDENT.Add(DEDENT334);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 493:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(493, 88);
							// SugarCpp.g:493:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(493, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(493, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(493, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:494:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(494, 21);
						// SugarCpp.g:494:21: ( NEWLINE )+
						int cnt141=0;
						try { DebugEnterSubRule(141);
						while (true)
						{
							int alt141=2;
							try { DebugEnterDecision(141, false);
							int LA141_0 = input.LA(1);

							if ((LA141_0==NEWLINE))
							{
								alt141 = 1;
							}


							} finally { DebugExitDecision(141); }
							switch (alt141)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:494:21: NEWLINE
								{
								DebugLocation(494, 21);
								NEWLINE335=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3635);  
								stream_NEWLINE.Add(NEWLINE335);


								}
								break;

							default:
								if (cnt141 >= 1)
									goto loop141;

								EarlyExitException eee141 = new EarlyExitException( 141, input );
								DebugRecognitionException(eee141);
								throw eee141;
							}
							cnt141++;
						}
						loop141:
							;

						} finally { DebugExitSubRule(141); }

						DebugLocation(494, 30);
						INDENT336=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3638);  
						stream_INDENT.Add(INDENT336);

						DebugLocation(494, 37);
						// SugarCpp.g:494:37: ( NEWLINE )*
						try { DebugEnterSubRule(142);
						while (true)
						{
							int alt142=2;
							try { DebugEnterDecision(142, false);
							int LA142_0 = input.LA(1);

							if ((LA142_0==NEWLINE))
							{
								alt142 = 1;
							}


							} finally { DebugExitDecision(142); }
							switch ( alt142 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:494:37: NEWLINE
								{
								DebugLocation(494, 37);
								NEWLINE337=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3640);  
								stream_NEWLINE.Add(NEWLINE337);


								}
								break;

							default:
								goto loop142;
							}
						}

						loop142:
							;

						} finally { DebugExitSubRule(142); }

						DebugLocation(494, 46);
						// SugarCpp.g:494:46: ( where_item ( NEWLINE )+ )+
						int cnt144=0;
						try { DebugEnterSubRule(144);
						while (true)
						{
							int alt144=2;
							try { DebugEnterDecision(144, false);
							int LA144_0 = input.LA(1);

							if ((LA144_0==IDENT||LA144_0==81||LA144_0==86||LA144_0==88||LA144_0==90||(LA144_0>=92 && LA144_0<=93)||(LA144_0>=96 && LA144_0<=97)||LA144_0==123||LA144_0==135||(LA144_0>=139 && LA144_0<=141)||LA144_0==147||LA144_0==151||LA144_0==153||LA144_0==155||(LA144_0>=158 && LA144_0<=160)||(LA144_0>=162 && LA144_0<=163)||LA144_0==166||LA144_0==170))
							{
								alt144 = 1;
							}


							} finally { DebugExitDecision(144); }
							switch (alt144)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:494:47: where_item ( NEWLINE )+
								{
								DebugLocation(494, 47);
								PushFollow(Follow._where_item_in_where_expr3644);
								where_item338=where_item();
								PopFollow();

								stream_where_item.Add(where_item338.Tree);
								DebugLocation(494, 58);
								// SugarCpp.g:494:58: ( NEWLINE )+
								int cnt143=0;
								try { DebugEnterSubRule(143);
								while (true)
								{
									int alt143=2;
									try { DebugEnterDecision(143, false);
									int LA143_0 = input.LA(1);

									if ((LA143_0==NEWLINE))
									{
										alt143 = 1;
									}


									} finally { DebugExitDecision(143); }
									switch (alt143)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:494:58: NEWLINE
										{
										DebugLocation(494, 58);
										NEWLINE339=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3646);  
										stream_NEWLINE.Add(NEWLINE339);


										}
										break;

									default:
										if (cnt143 >= 1)
											goto loop143;

										EarlyExitException eee143 = new EarlyExitException( 143, input );
										DebugRecognitionException(eee143);
										throw eee143;
									}
									cnt143++;
								}
								loop143:
									;

								} finally { DebugExitSubRule(143); }


								}
								break;

							default:
								if (cnt144 >= 1)
									goto loop144;

								EarlyExitException eee144 = new EarlyExitException( 144, input );
								DebugRecognitionException(eee144);
								throw eee144;
							}
							cnt144++;
						}
						loop144:
							;

						} finally { DebugExitSubRule(144); }

						DebugLocation(494, 69);
						DEDENT340=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3651);  
						stream_DEDENT.Add(DEDENT340);

						DebugLocation(494, 76);
						// SugarCpp.g:494:76: ( NEWLINE )*
						try { DebugEnterSubRule(145);
						while (true)
						{
							int alt145=2;
							try { DebugEnterDecision(145, false);
							int LA145_0 = input.LA(1);

							if ((LA145_0==NEWLINE))
							{
								alt145 = 1;
							}


							} finally { DebugExitDecision(145); }
							switch ( alt145 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:494:76: NEWLINE
								{
								DebugLocation(494, 76);
								NEWLINE341=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3653);  
								stream_NEWLINE.Add(NEWLINE341);


								}
								break;

							default:
								goto loop145;
							}
						}

						loop145:
							;

						} finally { DebugExitSubRule(145); }

						DebugLocation(494, 85);
						DEDENT342=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3656);  
						stream_DEDENT.Add(DEDENT342);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 494:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(494, 95);
							// SugarCpp.g:494:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(494, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(494, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(494, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(494, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(146); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:496:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(496, 17);
					// SugarCpp.g:496:17: ( NEWLINE )+
					int cnt147=0;
					try { DebugEnterSubRule(147);
					while (true)
					{
						int alt147=2;
						try { DebugEnterDecision(147, false);
						int LA147_0 = input.LA(1);

						if ((LA147_0==NEWLINE))
						{
							alt147 = 1;
						}


						} finally { DebugExitDecision(147); }
						switch (alt147)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:496:17: NEWLINE
							{
							DebugLocation(496, 17);
							NEWLINE343=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3706);  
							stream_NEWLINE.Add(NEWLINE343);


							}
							break;

						default:
							if (cnt147 >= 1)
								goto loop147;

							EarlyExitException eee147 = new EarlyExitException( 147, input );
							DebugRecognitionException(eee147);
							throw eee147;
						}
						cnt147++;
					}
					loop147:
						;

					} finally { DebugExitSubRule(147); }

					DebugLocation(496, 26);
					INDENT344=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3709);  
					stream_INDENT.Add(INDENT344);

					DebugLocation(496, 33);
					// SugarCpp.g:496:33: ( NEWLINE )*
					try { DebugEnterSubRule(148);
					while (true)
					{
						int alt148=2;
						try { DebugEnterDecision(148, false);
						int LA148_0 = input.LA(1);

						if ((LA148_0==NEWLINE))
						{
							alt148 = 1;
						}


						} finally { DebugExitDecision(148); }
						switch ( alt148 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:496:33: NEWLINE
							{
							DebugLocation(496, 33);
							NEWLINE345=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3711);  
							stream_NEWLINE.Add(NEWLINE345);


							}
							break;

						default:
							goto loop148;
						}
					}

					loop148:
						;

					} finally { DebugExitSubRule(148); }

					DebugLocation(496, 42);
					// SugarCpp.g:496:42: ( where_item ( NEWLINE )+ )+
					int cnt150=0;
					try { DebugEnterSubRule(150);
					while (true)
					{
						int alt150=2;
						try { DebugEnterDecision(150, false);
						int LA150_0 = input.LA(1);

						if ((LA150_0==IDENT||LA150_0==81||LA150_0==86||LA150_0==88||LA150_0==90||(LA150_0>=92 && LA150_0<=93)||(LA150_0>=96 && LA150_0<=97)||LA150_0==123||LA150_0==135||(LA150_0>=139 && LA150_0<=141)||LA150_0==147||LA150_0==151||LA150_0==153||LA150_0==155||(LA150_0>=158 && LA150_0<=160)||(LA150_0>=162 && LA150_0<=163)||LA150_0==166||LA150_0==170))
						{
							alt150 = 1;
						}


						} finally { DebugExitDecision(150); }
						switch (alt150)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:496:43: where_item ( NEWLINE )+
							{
							DebugLocation(496, 43);
							PushFollow(Follow._where_item_in_where_expr3715);
							where_item346=where_item();
							PopFollow();

							stream_where_item.Add(where_item346.Tree);
							DebugLocation(496, 54);
							// SugarCpp.g:496:54: ( NEWLINE )+
							int cnt149=0;
							try { DebugEnterSubRule(149);
							while (true)
							{
								int alt149=2;
								try { DebugEnterDecision(149, false);
								int LA149_0 = input.LA(1);

								if ((LA149_0==NEWLINE))
								{
									alt149 = 1;
								}


								} finally { DebugExitDecision(149); }
								switch (alt149)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:496:54: NEWLINE
									{
									DebugLocation(496, 54);
									NEWLINE347=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3717);  
									stream_NEWLINE.Add(NEWLINE347);


									}
									break;

								default:
									if (cnt149 >= 1)
										goto loop149;

									EarlyExitException eee149 = new EarlyExitException( 149, input );
									DebugRecognitionException(eee149);
									throw eee149;
								}
								cnt149++;
							}
							loop149:
								;

							} finally { DebugExitSubRule(149); }


							}
							break;

						default:
							if (cnt150 >= 1)
								goto loop150;

							EarlyExitException eee150 = new EarlyExitException( 150, input );
							DebugRecognitionException(eee150);
							throw eee150;
						}
						cnt150++;
					}
					loop150:
						;

					} finally { DebugExitSubRule(150); }

					DebugLocation(496, 65);
					DEDENT348=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3722);  
					stream_DEDENT.Add(DEDENT348);

					DebugLocation(496, 72);
					// SugarCpp.g:496:72: ( NEWLINE )*
					try { DebugEnterSubRule(151);
					while (true)
					{
						int alt151=2;
						try { DebugEnterDecision(151, false);
						int LA151_0 = input.LA(1);

						if ((LA151_0==NEWLINE))
						{
							alt151 = 1;
						}


						} finally { DebugExitDecision(151); }
						switch ( alt151 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:496:72: NEWLINE
							{
							DebugLocation(496, 72);
							NEWLINE349=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3724);  
							stream_NEWLINE.Add(NEWLINE349);


							}
							break;

						default:
							goto loop151;
						}
					}

					loop151:
						;

					} finally { DebugExitSubRule(151); }

					DebugLocation(496, 81);
					DEDENT350=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3727);  
					stream_DEDENT.Add(DEDENT350);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 496:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(496, 91);
						// SugarCpp.g:496:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(496, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(496, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(496, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(496, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(152); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:498:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(498, 9);
				string_literal351=(IToken)Match(input,165,Follow._165_in_where_expr3765);  
				stream_165.Add(string_literal351);

				DebugLocation(498, 17);
				// SugarCpp.g:498:17: ( NEWLINE )+
				int cnt153=0;
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:17: NEWLINE
						{
						DebugLocation(498, 17);
						NEWLINE352=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3767);  
						stream_NEWLINE.Add(NEWLINE352);


						}
						break;

					default:
						if (cnt153 >= 1)
							goto loop153;

						EarlyExitException eee153 = new EarlyExitException( 153, input );
						DebugRecognitionException(eee153);
						throw eee153;
					}
					cnt153++;
				}
				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(498, 26);
				INDENT353=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3770);  
				stream_INDENT.Add(INDENT353);

				DebugLocation(498, 33);
				// SugarCpp.g:498:33: ( NEWLINE )*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==NEWLINE))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:33: NEWLINE
						{
						DebugLocation(498, 33);
						NEWLINE354=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3772);  
						stream_NEWLINE.Add(NEWLINE354);


						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(498, 42);
				// SugarCpp.g:498:42: ( where_item ( NEWLINE )+ )+
				int cnt156=0;
				try { DebugEnterSubRule(156);
				while (true)
				{
					int alt156=2;
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==IDENT||LA156_0==81||LA156_0==86||LA156_0==88||LA156_0==90||(LA156_0>=92 && LA156_0<=93)||(LA156_0>=96 && LA156_0<=97)||LA156_0==123||LA156_0==135||(LA156_0>=139 && LA156_0<=141)||LA156_0==147||LA156_0==151||LA156_0==153||LA156_0==155||(LA156_0>=158 && LA156_0<=160)||(LA156_0>=162 && LA156_0<=163)||LA156_0==166||LA156_0==170))
					{
						alt156 = 1;
					}


					} finally { DebugExitDecision(156); }
					switch (alt156)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:43: where_item ( NEWLINE )+
						{
						DebugLocation(498, 43);
						PushFollow(Follow._where_item_in_where_expr3776);
						where_item355=where_item();
						PopFollow();

						stream_where_item.Add(where_item355.Tree);
						DebugLocation(498, 54);
						// SugarCpp.g:498:54: ( NEWLINE )+
						int cnt155=0;
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==NEWLINE))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch (alt155)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:498:54: NEWLINE
								{
								DebugLocation(498, 54);
								NEWLINE356=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3778);  
								stream_NEWLINE.Add(NEWLINE356);


								}
								break;

							default:
								if (cnt155 >= 1)
									goto loop155;

								EarlyExitException eee155 = new EarlyExitException( 155, input );
								DebugRecognitionException(eee155);
								throw eee155;
							}
							cnt155++;
						}
						loop155:
							;

						} finally { DebugExitSubRule(155); }


						}
						break;

					default:
						if (cnt156 >= 1)
							goto loop156;

						EarlyExitException eee156 = new EarlyExitException( 156, input );
						DebugRecognitionException(eee156);
						throw eee156;
					}
					cnt156++;
				}
				loop156:
					;

				} finally { DebugExitSubRule(156); }

				DebugLocation(498, 65);
				DEDENT357=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3783);  
				stream_DEDENT.Add(DEDENT357);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 498:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(498, 75);
					// SugarCpp.g:498:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(498, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(498, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(498, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(498, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:499:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 499:15: -> expr
				{
					DebugLocation(499, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(157); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 54);
			LeaveRule("where_expr", 54);
			LeaveRule_where_expr();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:503:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 55);
		TraceIn("let_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal358 = default(IToken);
		IToken string_literal360 = default(IToken);
		IToken NEWLINE362 = default(IToken);
		IToken INDENT363 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken NEWLINE366 = default(IToken);
		IToken DEDENT367 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken INDENT370 = default(IToken);
		IToken NEWLINE371 = default(IToken);
		IToken NEWLINE373 = default(IToken);
		IToken string_literal374 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken DEDENT377 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr361 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr368 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr375 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal358_tree = default(CommonTree);
		CommonTree string_literal360_tree = default(CommonTree);
		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree INDENT363_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree NEWLINE366_tree = default(CommonTree);
		CommonTree DEDENT367_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree INDENT370_tree = default(CommonTree);
		CommonTree NEWLINE371_tree = default(CommonTree);
		CommonTree NEWLINE373_tree = default(CommonTree);
		CommonTree string_literal374_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree DEDENT377_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(503, 1);
		try
		{
			// SugarCpp.g:504:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:504:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(504, 4);
			string_literal358=(IToken)Match(input,146,Follow._146_in_let_expr3841);  
			stream_146.Add(string_literal358);

			DebugLocation(504, 10);
			PushFollow(Follow._where_item_in_let_expr3843);
			where_item359=where_item();
			PopFollow();

			stream_where_item.Add(where_item359.Tree);
			DebugLocation(504, 21);
			// SugarCpp.g:504:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_0 = input.LA(1);

			if ((LA168_0==143))
			{
				alt168 = 1;
			}
			else if ((LA168_0==NEWLINE))
			{
				alt168 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:504:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(504, 23);
				string_literal360=(IToken)Match(input,143,Follow._143_in_let_expr3847);  
				stream_143.Add(string_literal360);

				DebugLocation(504, 28);
				// SugarCpp.g:504:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt162=2;
				try { DebugEnterSubRule(162);
				try { DebugEnterDecision(162, false);
				int LA162_0 = input.LA(1);

				if ((LA162_0==IDENT||LA162_0==NUMBER||LA162_0==STRING||LA162_0==81||LA162_0==86||LA162_0==88||LA162_0==90||(LA162_0>=92 && LA162_0<=93)||(LA162_0>=96 && LA162_0<=97)||(LA162_0>=123 && LA162_0<=124)||LA162_0==146||LA162_0==148||(LA162_0>=150 && LA162_0<=151)||LA162_0==170))
				{
					alt162 = 1;
				}
				else if ((LA162_0==NEWLINE))
				{
					alt162 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(162); }
				switch (alt162)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:504:30: expr
					{
					DebugLocation(504, 30);
					PushFollow(Follow._expr_in_let_expr3851);
					expr361=expr();
					PopFollow();

					stream_expr.Add(expr361.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(504, 38);
						// SugarCpp.g:504:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(504, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(504, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(504, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:505:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(505, 12);
					// SugarCpp.g:505:12: ( NEWLINE )+
					int cnt158=0;
					try { DebugEnterSubRule(158);
					while (true)
					{
						int alt158=2;
						try { DebugEnterDecision(158, false);
						int LA158_0 = input.LA(1);

						if ((LA158_0==NEWLINE))
						{
							alt158 = 1;
						}


						} finally { DebugExitDecision(158); }
						switch (alt158)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:505:12: NEWLINE
							{
							DebugLocation(505, 12);
							NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3875);  
							stream_NEWLINE.Add(NEWLINE362);


							}
							break;

						default:
							if (cnt158 >= 1)
								goto loop158;

							EarlyExitException eee158 = new EarlyExitException( 158, input );
							DebugRecognitionException(eee158);
							throw eee158;
						}
						cnt158++;
					}
					loop158:
						;

					} finally { DebugExitSubRule(158); }

					DebugLocation(505, 21);
					// SugarCpp.g:505:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt161=2;
					try { DebugEnterSubRule(161);
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==INDENT))
					{
						alt161 = 1;
					}
					else if ((LA161_0==IDENT||LA161_0==NUMBER||LA161_0==STRING||LA161_0==81||LA161_0==86||LA161_0==88||LA161_0==90||(LA161_0>=92 && LA161_0<=93)||(LA161_0>=96 && LA161_0<=97)||(LA161_0>=123 && LA161_0<=124)||LA161_0==146||LA161_0==148||(LA161_0>=150 && LA161_0<=151)||LA161_0==170))
					{
						alt161 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(161); }
					switch (alt161)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(505, 23);
						INDENT363=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3880);  
						stream_INDENT.Add(INDENT363);

						DebugLocation(505, 30);
						// SugarCpp.g:505:30: ( NEWLINE )*
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch ( alt159 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:505:30: NEWLINE
								{
								DebugLocation(505, 30);
								NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3882);  
								stream_NEWLINE.Add(NEWLINE364);


								}
								break;

							default:
								goto loop159;
							}
						}

						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(505, 39);
						PushFollow(Follow._expr_in_let_expr3885);
						expr365=expr();
						PopFollow();

						stream_expr.Add(expr365.Tree);
						DebugLocation(505, 44);
						// SugarCpp.g:505:44: ( NEWLINE )+
						int cnt160=0;
						try { DebugEnterSubRule(160);
						while (true)
						{
							int alt160=2;
							try { DebugEnterDecision(160, false);
							int LA160_0 = input.LA(1);

							if ((LA160_0==NEWLINE))
							{
								alt160 = 1;
							}


							} finally { DebugExitDecision(160); }
							switch (alt160)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:505:44: NEWLINE
								{
								DebugLocation(505, 44);
								NEWLINE366=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3887);  
								stream_NEWLINE.Add(NEWLINE366);


								}
								break;

							default:
								if (cnt160 >= 1)
									goto loop160;

								EarlyExitException eee160 = new EarlyExitException( 160, input );
								DebugRecognitionException(eee160);
								throw eee160;
							}
							cnt160++;
						}
						loop160:
							;

						} finally { DebugExitSubRule(160); }

						DebugLocation(505, 53);
						DEDENT367=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3890);  
						stream_DEDENT.Add(DEDENT367);



						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 505:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(505, 63);
							// SugarCpp.g:505:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(505, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(505, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(505, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(505, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:506:14: expr
						{
						DebugLocation(506, 14);
						PushFollow(Follow._expr_in_let_expr3916);
						expr368=expr();
						PopFollow();

						stream_expr.Add(expr368.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 506:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(506, 22);
							// SugarCpp.g:506:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(506, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(506, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(506, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(506, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(161); }


					}
					break;

				}
				} finally { DebugExitSubRule(162); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:509:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(509, 11);
				// SugarCpp.g:509:11: ( NEWLINE )+
				int cnt163=0;
				try { DebugEnterSubRule(163);
				while (true)
				{
					int alt163=2;
					try { DebugEnterDecision(163, false);
					int LA163_0 = input.LA(1);

					if ((LA163_0==NEWLINE))
					{
						alt163 = 1;
					}


					} finally { DebugExitDecision(163); }
					switch (alt163)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:11: NEWLINE
						{
						DebugLocation(509, 11);
						NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3963);  
						stream_NEWLINE.Add(NEWLINE369);


						}
						break;

					default:
						if (cnt163 >= 1)
							goto loop163;

						EarlyExitException eee163 = new EarlyExitException( 163, input );
						DebugRecognitionException(eee163);
						throw eee163;
					}
					cnt163++;
				}
				loop163:
					;

				} finally { DebugExitSubRule(163); }

				DebugLocation(509, 20);
				INDENT370=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3966);  
				stream_INDENT.Add(INDENT370);

				DebugLocation(509, 27);
				// SugarCpp.g:509:27: ( NEWLINE )*
				try { DebugEnterSubRule(164);
				while (true)
				{
					int alt164=2;
					try { DebugEnterDecision(164, false);
					int LA164_0 = input.LA(1);

					if ((LA164_0==NEWLINE))
					{
						alt164 = 1;
					}


					} finally { DebugExitDecision(164); }
					switch ( alt164 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:27: NEWLINE
						{
						DebugLocation(509, 27);
						NEWLINE371=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3968);  
						stream_NEWLINE.Add(NEWLINE371);


						}
						break;

					default:
						goto loop164;
					}
				}

				loop164:
					;

				} finally { DebugExitSubRule(164); }

				DebugLocation(509, 36);
				// SugarCpp.g:509:36: ( where_item ( NEWLINE )+ )+
				int cnt166=0;
				try { DebugEnterSubRule(166);
				while (true)
				{
					int alt166=2;
					try { DebugEnterDecision(166, false);
					int LA166_0 = input.LA(1);

					if ((LA166_0==IDENT||LA166_0==81||LA166_0==86||LA166_0==88||LA166_0==90||(LA166_0>=92 && LA166_0<=93)||(LA166_0>=96 && LA166_0<=97)||LA166_0==123||LA166_0==135||(LA166_0>=139 && LA166_0<=141)||LA166_0==147||LA166_0==151||LA166_0==153||LA166_0==155||(LA166_0>=158 && LA166_0<=160)||(LA166_0>=162 && LA166_0<=163)||LA166_0==166||LA166_0==170))
					{
						alt166 = 1;
					}


					} finally { DebugExitDecision(166); }
					switch (alt166)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:37: where_item ( NEWLINE )+
						{
						DebugLocation(509, 37);
						PushFollow(Follow._where_item_in_let_expr3972);
						where_item372=where_item();
						PopFollow();

						stream_where_item.Add(where_item372.Tree);
						DebugLocation(509, 48);
						// SugarCpp.g:509:48: ( NEWLINE )+
						int cnt165=0;
						try { DebugEnterSubRule(165);
						while (true)
						{
							int alt165=2;
							try { DebugEnterDecision(165, false);
							int LA165_0 = input.LA(1);

							if ((LA165_0==NEWLINE))
							{
								alt165 = 1;
							}


							} finally { DebugExitDecision(165); }
							switch (alt165)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:509:48: NEWLINE
								{
								DebugLocation(509, 48);
								NEWLINE373=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3974);  
								stream_NEWLINE.Add(NEWLINE373);


								}
								break;

							default:
								if (cnt165 >= 1)
									goto loop165;

								EarlyExitException eee165 = new EarlyExitException( 165, input );
								DebugRecognitionException(eee165);
								throw eee165;
							}
							cnt165++;
						}
						loop165:
							;

						} finally { DebugExitSubRule(165); }


						}
						break;

					default:
						if (cnt166 >= 1)
							goto loop166;

						EarlyExitException eee166 = new EarlyExitException( 166, input );
						DebugRecognitionException(eee166);
						throw eee166;
					}
					cnt166++;
				}
				loop166:
					;

				} finally { DebugExitSubRule(166); }

				DebugLocation(509, 59);
				string_literal374=(IToken)Match(input,143,Follow._143_in_let_expr3979);  
				stream_143.Add(string_literal374);

				DebugLocation(509, 64);
				PushFollow(Follow._expr_in_let_expr3981);
				expr375=expr();
				PopFollow();

				stream_expr.Add(expr375.Tree);
				DebugLocation(509, 69);
				// SugarCpp.g:509:69: ( NEWLINE )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==NEWLINE))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:509:69: NEWLINE
						{
						DebugLocation(509, 69);
						NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3983);  
						stream_NEWLINE.Add(NEWLINE376);


						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(509, 78);
				DEDENT377=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3986);  
				stream_DEDENT.Add(DEDENT377);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 509:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(509, 88);
					// SugarCpp.g:509:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(509, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(509, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(509, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(509, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 55);
			LeaveRule("let_expr", 55);
			LeaveRule_let_expr();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:513:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 56);
		TraceIn("match_item", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal378 = default(IToken);
		IToken string_literal380 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal378_tree = default(CommonTree);
		CommonTree string_literal380_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(513, 1);
		try
		{
			// SugarCpp.g:514:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:514:4: '|' expr '=>' where_expr
			{
			DebugLocation(514, 4);
			char_literal378=(IToken)Match(input,167,Follow._167_in_match_item4018);  
			stream_167.Add(char_literal378);

			DebugLocation(514, 8);
			PushFollow(Follow._expr_in_match_item4020);
			expr379=expr();
			PopFollow();

			stream_expr.Add(expr379.Tree);
			DebugLocation(514, 13);
			string_literal380=(IToken)Match(input,116,Follow._116_in_match_item4022);  
			stream_116.Add(string_literal380);

			DebugLocation(514, 18);
			PushFollow(Follow._where_expr_in_match_item4024);
			where_expr381=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr381.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 514:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(514, 32);
				// SugarCpp.g:514:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(514, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(514, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(514, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 56);
			LeaveRule("match_item", 56);
			LeaveRule_match_item();
		}
		DebugLocation(515, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:517:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 57);
		TraceIn("match_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal382 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken INDENT385 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken NEWLINE388 = default(IToken);
		IToken DEDENT389 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item387 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal382_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree INDENT385_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree NEWLINE388_tree = default(CommonTree);
		CommonTree DEDENT389_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(517, 1);
		try
		{
			// SugarCpp.g:518:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:518:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(518, 4);
			string_literal382=(IToken)Match(input,148,Follow._148_in_match_expr4045);  
			stream_148.Add(string_literal382);

			DebugLocation(518, 12);
			// SugarCpp.g:518:12: ( expr )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_0 = input.LA(1);

			if ((LA169_0==IDENT||LA169_0==NUMBER||LA169_0==STRING||LA169_0==81||LA169_0==86||LA169_0==88||LA169_0==90||(LA169_0>=92 && LA169_0<=93)||(LA169_0>=96 && LA169_0<=97)||(LA169_0>=123 && LA169_0<=124)||LA169_0==146||LA169_0==148||(LA169_0>=150 && LA169_0<=151)||LA169_0==170))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:518:12: expr
				{
				DebugLocation(518, 12);
				PushFollow(Follow._expr_in_match_expr4047);
				expr383=expr();
				PopFollow();

				stream_expr.Add(expr383.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(518, 18);
			// SugarCpp.g:518:18: ( NEWLINE )+
			int cnt170=0;
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, false);
				int LA170_0 = input.LA(1);

				if ((LA170_0==NEWLINE))
				{
					alt170 = 1;
				}


				} finally { DebugExitDecision(170); }
				switch (alt170)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:518:18: NEWLINE
					{
					DebugLocation(518, 18);
					NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4050);  
					stream_NEWLINE.Add(NEWLINE384);


					}
					break;

				default:
					if (cnt170 >= 1)
						goto loop170;

					EarlyExitException eee170 = new EarlyExitException( 170, input );
					DebugRecognitionException(eee170);
					throw eee170;
				}
				cnt170++;
			}
			loop170:
				;

			} finally { DebugExitSubRule(170); }

			DebugLocation(518, 27);
			INDENT385=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4053);  
			stream_INDENT.Add(INDENT385);

			DebugLocation(518, 34);
			// SugarCpp.g:518:34: ( NEWLINE )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==NEWLINE))
				{
					alt171 = 1;
				}


				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:518:34: NEWLINE
					{
					DebugLocation(518, 34);
					NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4055);  
					stream_NEWLINE.Add(NEWLINE386);


					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }

			DebugLocation(518, 43);
			// SugarCpp.g:518:43: ( match_item ( NEWLINE )+ )+
			int cnt173=0;
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==167))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:518:44: match_item ( NEWLINE )+
					{
					DebugLocation(518, 44);
					PushFollow(Follow._match_item_in_match_expr4059);
					match_item387=match_item();
					PopFollow();

					stream_match_item.Add(match_item387.Tree);
					DebugLocation(518, 55);
					// SugarCpp.g:518:55: ( NEWLINE )+
					int cnt172=0;
					try { DebugEnterSubRule(172);
					while (true)
					{
						int alt172=2;
						try { DebugEnterDecision(172, false);
						int LA172_0 = input.LA(1);

						if ((LA172_0==NEWLINE))
						{
							alt172 = 1;
						}


						} finally { DebugExitDecision(172); }
						switch (alt172)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:55: NEWLINE
							{
							DebugLocation(518, 55);
							NEWLINE388=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4061);  
							stream_NEWLINE.Add(NEWLINE388);


							}
							break;

						default:
							if (cnt172 >= 1)
								goto loop172;

							EarlyExitException eee172 = new EarlyExitException( 172, input );
							DebugRecognitionException(eee172);
							throw eee172;
						}
						cnt172++;
					}
					loop172:
						;

					} finally { DebugExitSubRule(172); }


					}
					break;

				default:
					if (cnt173 >= 1)
						goto loop173;

					EarlyExitException eee173 = new EarlyExitException( 173, input );
					DebugRecognitionException(eee173);
					throw eee173;
				}
				cnt173++;
			}
			loop173:
				;

			} finally { DebugExitSubRule(173); }

			DebugLocation(518, 66);
			DEDENT389=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4066);  
			stream_DEDENT.Add(DEDENT389);



			{
			// AST REWRITE
			// elements: match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 518:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(518, 76);
				// SugarCpp.g:518:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(518, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(518, 89);
				// SugarCpp.g:518:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(518, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(518, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(518, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 57);
			LeaveRule("match_expr", 57);
			LeaveRule_match_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:521:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 58);
		TraceIn("expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr391 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr392 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( list_expr | match_expr | let_expr )
			int alt174=3;
			try { DebugEnterDecision(174, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 81:
			case 86:
			case 88:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 123:
			case 124:
			case 150:
			case 151:
			case 170:
				{
				alt174 = 1;
				}
				break;
			case 148:
				{
				alt174 = 2;
				}
				break;
			case 146:
				{
				alt174 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 174, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:522:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(522, 4);
				PushFollow(Follow._list_expr_in_expr4089);
				list_expr390=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr390.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:523:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(523, 4);
				PushFollow(Follow._match_expr_in_expr4094);
				match_expr391=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr391.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:524:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(524, 4);
				PushFollow(Follow._let_expr_in_expr4099);
				let_expr392=let_expr();
				PopFollow();

				adaptor.AddChild(root_0, let_expr392.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 58);
			LeaveRule("expr", 58);
			LeaveRule_expr();
		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:527:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 59);
		TraceIn("list_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal393 = default(IToken);
		IToken char_literal394 = default(IToken);
		IToken NEWLINE395 = default(IToken);
		IToken INDENT396 = default(IToken);
		IToken DEDENT397 = default(IToken);
		IToken char_literal399 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken INDENT401 = default(IToken);
		IToken DEDENT402 = default(IToken);
		IToken char_literal404 = default(IToken);
		IToken NEWLINE405 = default(IToken);
		IToken INDENT406 = default(IToken);
		IToken DEDENT407 = default(IToken);
		IToken char_literal408 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr409 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal393_tree = default(CommonTree);
		CommonTree char_literal394_tree = default(CommonTree);
		CommonTree NEWLINE395_tree = default(CommonTree);
		CommonTree INDENT396_tree = default(CommonTree);
		CommonTree DEDENT397_tree = default(CommonTree);
		CommonTree char_literal399_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree INDENT401_tree = default(CommonTree);
		CommonTree DEDENT402_tree = default(CommonTree);
		CommonTree char_literal404_tree = default(CommonTree);
		CommonTree NEWLINE405_tree = default(CommonTree);
		CommonTree INDENT406_tree = default(CommonTree);
		CommonTree DEDENT407_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(527, 1);
		try
		{
			// SugarCpp.g:528:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt180=2;
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==124))
			{
				alt180 = 1;
			}
			else if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==81||LA180_0==86||LA180_0==88||LA180_0==90||(LA180_0>=92 && LA180_0<=93)||(LA180_0>=96 && LA180_0<=97)||LA180_0==123||(LA180_0>=150 && LA180_0<=151)||LA180_0==170))
			{
				alt180 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:528:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(528, 4);
				char_literal393=(IToken)Match(input,124,Follow._124_in_list_expr4110);  
				stream_124.Add(char_literal393);

				DebugLocation(528, 8);
				// SugarCpp.g:528:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt178=2;
				try { DebugEnterSubRule(178);
				try { DebugEnterDecision(178, false);
				try
				{
					alt178 = dfa178.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(178); }
				switch (alt178)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:528:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(528, 9);
					// SugarCpp.g:528:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(175);
					while (true)
					{
						int alt175=5;
						try { DebugEnterDecision(175, false);
						switch (input.LA(1))
						{
						case 95:
							{
							alt175 = 1;
							}
							break;
						case NEWLINE:
							{
							alt175 = 2;
							}
							break;
						case INDENT:
							{
							alt175 = 3;
							}
							break;
						case DEDENT:
							{
							alt175 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(175); }
						switch ( alt175 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:528:10: ','
							{
							DebugLocation(528, 10);
							char_literal394=(IToken)Match(input,95,Follow._95_in_list_expr4114);  
							stream_95.Add(char_literal394);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:528:16: NEWLINE
							{
							DebugLocation(528, 16);
							NEWLINE395=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4118);  
							stream_NEWLINE.Add(NEWLINE395);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:528:26: INDENT
							{
							DebugLocation(528, 26);
							INDENT396=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4122);  
							stream_INDENT.Add(INDENT396);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:528:35: DEDENT
							{
							DebugLocation(528, 35);
							DEDENT397=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4126);  
							stream_DEDENT.Add(DEDENT397);


							}
							break;

						default:
							goto loop175;
						}
					}

					loop175:
						;

					} finally { DebugExitSubRule(175); }

					DebugLocation(528, 44);
					PushFollow(Follow._list_expr_in_list_expr4130);
					list_expr398=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr398.Tree);
					DebugLocation(528, 54);
					// SugarCpp.g:528:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(177);
					while (true)
					{
						int alt177=2;
						try { DebugEnterDecision(177, false);
						try
						{
							alt177 = dfa177.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(177); }
						switch ( alt177 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:528:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(528, 55);
							// SugarCpp.g:528:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt176=0;
							try { DebugEnterSubRule(176);
							while (true)
							{
								int alt176=5;
								try { DebugEnterDecision(176, false);
								switch (input.LA(1))
								{
								case 95:
									{
									alt176 = 1;
									}
									break;
								case NEWLINE:
									{
									alt176 = 2;
									}
									break;
								case INDENT:
									{
									alt176 = 3;
									}
									break;
								case DEDENT:
									{
									alt176 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(176); }
								switch (alt176)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:528:56: ','
									{
									DebugLocation(528, 56);
									char_literal399=(IToken)Match(input,95,Follow._95_in_list_expr4134);  
									stream_95.Add(char_literal399);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:528:62: NEWLINE
									{
									DebugLocation(528, 62);
									NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4138);  
									stream_NEWLINE.Add(NEWLINE400);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:528:72: INDENT
									{
									DebugLocation(528, 72);
									INDENT401=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4142);  
									stream_INDENT.Add(INDENT401);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:528:81: DEDENT
									{
									DebugLocation(528, 81);
									DEDENT402=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4146);  
									stream_DEDENT.Add(DEDENT402);


									}
									break;

								default:
									if (cnt176 >= 1)
										goto loop176;

									EarlyExitException eee176 = new EarlyExitException( 176, input );
									DebugRecognitionException(eee176);
									throw eee176;
								}
								cnt176++;
							}
							loop176:
								;

							} finally { DebugExitSubRule(176); }

							DebugLocation(528, 90);
							PushFollow(Follow._list_expr_in_list_expr4150);
							list_expr403=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr403.Tree);

							}
							break;

						default:
							goto loop177;
						}
					}

					loop177:
						;

					} finally { DebugExitSubRule(177); }


					}
					break;

				}
				} finally { DebugExitSubRule(178); }

				DebugLocation(528, 104);
				// SugarCpp.g:528:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(179);
				while (true)
				{
					int alt179=5;
					try { DebugEnterDecision(179, false);
					switch (input.LA(1))
					{
					case 95:
						{
						alt179 = 1;
						}
						break;
					case NEWLINE:
						{
						alt179 = 2;
						}
						break;
					case INDENT:
						{
						alt179 = 3;
						}
						break;
					case DEDENT:
						{
						alt179 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(179); }
					switch ( alt179 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:105: ','
						{
						DebugLocation(528, 105);
						char_literal404=(IToken)Match(input,95,Follow._95_in_list_expr4157);  
						stream_95.Add(char_literal404);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:528:111: NEWLINE
						{
						DebugLocation(528, 111);
						NEWLINE405=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4161);  
						stream_NEWLINE.Add(NEWLINE405);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:528:121: INDENT
						{
						DebugLocation(528, 121);
						INDENT406=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4165);  
						stream_INDENT.Add(INDENT406);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:528:130: DEDENT
						{
						DebugLocation(528, 130);
						DEDENT407=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4169);  
						stream_DEDENT.Add(DEDENT407);


						}
						break;

					default:
						goto loop179;
					}
				}

				loop179:
					;

				} finally { DebugExitSubRule(179); }

				DebugLocation(528, 139);
				char_literal408=(IToken)Match(input,125,Follow._125_in_list_expr4173);  
				stream_125.Add(char_literal408);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(528, 146);
					// SugarCpp.g:528:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(528, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(528, 158);
					// SugarCpp.g:528:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(528, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:529:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(529, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4187);
				lambda_expr409=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr409.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 59);
			LeaveRule("list_expr", 59);
			LeaveRule_list_expr();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:532:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 60);
		TraceIn("lambda_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal410 = default(IToken);
		IToken char_literal412 = default(IToken);
		IToken string_literal413 = default(IToken);
		IToken string_literal415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr416 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal410_tree = default(CommonTree);
		CommonTree char_literal412_tree = default(CommonTree);
		CommonTree string_literal413_tree = default(CommonTree);
		CommonTree string_literal415_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(532, 1);
		try
		{
			// SugarCpp.g:533:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt183=2;
			try { DebugEnterDecision(183, false);
			try
			{
				alt183 = dfa183.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:533:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(533, 4);
				char_literal410=(IToken)Match(input,88,Follow._88_in_lambda_expr4198);  
				stream_88.Add(char_literal410);

				DebugLocation(533, 8);
				// SugarCpp.g:533:8: ( func_args )?
				int alt181=2;
				try { DebugEnterSubRule(181);
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==IDENT||LA181_0==107))
				{
					alt181 = 1;
				}
				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:533:8: func_args
					{
					DebugLocation(533, 8);
					PushFollow(Follow._func_args_in_lambda_expr4200);
					func_args411=func_args();
					PopFollow();

					stream_func_args.Add(func_args411.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(181); }

				DebugLocation(533, 19);
				char_literal412=(IToken)Match(input,89,Follow._89_in_lambda_expr4203);  
				stream_89.Add(char_literal412);

				DebugLocation(533, 23);
				// SugarCpp.g:533:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt182=2;
				try { DebugEnterSubRule(182);
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==99))
				{
					alt182 = 1;
				}
				else if ((LA182_0==116))
				{
					alt182 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 182, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(182); }
				switch (alt182)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:533:25: '->' expr
					{
					DebugLocation(533, 25);
					string_literal413=(IToken)Match(input,99,Follow._99_in_lambda_expr4207);  
					stream_99.Add(string_literal413);

					DebugLocation(533, 30);
					PushFollow(Follow._expr_in_lambda_expr4209);
					expr414=expr();
					PopFollow();

					stream_expr.Add(expr414.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 99
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 533:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(533, 39);
						// SugarCpp.g:533:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(533, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(533, 53);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(533, 58);
						// SugarCpp.g:533:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(533, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(533, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:534:25: '=>' expr
					{
					DebugLocation(534, 25);
					string_literal415=(IToken)Match(input,116,Follow._116_in_lambda_expr4249);  
					stream_116.Add(string_literal415);

					DebugLocation(534, 30);
					PushFollow(Follow._expr_in_lambda_expr4251);
					expr416=expr();
					PopFollow();

					stream_expr.Add(expr416.Tree);


					{
					// AST REWRITE
					// elements: func_args, 116, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 534:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(534, 39);
						// SugarCpp.g:534:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(534, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(534, 53);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(534, 58);
						// SugarCpp.g:534:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(534, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(534, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(182); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:535:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(535, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4271);
				modify_expr417=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr417.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 60);
			LeaveRule("lambda_expr", 60);
			LeaveRule_lambda_expr();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:538:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 61);
		TraceIn("modify_expr_op", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set418 = default(IToken);

		CommonTree set418_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(538, 91);
		try
		{
			// SugarCpp.g:538:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(538, 15);

			set418=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==114||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set418));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 61);
			LeaveRule("modify_expr_op", 61);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(538, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:539:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 62);
		TraceIn("modify_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set420 = default(IToken);
		IToken char_literal422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr421 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set420_tree = default(CommonTree);
		CommonTree char_literal422_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(539, 1);
		try
		{
			// SugarCpp.g:540:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:540:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(540, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4328);
			cond_expr419=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr419.Tree);
			DebugLocation(540, 14);
			// SugarCpp.g:540:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt185=3;
			try { DebugEnterSubRule(185);
			try { DebugEnterDecision(185, false);
			int LA185_0 = input.LA(1);

			if ((LA185_0==84||LA185_0==87||LA185_0==91||LA185_0==94||LA185_0==98||LA185_0==104||LA185_0==107||LA185_0==112||LA185_0==120||LA185_0==127||LA185_0==168))
			{
				alt185 = 1;
			}
			else if ((LA185_0==114))
			{
				alt185 = 2;
			}
			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:540:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(540, 94);

				set420=(IToken)input.LT(1);
				set420=(IToken)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==107||input.LA(1)==112||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set420), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(540, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4377);
				cond_expr421=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr421.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:541:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(541, 7);
				// SugarCpp.g:541:7: ( '=' ^ cond_expr )+
				int cnt184=0;
				try { DebugEnterSubRule(184);
				while (true)
				{
					int alt184=2;
					try { DebugEnterDecision(184, false);
					int LA184_0 = input.LA(1);

					if ((LA184_0==114))
					{
						alt184 = 1;
					}


					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:8: '=' ^ cond_expr
						{
						DebugLocation(541, 11);
						char_literal422=(IToken)Match(input,114,Follow._114_in_modify_expr4386); 
						char_literal422_tree = (CommonTree)adaptor.Create(char_literal422);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal422_tree, root_0);
						DebugLocation(541, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4389);
						cond_expr423=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr423.Tree);

						}
						break;

					default:
						if (cnt184 >= 1)
							goto loop184;

						EarlyExitException eee184 = new EarlyExitException( 184, input );
						DebugRecognitionException(eee184);
						throw eee184;
					}
					cnt184++;
				}
				loop184:
					;

				} finally { DebugExitSubRule(184); }


				}
				break;

			}
			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 62);
			LeaveRule("modify_expr", 62);
			LeaveRule_modify_expr();
		}
		DebugLocation(542, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:544:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 63);
		TraceIn("cond_expr_item", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(544, 24);
		try
		{
			// SugarCpp.g:544:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:544:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(544, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4402);
			or_expr424=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr424.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 63);
			LeaveRule("cond_expr_item", 63);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(544, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:545:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 64);
		TraceIn("cond_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal425 = default(IToken);
		IToken char_literal426 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree char_literal426_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(545, 1);
		try
		{
			// SugarCpp.g:546:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:546:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(546, 4);
			// SugarCpp.g:546:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:546:5: a= or_expr
			{
			DebugLocation(546, 6);
			PushFollow(Follow._or_expr_in_cond_expr4414);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 546:15: -> $a
			{
				DebugLocation(546, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(546, 22);
			// SugarCpp.g:546:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			int LA188_0 = input.LA(1);

			if ((LA188_0==121))
			{
				alt188 = 1;
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:546:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(546, 23);
				char_literal425=(IToken)Match(input,121,Follow._121_in_cond_expr4423);  
				stream_121.Add(char_literal425);

				DebugLocation(546, 27);
				// SugarCpp.g:546:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==IDENT||LA187_0==NUMBER||LA187_0==STRING||LA187_0==81||LA187_0==86||LA187_0==88||LA187_0==90||(LA187_0>=92 && LA187_0<=93)||(LA187_0>=96 && LA187_0<=97)||LA187_0==123||(LA187_0>=150 && LA187_0<=151)||LA187_0==170))
				{
					alt187 = 1;
				}
				else if ((LA187_0==DEDENT||LA187_0==INDENT||LA187_0==NEWLINE||LA187_0==84||LA187_0==87||LA187_0==89||LA187_0==91||(LA187_0>=94 && LA187_0<=95)||LA187_0==98||LA187_0==104||(LA187_0>=107 && LA187_0<=108)||LA187_0==112||LA187_0==114||LA187_0==116||LA187_0==120||LA187_0==125||LA187_0==127||LA187_0==131||LA187_0==136||(LA187_0>=140 && LA187_0<=141)||LA187_0==143||(LA187_0>=156 && LA187_0<=157)||LA187_0==160||LA187_0==162||(LA187_0>=165 && LA187_0<=166)||LA187_0==168))
				{
					alt187 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:546:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(546, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4429);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(546, 46);
					// SugarCpp.g:546:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt186=2;
					try { DebugEnterSubRule(186);
					try { DebugEnterDecision(186, false);
					int LA186_0 = input.LA(1);

					if ((LA186_0==105))
					{
						alt186 = 1;
					}
					else if ((LA186_0==DEDENT||LA186_0==INDENT||LA186_0==NEWLINE||LA186_0==84||LA186_0==87||LA186_0==89||LA186_0==91||(LA186_0>=94 && LA186_0<=95)||LA186_0==98||LA186_0==104||(LA186_0>=107 && LA186_0<=108)||LA186_0==112||LA186_0==114||LA186_0==116||LA186_0==120||LA186_0==125||LA186_0==127||LA186_0==131||LA186_0==136||(LA186_0>=140 && LA186_0<=141)||LA186_0==143||(LA186_0>=156 && LA186_0<=157)||LA186_0==160||LA186_0==162||(LA186_0>=165 && LA186_0<=166)||LA186_0==168))
					{
						alt186 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:546:48: ':' b= cond_expr_item
						{
						DebugLocation(546, 48);
						char_literal426=(IToken)Match(input,105,Follow._105_in_cond_expr4433);  
						stream_105.Add(char_literal426);

						DebugLocation(546, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4437);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 546:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(546, 72);
							// SugarCpp.g:546:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(546, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(546, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(546, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(546, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:547:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 547:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(547, 20);
							// SugarCpp.g:547:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(547, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(547, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(547, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(186); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:549:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 549:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(549, 14);
						// SugarCpp.g:549:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(549, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(549, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(187); }


				}
				break;

			}
			} finally { DebugExitSubRule(188); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 64);
			LeaveRule("cond_expr", 64);
			LeaveRule_cond_expr();
		}
		DebugLocation(551, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:553:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 65);
		TraceIn("or_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set427 = default(IToken);

		CommonTree set427_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(553, 19);
		try
		{
			// SugarCpp.g:553:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(553, 6);

			set427=(IToken)input.LT(1);
			if (input.LA(1)==152||input.LA(1)==169)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set427));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 65);
			LeaveRule("or_op", 65);
			LeaveRule_or_op();
		}
		DebugLocation(553, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:554:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 66);
		TraceIn("or_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(554, 1);
		try
		{
			// SugarCpp.g:555:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:555:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(555, 4);
			// SugarCpp.g:555:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:555:5: a= and_expr
			{
			DebugLocation(555, 6);
			PushFollow(Follow._and_expr_in_or_expr4551);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 555:16: -> $a
			{
				DebugLocation(555, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(555, 23);
			// SugarCpp.g:555:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==152||LA189_0==169))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:555:24: op= or_op b= and_expr
					{
					DebugLocation(555, 26);
					PushFollow(Follow._or_op_in_or_expr4562);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(555, 34);
					PushFollow(Follow._and_expr_in_or_expr4566);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 555:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(555, 47);
						// SugarCpp.g:555:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(555, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(555, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(555, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(555, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 66);
			LeaveRule("or_expr", 66);
			LeaveRule_or_expr();
		}
		DebugLocation(556, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:558:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 67);
		TraceIn("and_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set428 = default(IToken);

		CommonTree set428_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(558, 21);
		try
		{
			// SugarCpp.g:558:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(558, 7);

			set428=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==129)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set428));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 67);
			LeaveRule("and_op", 67);
			LeaveRule_and_op();
		}
		DebugLocation(558, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:559:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 68);
		TraceIn("and_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(559, 1);
		try
		{
			// SugarCpp.g:560:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:560:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(560, 4);
			// SugarCpp.g:560:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:560:5: a= bit_or
			{
			DebugLocation(560, 6);
			PushFollow(Follow._bit_or_in_and_expr4608);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 560:14: -> $a
			{
				DebugLocation(560, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(560, 21);
			// SugarCpp.g:560:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==85||LA190_0==129))
				{
					alt190 = 1;
				}


				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:560:22: op= and_op b= bit_or
					{
					DebugLocation(560, 24);
					PushFollow(Follow._and_op_in_and_expr4619);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(560, 33);
					PushFollow(Follow._bit_or_in_and_expr4623);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 560:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(560, 44);
						// SugarCpp.g:560:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(560, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(560, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(560, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(560, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 68);
			LeaveRule("and_expr", 68);
			LeaveRule_and_expr();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:563:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 69);
		TraceIn("bit_or", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal429 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal429_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(563, 1);
		try
		{
			// SugarCpp.g:564:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:564:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(564, 4);
			// SugarCpp.g:564:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:564:5: a= bit_xor
			{
			DebugLocation(564, 6);
			PushFollow(Follow._bit_xor_in_bit_or4654);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 564:15: -> $a
			{
				DebugLocation(564, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(564, 22);
			// SugarCpp.g:564:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==167))
				{
					alt191 = 1;
				}


				} finally { DebugExitDecision(191); }
				switch ( alt191 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:564:23: '|' b= bit_xor
					{
					DebugLocation(564, 23);
					char_literal429=(IToken)Match(input,167,Follow._167_in_bit_or4663);  
					stream_167.Add(char_literal429);

					DebugLocation(564, 28);
					PushFollow(Follow._bit_xor_in_bit_or4667);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 167, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 564:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(564, 40);
						// SugarCpp.g:564:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(564, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(564, 51);
						adaptor.AddChild(root_1, stream_167.NextNode());
						DebugLocation(564, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(564, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop191;
				}
			}

			loop191:
				;

			} finally { DebugExitSubRule(191); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 69);
			LeaveRule("bit_or", 69);
			LeaveRule_bit_or();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:567:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 70);
		TraceIn("bit_xor", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal430 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal430_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(568, 4);
			// SugarCpp.g:568:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:568:5: a= bit_and
			{
			DebugLocation(568, 6);
			PushFollow(Follow._bit_and_in_bit_xor4697);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 568:15: -> $a
			{
				DebugLocation(568, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(568, 22);
			// SugarCpp.g:568:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=2;
				try { DebugEnterDecision(192, false);
				int LA192_0 = input.LA(1);

				if ((LA192_0==126))
				{
					alt192 = 1;
				}


				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:568:23: '^' b= bit_and
					{
					DebugLocation(568, 23);
					char_literal430=(IToken)Match(input,126,Follow._126_in_bit_xor4706);  
					stream_126.Add(char_literal430);

					DebugLocation(568, 28);
					PushFollow(Follow._bit_and_in_bit_xor4710);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 126, bit_xor, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 568:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(568, 40);
						// SugarCpp.g:568:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(568, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(568, 51);
						adaptor.AddChild(root_1, stream_126.NextNode());
						DebugLocation(568, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(568, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 70);
			LeaveRule("bit_xor", 70);
			LeaveRule_bit_xor();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:571:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 71);
		TraceIn("bit_and", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal431 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal431_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:572:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(572, 4);
			// SugarCpp.g:572:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:572:5: a= cmp_expr
			{
			DebugLocation(572, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4740);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 572:16: -> $a
			{
				DebugLocation(572, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(572, 23);
			// SugarCpp.g:572:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==86))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch ( alt193 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:24: '&' b= cmp_expr
					{
					DebugLocation(572, 24);
					char_literal431=(IToken)Match(input,86,Follow._86_in_bit_and4749);  
					stream_86.Add(char_literal431);

					DebugLocation(572, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4753);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(572, 42);
						// SugarCpp.g:572:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(572, 53);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(572, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(572, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop193;
				}
			}

			loop193:
				;

			} finally { DebugExitSubRule(193); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 71);
			LeaveRule("bit_and", 71);
			LeaveRule_bit_and();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:575:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 72);
		TraceIn("chain_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set432 = default(IToken);

		CommonTree set432_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(575, 64);
		try
		{
			// SugarCpp.g:575:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(575, 9);

			set432=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=144 && input.LA(1)<=145))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set432));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 72);
			LeaveRule("chain_op", 72);
			LeaveRule_chain_op();
		}
		DebugLocation(575, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:576:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 73);
		TraceIn("no_less_op", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set433 = default(IToken);

		CommonTree set433_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(576, 60);
		try
		{
			// SugarCpp.g:576:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(576, 11);

			set433=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=144 && input.LA(1)<=145))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set433));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 73);
			LeaveRule("no_less_op", 73);
			LeaveRule_no_less_op();
		}
		DebugLocation(576, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:577:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 74);
		TraceIn("chain_list", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op434 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr435 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(577, 35);
		try
		{
			// SugarCpp.g:577:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:577:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(577, 13);
			// SugarCpp.g:577:13: ( chain_op shift_expr )+
			int cnt194=0;
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==82||LA194_0==109||LA194_0==113||LA194_0==115||(LA194_0>=117 && LA194_0<=118)||(LA194_0>=144 && LA194_0<=145)))
				{
					alt194 = 1;
				}


				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:577:14: chain_op shift_expr
					{
					DebugLocation(577, 14);
					PushFollow(Follow._chain_op_in_chain_list4845);
					chain_op434=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op434.Tree);
					DebugLocation(577, 23);
					PushFollow(Follow._shift_expr_in_chain_list4847);
					shift_expr435=shift_expr();
					PopFollow();

					adaptor.AddChild(root_0, shift_expr435.Tree);

					}
					break;

				default:
					if (cnt194 >= 1)
						goto loop194;

					EarlyExitException eee194 = new EarlyExitException( 194, input );
					DebugRecognitionException(eee194);
					throw eee194;
				}
				cnt194++;
			}
			loop194:
				;

			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 74);
			LeaveRule("chain_list", 74);
			LeaveRule_chain_list();
		}
		DebugLocation(577, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:578:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 75);
		TraceIn("cmp_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal436 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken char_literal439 = default(IToken);
		IToken char_literal441 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list440 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list442 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list443 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal436_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree char_literal439_tree = default(CommonTree);
		CommonTree char_literal441_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(578, 1);
		try
		{
			// SugarCpp.g:579:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:579:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(579, 4);
			// SugarCpp.g:579:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:579:5: a= shift_expr
			{
			DebugLocation(579, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr4861);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 579:18: -> $a
			{
				DebugLocation(579, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(579, 25);
			// SugarCpp.g:579:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt199=3;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==109))
			{
				alt199 = 1;
			}
			else if ((LA199_0==82||LA199_0==113||LA199_0==115||(LA199_0>=117 && LA199_0<=118)||(LA199_0>=144 && LA199_0<=145)))
			{
				alt199 = 2;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:579:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(579, 27);
				char_literal436=(IToken)Match(input,109,Follow._109_in_cmp_expr4871);  
				stream_109.Add(char_literal436);

				DebugLocation(579, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr4875);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(579, 44);
				// SugarCpp.g:579:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt197=3;
				try { DebugEnterSubRule(197);
				try { DebugEnterDecision(197, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt197 = 1;
					}
					break;
				case 117:
					{
					int LA197_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt197 = 1;
					}
					else if ((true))
					{
						alt197 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 197, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 82:
				case 109:
				case 113:
				case 115:
				case 118:
				case 144:
				case 145:
					{
					alt197 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 84:
				case 85:
				case 86:
				case 87:
				case 89:
				case 91:
				case 94:
				case 95:
				case 98:
				case 104:
				case 105:
				case 107:
				case 108:
				case 112:
				case 114:
				case 116:
				case 120:
				case 121:
				case 125:
				case 126:
				case 127:
				case 129:
				case 131:
				case 136:
				case 140:
				case 141:
				case 143:
				case 152:
				case 156:
				case 157:
				case 160:
				case 162:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
					{
					alt197 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 197, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(197); }
				switch (alt197)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:579:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(579, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(579, 76);
					// SugarCpp.g:579:76: ( ident )*
					try { DebugEnterSubRule(195);
					while (true)
					{
						int alt195=2;
						try { DebugEnterDecision(195, false);
						int LA195_0 = input.LA(1);

						if ((LA195_0==IDENT))
						{
							alt195 = 1;
						}


						} finally { DebugExitDecision(195); }
						switch ( alt195 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:579:76: ident
							{
							DebugLocation(579, 76);
							PushFollow(Follow._ident_in_cmp_expr4881);
							ident437=ident();
							PopFollow();

							stream_ident.Add(ident437.Tree);

							}
							break;

						default:
							goto loop195;
						}
					}

					loop195:
						;

					} finally { DebugExitSubRule(195); }

					DebugLocation(579, 83);
					char_literal438=(IToken)Match(input,117,Follow._117_in_cmp_expr4884);  
					stream_117.Add(char_literal438);

					DebugLocation(579, 87);
					char_literal439=(IToken)Match(input,88,Follow._88_in_cmp_expr4886);  
					stream_88.Add(char_literal439);

					DebugLocation(579, 91);
					// SugarCpp.g:579:91: ( expr_list )?
					int alt196=2;
					try { DebugEnterSubRule(196);
					try { DebugEnterDecision(196, false);
					int LA196_0 = input.LA(1);

					if ((LA196_0==IDENT||LA196_0==NUMBER||LA196_0==STRING||LA196_0==81||LA196_0==86||LA196_0==88||LA196_0==90||(LA196_0>=92 && LA196_0<=93)||(LA196_0>=96 && LA196_0<=97)||(LA196_0>=123 && LA196_0<=124)||LA196_0==146||LA196_0==148||(LA196_0>=150 && LA196_0<=151)||LA196_0==170))
					{
						alt196 = 1;
					}
					} finally { DebugExitDecision(196); }
					switch (alt196)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:579:91: expr_list
						{
						DebugLocation(579, 91);
						PushFollow(Follow._expr_list_in_cmp_expr4888);
						expr_list440=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list440.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(196); }

					DebugLocation(579, 102);
					char_literal441=(IToken)Match(input,89,Follow._89_in_cmp_expr4891);  
					stream_89.Add(char_literal441);



					{
					// AST REWRITE
					// elements: expr_list, b, ident, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 579:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(579, 109);
						// SugarCpp.g:579:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(579, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(579, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(579, 131);
						// SugarCpp.g:579:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(579, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(579, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(579, 155);
						// SugarCpp.g:579:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(579, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(579, 163);
						// SugarCpp.g:579:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(579, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:580:46: chain_list
					{
					DebugLocation(580, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4960);
					chain_list442=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list442.Tree);


					{
					// AST REWRITE
					// elements: 109, b, cmp_expr, chain_list
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 580:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(580, 60);
						// SugarCpp.g:580:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(580, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(580, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(580, 84);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(580, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(580, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:581:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 109, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 581:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(581, 19);
						// SugarCpp.g:581:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(581, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(581, 30);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(581, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(581, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(197); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:582:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(582, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5037);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(582, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5041);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(582, 54);
				// SugarCpp.g:582:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt198=2;
				try { DebugEnterSubRule(198);
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==82||LA198_0==109||LA198_0==113||LA198_0==115||(LA198_0>=117 && LA198_0<=118)||(LA198_0>=144 && LA198_0<=145)))
				{
					alt198 = 1;
				}
				else if ((LA198_0==DEDENT||LA198_0==INDENT||LA198_0==NEWLINE||(LA198_0>=84 && LA198_0<=87)||LA198_0==89||LA198_0==91||(LA198_0>=94 && LA198_0<=95)||LA198_0==98||(LA198_0>=104 && LA198_0<=105)||(LA198_0>=107 && LA198_0<=108)||LA198_0==112||LA198_0==114||LA198_0==116||(LA198_0>=120 && LA198_0<=121)||(LA198_0>=125 && LA198_0<=127)||LA198_0==129||LA198_0==131||LA198_0==136||(LA198_0>=140 && LA198_0<=141)||LA198_0==143||LA198_0==152||(LA198_0>=156 && LA198_0<=157)||LA198_0==160||LA198_0==162||(LA198_0>=165 && LA198_0<=169)))
				{
					alt198 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 198, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(198); }
				switch (alt198)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:582:56: chain_list
					{
					DebugLocation(582, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5045);
					chain_list443=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list443.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, op, chain_list, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 582:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(582, 70);
						// SugarCpp.g:582:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(582, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(582, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(582, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(582, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(582, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:583:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 583:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(583, 20);
						// SugarCpp.g:583:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(583, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(583, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(583, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(583, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(198); }


				}
				break;

			}
			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 75);
			LeaveRule("cmp_expr", 75);
			LeaveRule_cmp_expr();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:588:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 76);
		TraceIn("shift_expr_op", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set444 = default(IToken);

		CommonTree set444_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(588, 27);
		try
		{
			// SugarCpp.g:588:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(588, 14);

			set444=(IToken)input.LT(1);
			if (input.LA(1)==111||input.LA(1)==119)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set444));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 76);
			LeaveRule("shift_expr_op", 76);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(588, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:589:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 77);
		TraceIn("shift_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(589, 1);
		try
		{
			// SugarCpp.g:590:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:590:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(590, 4);
			// SugarCpp.g:590:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:590:5: a= add_expr
			{
			DebugLocation(590, 6);
			PushFollow(Follow._add_expr_in_shift_expr5147);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 590:16: -> $a
			{
				DebugLocation(590, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(590, 23);
			// SugarCpp.g:590:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==111||LA200_0==119))
				{
					alt200 = 1;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:590:24: shift_expr_op b= add_expr
					{
					DebugLocation(590, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5156);
					shift_expr_op445=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op445.Tree);
					DebugLocation(590, 39);
					PushFollow(Follow._add_expr_in_shift_expr5160);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 590:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(590, 52);
						// SugarCpp.g:590:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(590, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(590, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(590, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(590, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 77);
			LeaveRule("shift_expr", 77);
			LeaveRule_shift_expr();
		}
		DebugLocation(591, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:593:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 78);
		TraceIn("add_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal446 = default(IToken);
		IToken char_literal447 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(593, 1);
		try
		{
			// SugarCpp.g:594:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:594:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(594, 4);
			// SugarCpp.g:594:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:594:5: a= mul_expr
			{
			DebugLocation(594, 6);
			PushFollow(Follow._mul_expr_in_add_expr5190);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 594:16: -> $a
			{
				DebugLocation(594, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(594, 23);
			// SugarCpp.g:594:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=3;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==92))
				{
					alt201 = 1;
				}
				else if ((LA201_0==96))
				{
					alt201 = 2;
				}


				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:594:25: '+' b= mul_expr
					{
					DebugLocation(594, 25);
					char_literal446=(IToken)Match(input,92,Follow._92_in_add_expr5200);  
					stream_92.Add(char_literal446);

					DebugLocation(594, 30);
					PushFollow(Follow._mul_expr_in_add_expr5204);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 594:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(594, 43);
						// SugarCpp.g:594:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(594, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(594, 54);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(594, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(594, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:595:10: '-' b= mul_expr
					{
					DebugLocation(595, 10);
					char_literal447=(IToken)Match(input,96,Follow._96_in_add_expr5229);  
					stream_96.Add(char_literal447);

					DebugLocation(595, 15);
					PushFollow(Follow._mul_expr_in_add_expr5233);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 96, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 595:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(595, 28);
						// SugarCpp.g:595:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(595, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(595, 39);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(595, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(595, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 78);
			LeaveRule("add_expr", 78);
			LeaveRule_add_expr();
		}
		DebugLocation(597, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:599:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 79);
		TraceIn("mul_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal448 = default(IToken);
		IToken char_literal449 = default(IToken);
		IToken char_literal450 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal448_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		CommonTree char_literal450_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(599, 1);
		try
		{
			// SugarCpp.g:600:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:600:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(600, 4);
			// SugarCpp.g:600:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:600:5: a= infix_expr
			{
			DebugLocation(600, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5271);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 600:18: -> $a
			{
				DebugLocation(600, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(600, 25);
			// SugarCpp.g:600:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(202);
			while (true)
			{
				int alt202=4;
				try { DebugEnterDecision(202, false);
				switch (input.LA(1))
				{
				case 90:
					{
					alt202 = 1;
					}
					break;
				case 103:
					{
					alt202 = 2;
					}
					break;
				case 83:
					{
					alt202 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(202); }
				switch ( alt202 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:600:27: '*' b= infix_expr
					{
					DebugLocation(600, 27);
					char_literal448=(IToken)Match(input,90,Follow._90_in_mul_expr5281);  
					stream_90.Add(char_literal448);

					DebugLocation(600, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5285);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 90
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 600:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(600, 47);
						// SugarCpp.g:600:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(600, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(600, 58);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(600, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(600, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:601:12: '/' b= infix_expr
					{
					DebugLocation(601, 12);
					char_literal449=(IToken)Match(input,103,Follow._103_in_mul_expr5312);  
					stream_103.Add(char_literal449);

					DebugLocation(601, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5316);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 103, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 601:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(601, 32);
						// SugarCpp.g:601:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(601, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(601, 43);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(601, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(601, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:602:12: '%' b= infix_expr
					{
					DebugLocation(602, 12);
					char_literal450=(IToken)Match(input,83,Follow._83_in_mul_expr5343);  
					stream_83.Add(char_literal450);

					DebugLocation(602, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5347);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 83
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 602:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(602, 32);
						// SugarCpp.g:602:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(602, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(602, 43);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(602, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(602, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop202;
				}
			}

			loop202:
				;

			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 79);
			LeaveRule("mul_expr", 79);
			LeaveRule_mul_expr();
		}
		DebugLocation(604, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:606:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 80);
		TraceIn("infix_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func451 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(606, 1);
		try
		{
			// SugarCpp.g:607:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:607:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(607, 4);
			// SugarCpp.g:607:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:607:5: a= selector_expr
			{
			DebugLocation(607, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5387);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 607:21: -> $a
			{
				DebugLocation(607, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(607, 28);
			// SugarCpp.g:607:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==128))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:607:30: infix_func b= selector_expr
					{
					DebugLocation(607, 30);
					PushFollow(Follow._infix_func_in_infix_expr5397);
					infix_func451=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func451.Tree);
					DebugLocation(607, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5401);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 607:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(607, 61);
						// SugarCpp.g:607:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(607, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(607, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(607, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(607, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 80);
			LeaveRule("infix_expr", 80);
			LeaveRule_infix_expr();
		}
		DebugLocation(608, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:610:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 81);
		TraceIn("selector_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal452 = default(IToken);
		IToken string_literal453 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal452_tree = default(CommonTree);
		CommonTree string_literal453_tree = default(CommonTree);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(610, 1);
		try
		{
			// SugarCpp.g:611:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:611:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(611, 4);
			// SugarCpp.g:611:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:611:5: a= cast_expr
			{
			DebugLocation(611, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5433);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 611:17: -> $a
			{
				DebugLocation(611, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(611, 24);
			// SugarCpp.g:611:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=3;
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==100))
				{
					alt204 = 1;
				}
				else if ((LA204_0==102))
				{
					alt204 = 2;
				}


				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:611:26: '->*' b= ident
					{
					DebugLocation(611, 26);
					string_literal452=(IToken)Match(input,100,Follow._100_in_selector_expr5443);  
					stream_100.Add(string_literal452);

					DebugLocation(611, 33);
					PushFollow(Follow._ident_in_selector_expr5447);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 100, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 611:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(611, 43);
						// SugarCpp.g:611:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(611, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(611, 57);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(611, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(611, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:612:11: '.*' b= ident
					{
					DebugLocation(612, 11);
					string_literal453=(IToken)Match(input,102,Follow._102_in_selector_expr5473);  
					stream_102.Add(string_literal453);

					DebugLocation(612, 18);
					PushFollow(Follow._ident_in_selector_expr5478);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 102, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 612:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(612, 28);
						// SugarCpp.g:612:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(612, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(612, 42);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(612, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(612, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 81);
			LeaveRule("selector_expr", 81);
			LeaveRule_selector_expr();
		}
		DebugLocation(614, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:616:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 82);
		TraceIn("cast_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal454 = default(IToken);
		IToken char_literal455 = default(IToken);
		IToken char_literal457 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name456 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal454_tree = default(CommonTree);
		CommonTree char_literal455_tree = default(CommonTree);
		CommonTree char_literal457_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(616, 1);
		try
		{
			// SugarCpp.g:617:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:617:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(617, 4);
			// SugarCpp.g:617:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:617:5: a= prefix_expr
			{
			DebugLocation(617, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5518);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 617:19: -> $a
			{
				DebugLocation(617, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(617, 26);
			// SugarCpp.g:617:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt205=2;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==130))
			{
				alt205 = 1;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:617:27: 'as' '(' type_name ')'
				{
				DebugLocation(617, 27);
				string_literal454=(IToken)Match(input,130,Follow._130_in_cast_expr5527);  
				stream_130.Add(string_literal454);

				DebugLocation(617, 32);
				char_literal455=(IToken)Match(input,88,Follow._88_in_cast_expr5529);  
				stream_88.Add(char_literal455);

				DebugLocation(617, 36);
				PushFollow(Follow._type_name_in_cast_expr5531);
				type_name456=type_name();
				PopFollow();

				stream_type_name.Add(type_name456.Tree);
				DebugLocation(617, 46);
				char_literal457=(IToken)Match(input,89,Follow._89_in_cast_expr5533);  
				stream_89.Add(char_literal457);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 617:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(617, 53);
					// SugarCpp.g:617:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(617, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(617, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(617, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 82);
			LeaveRule("cast_expr", 82);
			LeaveRule_cast_expr();
		}
		DebugLocation(618, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:620:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 83);
		TraceIn("prefix_expr_op", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set458 = default(IToken);

		CommonTree set458_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(620, 71);
		try
		{
			// SugarCpp.g:620:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(620, 15);

			set458=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==86||input.LA(1)==90||(input.LA(1)>=92 && input.LA(1)<=93)||(input.LA(1)>=96 && input.LA(1)<=97)||input.LA(1)==151||input.LA(1)==170)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set458));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 83);
			LeaveRule("prefix_expr_op", 83);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(620, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:621:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 84);
		TraceIn("prefix_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal461 = default(IToken);
		IToken char_literal463 = default(IToken);
		IToken char_literal465 = default(IToken);
		IToken char_literal466 = default(IToken);
		IToken char_literal468 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list467 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr469 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal461_tree = default(CommonTree);
		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree char_literal465_tree = default(CommonTree);
		CommonTree char_literal466_tree = default(CommonTree);
		CommonTree char_literal468_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(621, 1);
		try
		{
			// SugarCpp.g:622:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr )
			int alt209=3;
			try { DebugEnterDecision(209, false);
			switch (input.LA(1))
			{
			case 81:
			case 86:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 151:
			case 170:
				{
				alt209 = 1;
				}
				break;
			case 150:
				{
				alt209 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 88:
			case 123:
				{
				alt209 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 209, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:622:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(622, 4);
				// SugarCpp.g:622:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:622:5: prefix_expr_op prefix_expr
				{
				DebugLocation(622, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5595);
				prefix_expr_op459=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op459.Tree);
				DebugLocation(622, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5597);
				prefix_expr460=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr460.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 622:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(622, 36);
					// SugarCpp.g:622:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(622, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(622, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(622, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:623:4: 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				{
				DebugLocation(623, 4);
				string_literal461=(IToken)Match(input,150,Follow._150_in_prefix_expr5613);  
				stream_150.Add(string_literal461);

				DebugLocation(623, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr5615);
				type_no_array462=type_no_array();
				PopFollow();

				stream_type_no_array.Add(type_no_array462.Tree);
				DebugLocation(623, 24);
				// SugarCpp.g:623:24: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				int alt208=2;
				try { DebugEnterSubRule(208);
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==88))
				{
					alt208 = 1;
				}
				else if ((LA208_0==124))
				{
					alt208 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:26: '(' ( expr_list )? ')'
					{
					DebugLocation(623, 26);
					char_literal463=(IToken)Match(input,88,Follow._88_in_prefix_expr5619);  
					stream_88.Add(char_literal463);

					DebugLocation(623, 30);
					// SugarCpp.g:623:30: ( expr_list )?
					int alt206=2;
					try { DebugEnterSubRule(206);
					try { DebugEnterDecision(206, false);
					int LA206_0 = input.LA(1);

					if ((LA206_0==IDENT||LA206_0==NUMBER||LA206_0==STRING||LA206_0==81||LA206_0==86||LA206_0==88||LA206_0==90||(LA206_0>=92 && LA206_0<=93)||(LA206_0>=96 && LA206_0<=97)||(LA206_0>=123 && LA206_0<=124)||LA206_0==146||LA206_0==148||(LA206_0>=150 && LA206_0<=151)||LA206_0==170))
					{
						alt206 = 1;
					}
					} finally { DebugExitDecision(206); }
					switch (alt206)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:623:30: expr_list
						{
						DebugLocation(623, 30);
						PushFollow(Follow._expr_list_in_prefix_expr5621);
						expr_list464=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list464.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(206); }

					DebugLocation(623, 41);
					char_literal465=(IToken)Match(input,89,Follow._89_in_prefix_expr5624);  
					stream_89.Add(char_literal465);



					{
					// AST REWRITE
					// elements: expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 623:45: -> ^( Expr_New_Type type_no_array ( expr_list )? )
					{
						DebugLocation(623, 48);
						// SugarCpp.g:623:48: ^( Expr_New_Type type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(623, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(623, 64);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(623, 78);
						// SugarCpp.g:623:78: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(623, 78);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:624:11: '[' ( expr_list )? ']'
					{
					DebugLocation(624, 11);
					char_literal466=(IToken)Match(input,124,Follow._124_in_prefix_expr5647);  
					stream_124.Add(char_literal466);

					DebugLocation(624, 15);
					// SugarCpp.g:624:15: ( expr_list )?
					int alt207=2;
					try { DebugEnterSubRule(207);
					try { DebugEnterDecision(207, false);
					int LA207_0 = input.LA(1);

					if ((LA207_0==IDENT||LA207_0==NUMBER||LA207_0==STRING||LA207_0==81||LA207_0==86||LA207_0==88||LA207_0==90||(LA207_0>=92 && LA207_0<=93)||(LA207_0>=96 && LA207_0<=97)||(LA207_0>=123 && LA207_0<=124)||LA207_0==146||LA207_0==148||(LA207_0>=150 && LA207_0<=151)||LA207_0==170))
					{
						alt207 = 1;
					}
					} finally { DebugExitDecision(207); }
					switch (alt207)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:624:15: expr_list
						{
						DebugLocation(624, 15);
						PushFollow(Follow._expr_list_in_prefix_expr5649);
						expr_list467=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list467.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(207); }

					DebugLocation(624, 26);
					char_literal468=(IToken)Match(input,125,Follow._125_in_prefix_expr5652);  
					stream_125.Add(char_literal468);



					{
					// AST REWRITE
					// elements: expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:30: -> ^( Expr_New_Array type_no_array ( expr_list )? )
					{
						DebugLocation(624, 33);
						// SugarCpp.g:624:33: ^( Expr_New_Array type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(624, 50);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(624, 64);
						// SugarCpp.g:624:64: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(624, 64);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(208); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:626:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(626, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5678);
				suffix_expr469=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr469.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 84);
			LeaveRule("prefix_expr", 84);
			LeaveRule_prefix_expr();
		}
		DebugLocation(627, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:629:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 85);
		TraceIn("expr_list", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal471 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr472 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal471_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(629, 1);
		try
		{
			// SugarCpp.g:630:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:630:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(630, 4);
			PushFollow(Follow._expr_in_expr_list5690);
			expr470=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr470.Tree);
			DebugLocation(630, 9);
			// SugarCpp.g:630:9: ( ',' ! expr )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=2;
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==95))
				{
					alt210 = 1;
				}


				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:630:10: ',' ! expr
					{
					DebugLocation(630, 13);
					char_literal471=(IToken)Match(input,95,Follow._95_in_expr_list5693); 
					DebugLocation(630, 15);
					PushFollow(Follow._expr_in_expr_list5696);
					expr472=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr472.Tree);

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 85);
			LeaveRule("expr_list", 85);
			LeaveRule_expr_list();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:633:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 86);
		TraceIn("suffix_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal473 = default(IToken);
		IToken string_literal474 = default(IToken);
		IToken char_literal475 = default(IToken);
		IToken string_literal477 = default(IToken);
		IToken char_literal479 = default(IToken);
		IToken char_literal481 = default(IToken);
		IToken char_literal482 = default(IToken);
		IToken char_literal483 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal486 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident478 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal473_tree = default(CommonTree);
		CommonTree string_literal474_tree = default(CommonTree);
		CommonTree char_literal475_tree = default(CommonTree);
		CommonTree string_literal477_tree = default(CommonTree);
		CommonTree char_literal479_tree = default(CommonTree);
		CommonTree char_literal481_tree = default(CommonTree);
		CommonTree char_literal482_tree = default(CommonTree);
		CommonTree char_literal483_tree = default(CommonTree);
		CommonTree char_literal485_tree = default(CommonTree);
		CommonTree char_literal486_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(633, 1);
		try
		{
			// SugarCpp.g:634:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:634:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(634, 4);
			// SugarCpp.g:634:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:634:5: a= atom_expr
			{
			DebugLocation(634, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5712);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 634:17: -> $a
			{
				DebugLocation(634, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(634, 24);
			// SugarCpp.g:634:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=7;
				try { DebugEnterDecision(213, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt213 = 1;
					}
					break;
				case 97:
					{
					alt213 = 2;
					}
					break;
				case 101:
					{
					alt213 = 3;
					}
					break;
				case 99:
					{
					alt213 = 4;
					}
					break;
				case 88:
					{
					alt213 = 5;
					}
					break;
				case 124:
					{
					alt213 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:634:26: '++'
					{
					DebugLocation(634, 26);
					string_literal473=(IToken)Match(input,93,Follow._93_in_suffix_expr5722);  
					stream_93.Add(string_literal473);



					{
					// AST REWRITE
					// elements: suffix_expr, 93
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 634:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(634, 34);
						// SugarCpp.g:634:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(634, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(634, 48);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(634, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:635:14: '--'
					{
					DebugLocation(635, 14);
					string_literal474=(IToken)Match(input,97,Follow._97_in_suffix_expr5748);  
					stream_97.Add(string_literal474);



					{
					// AST REWRITE
					// elements: suffix_expr, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 635:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(635, 22);
						// SugarCpp.g:635:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(635, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(635, 36);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(635, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:636:11: '.' ident
					{
					DebugLocation(636, 11);
					char_literal475=(IToken)Match(input,101,Follow._101_in_suffix_expr5771);  
					stream_101.Add(char_literal475);

					DebugLocation(636, 15);
					PushFollow(Follow._ident_in_suffix_expr5773);
					ident476=ident();
					PopFollow();

					stream_ident.Add(ident476.Tree);


					{
					// AST REWRITE
					// elements: 101, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(636, 24);
						// SugarCpp.g:636:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(636, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(636, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:637:11: '->' ident
					{
					DebugLocation(637, 11);
					string_literal477=(IToken)Match(input,99,Follow._99_in_suffix_expr5798);  
					stream_99.Add(string_literal477);

					DebugLocation(637, 16);
					PushFollow(Follow._ident_in_suffix_expr5800);
					ident478=ident();
					PopFollow();

					stream_ident.Add(ident478.Tree);


					{
					// AST REWRITE
					// elements: ident, 99, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 637:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(637, 25);
						// SugarCpp.g:637:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(637, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(637, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(637, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(637, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:638:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(638, 11);
					char_literal479=(IToken)Match(input,88,Follow._88_in_suffix_expr5825);  
					stream_88.Add(char_literal479);

					DebugLocation(638, 15);
					// SugarCpp.g:638:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt211=2;
					try { DebugEnterSubRule(211);
					try { DebugEnterDecision(211, false);
					int LA211_0 = input.LA(1);

					if ((LA211_0==IDENT||LA211_0==NUMBER||LA211_0==STRING||LA211_0==81||LA211_0==86||LA211_0==88||LA211_0==90||(LA211_0>=92 && LA211_0<=93)||(LA211_0>=96 && LA211_0<=97)||(LA211_0>=123 && LA211_0<=124)||LA211_0==146||LA211_0==148||(LA211_0>=150 && LA211_0<=151)||LA211_0==170))
					{
						alt211 = 1;
					}
					else if ((LA211_0==89))
					{
						alt211 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(211); }
					switch (alt211)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:638:17: expr_list ')'
						{
						DebugLocation(638, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5829);
						expr_list480=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list480.Tree);
						DebugLocation(638, 27);
						char_literal481=(IToken)Match(input,89,Follow._89_in_suffix_expr5831);  
						stream_89.Add(char_literal481);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 638:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(638, 34);
							// SugarCpp.g:638:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(638, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(638, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(638, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:639:17: ')'
						{
						DebugLocation(639, 17);
						char_literal482=(IToken)Match(input,89,Follow._89_in_suffix_expr5860);  
						stream_89.Add(char_literal482);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 639:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(639, 24);
							// SugarCpp.g:639:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(639, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(639, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(211); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:641:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(641, 11);
					char_literal483=(IToken)Match(input,124,Follow._124_in_suffix_expr5891);  
					stream_124.Add(char_literal483);

					DebugLocation(641, 15);
					// SugarCpp.g:641:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt212=2;
					try { DebugEnterSubRule(212);
					try { DebugEnterDecision(212, false);
					int LA212_0 = input.LA(1);

					if ((LA212_0==IDENT||LA212_0==NUMBER||LA212_0==STRING||LA212_0==81||LA212_0==86||LA212_0==88||LA212_0==90||(LA212_0>=92 && LA212_0<=93)||(LA212_0>=96 && LA212_0<=97)||(LA212_0>=123 && LA212_0<=124)||LA212_0==146||LA212_0==148||(LA212_0>=150 && LA212_0<=151)||LA212_0==170))
					{
						alt212 = 1;
					}
					else if ((LA212_0==125))
					{
						alt212 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 212, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(212); }
					switch (alt212)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:641:17: expr_list ']'
						{
						DebugLocation(641, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5895);
						expr_list484=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list484.Tree);
						DebugLocation(641, 27);
						char_literal485=(IToken)Match(input,125,Follow._125_in_suffix_expr5897);  
						stream_125.Add(char_literal485);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 641:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(641, 34);
							// SugarCpp.g:641:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(641, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(641, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(641, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:642:17: ']'
						{
						DebugLocation(642, 17);
						char_literal486=(IToken)Match(input,125,Follow._125_in_suffix_expr5926);  
						stream_125.Add(char_literal486);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 642:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(642, 24);
							// SugarCpp.g:642:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(642, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(642, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(212); }


					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 86);
			LeaveRule("suffix_expr", 86);
			LeaveRule_suffix_expr();
		}
		DebugLocation(646, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:648:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 87);
		TraceIn("atom_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER487 = default(IToken);
		IToken STRING489 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken char_literal492 = default(IToken);
		IToken char_literal493 = default(IToken);
		IToken char_literal495 = default(IToken);
		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr494 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER487_tree = default(CommonTree);
		CommonTree STRING489_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal493_tree = default(CommonTree);
		CommonTree char_literal495_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(648, 1);
		try
		{
			// SugarCpp.g:649:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt216=5;
			try { DebugEnterDecision(216, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt216 = 1;
				}
				break;
			case IDENT:
				{
				alt216 = 2;
				}
				break;
			case STRING:
				{
				alt216 = 3;
				}
				break;
			case 123:
				{
				alt216 = 4;
				}
				break;
			case 88:
				{
				alt216 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 216, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(216); }
			switch (alt216)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:649:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 4);
				NUMBER487=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr5979); 
				NUMBER487_tree = (CommonTree)adaptor.Create(NUMBER487);
				adaptor.AddChild(root_0, NUMBER487_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:650:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(650, 4);
				PushFollow(Follow._ident_in_atom_expr5984);
				ident488=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident488.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:651:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 4);
				STRING489=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr5989); 
				STRING489_tree = (CommonTree)adaptor.Create(STRING489);
				adaptor.AddChild(root_0, STRING489_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:652:4: '@' ident
				{
				DebugLocation(652, 4);
				char_literal490=(IToken)Match(input,123,Follow._123_in_atom_expr5994);  
				stream_123.Add(char_literal490);

				DebugLocation(652, 8);
				PushFollow(Follow._ident_in_atom_expr5996);
				ident491=ident();
				PopFollow();

				stream_ident.Add(ident491.Tree);


				{
				// AST REWRITE
				// elements: 123, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 652:14: -> ^( '@' ident )
				{
					DebugLocation(652, 17);
					// SugarCpp.g:652:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(652, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(652, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:653:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(653, 4);
				char_literal492=(IToken)Match(input,88,Follow._88_in_atom_expr6009);  
				stream_88.Add(char_literal492);

				DebugLocation(653, 9);
				PushFollow(Follow._expr_in_atom_expr6013);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(653, 15);
				// SugarCpp.g:653:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==95))
				{
					alt215 = 1;
				}
				else if ((LA215_0==89))
				{
					alt215 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:653:17: ( ',' expr )+ ')'
					{
					DebugLocation(653, 17);
					// SugarCpp.g:653:17: ( ',' expr )+
					int cnt214=0;
					try { DebugEnterSubRule(214);
					while (true)
					{
						int alt214=2;
						try { DebugEnterDecision(214, false);
						int LA214_0 = input.LA(1);

						if ((LA214_0==95))
						{
							alt214 = 1;
						}


						} finally { DebugExitDecision(214); }
						switch (alt214)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:653:18: ',' expr
							{
							DebugLocation(653, 18);
							char_literal493=(IToken)Match(input,95,Follow._95_in_atom_expr6018);  
							stream_95.Add(char_literal493);

							DebugLocation(653, 22);
							PushFollow(Follow._expr_in_atom_expr6020);
							expr494=expr();
							PopFollow();

							stream_expr.Add(expr494.Tree);

							}
							break;

						default:
							if (cnt214 >= 1)
								goto loop214;

							EarlyExitException eee214 = new EarlyExitException( 214, input );
							DebugRecognitionException(eee214);
							throw eee214;
						}
						cnt214++;
					}
					loop214:
						;

					} finally { DebugExitSubRule(214); }

					DebugLocation(653, 29);
					char_literal495=(IToken)Match(input,89,Follow._89_in_atom_expr6024);  
					stream_89.Add(char_literal495);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 653:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(653, 36);
						// SugarCpp.g:653:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(653, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(653, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(653, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:654:17: ')' {...}?
					{
					DebugLocation(654, 17);
					char_literal496=(IToken)Match(input,89,Follow._89_in_atom_expr6051);  
					stream_89.Add(char_literal496);

					DebugLocation(654, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 654:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(654, 40);
						// SugarCpp.g:654:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(654, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(654, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(215); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 87);
			LeaveRule("atom_expr", 87);
			LeaveRule_atom_expr();
		}
		DebugLocation(656, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:658:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 88);
		TraceIn("lvalue_item", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix497 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(658, 1);
		try
		{
			// SugarCpp.g:659:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:659:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(659, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6082);
			lvalue_prefix497=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix497.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 88);
			LeaveRule("lvalue_item", 88);
			LeaveRule_lvalue_item();
		}
		DebugLocation(660, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:662:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 89);
		TraceIn("lvalue_prefix", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix500 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(662, 1);
		try
		{
			// SugarCpp.g:663:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt217=2;
			try { DebugEnterDecision(217, false);
			int LA217_0 = input.LA(1);

			if ((LA217_0==81||LA217_0==86||LA217_0==90||(LA217_0>=92 && LA217_0<=93)||(LA217_0>=96 && LA217_0<=97)||LA217_0==151||LA217_0==170))
			{
				alt217 = 1;
			}
			else if ((LA217_0==IDENT||LA217_0==123))
			{
				alt217 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 217, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(217); }
			switch (alt217)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:663:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(663, 4);
				// SugarCpp.g:663:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:663:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(663, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6094);
				prefix_expr_op498=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op498.Tree);
				DebugLocation(663, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6096);
				lvalue_prefix499=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix499.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 663:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(663, 38);
					// SugarCpp.g:663:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(663, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(663, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(663, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:664:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(664, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6112);
				lvalue_suffix500=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix500.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 89);
			LeaveRule("lvalue_prefix", 89);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(665, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:667:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 90);
		TraceIn("lvalue_suffix", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal501 = default(IToken);
		IToken string_literal502 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken string_literal505 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal510 = default(IToken);
		IToken char_literal511 = default(IToken);
		IToken char_literal513 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident504 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident506 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter507 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list512 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal501_tree = default(CommonTree);
		CommonTree string_literal502_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree string_literal505_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal510_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		CommonTree char_literal513_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(667, 1);
		try
		{
			// SugarCpp.g:668:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:668:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(668, 4);
			// SugarCpp.g:668:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:668:5: a= lvalue_atom
			{
			DebugLocation(668, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6126);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 668:19: -> $a
			{
				DebugLocation(668, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(668, 26);
			// SugarCpp.g:668:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=7;
				try { DebugEnterDecision(221, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt221 = 1;
					}
					break;
				case 97:
					{
					alt221 = 2;
					}
					break;
				case 101:
					{
					alt221 = 3;
					}
					break;
				case 99:
					{
					alt221 = 4;
					}
					break;
				case 88:
				case 109:
					{
					alt221 = 5;
					}
					break;
				case 124:
					{
					alt221 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:668:28: '++'
					{
					DebugLocation(668, 28);
					string_literal501=(IToken)Match(input,93,Follow._93_in_lvalue_suffix6136);  
					stream_93.Add(string_literal501);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 93
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 668:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(668, 36);
						// SugarCpp.g:668:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(668, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(668, 50);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(668, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:669:16: '--'
					{
					DebugLocation(669, 16);
					string_literal502=(IToken)Match(input,97,Follow._97_in_lvalue_suffix6164);  
					stream_97.Add(string_literal502);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 669:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(669, 24);
						// SugarCpp.g:669:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(669, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(669, 38);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(669, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:670:13: '.' ident
					{
					DebugLocation(670, 13);
					char_literal503=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6189);  
					stream_101.Add(char_literal503);

					DebugLocation(670, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6191);
					ident504=ident();
					PopFollow();

					stream_ident.Add(ident504.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_suffix, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 670:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(670, 26);
						// SugarCpp.g:670:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(670, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(670, 40);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(670, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(670, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:671:13: '->' ident
					{
					DebugLocation(671, 13);
					string_literal505=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6218);  
					stream_99.Add(string_literal505);

					DebugLocation(671, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6220);
					ident506=ident();
					PopFollow();

					stream_ident.Add(ident506.Tree);


					{
					// AST REWRITE
					// elements: 99, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 671:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(671, 27);
						// SugarCpp.g:671:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(671, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(671, 41);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(671, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(671, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:672:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(672, 13);
					// SugarCpp.g:672:13: ( generic_parameter )?
					int alt218=2;
					try { DebugEnterSubRule(218);
					try { DebugEnterDecision(218, false);
					int LA218_0 = input.LA(1);

					if ((LA218_0==109))
					{
						alt218 = 1;
					}
					} finally { DebugExitDecision(218); }
					switch (alt218)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:672:13: generic_parameter
						{
						DebugLocation(672, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6247);
						generic_parameter507=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter507.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(218); }

					DebugLocation(672, 32);
					char_literal508=(IToken)Match(input,88,Follow._88_in_lvalue_suffix6250);  
					stream_88.Add(char_literal508);

					DebugLocation(672, 36);
					// SugarCpp.g:672:36: ( expr_list )?
					int alt219=2;
					try { DebugEnterSubRule(219);
					try { DebugEnterDecision(219, false);
					int LA219_0 = input.LA(1);

					if ((LA219_0==IDENT||LA219_0==NUMBER||LA219_0==STRING||LA219_0==81||LA219_0==86||LA219_0==88||LA219_0==90||(LA219_0>=92 && LA219_0<=93)||(LA219_0>=96 && LA219_0<=97)||(LA219_0>=123 && LA219_0<=124)||LA219_0==146||LA219_0==148||(LA219_0>=150 && LA219_0<=151)||LA219_0==170))
					{
						alt219 = 1;
					}
					} finally { DebugExitDecision(219); }
					switch (alt219)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:672:36: expr_list
						{
						DebugLocation(672, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix6252);
						expr_list509=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list509.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(219); }

					DebugLocation(672, 47);
					char_literal510=(IToken)Match(input,89,Follow._89_in_lvalue_suffix6255);  
					stream_89.Add(char_literal510);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 672:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(672, 54);
						// SugarCpp.g:672:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(672, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(672, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(672, 81);
						// SugarCpp.g:672:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(672, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(672, 100);
						// SugarCpp.g:672:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(672, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:673:13: '[' ( expr_list )? ']'
					{
					DebugLocation(673, 13);
					char_literal511=(IToken)Match(input,124,Follow._124_in_lvalue_suffix6284);  
					stream_124.Add(char_literal511);

					DebugLocation(673, 17);
					// SugarCpp.g:673:17: ( expr_list )?
					int alt220=2;
					try { DebugEnterSubRule(220);
					try { DebugEnterDecision(220, false);
					int LA220_0 = input.LA(1);

					if ((LA220_0==IDENT||LA220_0==NUMBER||LA220_0==STRING||LA220_0==81||LA220_0==86||LA220_0==88||LA220_0==90||(LA220_0>=92 && LA220_0<=93)||(LA220_0>=96 && LA220_0<=97)||(LA220_0>=123 && LA220_0<=124)||LA220_0==146||LA220_0==148||(LA220_0>=150 && LA220_0<=151)||LA220_0==170))
					{
						alt220 = 1;
					}
					} finally { DebugExitDecision(220); }
					switch (alt220)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:673:17: expr_list
						{
						DebugLocation(673, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix6286);
						expr_list512=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list512.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(220); }

					DebugLocation(673, 28);
					char_literal513=(IToken)Match(input,125,Follow._125_in_lvalue_suffix6289);  
					stream_125.Add(char_literal513);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 673:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(673, 35);
						// SugarCpp.g:673:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(673, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(673, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(673, 62);
						// SugarCpp.g:673:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(673, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 90);
			LeaveRule("lvalue_suffix", 90);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(675, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:677:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 91);
		TraceIn("lvalue_atom", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal515 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident514 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident516 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal515_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(677, 1);
		try
		{
			// SugarCpp.g:678:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt222=2;
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==IDENT))
			{
				alt222 = 1;
			}
			else if ((LA222_0==123))
			{
				alt222 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 222, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:678:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(678, 4);
				PushFollow(Follow._ident_in_lvalue_atom6328);
				ident514=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident514.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:679:4: '@' ident
				{
				DebugLocation(679, 4);
				char_literal515=(IToken)Match(input,123,Follow._123_in_lvalue_atom6333);  
				stream_123.Add(char_literal515);

				DebugLocation(679, 8);
				PushFollow(Follow._ident_in_lvalue_atom6335);
				ident516=ident();
				PopFollow();

				stream_ident.Add(ident516.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 679:14: -> ^( '@' ident )
				{
					DebugLocation(679, 17);
					// SugarCpp.g:679:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(679, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(679, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 91);
			LeaveRule("lvalue_atom", 91);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(680, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:682:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 92);
		TraceIn("lvalue", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal517 = default(IToken);
		IToken char_literal519 = default(IToken);
		IToken char_literal521 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item522 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal517_tree = default(CommonTree);
		CommonTree char_literal519_tree = default(CommonTree);
		CommonTree char_literal521_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(682, 1);
		try
		{
			// SugarCpp.g:683:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt224=2;
			try { DebugEnterDecision(224, false);
			int LA224_0 = input.LA(1);

			if ((LA224_0==88))
			{
				alt224 = 1;
			}
			else if ((LA224_0==IDENT||LA224_0==81||LA224_0==86||LA224_0==90||(LA224_0>=92 && LA224_0<=93)||(LA224_0>=96 && LA224_0<=97)||LA224_0==123||LA224_0==151||LA224_0==170))
			{
				alt224 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 224, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:683:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(683, 4);
				char_literal517=(IToken)Match(input,88,Follow._88_in_lvalue6354);  
				stream_88.Add(char_literal517);

				DebugLocation(683, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6356);
				lvalue_item518=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item518.Tree);
				DebugLocation(683, 20);
				// SugarCpp.g:683:20: ( ',' lvalue_item )+
				int cnt223=0;
				try { DebugEnterSubRule(223);
				while (true)
				{
					int alt223=2;
					try { DebugEnterDecision(223, false);
					int LA223_0 = input.LA(1);

					if ((LA223_0==95))
					{
						alt223 = 1;
					}


					} finally { DebugExitDecision(223); }
					switch (alt223)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:683:21: ',' lvalue_item
						{
						DebugLocation(683, 21);
						char_literal519=(IToken)Match(input,95,Follow._95_in_lvalue6359);  
						stream_95.Add(char_literal519);

						DebugLocation(683, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6361);
						lvalue_item520=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item520.Tree);

						}
						break;

					default:
						if (cnt223 >= 1)
							goto loop223;

						EarlyExitException eee223 = new EarlyExitException( 223, input );
						DebugRecognitionException(eee223);
						throw eee223;
					}
					cnt223++;
				}
				loop223:
					;

				} finally { DebugExitSubRule(223); }

				DebugLocation(683, 39);
				char_literal521=(IToken)Match(input,89,Follow._89_in_lvalue6365);  
				stream_89.Add(char_literal521);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 683:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(683, 46);
					// SugarCpp.g:683:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(683, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(683, 60);
					// SugarCpp.g:683:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(683, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:684:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(684, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6379);
				lvalue_item522=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item522.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 92);
			LeaveRule("lvalue", 92);
			LeaveRule_lvalue();
		}
		DebugLocation(685, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:687:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 93);
		TraceIn("ident", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT523 = default(IToken);
		IToken string_literal524 = default(IToken);
		IToken IDENT525 = default(IToken);

		CommonTree IDENT523_tree = default(CommonTree);
		CommonTree string_literal524_tree = default(CommonTree);
		CommonTree IDENT525_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(687, 1);
		try
		{
			// SugarCpp.g:688:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:688:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(688, 4);
			IDENT523=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6390); 
			IDENT523_tree = (CommonTree)adaptor.Create(IDENT523);
			adaptor.AddChild(root_0, IDENT523_tree);
			DebugLocation(688, 10);
			// SugarCpp.g:688:10: ( '::' IDENT )*
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=2;
				try { DebugEnterDecision(225, false);
				int LA225_0 = input.LA(1);

				if ((LA225_0==106))
				{
					alt225 = 1;
				}


				} finally { DebugExitDecision(225); }
				switch ( alt225 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:688:11: '::' IDENT
					{
					DebugLocation(688, 11);
					string_literal524=(IToken)Match(input,106,Follow._106_in_ident6393); 
					string_literal524_tree = (CommonTree)adaptor.Create(string_literal524);
					adaptor.AddChild(root_0, string_literal524_tree);
					DebugLocation(688, 16);
					IDENT525=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6395); 
					IDENT525_tree = (CommonTree)adaptor.Create(IDENT525);
					adaptor.AddChild(root_0, IDENT525_tree);

					}
					break;

				default:
					goto loop225;
				}
			}

			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 93);
			LeaveRule("ident", 93);
			LeaveRule_ident();
		}
		DebugLocation(689, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:691:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 94);
		TraceIn("infix_func", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal526 = default(IToken);
		IToken char_literal528 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident527 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal526_tree = default(CommonTree);
		CommonTree char_literal528_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(691, 1);
		try
		{
			// SugarCpp.g:692:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:692:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(692, 7);
			char_literal526=(IToken)Match(input,128,Follow._128_in_infix_func6408); 
			DebugLocation(692, 9);
			PushFollow(Follow._ident_in_infix_func6411);
			ident527=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident527.Tree);
			DebugLocation(692, 18);
			char_literal528=(IToken)Match(input,128,Follow._128_in_infix_func6413); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 94);
			LeaveRule("infix_func", 94);
			LeaveRule_infix_func();
		}
		DebugLocation(693, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA70 dfa70;
	private DFA87 dfa87;
	private DFA96 dfa96;
	private DFA101 dfa101;
	private DFA114 dfa114;
	private DFA157 dfa157;
	private DFA146 dfa146;
	private DFA178 dfa178;
	private DFA177 dfa177;
	private DFA183 dfa183;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa70 = new DFA70( this );
		dfa87 = new DFA87( this );
		dfa96 = new DFA96( this );
		dfa101 = new DFA101( this );
		dfa114 = new DFA114( this );
		dfa157 = new DFA157( this );
		dfa146 = new DFA146( this );
		dfa178 = new DFA178( this );
		dfa177 = new DFA177( this );
		dfa183 = new DFA183( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x58\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x58\x3\x59\x2\x58\x1\x2A\x3\x59\x1\x2A\x1\x5F\x5\x2A\x1\x5F"+
			"\x1\x2A\x4\x59\x1\x58\xA\x59\x2\x2A\x1\x5F\x2\x2A\x1\x5F\x2\x2A\xA\x59"+
			"\x2\x2A\x2\x59";
		private const string DFA4_maxS =
			"\x1\xAA\x1\x86\x1\xFFFF\x1\xAA\x6\xFFFF\x2\x7D\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x86\x1\x33\x1\x39\x1\xAA\x1\x7D\x2\x5F\x1\x6A\x2\x7D\x1\xAA"+
			"\x2\x5F\x1\x6A\x1\x39\x1\x7D\x2\x2A\x3\x39\x1\x7D\x1\x2A\x2\x5F\x2\x6A"+
			"\x1\x7D\x2\x5F\x1\x6A\x2\x5F\x1\x6A\x2\x5F\x2\x6A\x1\x2A\x1\x39\x1\x7D"+
			"\x1\x2A\x1\x39\x1\x7D\x2\x2A\x1\x6A\x2\x5F\x2\x6A\x2\x5F\x3\x6A\x2\x2A"+
			"\x2\x6A";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x5B\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5B\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1"+
				"\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "270:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\x11\xFFFF";
		private const string DFA70_eofS =
			"\x11\xFFFF";
		private const string DFA70_minS =
			"\x1\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x4\x2A\x1\x56\x3\x2A\x2\x56\x1\x2A\x1"+
			"\x56";
		private const string DFA70_maxS =
			"\x1\xAA\x1\xFFFF\x1\xAA\x1\xA1\x1\xFFFF\x1\x2A\x1\xA1\x1\x6B\x1\xAA\x1"+
			"\x7C\x1\x2A\x1\xA1\x1\xAA\x2\x7C\x1\x2A\x1\x7C";
		private const string DFA70_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA70_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2D\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1"+
				"\x8\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x6\xFFFF"+
				"\x1\x4\x1E\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1C\xFFFF\x1\x1\x10\xFFFF\x1\x1\x13\xFFFF\x1"+
				"\x1\x6\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2D\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x18\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "343:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA87 : DFA
	{
		private const string DFA87_eotS =
			"\x9\xFFFF";
		private const string DFA87_eofS =
			"\x9\xFFFF";
		private const string DFA87_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA87_maxS =
			"\x1\xAA\x1\xA8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA8";
		private const string DFA87_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA87_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA87_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1B\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
		private static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
		private static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
		private static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
		private static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
		private static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
		private static readonly short[][] DFA87_transition;

		static DFA87()
		{
			int numStates = DFA87_transitionS.Length;
			DFA87_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA87_transition[i] = DFA.UnpackEncodedString(DFA87_transitionS[i]);
			}
		}

		public DFA87( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}

		public override string Description { get { return "383:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\x4\xFFFF";
		private const string DFA96_eofS =
			"\x4\xFFFF";
		private const string DFA96_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA96_maxS =
			"\x1\x8F\x1\xAA\x2\xFFFF";
		private const string DFA96_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA96_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x55\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "414:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x4\xFFFF";
		private const string DFA101_eofS =
			"\x4\xFFFF";
		private const string DFA101_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA101_maxS =
			"\x1\x8F\x1\xAA\x2\xFFFF";
		private const string DFA101_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA101_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x55\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "417:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA114 : DFA
	{
		private const string DFA114_eotS =
			"\x6\xFFFF";
		private const string DFA114_eofS =
			"\x6\xFFFF";
		private const string DFA114_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA114_maxS =
			"\x1\xAA\x1\xA9\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA9";
		private const string DFA114_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA114_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA114_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2"
			};

		private static readonly short[] DFA114_eot = DFA.UnpackEncodedString(DFA114_eotS);
		private static readonly short[] DFA114_eof = DFA.UnpackEncodedString(DFA114_eofS);
		private static readonly char[] DFA114_min = DFA.UnpackEncodedStringToUnsignedChars(DFA114_minS);
		private static readonly char[] DFA114_max = DFA.UnpackEncodedStringToUnsignedChars(DFA114_maxS);
		private static readonly short[] DFA114_accept = DFA.UnpackEncodedString(DFA114_acceptS);
		private static readonly short[] DFA114_special = DFA.UnpackEncodedString(DFA114_specialS);
		private static readonly short[][] DFA114_transition;

		static DFA114()
		{
			int numStates = DFA114_transitionS.Length;
			DFA114_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA114_transition[i] = DFA.UnpackEncodedString(DFA114_transitionS[i]);
			}
		}

		public DFA114( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 114;
			this.eot = DFA114_eot;
			this.eof = DFA114_eof;
			this.min = DFA114_min;
			this.max = DFA114_max;
			this.accept = DFA114_accept;
			this.special = DFA114_special;
			this.transition = DFA114_transition;
		}

		public override string Description { get { return "443:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA157 : DFA
	{
		private const string DFA157_eotS =
			"\x7\xFFFF";
		private const string DFA157_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA157_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA157_maxS =
			"\x1\xA6\x1\xAA\x2\xFFFF\x2\xAA\x1\xFFFF";
		private const string DFA157_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA157_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA157_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x1F\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x10\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x8\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x7\x3\x1\xFFFF\x2\x3\x2\xFFFF"+
				"\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
		private static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
		private static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
		private static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
		private static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
		private static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
		private static readonly short[][] DFA157_transition;

		static DFA157()
		{
			int numStates = DFA157_transitionS.Length;
			DFA157_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA157_transition[i] = DFA.UnpackEncodedString(DFA157_transitionS[i]);
			}
		}

		public DFA157( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 157;
			this.eot = DFA157_eot;
			this.eof = DFA157_eof;
			this.min = DFA157_min;
			this.max = DFA157_max;
			this.accept = DFA157_accept;
			this.special = DFA157_special;
			this.transition = DFA157_transition;
		}

		public override string Description { get { return "493:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA146 : DFA
	{
		private const string DFA146_eotS =
			"\x4\xFFFF";
		private const string DFA146_eofS =
			"\x4\xFFFF";
		private const string DFA146_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA146_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA146_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA146_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA146_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA146_eot = DFA.UnpackEncodedString(DFA146_eotS);
		private static readonly short[] DFA146_eof = DFA.UnpackEncodedString(DFA146_eofS);
		private static readonly char[] DFA146_min = DFA.UnpackEncodedStringToUnsignedChars(DFA146_minS);
		private static readonly char[] DFA146_max = DFA.UnpackEncodedStringToUnsignedChars(DFA146_maxS);
		private static readonly short[] DFA146_accept = DFA.UnpackEncodedString(DFA146_acceptS);
		private static readonly short[] DFA146_special = DFA.UnpackEncodedString(DFA146_specialS);
		private static readonly short[][] DFA146_transition;

		static DFA146()
		{
			int numStates = DFA146_transitionS.Length;
			DFA146_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA146_transition[i] = DFA.UnpackEncodedString(DFA146_transitionS[i]);
			}
		}

		public DFA146( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 146;
			this.eot = DFA146_eot;
			this.eof = DFA146_eof;
			this.min = DFA146_min;
			this.max = DFA146_max;
			this.accept = DFA146_accept;
			this.special = DFA146_special;
			this.transition = DFA146_transition;
		}

		public override string Description { get { return "493:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA178 : DFA
	{
		private const string DFA178_eotS =
			"\x7\xFFFF";
		private const string DFA178_eofS =
			"\x7\xFFFF";
		private const string DFA178_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA178_maxS =
			"\x5\xAA\x2\xFFFF";
		private const string DFA178_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA178_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA178_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA178_eot = DFA.UnpackEncodedString(DFA178_eotS);
		private static readonly short[] DFA178_eof = DFA.UnpackEncodedString(DFA178_eofS);
		private static readonly char[] DFA178_min = DFA.UnpackEncodedStringToUnsignedChars(DFA178_minS);
		private static readonly char[] DFA178_max = DFA.UnpackEncodedStringToUnsignedChars(DFA178_maxS);
		private static readonly short[] DFA178_accept = DFA.UnpackEncodedString(DFA178_acceptS);
		private static readonly short[] DFA178_special = DFA.UnpackEncodedString(DFA178_specialS);
		private static readonly short[][] DFA178_transition;

		static DFA178()
		{
			int numStates = DFA178_transitionS.Length;
			DFA178_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA178_transition[i] = DFA.UnpackEncodedString(DFA178_transitionS[i]);
			}
		}

		public DFA178( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 178;
			this.eot = DFA178_eot;
			this.eof = DFA178_eof;
			this.min = DFA178_min;
			this.max = DFA178_max;
			this.accept = DFA178_accept;
			this.special = DFA178_special;
			this.transition = DFA178_transition;
		}

		public override string Description { get { return "528:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA177 : DFA
	{
		private const string DFA177_eotS =
			"\x7\xFFFF";
		private const string DFA177_eofS =
			"\x7\xFFFF";
		private const string DFA177_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA177_maxS =
			"\x1\x7D\x4\xAA\x2\xFFFF";
		private const string DFA177_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA177_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA177_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA177_eot = DFA.UnpackEncodedString(DFA177_eotS);
		private static readonly short[] DFA177_eof = DFA.UnpackEncodedString(DFA177_eofS);
		private static readonly char[] DFA177_min = DFA.UnpackEncodedStringToUnsignedChars(DFA177_minS);
		private static readonly char[] DFA177_max = DFA.UnpackEncodedStringToUnsignedChars(DFA177_maxS);
		private static readonly short[] DFA177_accept = DFA.UnpackEncodedString(DFA177_acceptS);
		private static readonly short[] DFA177_special = DFA.UnpackEncodedString(DFA177_specialS);
		private static readonly short[][] DFA177_transition;

		static DFA177()
		{
			int numStates = DFA177_transitionS.Length;
			DFA177_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA177_transition[i] = DFA.UnpackEncodedString(DFA177_transitionS[i]);
			}
		}

		public DFA177( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 177;
			this.eot = DFA177_eot;
			this.eof = DFA177_eof;
			this.min = DFA177_min;
			this.max = DFA177_max;
			this.accept = DFA177_accept;
			this.special = DFA177_special;
			this.transition = DFA177_transition;
		}

		public override string Description { get { return "()* loopback of 528:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA183 : DFA
	{
		private const string DFA183_eotS =
			"\xB\xFFFF";
		private const string DFA183_eofS =
			"\xB\xFFFF";
		private const string DFA183_minS =
			"\x2\x2A\x1\xFFFF\x1\x52\x1\xFFFF\x2\x2A\x2\x52\x1\x2A\x1\x52";
		private const string DFA183_maxS =
			"\x2\xAA\x1\xFFFF\x1\xA9\x1\xFFFF\x1\x2A\x1\xAA\x2\xA9\x1\x2A\x1\xA9";
		private const string DFA183_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA183_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA183_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1A\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2"
			};

		private static readonly short[] DFA183_eot = DFA.UnpackEncodedString(DFA183_eotS);
		private static readonly short[] DFA183_eof = DFA.UnpackEncodedString(DFA183_eofS);
		private static readonly char[] DFA183_min = DFA.UnpackEncodedStringToUnsignedChars(DFA183_minS);
		private static readonly char[] DFA183_max = DFA.UnpackEncodedStringToUnsignedChars(DFA183_maxS);
		private static readonly short[] DFA183_accept = DFA.UnpackEncodedString(DFA183_acceptS);
		private static readonly short[] DFA183_special = DFA.UnpackEncodedString(DFA183_specialS);
		private static readonly short[][] DFA183_transition;

		static DFA183()
		{
			int numStates = DFA183_transitionS.Length;
			DFA183_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA183_transition[i] = DFA.UnpackEncodedString(DFA183_transitionS[i]);
			}
		}

		public DFA183( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 183;
			this.eot = DFA183_eot;
			this.eof = DFA183_eof;
			this.min = DFA183_min;
			this.max = DFA183_max;
			this.accept = DFA183_accept;
			this.special = DFA183_special;
			this.transition = DFA183_transition;
		}

		public override string Description { get { return "532:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root559 = new BitSet(new ulong[]{0x8040000000000UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_root562 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block584 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block586 = new BitSet(new ulong[]{0x8040000000002UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _func_def_in_node609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item677 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item680 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item682 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item685 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item687 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_attribute_item709 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item712 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item714 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item717 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item719 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute748 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _attribute_item_in_attribute750 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_attribute753 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _attribute_item_in_attribute755 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_attribute759 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute761 = new BitSet(new ulong[]{0x8000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc780 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc783 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_global_alloc787 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_global_alloc789 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_global_alloc794 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_global_alloc798 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_global_alloc861 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_global_alloc863 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_global_alloc866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_global_alloc939 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc942 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_global_alloc945 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc947 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_using984 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_using987 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _stmt_using_item_in_global_using989 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _attribute_in_global_typedef1013 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_global_typedef1016 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1018 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_global_typedef1020 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_global_typedef1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_import_def1049 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1051 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1055 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1058 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1060 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1065 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1067 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_enum_def1100 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1102 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_enum_def1104 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1107 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_enum_def1110 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1112 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_namespace_def1148 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1150 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1153 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1156 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1158 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_namespace_def1161 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_class_def1194 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1196 = new BitSet(new ulong[]{0x8000000000002UL,0x220001000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1199 = new BitSet(new ulong[]{0x8000000000002UL,0x20001000000UL});
		public static readonly BitSet _88_in_class_def1204 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_in_class_def1206 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_class_def1208 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1213 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1215 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1218 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1220 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1227 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1230 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _NEWLINE_in_class_def1232 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_class_def1235 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1280 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_list1283 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_list1285 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_single_in_type_name1307 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1311 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_name1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1318 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1361 = new BitSet(new ulong[]{0x40000000000UL,0x3000000UL,0x204000040UL});
		public static readonly BitSet _type_list_in_type_name1363 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1366 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1368 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_name1371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1375 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1401 = new BitSet(new ulong[]{0x2UL,0x1000000000400000UL});
		public static readonly BitSet _86_in_type_single1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_single1421 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_type_single1423 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_type_single1426 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_type_single1428 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1470 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_type_no_array1474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1509 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star1513 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1559 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_type_template_type1563 = new BitSet(new ulong[]{0x40000000000UL,0x20000001000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_template_type1566 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _95_in_type_template_type1569 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_template_type1571 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _117_in_type_template_type1577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_type_ident1617 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x204000000UL});
		public static readonly BitSet _161_in_type_ident1620 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_type_ident1623 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1654 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_generic_parameter_inside1657 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1659 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _109_in_generic_parameter1681 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1683 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_generic_parameter1685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1700 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_func_args1703 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1705 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1727 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_func_args_item1729 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_func_args_item1731 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_func_args_item1736 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_func_args_item1740 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_func_args_item1743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_args_item1791 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_func_args_item1793 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_args_item1796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_func_args_item1853 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name1891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_name1900 = new BitSet(new ulong[]{0x0UL,0x8114000000UL});
		public static readonly BitSet _operator_in_func_name1902 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_name1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1919 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x40204000040UL});
		public static readonly BitSet _type_name_in_func_def1922 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x40000000000UL});
		public static readonly BitSet _170_in_func_def1925 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL});
		public static readonly BitSet _func_name_in_func_def1928 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _generic_parameter_in_func_def1930 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_def1933 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_func_def1935 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_def1938 = new BitSet(new ulong[]{0x8000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1941 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_func_def1997 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_func_def1999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2040 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2042 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2052 = new BitSet(new ulong[]{0x8000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2055 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _108_in_stmt_block_item2060 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2062 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2079 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2081 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2084 = new BitSet(new ulong[]{0x40000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_stmt_block2087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2173 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _141_in_stmt_expr2183 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2185 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _160_in_stmt_expr2214 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2216 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _166_in_stmt_expr2245 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2247 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _162_in_stmt_expr2276 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2278 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _140_in_stmt_expr2307 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_expr2309 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4500003000UL});
		public static readonly BitSet _95_in_stmt_expr2312 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_expr2314 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4500003000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_defer2387 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_in_stmt_defer2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_stmt_defer2402 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_in_stmt_defer2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_typedef2423 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2425 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_typedef2427 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_stmt_typedef2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_using_item2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_using2460 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2462 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _153_in_stmt_return2483 = new BitSet(new ulong[]{0x210040000000002UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_return2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2506 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_inline_stmt_block2509 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2511 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _141_in_stmt_if2533 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_if2535 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2538 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2541 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x200UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2544 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_stmt_if2547 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2549 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_if2584 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2607 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_if2609 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2612 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2615 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x200UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2618 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_stmt_if2621 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2623 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_if2662 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while2695 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2697 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2701 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while2728 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_while2754 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2756 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2760 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while2787 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_while2813 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2815 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2818 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2843 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_for_range2845 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2849 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000100UL});
		public static readonly BitSet _157_in_for_range2852 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2856 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range2859 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_for_range2892 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2896 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range2899 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_for2996 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_for3000 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_for3003 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_for3005 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3009 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_try3043 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3045 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3048 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3050 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_stmt_try3053 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3055 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3057 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_switch_item3083 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_switch_item3085 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x10000000UL});
		public static readonly BitSet _95_in_switch_item3088 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_switch_item3090 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3096 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_switch_item3141 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_switch3179 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_switch3181 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3184 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3187 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3189 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3193 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3195 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x1000000200UL});
		public static readonly BitSet _137_in_stmt_switch3201 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3203 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3206 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3208 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3239 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_ident_list3242 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3244 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3266 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_stmt_alloc3270 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_stmt_alloc3272 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_stmt_alloc3277 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_stmt_alloc3281 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_stmt_alloc3332 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3334 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_stmt_alloc3337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_alloc3398 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3402 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_alloc3405 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3407 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3433 = new BitSet(new ulong[]{0x2UL,0x8585810448900000UL,0x10000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3437 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_modify3463 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_modify3492 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_modify3523 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3573 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3583 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3586 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3588 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_where_expr3591 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3595 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3599 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3635 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3638 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3640 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3644 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3646 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3651 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3653 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3706 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3709 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3711 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3715 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3717 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3722 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3724 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_where_expr3765 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3767 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3770 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3772 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3776 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3778 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_let_expr3841 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_let_expr3843 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_let_expr3847 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3875 = new BitSet(new ulong[]{0x2180C0000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _INDENT_in_let_expr3880 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3882 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3885 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3887 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr3916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3963 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_let_expr3966 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_let_expr3968 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_let_expr3972 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3974 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA88B880UL});
		public static readonly BitSet _143_in_let_expr3979 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3981 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3983 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_match_item4018 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_match_item4020 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_match_item4022 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_match_item4024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_match_expr4045 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_match_expr4047 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4050 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4053 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4055 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _match_item_in_match_expr4059 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4061 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_list_expr4110 = new BitSet(new ulong[]{0x2180C0000000100UL,0x38000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _95_in_list_expr4114 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4118 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _INDENT_in_list_expr4122 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _DEDENT_in_list_expr4126 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _list_expr_in_list_expr4130 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4134 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4138 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _INDENT_in_list_expr4142 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _DEDENT_in_list_expr4146 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _list_expr_in_list_expr4150 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4157 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4161 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _INDENT_in_list_expr4165 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4169 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_list_expr4173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lambda_expr4198 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4200 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lambda_expr4203 = new BitSet(new ulong[]{0x0UL,0x10000800000000UL});
		public static readonly BitSet _99_in_lambda_expr4207 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_lambda_expr4209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_lambda_expr4249 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_lambda_expr4251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4328 = new BitSet(new ulong[]{0x2UL,0x8105090448900000UL,0x10000000000UL});
		public static readonly BitSet _set_in_modify_expr4332 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_modify_expr4386 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4389 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4414 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_cond_expr4423 = new BitSet(new ulong[]{0x210040000000002UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4429 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_cond_expr4433 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4551 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20001000000UL});
		public static readonly BitSet _or_op_in_or_expr4562 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _and_expr_in_or_expr4566 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20001000000UL});
		public static readonly BitSet _bit_or_in_and_expr4608 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _and_op_in_and_expr4619 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_or_in_and_expr4623 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _bit_xor_in_bit_or4654 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_bit_or4663 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_xor_in_bit_or4667 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4697 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_bit_xor4706 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_and_in_bit_xor4710 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4740 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_bit_and4749 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4753 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _chain_op_in_chain_list4845 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_chain_list4847 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4861 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _109_in_cmp_expr4871 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4875 = new BitSet(new ulong[]{0x40000000002UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _ident_in_cmp_expr4881 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000000UL});
		public static readonly BitSet _117_in_cmp_expr4884 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cmp_expr4886 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_cmp_expr4888 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cmp_expr4891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5037 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5041 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5147 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5156 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _add_expr_in_shift_expr5160 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5190 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _92_in_add_expr5200 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _mul_expr_in_add_expr5204 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _96_in_add_expr5229 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _mul_expr_in_add_expr5233 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5271 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _90_in_mul_expr5281 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5285 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _103_in_mul_expr5312 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5316 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _83_in_mul_expr5343 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5347 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5387 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _infix_func_in_infix_expr5397 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5401 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cast_expr_in_selector_expr5433 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _100_in_selector_expr5443 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5447 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _102_in_selector_expr5473 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5478 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5518 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_cast_expr5527 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cast_expr5529 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_cast_expr5531 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cast_expr5533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5595 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_prefix_expr5613 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x204000040UL});
		public static readonly BitSet _type_no_array_in_prefix_expr5615 = new BitSet(new ulong[]{0x0UL,0x1000000001000000UL});
		public static readonly BitSet _88_in_prefix_expr5619 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5621 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_prefix_expr5624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_prefix_expr5647 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5649 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_prefix_expr5652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5690 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_expr_list5693 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_expr_list5696 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5712 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _93_in_suffix_expr5722 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _97_in_suffix_expr5748 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _101_in_suffix_expr5771 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5773 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _99_in_suffix_expr5798 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5800 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _88_in_suffix_expr5825 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5829 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr5831 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr5860 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _124_in_suffix_expr5891 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5895 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_suffix_expr5897 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _125_in_suffix_expr5926 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr5979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr5984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr5989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_atom_expr5994 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr5996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_atom_expr6009 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_atom_expr6013 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_atom_expr6018 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_atom_expr6020 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_atom_expr6024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_atom_expr6051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6094 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6126 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _93_in_lvalue_suffix6136 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _97_in_lvalue_suffix6164 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6189 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6191 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6218 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6220 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6247 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lvalue_suffix6250 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6252 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lvalue_suffix6255 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _124_in_lvalue_suffix6284 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6286 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_lvalue_suffix6289 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lvalue_atom6333 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lvalue6354 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6356 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_lvalue6359 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6361 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_lvalue6365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6390 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_ident6393 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident6395 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _128_in_infix_func6408 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func6411 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_infix_func6413 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
