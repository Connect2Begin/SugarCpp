//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-23 10:54:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Func=74;
	public const int Type_Ident=75;
	public const int Type_List=76;
	public const int Type_Ref=77;
	public const int Type_Star=78;
	public const int Type_Template=79;
	public const int White_Space=80;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:206:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(207, 4);
			// SugarCpp.g:207:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:4: NEWLINE
					{
					DebugLocation(207, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root559);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(207, 13);
			PushFollow(Follow._global_block_in_root562);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(207, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root564);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 207:30: -> ^( Root global_block )
			{
				DebugLocation(207, 33);
				// SugarCpp.g:207:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(207, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:210:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(211, 4);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==88||LA3_0==124||(LA3_0>=133 && LA3_0<=134)||LA3_0==138||LA3_0==142||LA3_0==149||LA3_0==154||LA3_0==159||LA3_0==161||LA3_0==163||LA3_0==170))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:5: node ( NEWLINE )+
					{
					DebugLocation(211, 5);
					PushFollow(Follow._node_in_global_block584);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(211, 10);
					// SugarCpp.g:211:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:211:10: NEWLINE
							{
							DebugLocation(211, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block586);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(211, 24);
				// SugarCpp.g:211:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(211, 39);
				// SugarCpp.g:211:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(211, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._func_def_in_node609);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._class_def_in_node614);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._enum_def_in_node619);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:218:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._global_alloc_in_node624);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:219:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._global_using_in_node629);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:220:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._global_typedef_in_node634);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:221:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._import_def_in_node639);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:222:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._namespace_def_in_node644);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:225:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args656); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args661); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:228:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._ident_in_attribute_args666);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:231:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==134))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(232, 4);
				PushFollow(Follow._ident_in_attribute_item677);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(232, 10);
				// SugarCpp.g:232:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==88))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(232, 11);
					char_literal18=(IToken)Match(input,88,Follow._88_in_attribute_item680);  
					stream_88.Add(char_literal18);

					DebugLocation(232, 15);
					PushFollow(Follow._attribute_args_in_attribute_item682);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(232, 30);
					// SugarCpp.g:232:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==95))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:31: ',' attribute_args
							{
							DebugLocation(232, 31);
							char_literal20=(IToken)Match(input,95,Follow._95_in_attribute_item685);  
							stream_95.Add(char_literal20);

							DebugLocation(232, 35);
							PushFollow(Follow._attribute_args_in_attribute_item687);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(232, 52);
					char_literal22=(IToken)Match(input,89,Follow._89_in_attribute_item691);  
					stream_89.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(232, 61);
					// SugarCpp.g:232:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(232, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(232, 79);
					// SugarCpp.g:232:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(232, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(233, 4);
				string_literal23=(IToken)Match(input,134,Follow._134_in_attribute_item709);  
				stream_134.Add(string_literal23);

				DebugLocation(233, 12);
				// SugarCpp.g:233:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==88))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(233, 13);
					char_literal24=(IToken)Match(input,88,Follow._88_in_attribute_item712);  
					stream_88.Add(char_literal24);

					DebugLocation(233, 17);
					PushFollow(Follow._attribute_args_in_attribute_item714);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(233, 32);
					// SugarCpp.g:233:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==95))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:233:33: ',' attribute_args
							{
							DebugLocation(233, 33);
							char_literal26=(IToken)Match(input,95,Follow._95_in_attribute_item717);  
							stream_95.Add(char_literal26);

							DebugLocation(233, 37);
							PushFollow(Follow._attribute_args_in_attribute_item719);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(233, 54);
					char_literal28=(IToken)Match(input,89,Follow._89_in_attribute_item723);  
					stream_89.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 134
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(233, 63);
					// SugarCpp.g:233:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(233, 75);
					adaptor.AddChild(root_1, stream_134.NextNode());
					DebugLocation(233, 83);
					// SugarCpp.g:233:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(233, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:236:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==124))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(237, 5);
					char_literal29=(IToken)Match(input,124,Follow._124_in_attribute748);  
					stream_124.Add(char_literal29);

					DebugLocation(237, 9);
					PushFollow(Follow._attribute_item_in_attribute750);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(237, 24);
					// SugarCpp.g:237:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==95))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:25: ',' attribute_item
							{
							DebugLocation(237, 25);
							char_literal31=(IToken)Match(input,95,Follow._95_in_attribute753);  
							stream_95.Add(char_literal31);

							DebugLocation(237, 29);
							PushFollow(Follow._attribute_item_in_attribute755);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(237, 46);
					char_literal33=(IToken)Match(input,125,Follow._125_in_attribute759);  
					stream_125.Add(char_literal33);

					DebugLocation(237, 50);
					// SugarCpp.g:237:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:50: NEWLINE
							{
							DebugLocation(237, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute761);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:61: -> ( attribute_item )+
			{
				DebugLocation(237, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(237, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:240:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==124))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: attribute
				{
				DebugLocation(241, 4);
				PushFollow(Follow._attribute_in_global_alloc780);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(241, 15);
			PushFollow(Follow._ident_list_in_global_alloc783);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(241, 26);
			// SugarCpp.g:241:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==105))
			{
				alt19 = 1;
			}
			else if ((LA19_0==107))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(241, 28);
				char_literal37=(IToken)Match(input,105,Follow._105_in_global_alloc787);  
				stream_105.Add(char_literal37);

				DebugLocation(241, 32);
				PushFollow(Follow._type_name_in_global_alloc789);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(241, 42);
				// SugarCpp.g:241:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt17 = 1;
					}
					break;
				case 88:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:44: ( '=' | ':=' ) expr
					{
					DebugLocation(241, 44);
					// SugarCpp.g:241:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==114))
					{
						alt15 = 1;
					}
					else if ((LA15_0==107))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:241:45: '='
						{
						DebugLocation(241, 45);
						char_literal39=(IToken)Match(input,114,Follow._114_in_global_alloc794);  
						stream_114.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:241:51: ':='
						{
						DebugLocation(241, 51);
						string_literal40=(IToken)Match(input,107,Follow._107_in_global_alloc798);  
						stream_107.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(241, 57);
					PushFollow(Follow._expr_in_global_alloc801);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 241:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(241, 65);
						// SugarCpp.g:241:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(241, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(241, 84);
						// SugarCpp.g:241:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(241, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(241, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(241, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(241, 116);
						// SugarCpp.g:241:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(241, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:242:43: '(' ( expr_list )? ')'
					{
					DebugLocation(242, 43);
					char_literal42=(IToken)Match(input,88,Follow._88_in_global_alloc861);  
					stream_88.Add(char_literal42);

					DebugLocation(242, 47);
					// SugarCpp.g:242:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==81||LA16_0==86||LA16_0==88||LA16_0==90||(LA16_0>=92 && LA16_0<=93)||(LA16_0>=96 && LA16_0<=97)||(LA16_0>=123 && LA16_0<=124)||LA16_0==146||LA16_0==148||(LA16_0>=150 && LA16_0<=151)||LA16_0==170))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:47: expr_list
						{
						DebugLocation(242, 47);
						PushFollow(Follow._expr_list_in_global_alloc863);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(242, 58);
					char_literal44=(IToken)Match(input,89,Follow._89_in_global_alloc866);  
					stream_89.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 242:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(242, 65);
						// SugarCpp.g:242:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(242, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(242, 86);
						// SugarCpp.g:242:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(242, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(242, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(242, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(242, 118);
						// SugarCpp.g:242:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(242, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:243:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 243:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(243, 20);
						// SugarCpp.g:243:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(243, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(243, 39);
						// SugarCpp.g:243:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(243, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(243, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(243, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(245, 10);
				string_literal45=(IToken)Match(input,107,Follow._107_in_global_alloc939);  
				stream_107.Add(string_literal45);

				DebugLocation(245, 15);
				// SugarCpp.g:245:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:245:16: expr ( ',' expr )*
				{
				DebugLocation(245, 16);
				PushFollow(Follow._expr_in_global_alloc942);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(245, 21);
				// SugarCpp.g:245:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==95))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:245:22: ',' expr
						{
						DebugLocation(245, 22);
						char_literal47=(IToken)Match(input,95,Follow._95_in_global_alloc945);  
						stream_95.Add(char_literal47);

						DebugLocation(245, 26);
						PushFollow(Follow._expr_in_global_alloc947);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 107, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(245, 37);
					// SugarCpp.g:245:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(245, 44);
					// SugarCpp.g:245:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(245, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(245, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(245, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(245, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:249:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_using984);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			string_literal50=(IToken)Match(input,163,Follow._163_in_global_using987);  
			stream_163.Add(string_literal50);

			DebugLocation(250, 23);
			// SugarCpp.g:250:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==149))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:23: stmt_using_item
					{
					DebugLocation(250, 23);
					PushFollow(Follow._stmt_using_item_in_global_using989);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(250, 43);
				// SugarCpp.g:250:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(250, 56);
				// SugarCpp.g:250:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(250, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(250, 67);
				// SugarCpp.g:250:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(250, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:253:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(253, 1);
		try
		{
			// SugarCpp.g:254:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(254, 4);
			// SugarCpp.g:254:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==124))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:4: attribute
				{
				DebugLocation(254, 4);
				PushFollow(Follow._attribute_in_global_typedef1013);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(254, 15);
			string_literal53=(IToken)Match(input,159,Follow._159_in_global_typedef1016);  
			stream_159.Add(string_literal53);

			DebugLocation(254, 22);
			PushFollow(Follow._ident_in_global_typedef1018);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(254, 28);
			char_literal55=(IToken)Match(input,114,Follow._114_in_global_typedef1020);  
			stream_114.Add(char_literal55);

			DebugLocation(254, 32);
			PushFollow(Follow._type_name_in_global_typedef1022);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(254, 45);
				// SugarCpp.g:254:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(254, 60);
				// SugarCpp.g:254:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(254, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(254, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(254, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:257:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(257, 1);
		try
		{
			// SugarCpp.g:258:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(258, 4);
			// SugarCpp.g:258:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==124))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:4: attribute
				{
				DebugLocation(258, 4);
				PushFollow(Follow._attribute_in_import_def1046);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(258, 15);
			string_literal58=(IToken)Match(input,142,Follow._142_in_import_def1049);  
			stream_142.Add(string_literal58);

			DebugLocation(258, 24);
			// SugarCpp.g:258:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:24: STRING
				{
				DebugLocation(258, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1051);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(258, 32);
			// SugarCpp.g:258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(258, 33);
				// SugarCpp.g:258:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:33: NEWLINE
						{
						DebugLocation(258, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1055);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(258, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1058);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(258, 49);
				// SugarCpp.g:258:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:49: NEWLINE
						{
						DebugLocation(258, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1060);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(258, 59);
				// SugarCpp.g:258:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:60: STRING ( NEWLINE )+
						{
						DebugLocation(258, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1065);  
						stream_STRING.Add(STRING63);

						DebugLocation(258, 67);
						// SugarCpp.g:258:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:258:67: NEWLINE
								{
								DebugLocation(258, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1067);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(258, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1072);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(258, 90);
				// SugarCpp.g:258:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(258, 99);
				// SugarCpp.g:258:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(258, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(258, 110);
				// SugarCpp.g:258:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(258, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:261:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==124))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:4: attribute
				{
				DebugLocation(262, 4);
				PushFollow(Follow._attribute_in_enum_def1097);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(262, 15);
			string_literal67=(IToken)Match(input,138,Follow._138_in_enum_def1100);  
			stream_138.Add(string_literal67);

			DebugLocation(262, 22);
			PushFollow(Follow._ident_in_enum_def1102);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(262, 28);
			char_literal69=(IToken)Match(input,114,Follow._114_in_enum_def1104);  
			stream_114.Add(char_literal69);

			DebugLocation(262, 32);
			// SugarCpp.g:262:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:33: ident ( '|' ident )*
				{
				DebugLocation(262, 33);
				PushFollow(Follow._ident_in_enum_def1107);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(262, 39);
				// SugarCpp.g:262:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==167))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:262:40: '|' ident
						{
						DebugLocation(262, 40);
						char_literal71=(IToken)Match(input,167,Follow._167_in_enum_def1110);  
						stream_167.Add(char_literal71);

						DebugLocation(262, 44);
						PushFollow(Follow._ident_in_enum_def1112);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(262, 57);
				// SugarCpp.g:262:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(262, 64);
				// SugarCpp.g:262:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(262, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(262, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(262, 81);
				// SugarCpp.g:262:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(262, 94);
				// SugarCpp.g:262:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(262, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:265:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==124))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: attribute
				{
				DebugLocation(266, 4);
				PushFollow(Follow._attribute_in_namespace_def1145);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(266, 15);
			string_literal74=(IToken)Match(input,149,Follow._149_in_namespace_def1148);  
			stream_149.Add(string_literal74);

			DebugLocation(266, 27);
			PushFollow(Follow._ident_in_namespace_def1150);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(266, 33);
			// SugarCpp.g:266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(266, 34);
				// SugarCpp.g:266:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:34: NEWLINE
						{
						DebugLocation(266, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1153);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(266, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1156);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(266, 50);
				// SugarCpp.g:266:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:50: NEWLINE
						{
						DebugLocation(266, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1158);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(266, 59);
				PushFollow(Follow._global_block_in_namespace_def1161);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(266, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1163);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(266, 84);
				// SugarCpp.g:266:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(266, 96);
				// SugarCpp.g:266:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(266, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(266, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(266, 113);
				// SugarCpp.g:266:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(266, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:269:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(270, 5);
			// SugarCpp.g:270:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==124))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:5: attribute
				{
				DebugLocation(270, 5);
				PushFollow(Follow._attribute_in_class_def1191);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(270, 16);
			string_literal82=(IToken)Match(input,133,Follow._133_in_class_def1194);  
			stream_133.Add(string_literal82);

			DebugLocation(270, 24);
			PushFollow(Follow._ident_in_class_def1196);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(270, 30);
			// SugarCpp.g:270:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==109))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:31: generic_parameter
				{
				DebugLocation(270, 31);
				PushFollow(Follow._generic_parameter_in_class_def1199);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(270, 51);
			// SugarCpp.g:270:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==88))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:52: '(' func_args ')'
				{
				DebugLocation(270, 52);
				char_literal85=(IToken)Match(input,88,Follow._88_in_class_def1204);  
				stream_88.Add(char_literal85);

				DebugLocation(270, 56);
				PushFollow(Follow._func_args_in_class_def1206);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(270, 66);
				char_literal87=(IToken)Match(input,89,Follow._89_in_class_def1208);  
				stream_89.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(270, 72);
			// SugarCpp.g:270:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==105))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:73: ':' ident ( ',' ident )*
				{
				DebugLocation(270, 73);
				char_literal88=(IToken)Match(input,105,Follow._105_in_class_def1213);  
				stream_105.Add(char_literal88);

				DebugLocation(270, 77);
				PushFollow(Follow._ident_in_class_def1215);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(270, 83);
				// SugarCpp.g:270:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==95))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:84: ',' ident
						{
						DebugLocation(270, 84);
						char_literal90=(IToken)Match(input,95,Follow._95_in_class_def1218);  
						stream_95.Add(char_literal90);

						DebugLocation(270, 88);
						PushFollow(Follow._ident_in_class_def1220);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(270, 98);
			// SugarCpp.g:270:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(270, 99);
				// SugarCpp.g:270:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:99: NEWLINE
						{
						DebugLocation(270, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1227);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(270, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1230);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(270, 115);
				// SugarCpp.g:270:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:270:115: NEWLINE
						{
						DebugLocation(270, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1232);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(270, 124);
				PushFollow(Follow._global_block_in_class_def1235);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(270, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1237);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 270:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(270, 149);
				// SugarCpp.g:270:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(270, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(270, 157);
				// SugarCpp.g:270:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(270, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(270, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(270, 174);
				// SugarCpp.g:270:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(270, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(270, 193);
				// SugarCpp.g:270:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(270, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(270, 204);
				// SugarCpp.g:270:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(270, 205);
					// SugarCpp.g:270:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(270, 218);
					// SugarCpp.g:270:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(270, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(270, 228);
				// SugarCpp.g:270:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(270, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:273:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(273, 1);
		try
		{
			// SugarCpp.g:274:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:274:4: type_name ( ',' type_name )*
			{
			DebugLocation(274, 4);
			PushFollow(Follow._type_name_in_type_list1280);
			type_name97=type_name();
			PopFollow();

			stream_type_name.Add(type_name97.Tree);
			DebugLocation(274, 14);
			// SugarCpp.g:274:14: ( ',' type_name )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==95))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:15: ',' type_name
					{
					DebugLocation(274, 15);
					char_literal98=(IToken)Match(input,95,Follow._95_in_type_list1283);  
					stream_95.Add(char_literal98);

					DebugLocation(274, 19);
					PushFollow(Follow._type_name_in_type_list1285);
					type_name99=type_name();
					PopFollow();

					stream_type_name.Add(type_name99.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 274:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(274, 34);
				// SugarCpp.g:274:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(274, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(274, 46);
				// SugarCpp.g:274:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(274, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:277:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken string_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree string_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IDENT||LA50_0==134||LA50_0==154||LA50_0==161))
			{
				alt50 = 1;
			}
			else if ((LA50_0==88))
			{
				alt50 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(278, 4);
				PushFollow(Follow._type_single_in_type_name1307);
				type_single100=type_single();
				PopFollow();

				stream_type_single.Add(type_single100.Tree);
				DebugLocation(278, 16);
				// SugarCpp.g:278:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==99))
				{
					alt47 = 1;
				}
				else if ((LA47_0==DEDENT||LA47_0==IDENT||LA47_0==NEWLINE||(LA47_0>=88 && LA47_0<=89)||LA47_0==95||(LA47_0>=107 && LA47_0<=108)||LA47_0==114||LA47_0==117||(LA47_0>=140 && LA47_0<=141)||LA47_0==143||LA47_0==160||LA47_0==162||LA47_0==166||LA47_0==170))
				{
					alt47 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(278, 18);
					string_literal101=(IToken)Match(input,99,Follow._99_in_type_name1311);  
					stream_99.Add(string_literal101);

					DebugLocation(278, 23);
					// SugarCpp.g:278:23: ( type_name | '(' ')' )
					int alt46=2;
					try { DebugEnterSubRule(46);
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==IDENT||LA46_0==134||LA46_0==154||LA46_0==161))
					{
						alt46 = 1;
					}
					else if ((LA46_0==88))
					{
						int LA46_2 = input.LA(2);

						if ((LA46_2==89))
						{
							int LA46_3 = input.LA(3);

							if ((LA46_3==99))
							{
								alt46 = 1;
							}
							else if ((LA46_3==DEDENT||LA46_3==IDENT||LA46_3==NEWLINE||(LA46_3>=88 && LA46_3<=89)||LA46_3==95||(LA46_3>=107 && LA46_3<=108)||LA46_3==114||LA46_3==117||(LA46_3>=140 && LA46_3<=141)||LA46_3==143||LA46_3==160||LA46_3==162||LA46_3==166||LA46_3==170))
							{
								alt46 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 46, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA46_2==IDENT||LA46_2==88||LA46_2==134||LA46_2==154||LA46_2==161))
						{
							alt46 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 46, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:278:24: type_name
						{
						DebugLocation(278, 24);
						PushFollow(Follow._type_name_in_type_name1314);
						type_name102=type_name();
						PopFollow();

						stream_type_name.Add(type_name102.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:278:36: '(' ')'
						{
						DebugLocation(278, 36);
						char_literal103=(IToken)Match(input,88,Follow._88_in_type_name1318);  
						stream_88.Add(char_literal103);

						DebugLocation(278, 40);
						char_literal104=(IToken)Match(input,89,Follow._89_in_type_name1320);  
						stream_89.Add(char_literal104);


						}
						break;

					}
					} finally { DebugExitSubRule(46); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 278:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(278, 48);
						// SugarCpp.g:278:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(278, 60);
						// SugarCpp.g:278:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(278, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(278, 85);
						// SugarCpp.g:278:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(278, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:279:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 279:9: -> type_single
					{
						DebugLocation(279, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(281, 4);
				char_literal105=(IToken)Match(input,88,Follow._88_in_type_name1361);  
				stream_88.Add(char_literal105);

				DebugLocation(281, 8);
				// SugarCpp.g:281:8: ( type_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==IDENT||LA48_0==88||LA48_0==134||LA48_0==154||LA48_0==161))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:8: type_list
					{
					DebugLocation(281, 8);
					PushFollow(Follow._type_list_in_type_name1363);
					type_list106=type_list();
					PopFollow();

					stream_type_list.Add(type_list106.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(281, 19);
				char_literal107=(IToken)Match(input,89,Follow._89_in_type_name1366);  
				stream_89.Add(char_literal107);

				DebugLocation(281, 23);
				string_literal108=(IToken)Match(input,99,Follow._99_in_type_name1368);  
				stream_99.Add(string_literal108);

				DebugLocation(281, 28);
				// SugarCpp.g:281:28: ( type_name | '(' ')' )
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==IDENT||LA49_0==134||LA49_0==154||LA49_0==161))
				{
					alt49 = 1;
				}
				else if ((LA49_0==88))
				{
					int LA49_2 = input.LA(2);

					if ((LA49_2==89))
					{
						int LA49_3 = input.LA(3);

						if ((LA49_3==99))
						{
							alt49 = 1;
						}
						else if ((LA49_3==DEDENT||LA49_3==IDENT||LA49_3==NEWLINE||(LA49_3>=88 && LA49_3<=89)||LA49_3==95||(LA49_3>=107 && LA49_3<=108)||LA49_3==114||LA49_3==117||(LA49_3>=140 && LA49_3<=141)||LA49_3==143||LA49_3==160||LA49_3==162||LA49_3==166||LA49_3==170))
						{
							alt49 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA49_2==IDENT||LA49_2==88||LA49_2==134||LA49_2==154||LA49_2==161))
					{
						alt49 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 49, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:29: type_name
					{
					DebugLocation(281, 29);
					PushFollow(Follow._type_name_in_type_name1371);
					type_name109=type_name();
					PopFollow();

					stream_type_name.Add(type_name109.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:41: '(' ')'
					{
					DebugLocation(281, 41);
					char_literal110=(IToken)Match(input,88,Follow._88_in_type_name1375);  
					stream_88.Add(char_literal110);

					DebugLocation(281, 45);
					char_literal111=(IToken)Match(input,89,Follow._89_in_type_name1377);  
					stream_89.Add(char_literal111);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(281, 53);
					// SugarCpp.g:281:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(281, 65);
					// SugarCpp.g:281:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(281, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(281, 76);
					// SugarCpp.g:281:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(281, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:284:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(285, 4);
			PushFollow(Follow._type_star_in_type_single1401);
			type_star112=type_star();
			PopFollow();

			stream_type_star.Add(type_star112.Tree);
			DebugLocation(285, 14);
			// SugarCpp.g:285:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt52=3;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt52 = 1;
				}
				break;
			case 124:
				{
				alt52 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 88:
			case 89:
			case 95:
			case 99:
			case 107:
			case 108:
			case 114:
			case 117:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
			case 170:
				{
				alt52 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:16: '&'
				{
				DebugLocation(285, 16);
				char_literal113=(IToken)Match(input,86,Follow._86_in_type_single1405);  
				stream_86.Add(char_literal113);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(285, 23);
					// SugarCpp.g:285:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(285, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(286, 7);
				char_literal114=(IToken)Match(input,124,Follow._124_in_type_single1421);  
				stream_124.Add(char_literal114);

				DebugLocation(286, 11);
				PushFollow(Follow._expr_in_type_single1423);
				expr115=expr();
				PopFollow();

				stream_expr.Add(expr115.Tree);
				DebugLocation(286, 16);
				// SugarCpp.g:286:16: ( ',' expr )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==95))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:286:17: ',' expr
						{
						DebugLocation(286, 17);
						char_literal116=(IToken)Match(input,95,Follow._95_in_type_single1426);  
						stream_95.Add(char_literal116);

						DebugLocation(286, 21);
						PushFollow(Follow._expr_in_type_single1428);
						expr117=expr();
						PopFollow();

						stream_expr.Add(expr117.Tree);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(286, 28);
				char_literal118=(IToken)Match(input,125,Follow._125_in_type_single1432);  
				stream_125.Add(char_literal118);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(286, 35);
					// SugarCpp.g:286:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(286, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(286, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(286, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:287:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:7: -> type_star
				{
					DebugLocation(287, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:291:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(292, 4);
			PushFollow(Follow._type_template_type_in_type_star1470);
			type_template_type119=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type119.Tree);
			DebugLocation(292, 23);
			// SugarCpp.g:292:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==90))
			{
				alt54 = 1;
			}
			else if ((LA54_0==DEDENT||LA54_0==IDENT||LA54_0==NEWLINE||LA54_0==86||(LA54_0>=88 && LA54_0<=89)||LA54_0==95||LA54_0==99||(LA54_0>=107 && LA54_0<=108)||LA54_0==114||LA54_0==117||LA54_0==124||(LA54_0>=140 && LA54_0<=141)||LA54_0==143||LA54_0==160||LA54_0==162||LA54_0==166||LA54_0==170))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:25: ( '*' )+
				{
				DebugLocation(292, 25);
				// SugarCpp.g:292:25: ( '*' )+
				int cnt53=0;
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==90))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:292:25: '*'
						{
						DebugLocation(292, 25);
						char_literal120=(IToken)Match(input,90,Follow._90_in_type_star1474);  
						stream_90.Add(char_literal120);


						}
						break;

					default:
						if (cnt53 >= 1)
							goto loop53;

						EarlyExitException eee53 = new EarlyExitException( 53, input );
						DebugRecognitionException(eee53);
						throw eee53;
					}
					cnt53++;
				}
				loop53:
					;

				} finally { DebugExitSubRule(53); }



				{
				// AST REWRITE
				// elements: 90, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(292, 33);
					// SugarCpp.g:292:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(292, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(292, 64);
					if (!(stream_90.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_90.HasNext )
					{
						DebugLocation(292, 64);
						adaptor.AddChild(root_1, stream_90.NextNode());

					}
					stream_90.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:293:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:10: -> type_template_type
				{
					DebugLocation(293, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:297:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 18);
		TraceIn("type_template_type", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken char_literal126 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(298, 4);
			PushFollow(Follow._type_ident_in_type_template_type1520);
			type_ident121=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident121.Tree);
			DebugLocation(298, 15);
			// SugarCpp.g:298:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==109))
			{
				alt57 = 1;
			}
			else if ((LA57_0==DEDENT||LA57_0==IDENT||LA57_0==NEWLINE||LA57_0==86||(LA57_0>=88 && LA57_0<=90)||LA57_0==95||LA57_0==99||(LA57_0>=107 && LA57_0<=108)||LA57_0==114||LA57_0==117||LA57_0==124||(LA57_0>=140 && LA57_0<=141)||LA57_0==143||LA57_0==160||LA57_0==162||LA57_0==166||LA57_0==170))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:298:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(298, 17);
				char_literal122=(IToken)Match(input,109,Follow._109_in_type_template_type1524);  
				stream_109.Add(char_literal122);

				DebugLocation(298, 21);
				// SugarCpp.g:298:21: ( type_name ( ',' type_name )* )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==88||LA56_0==134||LA56_0==154||LA56_0==161))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:298:22: type_name ( ',' type_name )*
					{
					DebugLocation(298, 22);
					PushFollow(Follow._type_name_in_type_template_type1527);
					type_name123=type_name();
					PopFollow();

					stream_type_name.Add(type_name123.Tree);
					DebugLocation(298, 32);
					// SugarCpp.g:298:32: ( ',' type_name )*
					try { DebugEnterSubRule(55);
					while (true)
					{
						int alt55=2;
						try { DebugEnterDecision(55, false);
						int LA55_0 = input.LA(1);

						if ((LA55_0==95))
						{
							alt55 = 1;
						}


						} finally { DebugExitDecision(55); }
						switch ( alt55 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:298:33: ',' type_name
							{
							DebugLocation(298, 33);
							char_literal124=(IToken)Match(input,95,Follow._95_in_type_template_type1530);  
							stream_95.Add(char_literal124);

							DebugLocation(298, 37);
							PushFollow(Follow._type_name_in_type_template_type1532);
							type_name125=type_name();
							PopFollow();

							stream_type_name.Add(type_name125.Tree);

							}
							break;

						default:
							goto loop55;
						}
					}

					loop55:
						;

					} finally { DebugExitSubRule(55); }


					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(298, 51);
				char_literal126=(IToken)Match(input,117,Follow._117_in_type_template_type1538);  
				stream_117.Add(char_literal126);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(298, 58);
					// SugarCpp.g:298:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(298, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(298, 85);
					// SugarCpp.g:298:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(298, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:299:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:8: -> type_ident
				{
					DebugLocation(299, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 18);
			LeaveRule("type_template_type", 18);
			LeaveRule_type_template_type();
		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:303:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 19);
		TraceIn("type_ident", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(303, 1);
		try
		{
			// SugarCpp.g:304:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(304, 4);
			// SugarCpp.g:304:4: ( 'const' )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==134))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:4: 'const'
				{
				DebugLocation(304, 4);
				string_literal127=(IToken)Match(input,134,Follow._134_in_type_ident1578);  
				stream_134.Add(string_literal127);


				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(304, 13);
			// SugarCpp.g:304:13: ( 'unsigned' )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==161))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:13: 'unsigned'
				{
				DebugLocation(304, 13);
				string_literal128=(IToken)Match(input,161,Follow._161_in_type_ident1581);  
				stream_161.Add(string_literal128);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(304, 25);
			// SugarCpp.g:304:25: ( 'struct' )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==154))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:25: 'struct'
				{
				DebugLocation(304, 25);
				string_literal129=(IToken)Match(input,154,Follow._154_in_type_ident1584);  
				stream_154.Add(string_literal129);


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(304, 35);
			PushFollow(Follow._ident_in_type_ident1587);
			ident130=ident();
			PopFollow();

			stream_ident.Add(ident130.Tree);


			{
			// AST REWRITE
			// elements: 154, ident, 161, 134
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 304:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(304, 44);
				// SugarCpp.g:304:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(304, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(304, 57);
				// SugarCpp.g:304:57: ( 'const' )?
				if (stream_134.HasNext)
				{
					DebugLocation(304, 57);
					adaptor.AddChild(root_1, stream_134.NextNode());

				}
				stream_134.Reset();
				DebugLocation(304, 66);
				// SugarCpp.g:304:66: ( 'unsigned' )?
				if (stream_161.HasNext)
				{
					DebugLocation(304, 66);
					adaptor.AddChild(root_1, stream_161.NextNode());

				}
				stream_161.Reset();
				DebugLocation(304, 78);
				// SugarCpp.g:304:78: ( 'struct' )?
				if (stream_154.HasNext)
				{
					DebugLocation(304, 78);
					adaptor.AddChild(root_1, stream_154.NextNode());

				}
				stream_154.Reset();
				DebugLocation(304, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 19);
			LeaveRule("type_ident", 19);
			LeaveRule_type_ident();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:307:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 20);
		TraceIn("generic_parameter_inside", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: ident ( ',' ident )*
			{
			DebugLocation(308, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1615);
			ident131=ident();
			PopFollow();

			stream_ident.Add(ident131.Tree);
			DebugLocation(308, 10);
			// SugarCpp.g:308:10: ( ',' ident )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==95))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:11: ',' ident
					{
					DebugLocation(308, 11);
					char_literal132=(IToken)Match(input,95,Follow._95_in_generic_parameter_inside1618);  
					stream_95.Add(char_literal132);

					DebugLocation(308, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1620);
					ident133=ident();
					PopFollow();

					stream_ident.Add(ident133.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(308, 26);
				// SugarCpp.g:308:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(308, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(308, 47);
				// SugarCpp.g:308:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(308, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 20);
			LeaveRule("generic_parameter_inside", 20);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:311:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 21);
		TraceIn("generic_parameter", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal134 = default(IToken);
		IToken char_literal136 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal134_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(311, 1);
		try
		{
			// SugarCpp.g:312:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:312:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(312, 4);
			char_literal134=(IToken)Match(input,109,Follow._109_in_generic_parameter1642);  
			stream_109.Add(char_literal134);

			DebugLocation(312, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1644);
			generic_parameter_inside135=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside135.Tree);
			DebugLocation(312, 33);
			char_literal136=(IToken)Match(input,117,Follow._117_in_generic_parameter1646);  
			stream_117.Add(char_literal136);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:37: -> generic_parameter_inside
			{
				DebugLocation(312, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 21);
			LeaveRule("generic_parameter", 21);
			LeaveRule_generic_parameter();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:315:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(316, 4);
			PushFollow(Follow._func_args_item_in_func_args1661);
			func_args_item137=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item137.Tree);
			DebugLocation(316, 19);
			// SugarCpp.g:316:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==95))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:20: ',' func_args_item
					{
					DebugLocation(316, 20);
					char_literal138=(IToken)Match(input,95,Follow._95_in_func_args1664);  
					stream_95.Add(char_literal138);

					DebugLocation(316, 24);
					PushFollow(Follow._func_args_item_in_func_args1666);
					func_args_item139=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item139.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(316, 44);
				// SugarCpp.g:316:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(316, 56);
				// SugarCpp.g:316:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(316, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:319:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 23);
		TraceIn("func_args_item", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken string_literal149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT))
			{
				alt66 = 1;
			}
			else if ((LA66_0==107))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(320, 4);
				PushFollow(Follow._ident_list_in_func_args_item1688);
				ident_list140=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list140.Tree);
				DebugLocation(320, 15);
				char_literal141=(IToken)Match(input,105,Follow._105_in_func_args_item1690);  
				stream_105.Add(char_literal141);

				DebugLocation(320, 19);
				PushFollow(Follow._type_name_in_func_args_item1692);
				type_name142=type_name();
				PopFollow();

				stream_type_name.Add(type_name142.Tree);
				DebugLocation(320, 29);
				// SugarCpp.g:320:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt65=3;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt65 = 1;
					}
					break;
				case 88:
					{
					alt65 = 2;
					}
					break;
				case 89:
				case 95:
					{
					alt65 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:31: ( '=' | ':=' ) expr
					{
					DebugLocation(320, 31);
					// SugarCpp.g:320:31: ( '=' | ':=' )
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==114))
					{
						alt63 = 1;
					}
					else if ((LA63_0==107))
					{
						alt63 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:320:32: '='
						{
						DebugLocation(320, 32);
						char_literal143=(IToken)Match(input,114,Follow._114_in_func_args_item1697);  
						stream_114.Add(char_literal143);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:320:38: ':='
						{
						DebugLocation(320, 38);
						string_literal144=(IToken)Match(input,107,Follow._107_in_func_args_item1701);  
						stream_107.Add(string_literal144);


						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(320, 44);
					PushFollow(Follow._expr_in_func_args_item1704);
					expr145=expr();
					PopFollow();

					stream_expr.Add(expr145.Tree);


					{
					// AST REWRITE
					// elements: ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 320:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(320, 53);
						// SugarCpp.g:320:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(320, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(320, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(320, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(320, 93);
						// SugarCpp.g:320:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(320, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:321:33: '(' ( expr_list )? ')'
					{
					DebugLocation(321, 33);
					char_literal146=(IToken)Match(input,88,Follow._88_in_func_args_item1752);  
					stream_88.Add(char_literal146);

					DebugLocation(321, 37);
					// SugarCpp.g:321:37: ( expr_list )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==IDENT||LA64_0==NUMBER||LA64_0==STRING||LA64_0==81||LA64_0==86||LA64_0==88||LA64_0==90||(LA64_0>=92 && LA64_0<=93)||(LA64_0>=96 && LA64_0<=97)||(LA64_0>=123 && LA64_0<=124)||LA64_0==146||LA64_0==148||(LA64_0>=150 && LA64_0<=151)||LA64_0==170))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:321:37: expr_list
						{
						DebugLocation(321, 37);
						PushFollow(Follow._expr_list_in_func_args_item1754);
						expr_list147=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list147.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(321, 48);
					char_literal148=(IToken)Match(input,89,Follow._89_in_func_args_item1757);  
					stream_89.Add(char_literal148);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 321:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(321, 56);
						// SugarCpp.g:321:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(321, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(321, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(321, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(321, 98);
						// SugarCpp.g:321:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(321, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:322:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 322:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(322, 18);
						// SugarCpp.g:322:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(322, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(322, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(322, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(324, 8);
				string_literal149=(IToken)Match(input,107,Follow._107_in_func_args_item1814); 
				string_literal149_tree = (CommonTree)adaptor.Create(string_literal149);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal149_tree, root_0);
				DebugLocation(324, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1818);
				modify_expr150=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr150.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 23);
			LeaveRule("func_args_item", 23);
			LeaveRule_func_args_item();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:327:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 24);
		TraceIn("operator", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set151 = default(IToken);

		CommonTree set151_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(328, 2);

			set151=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set151));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 24);
			LeaveRule("operator", 24);
			LeaveRule_operator();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:331:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 25);
		TraceIn("func_name", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal153 = default(IToken);
		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(331, 1);
		try
		{
			// SugarCpp.g:332:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==IDENT))
			{
				alt67 = 1;
			}
			else if ((LA67_0==88))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:332:4: ident
				{
				DebugLocation(332, 4);
				PushFollow(Follow._ident_in_func_name1852);
				ident152=ident();
				PopFollow();

				stream_ident.Add(ident152.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 332:10: -> ident
				{
					DebugLocation(332, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:333:4: '(' operator ')'
				{
				DebugLocation(333, 4);
				char_literal153=(IToken)Match(input,88,Follow._88_in_func_name1861);  
				stream_88.Add(char_literal153);

				DebugLocation(333, 8);
				PushFollow(Follow._operator_in_func_name1863);
				operator154=@operator();
				PopFollow();

				stream_operator.Add(operator154.Tree);
				DebugLocation(333, 17);
				char_literal155=(IToken)Match(input,89,Follow._89_in_func_name1865);  
				stream_89.Add(char_literal155);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 333:21: -> operator
				{
					DebugLocation(333, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 25);
			LeaveRule("func_name", 25);
			LeaveRule_func_name();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:336:1: func_def : ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 26);
		TraceIn("func_def", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken NEWLINE164 = default(IToken);
		IToken char_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree NEWLINE164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(336, 4);
		try
		{
			// SugarCpp.g:337:2: ( ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(337, 4);
			// SugarCpp.g:337:4: ( attribute )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==124))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:4: attribute
				{
				DebugLocation(337, 4);
				PushFollow(Follow._attribute_in_func_def1880);
				attribute156=attribute();
				PopFollow();

				stream_attribute.Add(attribute156.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(337, 15);
			// SugarCpp.g:337:15: ( type_name )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			try
			{
				alt69 = dfa69.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:15: type_name
				{
				DebugLocation(337, 15);
				PushFollow(Follow._type_name_in_func_def1883);
				type_name157=type_name();
				PopFollow();

				stream_type_name.Add(type_name157.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(337, 26);
			// SugarCpp.g:337:26: ( '~' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==170))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:26: '~'
				{
				DebugLocation(337, 26);
				char_literal158=(IToken)Match(input,170,Follow._170_in_func_def1886);  
				stream_170.Add(char_literal158);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(337, 31);
			PushFollow(Follow._func_name_in_func_def1889);
			func_name159=func_name();
			PopFollow();

			stream_func_name.Add(func_name159.Tree);
			DebugLocation(337, 41);
			// SugarCpp.g:337:41: ( generic_parameter )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==109))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:41: generic_parameter
				{
				DebugLocation(337, 41);
				PushFollow(Follow._generic_parameter_in_func_def1891);
				generic_parameter160=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter160.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(337, 60);
			char_literal161=(IToken)Match(input,88,Follow._88_in_func_def1894);  
			stream_88.Add(char_literal161);

			DebugLocation(337, 64);
			// SugarCpp.g:337:64: ( func_args )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==IDENT||LA72_0==107))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:64: func_args
				{
				DebugLocation(337, 64);
				PushFollow(Follow._func_args_in_func_def1896);
				func_args162=func_args();
				PopFollow();

				stream_func_args.Add(func_args162.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(337, 75);
			char_literal163=(IToken)Match(input,89,Follow._89_in_func_def1899);  
			stream_89.Add(char_literal163);

			DebugLocation(337, 79);
			// SugarCpp.g:337:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==NEWLINE))
			{
				alt74 = 1;
			}
			else if ((LA74_0==114))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:80: ( NEWLINE )+ stmt_block
				{
				DebugLocation(337, 80);
				// SugarCpp.g:337:80: ( NEWLINE )+
				int cnt73=0;
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==NEWLINE))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:337:80: NEWLINE
						{
						DebugLocation(337, 80);
						NEWLINE164=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1902);  
						stream_NEWLINE.Add(NEWLINE164);


						}
						break;

					default:
						if (cnt73 >= 1)
							goto loop73;

						EarlyExitException eee73 = new EarlyExitException( 73, input );
						DebugRecognitionException(eee73);
						throw eee73;
					}
					cnt73++;
				}
				loop73:
					;

				} finally { DebugExitSubRule(73); }

				DebugLocation(337, 89);
				PushFollow(Follow._stmt_block_in_func_def1905);
				stmt_block165=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block165.Tree);


				{
				// AST REWRITE
				// elements: type_name, stmt_block, 170, generic_parameter, func_args, attribute, func_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 337:100: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(337, 103);
					// SugarCpp.g:337:103: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(337, 105);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(337, 114);
					// SugarCpp.g:337:114: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(337, 114);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(337, 125);
					// SugarCpp.g:337:125: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(337, 125);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(337, 136);
					// SugarCpp.g:337:136: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(337, 136);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(337, 141);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(337, 151);
					// SugarCpp.g:337:151: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(337, 151);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(337, 170);
					// SugarCpp.g:337:170: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(337, 170);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(337, 181);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:338:27: '=' where_expr
				{
				DebugLocation(338, 27);
				char_literal166=(IToken)Match(input,114,Follow._114_in_func_def1958);  
				stream_114.Add(char_literal166);

				DebugLocation(338, 31);
				PushFollow(Follow._where_expr_in_func_def1960);
				where_expr167=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr167.Tree);


				{
				// AST REWRITE
				// elements: type_name, attribute, func_args, generic_parameter, where_expr, func_name, 170
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 338:43: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(338, 46);
					// SugarCpp.g:338:46: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(338, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(338, 57);
					// SugarCpp.g:338:57: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(338, 57);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(338, 68);
					// SugarCpp.g:338:68: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(338, 68);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(338, 79);
					// SugarCpp.g:338:79: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(338, 79);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(338, 84);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(338, 94);
					// SugarCpp.g:338:94: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(338, 94);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(338, 113);
					// SugarCpp.g:338:113: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(338, 113);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(338, 124);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 26);
			LeaveRule("func_def", 26);
			LeaveRule_func_def();
		}
		DebugLocation(339, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:341:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 27);
		TraceIn("stmt_block_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE169 = default(IToken);
		IToken NEWLINE171 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken NEWLINE173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE169_tree = default(CommonTree);
		CommonTree NEWLINE171_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree NEWLINE173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(341, 1);
		try
		{
			// SugarCpp.g:342:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==135||(LA79_0>=139 && LA79_0<=141)||LA79_0==147||LA79_0==155||LA79_0==158||LA79_0==160||LA79_0==162||LA79_0==166))
			{
				alt79 = 1;
			}
			else if ((LA79_0==IDENT||LA79_0==81||LA79_0==86||LA79_0==88||LA79_0==90||(LA79_0>=92 && LA79_0<=93)||(LA79_0>=96 && LA79_0<=97)||LA79_0==123||LA79_0==151||LA79_0==153||LA79_0==159||LA79_0==163||LA79_0==170))
			{
				alt79 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:342:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(342, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2001);
				stmt_complex168=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex168.Tree);
				DebugLocation(342, 17);
				// SugarCpp.g:342:17: ( NEWLINE )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==NEWLINE))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:342:17: NEWLINE
						{
						DebugLocation(342, 17);
						NEWLINE169=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2003);  
						stream_NEWLINE.Add(NEWLINE169);


						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 342:26: -> stmt_complex
				{
					DebugLocation(342, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:343:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(343, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2013);
				stmt_simple170=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple170.Tree);
				DebugLocation(343, 16);
				// SugarCpp.g:343:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==NEWLINE))
				{
					alt78 = 1;
				}
				else if ((LA78_0==108))
				{
					alt78 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:17: ( NEWLINE )+
					{
					DebugLocation(343, 17);
					// SugarCpp.g:343:17: ( NEWLINE )+
					int cnt76=0;
					try { DebugEnterSubRule(76);
					while (true)
					{
						int alt76=2;
						try { DebugEnterDecision(76, false);
						int LA76_0 = input.LA(1);

						if ((LA76_0==NEWLINE))
						{
							alt76 = 1;
						}


						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:343:17: NEWLINE
							{
							DebugLocation(343, 17);
							NEWLINE171=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2016);  
							stream_NEWLINE.Add(NEWLINE171);


							}
							break;

						default:
							if (cnt76 >= 1)
								goto loop76;

							EarlyExitException eee76 = new EarlyExitException( 76, input );
							DebugRecognitionException(eee76);
							throw eee76;
						}
						cnt76++;
					}
					loop76:
						;

					} finally { DebugExitSubRule(76); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:343:28: ';' ( NEWLINE )*
					{
					DebugLocation(343, 28);
					char_literal172=(IToken)Match(input,108,Follow._108_in_stmt_block_item2021);  
					stream_108.Add(char_literal172);

					DebugLocation(343, 32);
					// SugarCpp.g:343:32: ( NEWLINE )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_0 = input.LA(1);

						if ((LA77_0==NEWLINE))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:343:32: NEWLINE
							{
							DebugLocation(343, 32);
							NEWLINE173=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2023);  
							stream_NEWLINE.Add(NEWLINE173);


							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }


					}
					break;

				}
				} finally { DebugExitSubRule(78); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:42: -> stmt_simple
				{
					DebugLocation(343, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 27);
			LeaveRule("stmt_block_item", 27);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:346:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 28);
		TraceIn("stmt_block", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT174 = default(IToken);
		IToken NEWLINE175 = default(IToken);
		IToken DEDENT177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT174_tree = default(CommonTree);
		CommonTree NEWLINE175_tree = default(CommonTree);
		CommonTree DEDENT177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:347:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(347, 4);
			INDENT174=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2040);  
			stream_INDENT.Add(INDENT174);

			DebugLocation(347, 11);
			// SugarCpp.g:347:11: ( NEWLINE )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==NEWLINE))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:11: NEWLINE
					{
					DebugLocation(347, 11);
					NEWLINE175=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2042);  
					stream_NEWLINE.Add(NEWLINE175);


					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }

			DebugLocation(347, 20);
			// SugarCpp.g:347:20: ( stmt_block_item )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==IDENT||LA81_0==81||LA81_0==86||LA81_0==88||LA81_0==90||(LA81_0>=92 && LA81_0<=93)||(LA81_0>=96 && LA81_0<=97)||LA81_0==123||LA81_0==135||(LA81_0>=139 && LA81_0<=141)||LA81_0==147||LA81_0==151||LA81_0==153||LA81_0==155||(LA81_0>=158 && LA81_0<=160)||(LA81_0>=162 && LA81_0<=163)||LA81_0==166||LA81_0==170))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:20: stmt_block_item
					{
					DebugLocation(347, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2045);
					stmt_block_item176=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item176.Tree);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(347, 37);
			DEDENT177=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2048);  
			stream_DEDENT.Add(DEDENT177);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 347:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(347, 47);
				// SugarCpp.g:347:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(347, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(347, 60);
				// SugarCpp.g:347:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(347, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 28);
			LeaveRule("stmt_block", 28);
			LeaveRule_stmt_block();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:350:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 29);
		TraceIn("stmt", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( stmt_simple | stmt_complex )
			int alt82=2;
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==IDENT||LA82_0==81||LA82_0==86||LA82_0==88||LA82_0==90||(LA82_0>=92 && LA82_0<=93)||(LA82_0>=96 && LA82_0<=97)||LA82_0==123||LA82_0==151||LA82_0==153||LA82_0==159||LA82_0==163||LA82_0==170))
			{
				alt82 = 1;
			}
			else if ((LA82_0==135||(LA82_0>=139 && LA82_0<=141)||LA82_0==147||LA82_0==155||LA82_0==158||LA82_0==160||LA82_0==162||LA82_0==166))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(351, 4);
				PushFollow(Follow._stmt_simple_in_stmt2068);
				stmt_simple178=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple178.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:352:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(352, 4);
				PushFollow(Follow._stmt_complex_in_stmt2073);
				stmt_complex179=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex179.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 29);
			LeaveRule("stmt", 29);
			LeaveRule_stmt();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:355:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 30);
		TraceIn("stmt_simple", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr180 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(355, 1);
		try
		{
			// SugarCpp.g:356:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(356, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2084);
			stmt_expr180=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr180.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 30);
			LeaveRule("stmt_simple", 30);
			LeaveRule_stmt_simple();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:359:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 31);
		TraceIn("stmt_complex", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(359, 1);
		try
		{
			// SugarCpp.g:360:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt83=6;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case 141:
			case 160:
				{
				alt83 = 1;
				}
				break;
			case 140:
				{
				alt83 = 2;
				}
				break;
			case 147:
			case 162:
			case 166:
				{
				alt83 = 3;
				}
				break;
			case 158:
				{
				alt83 = 4;
				}
				break;
			case 155:
				{
				alt83 = 5;
				}
				break;
			case 135:
			case 139:
				{
				alt83 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2095);
				stmt_if181=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if181.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:361:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2100);
				stmt_for182=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for182.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:362:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(362, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2105);
				stmt_while183=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while183.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:363:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2110);
				stmt_try184=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try184.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:364:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2115);
				stmt_switch185=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch185.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:365:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(365, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2120);
				stmt_defer186=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer186.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 31);
			LeaveRule("stmt_complex", 31);
			LeaveRule_stmt_complex();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:368:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 32);
		TraceIn("stmt_expr", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken string_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item198 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(368, 1);
		try
		{
			// SugarCpp.g:369:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:369:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(369, 4);
			// SugarCpp.g:369:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:369:5: a= stmt_expr_item
			{
			DebugLocation(369, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2134);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 369:22: -> $a
			{
				DebugLocation(369, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(369, 29);
			// SugarCpp.g:369:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=6;
				try { DebugEnterDecision(85, false);
				switch (input.LA(1))
				{
				case 141:
					{
					alt85 = 1;
					}
					break;
				case 160:
					{
					alt85 = 2;
					}
					break;
				case 166:
					{
					alt85 = 3;
					}
					break;
				case 162:
					{
					alt85 = 4;
					}
					break;
				case 140:
					{
					alt85 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:369:31: 'if' expr
					{
					DebugLocation(369, 31);
					string_literal187=(IToken)Match(input,141,Follow._141_in_stmt_expr2144);  
					stream_141.Add(string_literal187);

					DebugLocation(369, 36);
					PushFollow(Follow._expr_in_stmt_expr2146);
					expr188=expr();
					PopFollow();

					stream_expr.Add(expr188.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(369, 44);
						// SugarCpp.g:369:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(369, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(369, 59);
						// SugarCpp.g:369:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(369, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:370:13: 'unless' expr
					{
					DebugLocation(370, 13);
					string_literal189=(IToken)Match(input,160,Follow._160_in_stmt_expr2175);  
					stream_160.Add(string_literal189);

					DebugLocation(370, 22);
					PushFollow(Follow._expr_in_stmt_expr2177);
					expr190=expr();
					PopFollow();

					stream_expr.Add(expr190.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(370, 30);
						// SugarCpp.g:370:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(370, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(370, 49);
						// SugarCpp.g:370:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(370, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:371:13: 'while' expr
					{
					DebugLocation(371, 13);
					string_literal191=(IToken)Match(input,166,Follow._166_in_stmt_expr2206);  
					stream_166.Add(string_literal191);

					DebugLocation(371, 21);
					PushFollow(Follow._expr_in_stmt_expr2208);
					expr192=expr();
					PopFollow();

					stream_expr.Add(expr192.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(371, 29);
						// SugarCpp.g:371:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(371, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(371, 47);
						// SugarCpp.g:371:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(371, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:372:13: 'until' expr
					{
					DebugLocation(372, 13);
					string_literal193=(IToken)Match(input,162,Follow._162_in_stmt_expr2237);  
					stream_162.Add(string_literal193);

					DebugLocation(372, 21);
					PushFollow(Follow._expr_in_stmt_expr2239);
					expr194=expr();
					PopFollow();

					stream_expr.Add(expr194.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 372:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(372, 29);
						// SugarCpp.g:372:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(372, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(372, 47);
						// SugarCpp.g:372:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(372, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:373:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(373, 13);
					string_literal195=(IToken)Match(input,140,Follow._140_in_stmt_expr2268);  
					stream_140.Add(string_literal195);

					DebugLocation(373, 19);
					PushFollow(Follow._for_item_in_stmt_expr2270);
					for_item196=for_item();
					PopFollow();

					stream_for_item.Add(for_item196.Tree);
					DebugLocation(373, 28);
					// SugarCpp.g:373:28: ( ',' for_item )*
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==95))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch ( alt84 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:373:29: ',' for_item
							{
							DebugLocation(373, 29);
							char_literal197=(IToken)Match(input,95,Follow._95_in_stmt_expr2273);  
							stream_95.Add(char_literal197);

							DebugLocation(373, 33);
							PushFollow(Follow._for_item_in_stmt_expr2275);
							for_item198=for_item();
							PopFollow();

							stream_for_item.Add(for_item198.Tree);

							}
							break;

						default:
							goto loop84;
						}
					}

					loop84:
						;

					} finally { DebugExitSubRule(84); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 373:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(373, 47);
						// SugarCpp.g:373:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(373, 58);
						// SugarCpp.g:373:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(373, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(373, 68);
						// SugarCpp.g:373:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(373, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 32);
			LeaveRule("stmt_expr", 32);
			LeaveRule_stmt_expr();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:377:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 33);
		TraceIn("stmt_expr_item", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(377, 1);
		try
		{
			// SugarCpp.g:378:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt86=5;
			try { DebugEnterDecision(86, false);
			try
			{
				alt86 = dfa86.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:378:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2317);
				stmt_alloc199=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc199.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:379:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2322);
				stmt_return200=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return200.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:380:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2327);
				stmt_using201=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using201.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:381:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2332);
				stmt_typedef202=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef202.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:382:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2337);
				stmt_modify203=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify203.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 33);
			LeaveRule("stmt_expr_item", 33);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:385:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 34);
		TraceIn("stmt_defer", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal204 = default(IToken);
		IToken string_literal206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal204_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt87=2;
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==135))
			{
				alt87 = 1;
			}
			else if ((LA87_0==139))
			{
				alt87 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:386:4: 'defer' stmt
				{
				DebugLocation(386, 4);
				string_literal204=(IToken)Match(input,135,Follow._135_in_stmt_defer2348);  
				stream_135.Add(string_literal204);

				DebugLocation(386, 12);
				PushFollow(Follow._stmt_in_stmt_defer2350);
				stmt205=stmt();
				PopFollow();

				stream_stmt.Add(stmt205.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(386, 20);
					// SugarCpp.g:386:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(386, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(386, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:387:4: 'finally' stmt
				{
				DebugLocation(387, 4);
				string_literal206=(IToken)Match(input,139,Follow._139_in_stmt_defer2363);  
				stream_139.Add(string_literal206);

				DebugLocation(387, 14);
				PushFollow(Follow._stmt_in_stmt_defer2365);
				stmt207=stmt();
				PopFollow();

				stream_stmt.Add(stmt207.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 387:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(387, 22);
					// SugarCpp.g:387:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(387, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(387, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 34);
			LeaveRule("stmt_defer", 34);
			LeaveRule_stmt_defer();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:390:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 35);
		TraceIn("stmt_typedef", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal208 = default(IToken);
		IToken char_literal210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal208_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: 'type' ident '=' type_name
			{
			DebugLocation(391, 4);
			string_literal208=(IToken)Match(input,159,Follow._159_in_stmt_typedef2384);  
			stream_159.Add(string_literal208);

			DebugLocation(391, 11);
			PushFollow(Follow._ident_in_stmt_typedef2386);
			ident209=ident();
			PopFollow();

			stream_ident.Add(ident209.Tree);
			DebugLocation(391, 17);
			char_literal210=(IToken)Match(input,114,Follow._114_in_stmt_typedef2388);  
			stream_114.Add(char_literal210);

			DebugLocation(391, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2390);
			type_name211=type_name();
			PopFollow();

			stream_type_name.Add(type_name211.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(391, 34);
				// SugarCpp.g:391:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(391, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(391, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(391, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 35);
			LeaveRule("stmt_typedef", 35);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:394:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 36);
		TraceIn("stmt_using_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal213_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(394, 36);
		try
		{
			// SugarCpp.g:394:16: ( ident | 'namespace' )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==IDENT))
			{
				alt88 = 1;
			}
			else if ((LA88_0==149))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 18);
				PushFollow(Follow._ident_in_stmt_using_item2409);
				ident212=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident212.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:394:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 26);
				string_literal213=(IToken)Match(input,149,Follow._149_in_stmt_using_item2413); 
				string_literal213_tree = (CommonTree)adaptor.Create(string_literal213);
				adaptor.AddChild(root_0, string_literal213_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 36);
			LeaveRule("stmt_using_item", 36);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(394, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:395:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 37);
		TraceIn("stmt_using", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal214 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item215 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal214_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(395, 1);
		try
		{
			// SugarCpp.g:396:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:396:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(396, 4);
			string_literal214=(IToken)Match(input,163,Follow._163_in_stmt_using2421);  
			stream_163.Add(string_literal214);

			DebugLocation(396, 12);
			// SugarCpp.g:396:12: ( stmt_using_item )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==149))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:12: stmt_using_item
					{
					DebugLocation(396, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2423);
					stmt_using_item215=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item215.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 396:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(396, 32);
				// SugarCpp.g:396:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(396, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(396, 45);
				// SugarCpp.g:396:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(396, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 37);
			LeaveRule("stmt_using", 37);
			LeaveRule_stmt_using();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:399:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 38);
		TraceIn("stmt_return", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:400:4: 'return' ( expr )?
			{
			DebugLocation(400, 4);
			string_literal216=(IToken)Match(input,153,Follow._153_in_stmt_return2444);  
			stream_153.Add(string_literal216);

			DebugLocation(400, 13);
			// SugarCpp.g:400:13: ( expr )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==IDENT||LA90_0==NUMBER||LA90_0==STRING||LA90_0==81||LA90_0==86||LA90_0==88||LA90_0==90||(LA90_0>=92 && LA90_0<=93)||(LA90_0>=96 && LA90_0<=97)||(LA90_0>=123 && LA90_0<=124)||LA90_0==146||LA90_0==148||(LA90_0>=150 && LA90_0<=151)||LA90_0==170))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:400:13: expr
				{
				DebugLocation(400, 13);
				PushFollow(Follow._expr_in_stmt_return2446);
				expr217=expr();
				PopFollow();

				stream_expr.Add(expr217.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(90); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 400:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(400, 22);
				// SugarCpp.g:400:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(400, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(400, 36);
				// SugarCpp.g:400:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(400, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 38);
			LeaveRule("stmt_return", 38);
			LeaveRule_stmt_return();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:403:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 39);
		TraceIn("inline_stmt_block", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(403, 1);
		try
		{
			// SugarCpp.g:404:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:404:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(404, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2467);
			stmt_simple218=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple218.Tree);
			DebugLocation(404, 16);
			// SugarCpp.g:404:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==108))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:404:17: ';' stmt_simple
					{
					DebugLocation(404, 17);
					char_literal219=(IToken)Match(input,108,Follow._108_in_inline_stmt_block2470);  
					stream_108.Add(char_literal219);

					DebugLocation(404, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2472);
					stmt_simple220=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple220.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 404:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(404, 38);
				// SugarCpp.g:404:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(404, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(404, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(404, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 39);
			LeaveRule("inline_stmt_block", 39);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:407:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 40);
		TraceIn("stmt_if", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal221 = default(IToken);
		IToken NEWLINE223 = default(IToken);
		IToken NEWLINE225 = default(IToken);
		IToken string_literal226 = default(IToken);
		IToken NEWLINE227 = default(IToken);
		IToken string_literal229 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken NEWLINE233 = default(IToken);
		IToken NEWLINE235 = default(IToken);
		IToken string_literal236 = default(IToken);
		IToken NEWLINE237 = default(IToken);
		IToken string_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree NEWLINE223_tree = default(CommonTree);
		CommonTree NEWLINE225_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree NEWLINE227_tree = default(CommonTree);
		CommonTree string_literal229_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree NEWLINE233_tree = default(CommonTree);
		CommonTree NEWLINE235_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree NEWLINE237_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt102=2;
			try { DebugEnterDecision(102, false);
			int LA102_0 = input.LA(1);

			if ((LA102_0==141))
			{
				alt102 = 1;
			}
			else if ((LA102_0==160))
			{
				alt102 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(408, 4);
				string_literal221=(IToken)Match(input,141,Follow._141_in_stmt_if2494);  
				stream_141.Add(string_literal221);

				DebugLocation(408, 9);
				PushFollow(Follow._expr_in_stmt_if2496);
				expr222=expr();
				PopFollow();

				stream_expr.Add(expr222.Tree);
				DebugLocation(408, 14);
				// SugarCpp.g:408:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==NEWLINE))
				{
					alt96 = 1;
				}
				else if ((LA96_0==156))
				{
					alt96 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:408:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(408, 15);
					// SugarCpp.g:408:15: ( NEWLINE )+
					int cnt92=0;
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch (alt92)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:408:15: NEWLINE
							{
							DebugLocation(408, 15);
							NEWLINE223=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2499);  
							stream_NEWLINE.Add(NEWLINE223);


							}
							break;

						default:
							if (cnt92 >= 1)
								goto loop92;

							EarlyExitException eee92 = new EarlyExitException( 92, input );
							DebugRecognitionException(eee92);
							throw eee92;
						}
						cnt92++;
					}
					loop92:
						;

					} finally { DebugExitSubRule(92); }

					DebugLocation(408, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2502);
					stmt_block224=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block224.Tree);
					DebugLocation(408, 35);
					// SugarCpp.g:408:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, false);
					try
					{
						alt95 = dfa95.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:408:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(408, 36);
						// SugarCpp.g:408:36: ( NEWLINE )*
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, false);
							int LA93_0 = input.LA(1);

							if ((LA93_0==NEWLINE))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch ( alt93 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:408:36: NEWLINE
								{
								DebugLocation(408, 36);
								NEWLINE225=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2505);  
								stream_NEWLINE.Add(NEWLINE225);


								}
								break;

							default:
								goto loop93;
							}
						}

						loop93:
							;

						} finally { DebugExitSubRule(93); }

						DebugLocation(408, 45);
						string_literal226=(IToken)Match(input,137,Follow._137_in_stmt_if2508);  
						stream_137.Add(string_literal226);

						DebugLocation(408, 52);
						// SugarCpp.g:408:52: ( NEWLINE )+
						int cnt94=0;
						try { DebugEnterSubRule(94);
						while (true)
						{
							int alt94=2;
							try { DebugEnterDecision(94, false);
							int LA94_0 = input.LA(1);

							if ((LA94_0==NEWLINE))
							{
								alt94 = 1;
							}


							} finally { DebugExitDecision(94); }
							switch (alt94)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:408:52: NEWLINE
								{
								DebugLocation(408, 52);
								NEWLINE227=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2510);  
								stream_NEWLINE.Add(NEWLINE227);


								}
								break;

							default:
								if (cnt94 >= 1)
									goto loop94;

								EarlyExitException eee94 = new EarlyExitException( 94, input );
								DebugRecognitionException(eee94);
								throw eee94;
							}
							cnt94++;
						}
						loop94:
							;

						} finally { DebugExitSubRule(94); }

						DebugLocation(408, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2513);
						stmt_block228=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block228.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(95); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(408, 77);
						// SugarCpp.g:408:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(408, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(408, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(408, 103);
						// SugarCpp.g:408:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(408, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:409:16: 'then' inline_stmt_block
					{
					DebugLocation(409, 16);
					string_literal229=(IToken)Match(input,156,Follow._156_in_stmt_if2545);  
					stream_156.Add(string_literal229);

					DebugLocation(409, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2547);
					inline_stmt_block230=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block230.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 409:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(409, 44);
						// SugarCpp.g:409:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(409, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(409, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:411:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(411, 4);
				string_literal231=(IToken)Match(input,160,Follow._160_in_stmt_if2568);  
				stream_160.Add(string_literal231);

				DebugLocation(411, 13);
				PushFollow(Follow._expr_in_stmt_if2570);
				expr232=expr();
				PopFollow();

				stream_expr.Add(expr232.Tree);
				DebugLocation(411, 18);
				// SugarCpp.g:411:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==NEWLINE))
				{
					alt101 = 1;
				}
				else if ((LA101_0==156))
				{
					alt101 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:411:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(411, 19);
					// SugarCpp.g:411:19: ( NEWLINE )+
					int cnt97=0;
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_0 = input.LA(1);

						if ((LA97_0==NEWLINE))
						{
							alt97 = 1;
						}


						} finally { DebugExitDecision(97); }
						switch (alt97)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:411:19: NEWLINE
							{
							DebugLocation(411, 19);
							NEWLINE233=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2573);  
							stream_NEWLINE.Add(NEWLINE233);


							}
							break;

						default:
							if (cnt97 >= 1)
								goto loop97;

							EarlyExitException eee97 = new EarlyExitException( 97, input );
							DebugRecognitionException(eee97);
							throw eee97;
						}
						cnt97++;
					}
					loop97:
						;

					} finally { DebugExitSubRule(97); }

					DebugLocation(411, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2576);
					stmt_block234=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block234.Tree);
					DebugLocation(411, 39);
					// SugarCpp.g:411:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, false);
					try
					{
						alt100 = dfa100.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:411:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(411, 40);
						// SugarCpp.g:411:40: ( NEWLINE )*
						try { DebugEnterSubRule(98);
						while (true)
						{
							int alt98=2;
							try { DebugEnterDecision(98, false);
							int LA98_0 = input.LA(1);

							if ((LA98_0==NEWLINE))
							{
								alt98 = 1;
							}


							} finally { DebugExitDecision(98); }
							switch ( alt98 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:411:40: NEWLINE
								{
								DebugLocation(411, 40);
								NEWLINE235=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2579);  
								stream_NEWLINE.Add(NEWLINE235);


								}
								break;

							default:
								goto loop98;
							}
						}

						loop98:
							;

						} finally { DebugExitSubRule(98); }

						DebugLocation(411, 49);
						string_literal236=(IToken)Match(input,137,Follow._137_in_stmt_if2582);  
						stream_137.Add(string_literal236);

						DebugLocation(411, 56);
						// SugarCpp.g:411:56: ( NEWLINE )+
						int cnt99=0;
						try { DebugEnterSubRule(99);
						while (true)
						{
							int alt99=2;
							try { DebugEnterDecision(99, false);
							int LA99_0 = input.LA(1);

							if ((LA99_0==NEWLINE))
							{
								alt99 = 1;
							}


							} finally { DebugExitDecision(99); }
							switch (alt99)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:411:56: NEWLINE
								{
								DebugLocation(411, 56);
								NEWLINE237=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2584);  
								stream_NEWLINE.Add(NEWLINE237);


								}
								break;

							default:
								if (cnt99 >= 1)
									goto loop99;

								EarlyExitException eee99 = new EarlyExitException( 99, input );
								DebugRecognitionException(eee99);
								throw eee99;
							}
							cnt99++;
						}
						loop99:
							;

						} finally { DebugExitSubRule(99); }

						DebugLocation(411, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2587);
						stmt_block238=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block238.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(100); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 411:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(411, 81);
						// SugarCpp.g:411:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(411, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(411, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(411, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(411, 111);
						// SugarCpp.g:411:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(411, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:412:20: 'then' inline_stmt_block
					{
					DebugLocation(412, 20);
					string_literal239=(IToken)Match(input,156,Follow._156_in_stmt_if2623);  
					stream_156.Add(string_literal239);

					DebugLocation(412, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2625);
					inline_stmt_block240=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block240.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(412, 48);
						// SugarCpp.g:412:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(412, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(412, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 40);
			LeaveRule("stmt_if", 40);
			LeaveRule_stmt_if();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:416:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 41);
		TraceIn("stmt_while", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken NEWLINE243 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken NEWLINE249 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree NEWLINE243_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree NEWLINE249_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(416, 1);
		try
		{
			// SugarCpp.g:417:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt109=3;
			try { DebugEnterDecision(109, false);
			switch (input.LA(1))
			{
			case 166:
				{
				alt109 = 1;
				}
				break;
			case 162:
				{
				alt109 = 2;
				}
				break;
			case 147:
				{
				alt109 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:417:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(417, 4);
				string_literal241=(IToken)Match(input,166,Follow._166_in_stmt_while2656);  
				stream_166.Add(string_literal241);

				DebugLocation(417, 12);
				PushFollow(Follow._expr_in_stmt_while2658);
				expr242=expr();
				PopFollow();

				stream_expr.Add(expr242.Tree);
				DebugLocation(417, 17);
				// SugarCpp.g:417:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}
				else if ((LA104_0==156))
				{
					alt104 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:417:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(417, 19);
					// SugarCpp.g:417:19: ( NEWLINE )+
					int cnt103=0;
					try { DebugEnterSubRule(103);
					while (true)
					{
						int alt103=2;
						try { DebugEnterDecision(103, false);
						int LA103_0 = input.LA(1);

						if ((LA103_0==NEWLINE))
						{
							alt103 = 1;
						}


						} finally { DebugExitDecision(103); }
						switch (alt103)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:417:19: NEWLINE
							{
							DebugLocation(417, 19);
							NEWLINE243=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2662);  
							stream_NEWLINE.Add(NEWLINE243);


							}
							break;

						default:
							if (cnt103 >= 1)
								goto loop103;

							EarlyExitException eee103 = new EarlyExitException( 103, input );
							DebugRecognitionException(eee103);
							throw eee103;
						}
						cnt103++;
					}
					loop103:
						;

					} finally { DebugExitSubRule(103); }

					DebugLocation(417, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2665);
					stmt_block244=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block244.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(417, 42);
						// SugarCpp.g:417:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(417, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(417, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:418:13: 'then' inline_stmt_block
					{
					DebugLocation(418, 13);
					string_literal245=(IToken)Match(input,156,Follow._156_in_stmt_while2689);  
					stream_156.Add(string_literal245);

					DebugLocation(418, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2691);
					inline_stmt_block246=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block246.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(418, 41);
						// SugarCpp.g:418:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(418, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(418, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:420:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(420, 4);
				string_literal247=(IToken)Match(input,162,Follow._162_in_stmt_while2715);  
				stream_162.Add(string_literal247);

				DebugLocation(420, 12);
				PushFollow(Follow._expr_in_stmt_while2717);
				expr248=expr();
				PopFollow();

				stream_expr.Add(expr248.Tree);
				DebugLocation(420, 17);
				// SugarCpp.g:420:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==NEWLINE))
				{
					alt106 = 1;
				}
				else if ((LA106_0==156))
				{
					alt106 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:420:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(420, 19);
					// SugarCpp.g:420:19: ( NEWLINE )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==NEWLINE))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:420:19: NEWLINE
							{
							DebugLocation(420, 19);
							NEWLINE249=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2721);  
							stream_NEWLINE.Add(NEWLINE249);


							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(420, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2724);
					stmt_block250=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block250.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(420, 42);
						// SugarCpp.g:420:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(420, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(420, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:421:13: 'then' inline_stmt_block
					{
					DebugLocation(421, 13);
					string_literal251=(IToken)Match(input,156,Follow._156_in_stmt_while2748);  
					stream_156.Add(string_literal251);

					DebugLocation(421, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2750);
					inline_stmt_block252=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block252.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 421:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(421, 41);
						// SugarCpp.g:421:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(421, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(421, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(421, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(106); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:423:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(423, 4);
				string_literal253=(IToken)Match(input,147,Follow._147_in_stmt_while2774);  
				stream_147.Add(string_literal253);

				DebugLocation(423, 11);
				// SugarCpp.g:423:11: ( expr )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==IDENT||LA107_0==NUMBER||LA107_0==STRING||LA107_0==81||LA107_0==86||LA107_0==88||LA107_0==90||(LA107_0>=92 && LA107_0<=93)||(LA107_0>=96 && LA107_0<=97)||(LA107_0>=123 && LA107_0<=124)||LA107_0==146||LA107_0==148||(LA107_0>=150 && LA107_0<=151)||LA107_0==170))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:11: expr
					{
					DebugLocation(423, 11);
					PushFollow(Follow._expr_in_stmt_while2776);
					expr254=expr();
					PopFollow();

					stream_expr.Add(expr254.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(423, 17);
				// SugarCpp.g:423:17: ( NEWLINE )+
				int cnt108=0;
				try { DebugEnterSubRule(108);
				while (true)
				{
					int alt108=2;
					try { DebugEnterDecision(108, false);
					int LA108_0 = input.LA(1);

					if ((LA108_0==NEWLINE))
					{
						alt108 = 1;
					}


					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:423:17: NEWLINE
						{
						DebugLocation(423, 17);
						NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2779);  
						stream_NEWLINE.Add(NEWLINE255);


						}
						break;

					default:
						if (cnt108 >= 1)
							goto loop108;

						EarlyExitException eee108 = new EarlyExitException( 108, input );
						DebugRecognitionException(eee108);
						throw eee108;
					}
					cnt108++;
				}
				loop108:
					;

				} finally { DebugExitSubRule(108); }

				DebugLocation(423, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2782);
				stmt_block256=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block256.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 423:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(423, 40);
					// SugarCpp.g:423:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(423, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(423, 52);
					// SugarCpp.g:423:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(423, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(423, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 41);
			LeaveRule("stmt_while", 41);
			LeaveRule_stmt_while();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:426:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 42);
		TraceIn("for_range", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal258 = default(IToken);
		IToken string_literal259 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken string_literal262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:427:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(427, 4);
			PushFollow(Follow._ident_in_for_range2804);
			ident257=ident();
			PopFollow();

			stream_ident.Add(ident257.Tree);
			DebugLocation(427, 10);
			string_literal258=(IToken)Match(input,110,Follow._110_in_for_range2806);  
			stream_110.Add(string_literal258);

			DebugLocation(427, 16);
			PushFollow(Follow._expr_in_for_range2810);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(427, 22);
			// SugarCpp.g:427:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt112=3;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case 157:
				{
				alt112 = 1;
				}
				break;
			case 136:
				{
				alt112 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 95:
			case 108:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
				{
				alt112 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(427, 23);
				string_literal259=(IToken)Match(input,157,Follow._157_in_for_range2813);  
				stream_157.Add(string_literal259);

				DebugLocation(427, 29);
				PushFollow(Follow._expr_in_for_range2817);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(427, 35);
				// SugarCpp.g:427:35: ( 'by' c= expr )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==131))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:36: 'by' c= expr
					{
					DebugLocation(427, 36);
					string_literal260=(IToken)Match(input,131,Follow._131_in_for_range2820);  
					stream_131.Add(string_literal260);

					DebugLocation(427, 42);
					PushFollow(Follow._expr_in_for_range2824);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(110); }



				{
				// AST REWRITE
				// elements: ident, c, a, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 427:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(427, 53);
					// SugarCpp.g:427:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(427, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(427, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(427, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(427, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(427, 80);
					// SugarCpp.g:427:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(427, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(428, 8);
				string_literal261=(IToken)Match(input,136,Follow._136_in_for_range2853);  
				stream_136.Add(string_literal261);

				DebugLocation(428, 18);
				PushFollow(Follow._expr_in_for_range2857);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(428, 24);
				// SugarCpp.g:428:24: ( 'by' c= expr )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==131))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:25: 'by' c= expr
					{
					DebugLocation(428, 25);
					string_literal262=(IToken)Match(input,131,Follow._131_in_for_range2860);  
					stream_131.Add(string_literal262);

					DebugLocation(428, 31);
					PushFollow(Follow._expr_in_for_range2864);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(111); }



				{
				// AST REWRITE
				// elements: ident, a, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 428:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(428, 42);
					// SugarCpp.g:428:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(428, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(428, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(428, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(428, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(428, 74);
					// SugarCpp.g:428:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(428, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:429:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 429:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(429, 12);
					// SugarCpp.g:429:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(429, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(429, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(429, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 42);
			LeaveRule("for_range", 42);
			LeaveRule_for_range();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:433:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 43);
		TraceIn("for_when", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: expr
			{
			DebugLocation(434, 4);
			PushFollow(Follow._expr_in_for_when2922);
			expr263=expr();
			PopFollow();

			stream_expr.Add(expr263.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 434:9: -> ^( For_Item_When expr )
			{
				DebugLocation(434, 12);
				// SugarCpp.g:434:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(434, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(434, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 43);
			LeaveRule("for_when", 43);
			LeaveRule_for_when();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:437:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 44);
		TraceIn("for_item", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( for_range | for_when )
			int alt113=2;
			try { DebugEnterDecision(113, false);
			try
			{
				alt113 = dfa113.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:438:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(438, 4);
				PushFollow(Follow._for_range_in_for_item2941);
				for_range264=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range264.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:439:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(439, 4);
				PushFollow(Follow._for_when_in_for_item2946);
				for_when265=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when265.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 44);
			LeaveRule("for_item", 44);
			LeaveRule_for_item();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:442:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 45);
		TraceIn("stmt_for", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal266 = default(IToken);
		IToken char_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree char_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(442, 1);
		try
		{
			// SugarCpp.g:443:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:443:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(443, 4);
			string_literal266=(IToken)Match(input,140,Follow._140_in_stmt_for2957);  
			stream_140.Add(string_literal266);

			DebugLocation(443, 10);
			// SugarCpp.g:443:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:443:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(443, 12);
			PushFollow(Follow._for_item_in_stmt_for2961);
			for_item267=for_item();
			PopFollow();

			stream_for_item.Add(for_item267.Tree);
			DebugLocation(443, 21);
			// SugarCpp.g:443:21: ( ',' for_item )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==95))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:22: ',' for_item
					{
					DebugLocation(443, 22);
					char_literal268=(IToken)Match(input,95,Follow._95_in_stmt_for2964);  
					stream_95.Add(char_literal268);

					DebugLocation(443, 26);
					PushFollow(Follow._for_item_in_stmt_for2966);
					for_item269=for_item();
					PopFollow();

					stream_for_item.Add(for_item269.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }

			DebugLocation(443, 37);
			// SugarCpp.g:443:37: ( NEWLINE )+
			int cnt115=0;
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==NEWLINE))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:37: NEWLINE
					{
					DebugLocation(443, 37);
					NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2970);  
					stream_NEWLINE.Add(NEWLINE270);


					}
					break;

				default:
					if (cnt115 >= 1)
						goto loop115;

					EarlyExitException eee115 = new EarlyExitException( 115, input );
					DebugRecognitionException(eee115);
					throw eee115;
				}
				cnt115++;
			}
			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(443, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2973);
			stmt_block271=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block271.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 443:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(443, 60);
				// SugarCpp.g:443:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(443, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(443, 71);
				// SugarCpp.g:443:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(443, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(443, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 45);
			LeaveRule("stmt_for", 45);
			LeaveRule_stmt_for();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:448:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 46);
		TraceIn("stmt_try", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal272 = default(IToken);
		IToken NEWLINE273 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		IToken string_literal276 = default(IToken);
		IToken NEWLINE278 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block279 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree NEWLINE273_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		CommonTree NEWLINE278_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:449:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(449, 4);
			string_literal272=(IToken)Match(input,158,Follow._158_in_stmt_try3004);  
			stream_158.Add(string_literal272);

			DebugLocation(449, 10);
			// SugarCpp.g:449:10: ( NEWLINE )+
			int cnt116=0;
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==NEWLINE))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:10: NEWLINE
					{
					DebugLocation(449, 10);
					NEWLINE273=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3006);  
					stream_NEWLINE.Add(NEWLINE273);


					}
					break;

				default:
					if (cnt116 >= 1)
						goto loop116;

					EarlyExitException eee116 = new EarlyExitException( 116, input );
					DebugRecognitionException(eee116);
					throw eee116;
				}
				cnt116++;
			}
			loop116:
				;

			} finally { DebugExitSubRule(116); }

			DebugLocation(449, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3009);
			stmt_block274=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block274.Tree);
			DebugLocation(449, 30);
			// SugarCpp.g:449:30: ( NEWLINE )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:30: NEWLINE
					{
					DebugLocation(449, 30);
					NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3011);  
					stream_NEWLINE.Add(NEWLINE275);


					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }

			DebugLocation(449, 39);
			string_literal276=(IToken)Match(input,132,Follow._132_in_stmt_try3014);  
			stream_132.Add(string_literal276);

			DebugLocation(449, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3016);
			stmt_alloc277=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc277.Tree);
			DebugLocation(449, 58);
			// SugarCpp.g:449:58: ( NEWLINE )+
			int cnt118=0;
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==NEWLINE))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:58: NEWLINE
					{
					DebugLocation(449, 58);
					NEWLINE278=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3018);  
					stream_NEWLINE.Add(NEWLINE278);


					}
					break;

				default:
					if (cnt118 >= 1)
						goto loop118;

					EarlyExitException eee118 = new EarlyExitException( 118, input );
					DebugRecognitionException(eee118);
					throw eee118;
				}
				cnt118++;
			}
			loop118:
				;

			} finally { DebugExitSubRule(118); }

			DebugLocation(449, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3021);
			stmt_block279=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block279.Tree);


			{
			// AST REWRITE
			// elements: stmt_alloc, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 449:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(449, 81);
				// SugarCpp.g:449:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(449, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(449, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(449, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(449, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 46);
			LeaveRule("stmt_try", 46);
			LeaveRule_stmt_try();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:452:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 47);
		TraceIn("switch_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal280 = default(IToken);
		IToken char_literal282 = default(IToken);
		IToken NEWLINE284 = default(IToken);
		IToken string_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree NEWLINE284_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(452, 1);
		try
		{
			// SugarCpp.g:453:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(453, 4);
			string_literal280=(IToken)Match(input,164,Follow._164_in_switch_item3044);  
			stream_164.Add(string_literal280);

			DebugLocation(453, 11);
			PushFollow(Follow._expr_in_switch_item3046);
			expr281=expr();
			PopFollow();

			stream_expr.Add(expr281.Tree);
			DebugLocation(453, 16);
			// SugarCpp.g:453:16: ( ',' expr )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==95))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:17: ',' expr
					{
					DebugLocation(453, 17);
					char_literal282=(IToken)Match(input,95,Follow._95_in_switch_item3049);  
					stream_95.Add(char_literal282);

					DebugLocation(453, 21);
					PushFollow(Follow._expr_in_switch_item3051);
					expr283=expr();
					PopFollow();

					stream_expr.Add(expr283.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }

			DebugLocation(453, 28);
			// SugarCpp.g:453:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, false);
			int LA121_0 = input.LA(1);

			if ((LA121_0==NEWLINE))
			{
				alt121 = 1;
			}
			else if ((LA121_0==156))
			{
				alt121 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:453:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(453, 30);
				// SugarCpp.g:453:30: ( NEWLINE )+
				int cnt120=0;
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_0 = input.LA(1);

					if ((LA120_0==NEWLINE))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:453:30: NEWLINE
						{
						DebugLocation(453, 30);
						NEWLINE284=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3057);  
						stream_NEWLINE.Add(NEWLINE284);


						}
						break;

					default:
						if (cnt120 >= 1)
							goto loop120;

						EarlyExitException eee120 = new EarlyExitException( 120, input );
						DebugRecognitionException(eee120);
						throw eee120;
					}
					cnt120++;
				}
				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(453, 39);
				PushFollow(Follow._stmt_block_in_switch_item3060);
				stmt_block285=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block285.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 453:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(453, 53);
					// SugarCpp.g:453:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(453, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(453, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(453, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(453, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:454:30: 'then' inline_stmt_block
				{
				DebugLocation(454, 30);
				string_literal286=(IToken)Match(input,156,Follow._156_in_switch_item3102);  
				stream_156.Add(string_literal286);

				DebugLocation(454, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3104);
				inline_stmt_block287=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block287.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 454:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(454, 58);
					// SugarCpp.g:454:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(454, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(454, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(454, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(454, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 47);
			LeaveRule("switch_item", 47);
			LeaveRule_switch_item();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:458:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 48);
		TraceIn("stmt_switch", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal288 = default(IToken);
		IToken NEWLINE290 = default(IToken);
		IToken INDENT291 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		IToken NEWLINE294 = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken NEWLINE296 = default(IToken);
		IToken NEWLINE298 = default(IToken);
		IToken DEDENT299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block297 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree NEWLINE290_tree = default(CommonTree);
		CommonTree INDENT291_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		CommonTree NEWLINE294_tree = default(CommonTree);
		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree NEWLINE296_tree = default(CommonTree);
		CommonTree NEWLINE298_tree = default(CommonTree);
		CommonTree DEDENT299_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(458, 1);
		try
		{
			// SugarCpp.g:459:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:459:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(459, 4);
			string_literal288=(IToken)Match(input,155,Follow._155_in_stmt_switch3140);  
			stream_155.Add(string_literal288);

			DebugLocation(459, 13);
			// SugarCpp.g:459:13: ( expr )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==IDENT||LA122_0==NUMBER||LA122_0==STRING||LA122_0==81||LA122_0==86||LA122_0==88||LA122_0==90||(LA122_0>=92 && LA122_0<=93)||(LA122_0>=96 && LA122_0<=97)||(LA122_0>=123 && LA122_0<=124)||LA122_0==146||LA122_0==148||(LA122_0>=150 && LA122_0<=151)||LA122_0==170))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:459:13: expr
				{
				DebugLocation(459, 13);
				PushFollow(Follow._expr_in_stmt_switch3142);
				expr289=expr();
				PopFollow();

				stream_expr.Add(expr289.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(459, 19);
			// SugarCpp.g:459:19: ( NEWLINE )+
			int cnt123=0;
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==NEWLINE))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:19: NEWLINE
					{
					DebugLocation(459, 19);
					NEWLINE290=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3145);  
					stream_NEWLINE.Add(NEWLINE290);


					}
					break;

				default:
					if (cnt123 >= 1)
						goto loop123;

					EarlyExitException eee123 = new EarlyExitException( 123, input );
					DebugRecognitionException(eee123);
					throw eee123;
				}
				cnt123++;
			}
			loop123:
				;

			} finally { DebugExitSubRule(123); }

			DebugLocation(459, 28);
			INDENT291=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3148);  
			stream_INDENT.Add(INDENT291);

			DebugLocation(459, 35);
			// SugarCpp.g:459:35: ( NEWLINE )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==NEWLINE))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:35: NEWLINE
					{
					DebugLocation(459, 35);
					NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3150);  
					stream_NEWLINE.Add(NEWLINE292);


					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }

			DebugLocation(459, 44);
			// SugarCpp.g:459:44: ( switch_item ( NEWLINE )+ )+
			int cnt126=0;
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==164))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:45: switch_item ( NEWLINE )+
					{
					DebugLocation(459, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3154);
					switch_item293=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item293.Tree);
					DebugLocation(459, 57);
					// SugarCpp.g:459:57: ( NEWLINE )+
					int cnt125=0;
					try { DebugEnterSubRule(125);
					while (true)
					{
						int alt125=2;
						try { DebugEnterDecision(125, false);
						int LA125_0 = input.LA(1);

						if ((LA125_0==NEWLINE))
						{
							alt125 = 1;
						}


						} finally { DebugExitDecision(125); }
						switch (alt125)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:459:57: NEWLINE
							{
							DebugLocation(459, 57);
							NEWLINE294=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3156);  
							stream_NEWLINE.Add(NEWLINE294);


							}
							break;

						default:
							if (cnt125 >= 1)
								goto loop125;

							EarlyExitException eee125 = new EarlyExitException( 125, input );
							DebugRecognitionException(eee125);
							throw eee125;
						}
						cnt125++;
					}
					loop125:
						;

					} finally { DebugExitSubRule(125); }


					}
					break;

				default:
					if (cnt126 >= 1)
						goto loop126;

					EarlyExitException eee126 = new EarlyExitException( 126, input );
					DebugRecognitionException(eee126);
					throw eee126;
				}
				cnt126++;
			}
			loop126:
				;

			} finally { DebugExitSubRule(126); }

			DebugLocation(459, 68);
			// SugarCpp.g:459:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==137))
			{
				alt129 = 1;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:459:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(459, 69);
				string_literal295=(IToken)Match(input,137,Follow._137_in_stmt_switch3162);  
				stream_137.Add(string_literal295);

				DebugLocation(459, 76);
				// SugarCpp.g:459:76: ( NEWLINE )+
				int cnt127=0;
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=2;
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==NEWLINE))
					{
						alt127 = 1;
					}


					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:459:76: NEWLINE
						{
						DebugLocation(459, 76);
						NEWLINE296=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3164);  
						stream_NEWLINE.Add(NEWLINE296);


						}
						break;

					default:
						if (cnt127 >= 1)
							goto loop127;

						EarlyExitException eee127 = new EarlyExitException( 127, input );
						DebugRecognitionException(eee127);
						throw eee127;
					}
					cnt127++;
				}
				loop127:
					;

				} finally { DebugExitSubRule(127); }

				DebugLocation(459, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3167);
				stmt_block297=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block297.Tree);
				DebugLocation(459, 96);
				// SugarCpp.g:459:96: ( NEWLINE )*
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==NEWLINE))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch ( alt128 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:459:96: NEWLINE
						{
						DebugLocation(459, 96);
						NEWLINE298=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3169);  
						stream_NEWLINE.Add(NEWLINE298);


						}
						break;

					default:
						goto loop128;
					}
				}

				loop128:
					;

				} finally { DebugExitSubRule(128); }


				}
				break;

			}
			} finally { DebugExitSubRule(129); }

			DebugLocation(459, 107);
			DEDENT299=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3174);  
			stream_DEDENT.Add(DEDENT299);



			{
			// AST REWRITE
			// elements: switch_item, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 459:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(459, 117);
				// SugarCpp.g:459:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(459, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(459, 131);
				// SugarCpp.g:459:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(459, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(459, 137);
				// SugarCpp.g:459:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(459, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(459, 150);
				// SugarCpp.g:459:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(459, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 48);
			LeaveRule("stmt_switch", 48);
			LeaveRule_stmt_switch();
		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:462:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 49);
		TraceIn("ident_list", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(462, 1);
		try
		{
			// SugarCpp.g:463:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:463:4: ident ( ',' ident )*
			{
			DebugLocation(463, 4);
			PushFollow(Follow._ident_in_ident_list3200);
			ident300=ident();
			PopFollow();

			stream_ident.Add(ident300.Tree);
			DebugLocation(463, 10);
			// SugarCpp.g:463:10: ( ',' ident )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==95))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:11: ',' ident
					{
					DebugLocation(463, 11);
					char_literal301=(IToken)Match(input,95,Follow._95_in_ident_list3203);  
					stream_95.Add(char_literal301);

					DebugLocation(463, 15);
					PushFollow(Follow._ident_in_ident_list3205);
					ident302=ident();
					PopFollow();

					stream_ident.Add(ident302.Tree);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 463:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(463, 26);
				// SugarCpp.g:463:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(463, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(463, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(463, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 49);
			LeaveRule("ident_list", 49);
			LeaveRule_ident_list();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:466:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 50);
		TraceIn("stmt_alloc", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken string_literal312 = default(IToken);
		IToken char_literal314 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree string_literal307_tree = default(CommonTree);
		CommonTree char_literal309_tree = default(CommonTree);
		CommonTree char_literal311_tree = default(CommonTree);
		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree char_literal314_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(466, 1);
		try
		{
			// SugarCpp.g:467:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:467:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(467, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3227);
			ident_list303=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list303.Tree);
			DebugLocation(467, 15);
			// SugarCpp.g:467:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==105))
			{
				alt135 = 1;
			}
			else if ((LA135_0==107))
			{
				alt135 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:467:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(467, 17);
				char_literal304=(IToken)Match(input,105,Follow._105_in_stmt_alloc3231);  
				stream_105.Add(char_literal304);

				DebugLocation(467, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3233);
				type_name305=type_name();
				PopFollow();

				stream_type_name.Add(type_name305.Tree);
				DebugLocation(467, 31);
				// SugarCpp.g:467:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt133=3;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt133 = 1;
					}
					break;
				case 88:
					{
					alt133 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 108:
				case 140:
				case 141:
				case 143:
				case 160:
				case 162:
				case 166:
					{
					alt133 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:467:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(467, 33);
					// SugarCpp.g:467:33: ( '=' | ':=' )
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==114))
					{
						alt131 = 1;
					}
					else if ((LA131_0==107))
					{
						alt131 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:467:34: '='
						{
						DebugLocation(467, 34);
						char_literal306=(IToken)Match(input,114,Follow._114_in_stmt_alloc3238);  
						stream_114.Add(char_literal306);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:467:40: ':='
						{
						DebugLocation(467, 40);
						string_literal307=(IToken)Match(input,107,Follow._107_in_stmt_alloc3242);  
						stream_107.Add(string_literal307);


						}
						break;

					}
					} finally { DebugExitSubRule(131); }

					DebugLocation(467, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3245);
					where_expr308=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr308.Tree);


					{
					// AST REWRITE
					// elements: where_expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 467:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(467, 61);
						// SugarCpp.g:467:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(467, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(467, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(467, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(467, 101);
						// SugarCpp.g:467:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(467, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:468:33: '(' ( expr_list )? ')'
					{
					DebugLocation(468, 33);
					char_literal309=(IToken)Match(input,88,Follow._88_in_stmt_alloc3293);  
					stream_88.Add(char_literal309);

					DebugLocation(468, 37);
					// SugarCpp.g:468:37: ( expr_list )?
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==IDENT||LA132_0==NUMBER||LA132_0==STRING||LA132_0==81||LA132_0==86||LA132_0==88||LA132_0==90||(LA132_0>=92 && LA132_0<=93)||(LA132_0>=96 && LA132_0<=97)||(LA132_0>=123 && LA132_0<=124)||LA132_0==146||LA132_0==148||(LA132_0>=150 && LA132_0<=151)||LA132_0==170))
					{
						alt132 = 1;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:468:37: expr_list
						{
						DebugLocation(468, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3295);
						expr_list310=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list310.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(132); }

					DebugLocation(468, 48);
					char_literal311=(IToken)Match(input,89,Follow._89_in_stmt_alloc3298);  
					stream_89.Add(char_literal311);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 468:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(468, 56);
						// SugarCpp.g:468:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(468, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(468, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(468, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(468, 98);
						// SugarCpp.g:468:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(468, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:469:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 469:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(469, 18);
						// SugarCpp.g:469:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(469, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(469, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(469, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(133); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:471:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(471, 8);
				string_literal312=(IToken)Match(input,107,Follow._107_in_stmt_alloc3359);  
				stream_107.Add(string_literal312);

				DebugLocation(471, 14);
				// SugarCpp.g:471:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:471:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(471, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3363);
				where_expr313=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr313.Tree);
				DebugLocation(471, 26);
				// SugarCpp.g:471:26: ( ',' where_expr )*
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					int LA134_0 = input.LA(1);

					if ((LA134_0==95))
					{
						alt134 = 1;
					}


					} finally { DebugExitDecision(134); }
					switch ( alt134 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:471:27: ',' where_expr
						{
						DebugLocation(471, 27);
						char_literal314=(IToken)Match(input,95,Follow._95_in_stmt_alloc3366);  
						stream_95.Add(char_literal314);

						DebugLocation(471, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3368);
						where_expr315=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr315.Tree);

						}
						break;

					default:
						goto loop134;
					}
				}

				loop134:
					;

				} finally { DebugExitSubRule(134); }


				}



				{
				// AST REWRITE
				// elements: 107, where_expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 471:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(471, 48);
					// SugarCpp.g:471:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(471, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(471, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(471, 66);
					// SugarCpp.g:471:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(471, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 50);
			LeaveRule("stmt_alloc", 50);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:474:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 51);
		TraceIn("stmt_modify", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal319 = default(IToken);
		IToken string_literal321 = default(IToken);
		IToken string_literal323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr324 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree string_literal323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(475, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3394);
			lvalue316=lvalue();
			PopFollow();

			stream_lvalue.Add(lvalue316.Tree);
			DebugLocation(475, 11);
			// SugarCpp.g:475:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt136=5;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			switch (input.LA(1))
			{
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 127:
			case 168:
				{
				alt136 = 1;
				}
				break;
			case 122:
				{
				alt136 = 2;
				}
				break;
			case 111:
				{
				alt136 = 3;
				}
				break;
			case 119:
				{
				alt136 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 108:
			case 140:
			case 141:
			case 143:
			case 160:
			case 162:
			case 166:
				{
				alt136 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 136, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:475:13: modify_expr_op where_expr
				{
				DebugLocation(475, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3398);
				modify_expr_op317=modify_expr_op();
				PopFollow();

				stream_modify_expr_op.Add(modify_expr_op317.Tree);
				DebugLocation(475, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3400);
				where_expr318=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr318.Tree);


				{
				// AST REWRITE
				// elements: lvalue, modify_expr_op, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 475:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(475, 42);
					// SugarCpp.g:475:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(475, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(475, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(475, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:476:13: '?=' where_expr
				{
				DebugLocation(476, 13);
				string_literal319=(IToken)Match(input,122,Follow._122_in_stmt_modify3424);  
				stream_122.Add(string_literal319);

				DebugLocation(476, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3426);
				where_expr320=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr320.Tree);


				{
				// AST REWRITE
				// elements: lvalue, 122, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 476:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(476, 32);
					// SugarCpp.g:476:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(476, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_122.NextNode(), root_1);

					DebugLocation(476, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(476, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:477:16: '<<' where_expr
				{
				DebugLocation(477, 16);
				string_literal321=(IToken)Match(input,111,Follow._111_in_stmt_modify3453);  
				stream_111.Add(string_literal321);

				DebugLocation(477, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3455);
				where_expr322=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr322.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 111, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 477:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(477, 35);
					// SugarCpp.g:477:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(477, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(477, 46);
					adaptor.AddChild(root_1, stream_111.NextNode());
					DebugLocation(477, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(477, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:478:16: '>>' where_expr
				{
				DebugLocation(478, 16);
				string_literal323=(IToken)Match(input,119,Follow._119_in_stmt_modify3484);  
				stream_119.Add(string_literal323);

				DebugLocation(478, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3486);
				where_expr324=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr324.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 119, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 478:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(478, 35);
					// SugarCpp.g:478:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(478, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(478, 46);
					adaptor.AddChild(root_1, stream_119.NextNode());
					DebugLocation(478, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(478, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:479:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 479:7: -> lvalue
				{
					DebugLocation(479, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 51);
			LeaveRule("stmt_modify", 51);
			LeaveRule_stmt_modify();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:482:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 52);
		TraceIn("where_item", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt325 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(482, 1);
		try
		{
			// SugarCpp.g:483:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:483:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(483, 4);
			PushFollow(Follow._stmt_in_where_item3520);
			stmt325=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt325.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 52);
			LeaveRule("where_item", 52);
			LeaveRule_where_item();
		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:486:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 53);
		TraceIn("where_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE326 = default(IToken);
		IToken INDENT327 = default(IToken);
		IToken NEWLINE328 = default(IToken);
		IToken string_literal329 = default(IToken);
		IToken NEWLINE331 = default(IToken);
		IToken DEDENT332 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken INDENT334 = default(IToken);
		IToken NEWLINE335 = default(IToken);
		IToken NEWLINE337 = default(IToken);
		IToken DEDENT338 = default(IToken);
		IToken NEWLINE339 = default(IToken);
		IToken DEDENT340 = default(IToken);
		IToken NEWLINE341 = default(IToken);
		IToken INDENT342 = default(IToken);
		IToken NEWLINE343 = default(IToken);
		IToken NEWLINE345 = default(IToken);
		IToken DEDENT346 = default(IToken);
		IToken NEWLINE347 = default(IToken);
		IToken DEDENT348 = default(IToken);
		IToken string_literal349 = default(IToken);
		IToken NEWLINE350 = default(IToken);
		IToken INDENT351 = default(IToken);
		IToken NEWLINE352 = default(IToken);
		IToken NEWLINE354 = default(IToken);
		IToken DEDENT355 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item353 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE326_tree = default(CommonTree);
		CommonTree INDENT327_tree = default(CommonTree);
		CommonTree NEWLINE328_tree = default(CommonTree);
		CommonTree string_literal329_tree = default(CommonTree);
		CommonTree NEWLINE331_tree = default(CommonTree);
		CommonTree DEDENT332_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree INDENT334_tree = default(CommonTree);
		CommonTree NEWLINE335_tree = default(CommonTree);
		CommonTree NEWLINE337_tree = default(CommonTree);
		CommonTree DEDENT338_tree = default(CommonTree);
		CommonTree NEWLINE339_tree = default(CommonTree);
		CommonTree DEDENT340_tree = default(CommonTree);
		CommonTree NEWLINE341_tree = default(CommonTree);
		CommonTree INDENT342_tree = default(CommonTree);
		CommonTree NEWLINE343_tree = default(CommonTree);
		CommonTree NEWLINE345_tree = default(CommonTree);
		CommonTree DEDENT346_tree = default(CommonTree);
		CommonTree NEWLINE347_tree = default(CommonTree);
		CommonTree DEDENT348_tree = default(CommonTree);
		CommonTree string_literal349_tree = default(CommonTree);
		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree INDENT351_tree = default(CommonTree);
		CommonTree NEWLINE352_tree = default(CommonTree);
		CommonTree NEWLINE354_tree = default(CommonTree);
		CommonTree DEDENT355_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(486, 1);
		try
		{
			// SugarCpp.g:487:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:487:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(487, 4);
			// SugarCpp.g:487:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:487:5: a= expr
			{
			DebugLocation(487, 6);
			PushFollow(Follow._expr_in_where_expr3534);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 487:12: -> $a
			{
				DebugLocation(487, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(487, 19);
			// SugarCpp.g:487:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt156=3;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			try
			{
				alt156 = dfa156.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:487:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(487, 21);
				// SugarCpp.g:487:21: ( NEWLINE )+
				int cnt137=0;
				try { DebugEnterSubRule(137);
				while (true)
				{
					int alt137=2;
					try { DebugEnterDecision(137, false);
					int LA137_0 = input.LA(1);

					if ((LA137_0==NEWLINE))
					{
						alt137 = 1;
					}


					} finally { DebugExitDecision(137); }
					switch (alt137)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:21: NEWLINE
						{
						DebugLocation(487, 21);
						NEWLINE326=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3544);  
						stream_NEWLINE.Add(NEWLINE326);


						}
						break;

					default:
						if (cnt137 >= 1)
							goto loop137;

						EarlyExitException eee137 = new EarlyExitException( 137, input );
						DebugRecognitionException(eee137);
						throw eee137;
					}
					cnt137++;
				}
				loop137:
					;

				} finally { DebugExitSubRule(137); }

				DebugLocation(487, 30);
				INDENT327=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3547);  
				stream_INDENT.Add(INDENT327);

				DebugLocation(487, 37);
				// SugarCpp.g:487:37: ( NEWLINE )*
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_0 = input.LA(1);

					if ((LA138_0==NEWLINE))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch ( alt138 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:37: NEWLINE
						{
						DebugLocation(487, 37);
						NEWLINE328=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3549);  
						stream_NEWLINE.Add(NEWLINE328);


						}
						break;

					default:
						goto loop138;
					}
				}

				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(487, 46);
				string_literal329=(IToken)Match(input,165,Follow._165_in_where_expr3552);  
				stream_165.Add(string_literal329);

				DebugLocation(487, 54);
				// SugarCpp.g:487:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==IDENT||LA151_0==81||LA151_0==86||LA151_0==88||LA151_0==90||(LA151_0>=92 && LA151_0<=93)||(LA151_0>=96 && LA151_0<=97)||LA151_0==123||LA151_0==135||(LA151_0>=139 && LA151_0<=141)||LA151_0==147||LA151_0==151||LA151_0==153||LA151_0==155||(LA151_0>=158 && LA151_0<=160)||(LA151_0>=162 && LA151_0<=163)||LA151_0==166||LA151_0==170))
				{
					alt151 = 1;
				}
				else if ((LA151_0==NEWLINE))
				{
					alt151 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:487:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(487, 56);
					PushFollow(Follow._where_item_in_where_expr3556);
					where_item330=where_item();
					PopFollow();

					stream_where_item.Add(where_item330.Tree);
					DebugLocation(487, 67);
					// SugarCpp.g:487:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt145=2;
					try { DebugEnterSubRule(145);
					try { DebugEnterDecision(145, false);
					try
					{
						alt145 = dfa145.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(487, 69);
						// SugarCpp.g:487:69: ( NEWLINE )*
						try { DebugEnterSubRule(139);
						while (true)
						{
							int alt139=2;
							try { DebugEnterDecision(139, false);
							int LA139_0 = input.LA(1);

							if ((LA139_0==NEWLINE))
							{
								alt139 = 1;
							}


							} finally { DebugExitDecision(139); }
							switch ( alt139 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:487:69: NEWLINE
								{
								DebugLocation(487, 69);
								NEWLINE331=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3560);  
								stream_NEWLINE.Add(NEWLINE331);


								}
								break;

							default:
								goto loop139;
							}
						}

						loop139:
							;

						} finally { DebugExitSubRule(139); }

						DebugLocation(487, 78);
						DEDENT332=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3563);  
						stream_DEDENT.Add(DEDENT332);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 487:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(487, 88);
							// SugarCpp.g:487:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(487, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(487, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(487, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:488:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(488, 21);
						// SugarCpp.g:488:21: ( NEWLINE )+
						int cnt140=0;
						try { DebugEnterSubRule(140);
						while (true)
						{
							int alt140=2;
							try { DebugEnterDecision(140, false);
							int LA140_0 = input.LA(1);

							if ((LA140_0==NEWLINE))
							{
								alt140 = 1;
							}


							} finally { DebugExitDecision(140); }
							switch (alt140)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:488:21: NEWLINE
								{
								DebugLocation(488, 21);
								NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3596);  
								stream_NEWLINE.Add(NEWLINE333);


								}
								break;

							default:
								if (cnt140 >= 1)
									goto loop140;

								EarlyExitException eee140 = new EarlyExitException( 140, input );
								DebugRecognitionException(eee140);
								throw eee140;
							}
							cnt140++;
						}
						loop140:
							;

						} finally { DebugExitSubRule(140); }

						DebugLocation(488, 30);
						INDENT334=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3599);  
						stream_INDENT.Add(INDENT334);

						DebugLocation(488, 37);
						// SugarCpp.g:488:37: ( NEWLINE )*
						try { DebugEnterSubRule(141);
						while (true)
						{
							int alt141=2;
							try { DebugEnterDecision(141, false);
							int LA141_0 = input.LA(1);

							if ((LA141_0==NEWLINE))
							{
								alt141 = 1;
							}


							} finally { DebugExitDecision(141); }
							switch ( alt141 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:488:37: NEWLINE
								{
								DebugLocation(488, 37);
								NEWLINE335=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3601);  
								stream_NEWLINE.Add(NEWLINE335);


								}
								break;

							default:
								goto loop141;
							}
						}

						loop141:
							;

						} finally { DebugExitSubRule(141); }

						DebugLocation(488, 46);
						// SugarCpp.g:488:46: ( where_item ( NEWLINE )+ )+
						int cnt143=0;
						try { DebugEnterSubRule(143);
						while (true)
						{
							int alt143=2;
							try { DebugEnterDecision(143, false);
							int LA143_0 = input.LA(1);

							if ((LA143_0==IDENT||LA143_0==81||LA143_0==86||LA143_0==88||LA143_0==90||(LA143_0>=92 && LA143_0<=93)||(LA143_0>=96 && LA143_0<=97)||LA143_0==123||LA143_0==135||(LA143_0>=139 && LA143_0<=141)||LA143_0==147||LA143_0==151||LA143_0==153||LA143_0==155||(LA143_0>=158 && LA143_0<=160)||(LA143_0>=162 && LA143_0<=163)||LA143_0==166||LA143_0==170))
							{
								alt143 = 1;
							}


							} finally { DebugExitDecision(143); }
							switch (alt143)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:488:47: where_item ( NEWLINE )+
								{
								DebugLocation(488, 47);
								PushFollow(Follow._where_item_in_where_expr3605);
								where_item336=where_item();
								PopFollow();

								stream_where_item.Add(where_item336.Tree);
								DebugLocation(488, 58);
								// SugarCpp.g:488:58: ( NEWLINE )+
								int cnt142=0;
								try { DebugEnterSubRule(142);
								while (true)
								{
									int alt142=2;
									try { DebugEnterDecision(142, false);
									int LA142_0 = input.LA(1);

									if ((LA142_0==NEWLINE))
									{
										alt142 = 1;
									}


									} finally { DebugExitDecision(142); }
									switch (alt142)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:488:58: NEWLINE
										{
										DebugLocation(488, 58);
										NEWLINE337=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3607);  
										stream_NEWLINE.Add(NEWLINE337);


										}
										break;

									default:
										if (cnt142 >= 1)
											goto loop142;

										EarlyExitException eee142 = new EarlyExitException( 142, input );
										DebugRecognitionException(eee142);
										throw eee142;
									}
									cnt142++;
								}
								loop142:
									;

								} finally { DebugExitSubRule(142); }


								}
								break;

							default:
								if (cnt143 >= 1)
									goto loop143;

								EarlyExitException eee143 = new EarlyExitException( 143, input );
								DebugRecognitionException(eee143);
								throw eee143;
							}
							cnt143++;
						}
						loop143:
							;

						} finally { DebugExitSubRule(143); }

						DebugLocation(488, 69);
						DEDENT338=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3612);  
						stream_DEDENT.Add(DEDENT338);

						DebugLocation(488, 76);
						// SugarCpp.g:488:76: ( NEWLINE )*
						try { DebugEnterSubRule(144);
						while (true)
						{
							int alt144=2;
							try { DebugEnterDecision(144, false);
							int LA144_0 = input.LA(1);

							if ((LA144_0==NEWLINE))
							{
								alt144 = 1;
							}


							} finally { DebugExitDecision(144); }
							switch ( alt144 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:488:76: NEWLINE
								{
								DebugLocation(488, 76);
								NEWLINE339=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3614);  
								stream_NEWLINE.Add(NEWLINE339);


								}
								break;

							default:
								goto loop144;
							}
						}

						loop144:
							;

						} finally { DebugExitSubRule(144); }

						DebugLocation(488, 85);
						DEDENT340=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3617);  
						stream_DEDENT.Add(DEDENT340);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 488:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(488, 95);
							// SugarCpp.g:488:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(488, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(488, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(488, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(488, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(145); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:490:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(490, 17);
					// SugarCpp.g:490:17: ( NEWLINE )+
					int cnt146=0;
					try { DebugEnterSubRule(146);
					while (true)
					{
						int alt146=2;
						try { DebugEnterDecision(146, false);
						int LA146_0 = input.LA(1);

						if ((LA146_0==NEWLINE))
						{
							alt146 = 1;
						}


						} finally { DebugExitDecision(146); }
						switch (alt146)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:17: NEWLINE
							{
							DebugLocation(490, 17);
							NEWLINE341=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3667);  
							stream_NEWLINE.Add(NEWLINE341);


							}
							break;

						default:
							if (cnt146 >= 1)
								goto loop146;

							EarlyExitException eee146 = new EarlyExitException( 146, input );
							DebugRecognitionException(eee146);
							throw eee146;
						}
						cnt146++;
					}
					loop146:
						;

					} finally { DebugExitSubRule(146); }

					DebugLocation(490, 26);
					INDENT342=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3670);  
					stream_INDENT.Add(INDENT342);

					DebugLocation(490, 33);
					// SugarCpp.g:490:33: ( NEWLINE )*
					try { DebugEnterSubRule(147);
					while (true)
					{
						int alt147=2;
						try { DebugEnterDecision(147, false);
						int LA147_0 = input.LA(1);

						if ((LA147_0==NEWLINE))
						{
							alt147 = 1;
						}


						} finally { DebugExitDecision(147); }
						switch ( alt147 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:33: NEWLINE
							{
							DebugLocation(490, 33);
							NEWLINE343=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3672);  
							stream_NEWLINE.Add(NEWLINE343);


							}
							break;

						default:
							goto loop147;
						}
					}

					loop147:
						;

					} finally { DebugExitSubRule(147); }

					DebugLocation(490, 42);
					// SugarCpp.g:490:42: ( where_item ( NEWLINE )+ )+
					int cnt149=0;
					try { DebugEnterSubRule(149);
					while (true)
					{
						int alt149=2;
						try { DebugEnterDecision(149, false);
						int LA149_0 = input.LA(1);

						if ((LA149_0==IDENT||LA149_0==81||LA149_0==86||LA149_0==88||LA149_0==90||(LA149_0>=92 && LA149_0<=93)||(LA149_0>=96 && LA149_0<=97)||LA149_0==123||LA149_0==135||(LA149_0>=139 && LA149_0<=141)||LA149_0==147||LA149_0==151||LA149_0==153||LA149_0==155||(LA149_0>=158 && LA149_0<=160)||(LA149_0>=162 && LA149_0<=163)||LA149_0==166||LA149_0==170))
						{
							alt149 = 1;
						}


						} finally { DebugExitDecision(149); }
						switch (alt149)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:43: where_item ( NEWLINE )+
							{
							DebugLocation(490, 43);
							PushFollow(Follow._where_item_in_where_expr3676);
							where_item344=where_item();
							PopFollow();

							stream_where_item.Add(where_item344.Tree);
							DebugLocation(490, 54);
							// SugarCpp.g:490:54: ( NEWLINE )+
							int cnt148=0;
							try { DebugEnterSubRule(148);
							while (true)
							{
								int alt148=2;
								try { DebugEnterDecision(148, false);
								int LA148_0 = input.LA(1);

								if ((LA148_0==NEWLINE))
								{
									alt148 = 1;
								}


								} finally { DebugExitDecision(148); }
								switch (alt148)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:490:54: NEWLINE
									{
									DebugLocation(490, 54);
									NEWLINE345=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3678);  
									stream_NEWLINE.Add(NEWLINE345);


									}
									break;

								default:
									if (cnt148 >= 1)
										goto loop148;

									EarlyExitException eee148 = new EarlyExitException( 148, input );
									DebugRecognitionException(eee148);
									throw eee148;
								}
								cnt148++;
							}
							loop148:
								;

							} finally { DebugExitSubRule(148); }


							}
							break;

						default:
							if (cnt149 >= 1)
								goto loop149;

							EarlyExitException eee149 = new EarlyExitException( 149, input );
							DebugRecognitionException(eee149);
							throw eee149;
						}
						cnt149++;
					}
					loop149:
						;

					} finally { DebugExitSubRule(149); }

					DebugLocation(490, 65);
					DEDENT346=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3683);  
					stream_DEDENT.Add(DEDENT346);

					DebugLocation(490, 72);
					// SugarCpp.g:490:72: ( NEWLINE )*
					try { DebugEnterSubRule(150);
					while (true)
					{
						int alt150=2;
						try { DebugEnterDecision(150, false);
						int LA150_0 = input.LA(1);

						if ((LA150_0==NEWLINE))
						{
							alt150 = 1;
						}


						} finally { DebugExitDecision(150); }
						switch ( alt150 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:72: NEWLINE
							{
							DebugLocation(490, 72);
							NEWLINE347=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3685);  
							stream_NEWLINE.Add(NEWLINE347);


							}
							break;

						default:
							goto loop150;
						}
					}

					loop150:
						;

					} finally { DebugExitSubRule(150); }

					DebugLocation(490, 81);
					DEDENT348=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3688);  
					stream_DEDENT.Add(DEDENT348);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(490, 91);
						// SugarCpp.g:490:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(490, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(490, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(490, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(151); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:492:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(492, 9);
				string_literal349=(IToken)Match(input,165,Follow._165_in_where_expr3726);  
				stream_165.Add(string_literal349);

				DebugLocation(492, 17);
				// SugarCpp.g:492:17: ( NEWLINE )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==NEWLINE))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:492:17: NEWLINE
						{
						DebugLocation(492, 17);
						NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3728);  
						stream_NEWLINE.Add(NEWLINE350);


						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(492, 26);
				INDENT351=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3731);  
				stream_INDENT.Add(INDENT351);

				DebugLocation(492, 33);
				// SugarCpp.g:492:33: ( NEWLINE )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:492:33: NEWLINE
						{
						DebugLocation(492, 33);
						NEWLINE352=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3733);  
						stream_NEWLINE.Add(NEWLINE352);


						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(492, 42);
				// SugarCpp.g:492:42: ( where_item ( NEWLINE )+ )+
				int cnt155=0;
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==IDENT||LA155_0==81||LA155_0==86||LA155_0==88||LA155_0==90||(LA155_0>=92 && LA155_0<=93)||(LA155_0>=96 && LA155_0<=97)||LA155_0==123||LA155_0==135||(LA155_0>=139 && LA155_0<=141)||LA155_0==147||LA155_0==151||LA155_0==153||LA155_0==155||(LA155_0>=158 && LA155_0<=160)||(LA155_0>=162 && LA155_0<=163)||LA155_0==166||LA155_0==170))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch (alt155)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:492:43: where_item ( NEWLINE )+
						{
						DebugLocation(492, 43);
						PushFollow(Follow._where_item_in_where_expr3737);
						where_item353=where_item();
						PopFollow();

						stream_where_item.Add(where_item353.Tree);
						DebugLocation(492, 54);
						// SugarCpp.g:492:54: ( NEWLINE )+
						int cnt154=0;
						try { DebugEnterSubRule(154);
						while (true)
						{
							int alt154=2;
							try { DebugEnterDecision(154, false);
							int LA154_0 = input.LA(1);

							if ((LA154_0==NEWLINE))
							{
								alt154 = 1;
							}


							} finally { DebugExitDecision(154); }
							switch (alt154)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:492:54: NEWLINE
								{
								DebugLocation(492, 54);
								NEWLINE354=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3739);  
								stream_NEWLINE.Add(NEWLINE354);


								}
								break;

							default:
								if (cnt154 >= 1)
									goto loop154;

								EarlyExitException eee154 = new EarlyExitException( 154, input );
								DebugRecognitionException(eee154);
								throw eee154;
							}
							cnt154++;
						}
						loop154:
							;

						} finally { DebugExitSubRule(154); }


						}
						break;

					default:
						if (cnt155 >= 1)
							goto loop155;

						EarlyExitException eee155 = new EarlyExitException( 155, input );
						DebugRecognitionException(eee155);
						throw eee155;
					}
					cnt155++;
				}
				loop155:
					;

				} finally { DebugExitSubRule(155); }

				DebugLocation(492, 65);
				DEDENT355=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3744);  
				stream_DEDENT.Add(DEDENT355);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 492:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(492, 75);
					// SugarCpp.g:492:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(492, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(492, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(492, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(492, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:493:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 493:15: -> expr
				{
					DebugLocation(493, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 53);
			LeaveRule("where_expr", 53);
			LeaveRule_where_expr();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:497:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 54);
		TraceIn("let_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal356 = default(IToken);
		IToken string_literal358 = default(IToken);
		IToken NEWLINE360 = default(IToken);
		IToken INDENT361 = default(IToken);
		IToken NEWLINE362 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken DEDENT365 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken INDENT368 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken NEWLINE371 = default(IToken);
		IToken string_literal372 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken DEDENT375 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr363 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item370 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr373 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal356_tree = default(CommonTree);
		CommonTree string_literal358_tree = default(CommonTree);
		CommonTree NEWLINE360_tree = default(CommonTree);
		CommonTree INDENT361_tree = default(CommonTree);
		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree DEDENT365_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree INDENT368_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree NEWLINE371_tree = default(CommonTree);
		CommonTree string_literal372_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree DEDENT375_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(497, 1);
		try
		{
			// SugarCpp.g:498:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:498:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(498, 4);
			string_literal356=(IToken)Match(input,146,Follow._146_in_let_expr3802);  
			stream_146.Add(string_literal356);

			DebugLocation(498, 10);
			PushFollow(Follow._where_item_in_let_expr3804);
			where_item357=where_item();
			PopFollow();

			stream_where_item.Add(where_item357.Tree);
			DebugLocation(498, 21);
			// SugarCpp.g:498:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_0 = input.LA(1);

			if ((LA167_0==143))
			{
				alt167 = 1;
			}
			else if ((LA167_0==NEWLINE))
			{
				alt167 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 167, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:498:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(498, 23);
				string_literal358=(IToken)Match(input,143,Follow._143_in_let_expr3808);  
				stream_143.Add(string_literal358);

				DebugLocation(498, 28);
				// SugarCpp.g:498:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, false);
				int LA161_0 = input.LA(1);

				if ((LA161_0==IDENT||LA161_0==NUMBER||LA161_0==STRING||LA161_0==81||LA161_0==86||LA161_0==88||LA161_0==90||(LA161_0>=92 && LA161_0<=93)||(LA161_0>=96 && LA161_0<=97)||(LA161_0>=123 && LA161_0<=124)||LA161_0==146||LA161_0==148||(LA161_0>=150 && LA161_0<=151)||LA161_0==170))
				{
					alt161 = 1;
				}
				else if ((LA161_0==NEWLINE))
				{
					alt161 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:30: expr
					{
					DebugLocation(498, 30);
					PushFollow(Follow._expr_in_let_expr3812);
					expr359=expr();
					PopFollow();

					stream_expr.Add(expr359.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 498:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(498, 38);
						// SugarCpp.g:498:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(498, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(498, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(498, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(498, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:499:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(499, 12);
					// SugarCpp.g:499:12: ( NEWLINE )+
					int cnt157=0;
					try { DebugEnterSubRule(157);
					while (true)
					{
						int alt157=2;
						try { DebugEnterDecision(157, false);
						int LA157_0 = input.LA(1);

						if ((LA157_0==NEWLINE))
						{
							alt157 = 1;
						}


						} finally { DebugExitDecision(157); }
						switch (alt157)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:499:12: NEWLINE
							{
							DebugLocation(499, 12);
							NEWLINE360=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3836);  
							stream_NEWLINE.Add(NEWLINE360);


							}
							break;

						default:
							if (cnt157 >= 1)
								goto loop157;

							EarlyExitException eee157 = new EarlyExitException( 157, input );
							DebugRecognitionException(eee157);
							throw eee157;
						}
						cnt157++;
					}
					loop157:
						;

					} finally { DebugExitSubRule(157); }

					DebugLocation(499, 21);
					// SugarCpp.g:499:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt160=2;
					try { DebugEnterSubRule(160);
					try { DebugEnterDecision(160, false);
					int LA160_0 = input.LA(1);

					if ((LA160_0==INDENT))
					{
						alt160 = 1;
					}
					else if ((LA160_0==IDENT||LA160_0==NUMBER||LA160_0==STRING||LA160_0==81||LA160_0==86||LA160_0==88||LA160_0==90||(LA160_0>=92 && LA160_0<=93)||(LA160_0>=96 && LA160_0<=97)||(LA160_0>=123 && LA160_0<=124)||LA160_0==146||LA160_0==148||(LA160_0>=150 && LA160_0<=151)||LA160_0==170))
					{
						alt160 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 160, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:499:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(499, 23);
						INDENT361=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3841);  
						stream_INDENT.Add(INDENT361);

						DebugLocation(499, 30);
						// SugarCpp.g:499:30: ( NEWLINE )*
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==NEWLINE))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch ( alt158 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:499:30: NEWLINE
								{
								DebugLocation(499, 30);
								NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3843);  
								stream_NEWLINE.Add(NEWLINE362);


								}
								break;

							default:
								goto loop158;
							}
						}

						loop158:
							;

						} finally { DebugExitSubRule(158); }

						DebugLocation(499, 39);
						PushFollow(Follow._expr_in_let_expr3846);
						expr363=expr();
						PopFollow();

						stream_expr.Add(expr363.Tree);
						DebugLocation(499, 44);
						// SugarCpp.g:499:44: ( NEWLINE )+
						int cnt159=0;
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch (alt159)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:499:44: NEWLINE
								{
								DebugLocation(499, 44);
								NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3848);  
								stream_NEWLINE.Add(NEWLINE364);


								}
								break;

							default:
								if (cnt159 >= 1)
									goto loop159;

								EarlyExitException eee159 = new EarlyExitException( 159, input );
								DebugRecognitionException(eee159);
								throw eee159;
							}
							cnt159++;
						}
						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(499, 53);
						DEDENT365=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3851);  
						stream_DEDENT.Add(DEDENT365);



						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 499:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(499, 63);
							// SugarCpp.g:499:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(499, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(499, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(499, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(499, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:500:14: expr
						{
						DebugLocation(500, 14);
						PushFollow(Follow._expr_in_let_expr3877);
						expr366=expr();
						PopFollow();

						stream_expr.Add(expr366.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 500:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(500, 22);
							// SugarCpp.g:500:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(500, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(500, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(500, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(500, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(160); }


					}
					break;

				}
				} finally { DebugExitSubRule(161); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:503:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(503, 11);
				// SugarCpp.g:503:11: ( NEWLINE )+
				int cnt162=0;
				try { DebugEnterSubRule(162);
				while (true)
				{
					int alt162=2;
					try { DebugEnterDecision(162, false);
					int LA162_0 = input.LA(1);

					if ((LA162_0==NEWLINE))
					{
						alt162 = 1;
					}


					} finally { DebugExitDecision(162); }
					switch (alt162)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:11: NEWLINE
						{
						DebugLocation(503, 11);
						NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3924);  
						stream_NEWLINE.Add(NEWLINE367);


						}
						break;

					default:
						if (cnt162 >= 1)
							goto loop162;

						EarlyExitException eee162 = new EarlyExitException( 162, input );
						DebugRecognitionException(eee162);
						throw eee162;
					}
					cnt162++;
				}
				loop162:
					;

				} finally { DebugExitSubRule(162); }

				DebugLocation(503, 20);
				INDENT368=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3927);  
				stream_INDENT.Add(INDENT368);

				DebugLocation(503, 27);
				// SugarCpp.g:503:27: ( NEWLINE )*
				try { DebugEnterSubRule(163);
				while (true)
				{
					int alt163=2;
					try { DebugEnterDecision(163, false);
					int LA163_0 = input.LA(1);

					if ((LA163_0==NEWLINE))
					{
						alt163 = 1;
					}


					} finally { DebugExitDecision(163); }
					switch ( alt163 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:27: NEWLINE
						{
						DebugLocation(503, 27);
						NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3929);  
						stream_NEWLINE.Add(NEWLINE369);


						}
						break;

					default:
						goto loop163;
					}
				}

				loop163:
					;

				} finally { DebugExitSubRule(163); }

				DebugLocation(503, 36);
				// SugarCpp.g:503:36: ( where_item ( NEWLINE )+ )+
				int cnt165=0;
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==IDENT||LA165_0==81||LA165_0==86||LA165_0==88||LA165_0==90||(LA165_0>=92 && LA165_0<=93)||(LA165_0>=96 && LA165_0<=97)||LA165_0==123||LA165_0==135||(LA165_0>=139 && LA165_0<=141)||LA165_0==147||LA165_0==151||LA165_0==153||LA165_0==155||(LA165_0>=158 && LA165_0<=160)||(LA165_0>=162 && LA165_0<=163)||LA165_0==166||LA165_0==170))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:37: where_item ( NEWLINE )+
						{
						DebugLocation(503, 37);
						PushFollow(Follow._where_item_in_let_expr3933);
						where_item370=where_item();
						PopFollow();

						stream_where_item.Add(where_item370.Tree);
						DebugLocation(503, 48);
						// SugarCpp.g:503:48: ( NEWLINE )+
						int cnt164=0;
						try { DebugEnterSubRule(164);
						while (true)
						{
							int alt164=2;
							try { DebugEnterDecision(164, false);
							int LA164_0 = input.LA(1);

							if ((LA164_0==NEWLINE))
							{
								alt164 = 1;
							}


							} finally { DebugExitDecision(164); }
							switch (alt164)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:503:48: NEWLINE
								{
								DebugLocation(503, 48);
								NEWLINE371=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3935);  
								stream_NEWLINE.Add(NEWLINE371);


								}
								break;

							default:
								if (cnt164 >= 1)
									goto loop164;

								EarlyExitException eee164 = new EarlyExitException( 164, input );
								DebugRecognitionException(eee164);
								throw eee164;
							}
							cnt164++;
						}
						loop164:
							;

						} finally { DebugExitSubRule(164); }


						}
						break;

					default:
						if (cnt165 >= 1)
							goto loop165;

						EarlyExitException eee165 = new EarlyExitException( 165, input );
						DebugRecognitionException(eee165);
						throw eee165;
					}
					cnt165++;
				}
				loop165:
					;

				} finally { DebugExitSubRule(165); }

				DebugLocation(503, 59);
				string_literal372=(IToken)Match(input,143,Follow._143_in_let_expr3940);  
				stream_143.Add(string_literal372);

				DebugLocation(503, 64);
				PushFollow(Follow._expr_in_let_expr3942);
				expr373=expr();
				PopFollow();

				stream_expr.Add(expr373.Tree);
				DebugLocation(503, 69);
				// SugarCpp.g:503:69: ( NEWLINE )+
				int cnt166=0;
				try { DebugEnterSubRule(166);
				while (true)
				{
					int alt166=2;
					try { DebugEnterDecision(166, false);
					int LA166_0 = input.LA(1);

					if ((LA166_0==NEWLINE))
					{
						alt166 = 1;
					}


					} finally { DebugExitDecision(166); }
					switch (alt166)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:69: NEWLINE
						{
						DebugLocation(503, 69);
						NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3944);  
						stream_NEWLINE.Add(NEWLINE374);


						}
						break;

					default:
						if (cnt166 >= 1)
							goto loop166;

						EarlyExitException eee166 = new EarlyExitException( 166, input );
						DebugRecognitionException(eee166);
						throw eee166;
					}
					cnt166++;
				}
				loop166:
					;

				} finally { DebugExitSubRule(166); }

				DebugLocation(503, 78);
				DEDENT375=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3947);  
				stream_DEDENT.Add(DEDENT375);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(503, 88);
					// SugarCpp.g:503:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(503, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(503, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(503, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(167); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 54);
			LeaveRule("let_expr", 54);
			LeaveRule_let_expr();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:507:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 55);
		TraceIn("match_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal376 = default(IToken);
		IToken string_literal378 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr377 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr379 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal376_tree = default(CommonTree);
		CommonTree string_literal378_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:508:4: '|' expr '=>' where_expr
			{
			DebugLocation(508, 4);
			char_literal376=(IToken)Match(input,167,Follow._167_in_match_item3979);  
			stream_167.Add(char_literal376);

			DebugLocation(508, 8);
			PushFollow(Follow._expr_in_match_item3981);
			expr377=expr();
			PopFollow();

			stream_expr.Add(expr377.Tree);
			DebugLocation(508, 13);
			string_literal378=(IToken)Match(input,116,Follow._116_in_match_item3983);  
			stream_116.Add(string_literal378);

			DebugLocation(508, 18);
			PushFollow(Follow._where_expr_in_match_item3985);
			where_expr379=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr379.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 508:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(508, 32);
				// SugarCpp.g:508:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(508, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(508, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(508, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 55);
			LeaveRule("match_item", 55);
			LeaveRule_match_item();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:511:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 56);
		TraceIn("match_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal380 = default(IToken);
		IToken NEWLINE382 = default(IToken);
		IToken INDENT383 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken DEDENT387 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item385 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal380_tree = default(CommonTree);
		CommonTree NEWLINE382_tree = default(CommonTree);
		CommonTree INDENT383_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree DEDENT387_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(512, 4);
			string_literal380=(IToken)Match(input,148,Follow._148_in_match_expr4006);  
			stream_148.Add(string_literal380);

			DebugLocation(512, 12);
			// SugarCpp.g:512:12: ( expr )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_0 = input.LA(1);

			if ((LA168_0==IDENT||LA168_0==NUMBER||LA168_0==STRING||LA168_0==81||LA168_0==86||LA168_0==88||LA168_0==90||(LA168_0>=92 && LA168_0<=93)||(LA168_0>=96 && LA168_0<=97)||(LA168_0>=123 && LA168_0<=124)||LA168_0==146||LA168_0==148||(LA168_0>=150 && LA168_0<=151)||LA168_0==170))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:512:12: expr
				{
				DebugLocation(512, 12);
				PushFollow(Follow._expr_in_match_expr4008);
				expr381=expr();
				PopFollow();

				stream_expr.Add(expr381.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(168); }

			DebugLocation(512, 18);
			// SugarCpp.g:512:18: ( NEWLINE )+
			int cnt169=0;
			try { DebugEnterSubRule(169);
			while (true)
			{
				int alt169=2;
				try { DebugEnterDecision(169, false);
				int LA169_0 = input.LA(1);

				if ((LA169_0==NEWLINE))
				{
					alt169 = 1;
				}


				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:18: NEWLINE
					{
					DebugLocation(512, 18);
					NEWLINE382=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4011);  
					stream_NEWLINE.Add(NEWLINE382);


					}
					break;

				default:
					if (cnt169 >= 1)
						goto loop169;

					EarlyExitException eee169 = new EarlyExitException( 169, input );
					DebugRecognitionException(eee169);
					throw eee169;
				}
				cnt169++;
			}
			loop169:
				;

			} finally { DebugExitSubRule(169); }

			DebugLocation(512, 27);
			INDENT383=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4014);  
			stream_INDENT.Add(INDENT383);

			DebugLocation(512, 34);
			// SugarCpp.g:512:34: ( NEWLINE )*
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, false);
				int LA170_0 = input.LA(1);

				if ((LA170_0==NEWLINE))
				{
					alt170 = 1;
				}


				} finally { DebugExitDecision(170); }
				switch ( alt170 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:34: NEWLINE
					{
					DebugLocation(512, 34);
					NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4016);  
					stream_NEWLINE.Add(NEWLINE384);


					}
					break;

				default:
					goto loop170;
				}
			}

			loop170:
				;

			} finally { DebugExitSubRule(170); }

			DebugLocation(512, 43);
			// SugarCpp.g:512:43: ( match_item ( NEWLINE )+ )+
			int cnt172=0;
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_0 = input.LA(1);

				if ((LA172_0==167))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch (alt172)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:44: match_item ( NEWLINE )+
					{
					DebugLocation(512, 44);
					PushFollow(Follow._match_item_in_match_expr4020);
					match_item385=match_item();
					PopFollow();

					stream_match_item.Add(match_item385.Tree);
					DebugLocation(512, 55);
					// SugarCpp.g:512:55: ( NEWLINE )+
					int cnt171=0;
					try { DebugEnterSubRule(171);
					while (true)
					{
						int alt171=2;
						try { DebugEnterDecision(171, false);
						int LA171_0 = input.LA(1);

						if ((LA171_0==NEWLINE))
						{
							alt171 = 1;
						}


						} finally { DebugExitDecision(171); }
						switch (alt171)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:55: NEWLINE
							{
							DebugLocation(512, 55);
							NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4022);  
							stream_NEWLINE.Add(NEWLINE386);


							}
							break;

						default:
							if (cnt171 >= 1)
								goto loop171;

							EarlyExitException eee171 = new EarlyExitException( 171, input );
							DebugRecognitionException(eee171);
							throw eee171;
						}
						cnt171++;
					}
					loop171:
						;

					} finally { DebugExitSubRule(171); }


					}
					break;

				default:
					if (cnt172 >= 1)
						goto loop172;

					EarlyExitException eee172 = new EarlyExitException( 172, input );
					DebugRecognitionException(eee172);
					throw eee172;
				}
				cnt172++;
			}
			loop172:
				;

			} finally { DebugExitSubRule(172); }

			DebugLocation(512, 66);
			DEDENT387=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4027);  
			stream_DEDENT.Add(DEDENT387);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(512, 76);
				// SugarCpp.g:512:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(512, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(512, 89);
				// SugarCpp.g:512:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(512, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(512, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(512, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 56);
			LeaveRule("match_expr", 56);
			LeaveRule_match_expr();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:515:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 57);
		TraceIn("expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr389 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr390 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(515, 1);
		try
		{
			// SugarCpp.g:516:2: ( list_expr | match_expr | let_expr )
			int alt173=3;
			try { DebugEnterDecision(173, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 81:
			case 86:
			case 88:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 123:
			case 124:
			case 150:
			case 151:
			case 170:
				{
				alt173 = 1;
				}
				break;
			case 148:
				{
				alt173 = 2;
				}
				break;
			case 146:
				{
				alt173 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 173, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(173); }
			switch (alt173)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:516:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(516, 4);
				PushFollow(Follow._list_expr_in_expr4050);
				list_expr388=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr388.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:517:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(517, 4);
				PushFollow(Follow._match_expr_in_expr4055);
				match_expr389=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr389.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:518:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(518, 4);
				PushFollow(Follow._let_expr_in_expr4060);
				let_expr390=let_expr();
				PopFollow();

				adaptor.AddChild(root_0, let_expr390.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 57);
			LeaveRule("expr", 57);
			LeaveRule_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:521:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 58);
		TraceIn("list_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal391 = default(IToken);
		IToken char_literal392 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken INDENT394 = default(IToken);
		IToken DEDENT395 = default(IToken);
		IToken char_literal397 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken INDENT399 = default(IToken);
		IToken DEDENT400 = default(IToken);
		IToken char_literal402 = default(IToken);
		IToken NEWLINE403 = default(IToken);
		IToken INDENT404 = default(IToken);
		IToken DEDENT405 = default(IToken);
		IToken char_literal406 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal391_tree = default(CommonTree);
		CommonTree char_literal392_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree INDENT394_tree = default(CommonTree);
		CommonTree DEDENT395_tree = default(CommonTree);
		CommonTree char_literal397_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree INDENT399_tree = default(CommonTree);
		CommonTree DEDENT400_tree = default(CommonTree);
		CommonTree char_literal402_tree = default(CommonTree);
		CommonTree NEWLINE403_tree = default(CommonTree);
		CommonTree INDENT404_tree = default(CommonTree);
		CommonTree DEDENT405_tree = default(CommonTree);
		CommonTree char_literal406_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt179=2;
			try { DebugEnterDecision(179, false);
			int LA179_0 = input.LA(1);

			if ((LA179_0==124))
			{
				alt179 = 1;
			}
			else if ((LA179_0==IDENT||LA179_0==NUMBER||LA179_0==STRING||LA179_0==81||LA179_0==86||LA179_0==88||LA179_0==90||(LA179_0>=92 && LA179_0<=93)||(LA179_0>=96 && LA179_0<=97)||LA179_0==123||(LA179_0>=150 && LA179_0<=151)||LA179_0==170))
			{
				alt179 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:522:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(522, 4);
				char_literal391=(IToken)Match(input,124,Follow._124_in_list_expr4071);  
				stream_124.Add(char_literal391);

				DebugLocation(522, 8);
				// SugarCpp.g:522:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt177=2;
				try { DebugEnterSubRule(177);
				try { DebugEnterDecision(177, false);
				try
				{
					alt177 = dfa177.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(177); }
				switch (alt177)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(522, 9);
					// SugarCpp.g:522:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(174);
					while (true)
					{
						int alt174=5;
						try { DebugEnterDecision(174, false);
						switch (input.LA(1))
						{
						case 95:
							{
							alt174 = 1;
							}
							break;
						case NEWLINE:
							{
							alt174 = 2;
							}
							break;
						case INDENT:
							{
							alt174 = 3;
							}
							break;
						case DEDENT:
							{
							alt174 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(174); }
						switch ( alt174 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:10: ','
							{
							DebugLocation(522, 10);
							char_literal392=(IToken)Match(input,95,Follow._95_in_list_expr4075);  
							stream_95.Add(char_literal392);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:522:16: NEWLINE
							{
							DebugLocation(522, 16);
							NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4079);  
							stream_NEWLINE.Add(NEWLINE393);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:522:26: INDENT
							{
							DebugLocation(522, 26);
							INDENT394=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4083);  
							stream_INDENT.Add(INDENT394);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:522:35: DEDENT
							{
							DebugLocation(522, 35);
							DEDENT395=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4087);  
							stream_DEDENT.Add(DEDENT395);


							}
							break;

						default:
							goto loop174;
						}
					}

					loop174:
						;

					} finally { DebugExitSubRule(174); }

					DebugLocation(522, 44);
					PushFollow(Follow._list_expr_in_list_expr4091);
					list_expr396=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr396.Tree);
					DebugLocation(522, 54);
					// SugarCpp.g:522:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(176);
					while (true)
					{
						int alt176=2;
						try { DebugEnterDecision(176, false);
						try
						{
							alt176 = dfa176.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(176); }
						switch ( alt176 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:522:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(522, 55);
							// SugarCpp.g:522:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt175=0;
							try { DebugEnterSubRule(175);
							while (true)
							{
								int alt175=5;
								try { DebugEnterDecision(175, false);
								switch (input.LA(1))
								{
								case 95:
									{
									alt175 = 1;
									}
									break;
								case NEWLINE:
									{
									alt175 = 2;
									}
									break;
								case INDENT:
									{
									alt175 = 3;
									}
									break;
								case DEDENT:
									{
									alt175 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(175); }
								switch (alt175)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:522:56: ','
									{
									DebugLocation(522, 56);
									char_literal397=(IToken)Match(input,95,Follow._95_in_list_expr4095);  
									stream_95.Add(char_literal397);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:522:62: NEWLINE
									{
									DebugLocation(522, 62);
									NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4099);  
									stream_NEWLINE.Add(NEWLINE398);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:522:72: INDENT
									{
									DebugLocation(522, 72);
									INDENT399=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4103);  
									stream_INDENT.Add(INDENT399);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:522:81: DEDENT
									{
									DebugLocation(522, 81);
									DEDENT400=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4107);  
									stream_DEDENT.Add(DEDENT400);


									}
									break;

								default:
									if (cnt175 >= 1)
										goto loop175;

									EarlyExitException eee175 = new EarlyExitException( 175, input );
									DebugRecognitionException(eee175);
									throw eee175;
								}
								cnt175++;
							}
							loop175:
								;

							} finally { DebugExitSubRule(175); }

							DebugLocation(522, 90);
							PushFollow(Follow._list_expr_in_list_expr4111);
							list_expr401=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr401.Tree);

							}
							break;

						default:
							goto loop176;
						}
					}

					loop176:
						;

					} finally { DebugExitSubRule(176); }


					}
					break;

				}
				} finally { DebugExitSubRule(177); }

				DebugLocation(522, 104);
				// SugarCpp.g:522:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=5;
					try { DebugEnterDecision(178, false);
					switch (input.LA(1))
					{
					case 95:
						{
						alt178 = 1;
						}
						break;
					case NEWLINE:
						{
						alt178 = 2;
						}
						break;
					case INDENT:
						{
						alt178 = 3;
						}
						break;
					case DEDENT:
						{
						alt178 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(178); }
					switch ( alt178 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:522:105: ','
						{
						DebugLocation(522, 105);
						char_literal402=(IToken)Match(input,95,Follow._95_in_list_expr4118);  
						stream_95.Add(char_literal402);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:522:111: NEWLINE
						{
						DebugLocation(522, 111);
						NEWLINE403=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4122);  
						stream_NEWLINE.Add(NEWLINE403);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:522:121: INDENT
						{
						DebugLocation(522, 121);
						INDENT404=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4126);  
						stream_INDENT.Add(INDENT404);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:522:130: DEDENT
						{
						DebugLocation(522, 130);
						DEDENT405=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4130);  
						stream_DEDENT.Add(DEDENT405);


						}
						break;

					default:
						goto loop178;
					}
				}

				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(522, 139);
				char_literal406=(IToken)Match(input,125,Follow._125_in_list_expr4134);  
				stream_125.Add(char_literal406);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 522:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(522, 146);
					// SugarCpp.g:522:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(522, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(522, 158);
					// SugarCpp.g:522:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(522, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:523:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(523, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4148);
				lambda_expr407=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr407.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 58);
			LeaveRule("list_expr", 58);
			LeaveRule_list_expr();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:526:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 59);
		TraceIn("lambda_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		IToken string_literal411 = default(IToken);
		IToken string_literal413 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr415 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree char_literal410_tree = default(CommonTree);
		CommonTree string_literal411_tree = default(CommonTree);
		CommonTree string_literal413_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(526, 1);
		try
		{
			// SugarCpp.g:527:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt182=2;
			try { DebugEnterDecision(182, false);
			try
			{
				alt182 = dfa182.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:527:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(527, 4);
				char_literal408=(IToken)Match(input,88,Follow._88_in_lambda_expr4159);  
				stream_88.Add(char_literal408);

				DebugLocation(527, 8);
				// SugarCpp.g:527:8: ( func_args )?
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==IDENT||LA180_0==107))
				{
					alt180 = 1;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:527:8: func_args
					{
					DebugLocation(527, 8);
					PushFollow(Follow._func_args_in_lambda_expr4161);
					func_args409=func_args();
					PopFollow();

					stream_func_args.Add(func_args409.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(180); }

				DebugLocation(527, 19);
				char_literal410=(IToken)Match(input,89,Follow._89_in_lambda_expr4164);  
				stream_89.Add(char_literal410);

				DebugLocation(527, 23);
				// SugarCpp.g:527:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt181=2;
				try { DebugEnterSubRule(181);
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==99))
				{
					alt181 = 1;
				}
				else if ((LA181_0==116))
				{
					alt181 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 181, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:527:25: '->' expr
					{
					DebugLocation(527, 25);
					string_literal411=(IToken)Match(input,99,Follow._99_in_lambda_expr4168);  
					stream_99.Add(string_literal411);

					DebugLocation(527, 30);
					PushFollow(Follow._expr_in_lambda_expr4170);
					expr412=expr();
					PopFollow();

					stream_expr.Add(expr412.Tree);


					{
					// AST REWRITE
					// elements: 99, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 527:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(527, 39);
						// SugarCpp.g:527:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(527, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(527, 53);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(527, 58);
						// SugarCpp.g:527:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(527, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(527, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:528:25: '=>' expr
					{
					DebugLocation(528, 25);
					string_literal413=(IToken)Match(input,116,Follow._116_in_lambda_expr4210);  
					stream_116.Add(string_literal413);

					DebugLocation(528, 30);
					PushFollow(Follow._expr_in_lambda_expr4212);
					expr414=expr();
					PopFollow();

					stream_expr.Add(expr414.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 116
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 528:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(528, 39);
						// SugarCpp.g:528:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(528, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(528, 53);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(528, 58);
						// SugarCpp.g:528:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(528, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(528, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(181); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:529:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(529, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4232);
				modify_expr415=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr415.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 59);
			LeaveRule("lambda_expr", 59);
			LeaveRule_lambda_expr();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:532:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 60);
		TraceIn("modify_expr_op", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set416 = default(IToken);

		CommonTree set416_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(532, 91);
		try
		{
			// SugarCpp.g:532:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(532, 15);

			set416=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==114||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set416));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 60);
			LeaveRule("modify_expr_op", 60);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(532, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:533:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 61);
		TraceIn("modify_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set418 = default(IToken);
		IToken char_literal420 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr421 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set418_tree = default(CommonTree);
		CommonTree char_literal420_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(533, 1);
		try
		{
			// SugarCpp.g:534:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:534:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(534, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4289);
			cond_expr417=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr417.Tree);
			DebugLocation(534, 14);
			// SugarCpp.g:534:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt184=3;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			int LA184_0 = input.LA(1);

			if ((LA184_0==84||LA184_0==87||LA184_0==91||LA184_0==94||LA184_0==98||LA184_0==104||LA184_0==107||LA184_0==112||LA184_0==120||LA184_0==127||LA184_0==168))
			{
				alt184 = 1;
			}
			else if ((LA184_0==114))
			{
				alt184 = 2;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:534:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(534, 94);

				set418=(IToken)input.LT(1);
				set418=(IToken)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==107||input.LA(1)==112||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set418), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(534, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4338);
				cond_expr419=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr419.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:535:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(535, 7);
				// SugarCpp.g:535:7: ( '=' ^ cond_expr )+
				int cnt183=0;
				try { DebugEnterSubRule(183);
				while (true)
				{
					int alt183=2;
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==114))
					{
						alt183 = 1;
					}


					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:8: '=' ^ cond_expr
						{
						DebugLocation(535, 11);
						char_literal420=(IToken)Match(input,114,Follow._114_in_modify_expr4347); 
						char_literal420_tree = (CommonTree)adaptor.Create(char_literal420);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal420_tree, root_0);
						DebugLocation(535, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4350);
						cond_expr421=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr421.Tree);

						}
						break;

					default:
						if (cnt183 >= 1)
							goto loop183;

						EarlyExitException eee183 = new EarlyExitException( 183, input );
						DebugRecognitionException(eee183);
						throw eee183;
					}
					cnt183++;
				}
				loop183:
					;

				} finally { DebugExitSubRule(183); }


				}
				break;

			}
			} finally { DebugExitSubRule(184); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 61);
			LeaveRule("modify_expr", 61);
			LeaveRule_modify_expr();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:538:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 62);
		TraceIn("cond_expr_item", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(538, 24);
		try
		{
			// SugarCpp.g:538:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:538:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(538, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4363);
			or_expr422=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr422.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 62);
			LeaveRule("cond_expr_item", 62);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(538, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:539:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 63);
		TraceIn("cond_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal423 = default(IToken);
		IToken char_literal424 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal423_tree = default(CommonTree);
		CommonTree char_literal424_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(539, 1);
		try
		{
			// SugarCpp.g:540:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:540:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(540, 4);
			// SugarCpp.g:540:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:540:5: a= or_expr
			{
			DebugLocation(540, 6);
			PushFollow(Follow._or_expr_in_cond_expr4375);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 540:15: -> $a
			{
				DebugLocation(540, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(540, 22);
			// SugarCpp.g:540:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==121))
			{
				alt187 = 1;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:540:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(540, 23);
				char_literal423=(IToken)Match(input,121,Follow._121_in_cond_expr4384);  
				stream_121.Add(char_literal423);

				DebugLocation(540, 27);
				// SugarCpp.g:540:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==IDENT||LA186_0==NUMBER||LA186_0==STRING||LA186_0==81||LA186_0==86||LA186_0==88||LA186_0==90||(LA186_0>=92 && LA186_0<=93)||(LA186_0>=96 && LA186_0<=97)||LA186_0==123||(LA186_0>=150 && LA186_0<=151)||LA186_0==170))
				{
					alt186 = 1;
				}
				else if ((LA186_0==DEDENT||LA186_0==INDENT||LA186_0==NEWLINE||LA186_0==84||LA186_0==87||LA186_0==89||LA186_0==91||(LA186_0>=94 && LA186_0<=95)||LA186_0==98||LA186_0==104||(LA186_0>=107 && LA186_0<=108)||LA186_0==112||LA186_0==114||LA186_0==116||LA186_0==120||LA186_0==125||LA186_0==127||LA186_0==131||LA186_0==136||(LA186_0>=140 && LA186_0<=141)||LA186_0==143||(LA186_0>=156 && LA186_0<=157)||LA186_0==160||LA186_0==162||(LA186_0>=165 && LA186_0<=166)||LA186_0==168))
				{
					alt186 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:540:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(540, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4390);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(540, 46);
					// SugarCpp.g:540:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt185=2;
					try { DebugEnterSubRule(185);
					try { DebugEnterDecision(185, false);
					int LA185_0 = input.LA(1);

					if ((LA185_0==105))
					{
						alt185 = 1;
					}
					else if ((LA185_0==DEDENT||LA185_0==INDENT||LA185_0==NEWLINE||LA185_0==84||LA185_0==87||LA185_0==89||LA185_0==91||(LA185_0>=94 && LA185_0<=95)||LA185_0==98||LA185_0==104||(LA185_0>=107 && LA185_0<=108)||LA185_0==112||LA185_0==114||LA185_0==116||LA185_0==120||LA185_0==125||LA185_0==127||LA185_0==131||LA185_0==136||(LA185_0>=140 && LA185_0<=141)||LA185_0==143||(LA185_0>=156 && LA185_0<=157)||LA185_0==160||LA185_0==162||(LA185_0>=165 && LA185_0<=166)||LA185_0==168))
					{
						alt185 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(185); }
					switch (alt185)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:540:48: ':' b= cond_expr_item
						{
						DebugLocation(540, 48);
						char_literal424=(IToken)Match(input,105,Follow._105_in_cond_expr4394);  
						stream_105.Add(char_literal424);

						DebugLocation(540, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4398);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, b, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 540:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(540, 72);
							// SugarCpp.g:540:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(540, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(540, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(540, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(540, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:541:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 541:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(541, 20);
							// SugarCpp.g:541:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(541, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(541, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(541, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(185); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:543:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 543:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(543, 14);
						// SugarCpp.g:543:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(543, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(543, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(186); }


				}
				break;

			}
			} finally { DebugExitSubRule(187); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 63);
			LeaveRule("cond_expr", 63);
			LeaveRule_cond_expr();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:547:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 64);
		TraceIn("or_op", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set425 = default(IToken);

		CommonTree set425_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(547, 19);
		try
		{
			// SugarCpp.g:547:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(547, 6);

			set425=(IToken)input.LT(1);
			if (input.LA(1)==152||input.LA(1)==169)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set425));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 64);
			LeaveRule("or_op", 64);
			LeaveRule_or_op();
		}
		DebugLocation(547, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:548:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 65);
		TraceIn("or_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(548, 1);
		try
		{
			// SugarCpp.g:549:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:549:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(549, 4);
			// SugarCpp.g:549:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:549:5: a= and_expr
			{
			DebugLocation(549, 6);
			PushFollow(Follow._and_expr_in_or_expr4512);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 549:16: -> $a
			{
				DebugLocation(549, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(549, 23);
			// SugarCpp.g:549:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(188);
			while (true)
			{
				int alt188=2;
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==152||LA188_0==169))
				{
					alt188 = 1;
				}


				} finally { DebugExitDecision(188); }
				switch ( alt188 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:549:24: op= or_op b= and_expr
					{
					DebugLocation(549, 26);
					PushFollow(Follow._or_op_in_or_expr4523);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(549, 34);
					PushFollow(Follow._and_expr_in_or_expr4527);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 549:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(549, 47);
						// SugarCpp.g:549:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(549, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(549, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(549, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(549, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop188;
				}
			}

			loop188:
				;

			} finally { DebugExitSubRule(188); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 65);
			LeaveRule("or_expr", 65);
			LeaveRule_or_expr();
		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:552:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 66);
		TraceIn("and_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set426 = default(IToken);

		CommonTree set426_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(552, 21);
		try
		{
			// SugarCpp.g:552:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(552, 7);

			set426=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==129)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set426));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 66);
			LeaveRule("and_op", 66);
			LeaveRule_and_op();
		}
		DebugLocation(552, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:553:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 67);
		TraceIn("and_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(553, 1);
		try
		{
			// SugarCpp.g:554:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:554:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(554, 4);
			// SugarCpp.g:554:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:554:5: a= bit_or
			{
			DebugLocation(554, 6);
			PushFollow(Follow._bit_or_in_and_expr4569);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 554:14: -> $a
			{
				DebugLocation(554, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(554, 21);
			// SugarCpp.g:554:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==85||LA189_0==129))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:554:22: op= and_op b= bit_or
					{
					DebugLocation(554, 24);
					PushFollow(Follow._and_op_in_and_expr4580);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(554, 33);
					PushFollow(Follow._bit_or_in_and_expr4584);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, and_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 554:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(554, 44);
						// SugarCpp.g:554:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(554, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(554, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(554, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(554, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 67);
			LeaveRule("and_expr", 67);
			LeaveRule_and_expr();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:557:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 68);
		TraceIn("bit_or", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal427 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal427_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(557, 1);
		try
		{
			// SugarCpp.g:558:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:558:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(558, 4);
			// SugarCpp.g:558:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:558:5: a= bit_xor
			{
			DebugLocation(558, 6);
			PushFollow(Follow._bit_xor_in_bit_or4615);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 558:15: -> $a
			{
				DebugLocation(558, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(558, 22);
			// SugarCpp.g:558:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==167))
				{
					alt190 = 1;
				}


				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:23: '|' b= bit_xor
					{
					DebugLocation(558, 23);
					char_literal427=(IToken)Match(input,167,Follow._167_in_bit_or4624);  
					stream_167.Add(char_literal427);

					DebugLocation(558, 28);
					PushFollow(Follow._bit_xor_in_bit_or4628);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 167, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 558:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(558, 40);
						// SugarCpp.g:558:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(558, 51);
						adaptor.AddChild(root_1, stream_167.NextNode());
						DebugLocation(558, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(558, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 68);
			LeaveRule("bit_or", 68);
			LeaveRule_bit_or();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:561:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 69);
		TraceIn("bit_xor", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal428_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(561, 1);
		try
		{
			// SugarCpp.g:562:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:562:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(562, 4);
			// SugarCpp.g:562:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:562:5: a= bit_and
			{
			DebugLocation(562, 6);
			PushFollow(Follow._bit_and_in_bit_xor4658);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 562:15: -> $a
			{
				DebugLocation(562, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(562, 22);
			// SugarCpp.g:562:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==126))
				{
					alt191 = 1;
				}


				} finally { DebugExitDecision(191); }
				switch ( alt191 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:562:23: '^' b= bit_and
					{
					DebugLocation(562, 23);
					char_literal428=(IToken)Match(input,126,Follow._126_in_bit_xor4667);  
					stream_126.Add(char_literal428);

					DebugLocation(562, 28);
					PushFollow(Follow._bit_and_in_bit_xor4671);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 126, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(562, 40);
						// SugarCpp.g:562:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(562, 51);
						adaptor.AddChild(root_1, stream_126.NextNode());
						DebugLocation(562, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(562, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop191;
				}
			}

			loop191:
				;

			} finally { DebugExitSubRule(191); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 69);
			LeaveRule("bit_xor", 69);
			LeaveRule_bit_xor();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:565:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 70);
		TraceIn("bit_and", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal429 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal429_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(565, 1);
		try
		{
			// SugarCpp.g:566:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:566:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(566, 4);
			// SugarCpp.g:566:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:566:5: a= cmp_expr
			{
			DebugLocation(566, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4701);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 566:16: -> $a
			{
				DebugLocation(566, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(566, 23);
			// SugarCpp.g:566:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=2;
				try { DebugEnterDecision(192, false);
				int LA192_0 = input.LA(1);

				if ((LA192_0==86))
				{
					alt192 = 1;
				}


				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:566:24: '&' b= cmp_expr
					{
					DebugLocation(566, 24);
					char_literal429=(IToken)Match(input,86,Follow._86_in_bit_and4710);  
					stream_86.Add(char_literal429);

					DebugLocation(566, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4714);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 566:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(566, 42);
						// SugarCpp.g:566:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(566, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(566, 53);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(566, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(566, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 70);
			LeaveRule("bit_and", 70);
			LeaveRule_bit_and();
		}
		DebugLocation(567, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:569:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 71);
		TraceIn("chain_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set430 = default(IToken);

		CommonTree set430_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(569, 64);
		try
		{
			// SugarCpp.g:569:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(569, 9);

			set430=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=144 && input.LA(1)<=145))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set430));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 71);
			LeaveRule("chain_op", 71);
			LeaveRule_chain_op();
		}
		DebugLocation(569, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:570:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 72);
		TraceIn("no_less_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set431 = default(IToken);

		CommonTree set431_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(570, 60);
		try
		{
			// SugarCpp.g:570:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(570, 11);

			set431=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=144 && input.LA(1)<=145))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set431));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 72);
			LeaveRule("no_less_op", 72);
			LeaveRule_no_less_op();
		}
		DebugLocation(570, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:571:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 73);
		TraceIn("chain_list", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr433 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(571, 35);
		try
		{
			// SugarCpp.g:571:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:571:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(571, 13);
			// SugarCpp.g:571:13: ( chain_op shift_expr )+
			int cnt193=0;
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==82||LA193_0==109||LA193_0==113||LA193_0==115||(LA193_0>=117 && LA193_0<=118)||(LA193_0>=144 && LA193_0<=145)))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:14: chain_op shift_expr
					{
					DebugLocation(571, 14);
					PushFollow(Follow._chain_op_in_chain_list4806);
					chain_op432=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op432.Tree);
					DebugLocation(571, 23);
					PushFollow(Follow._shift_expr_in_chain_list4808);
					shift_expr433=shift_expr();
					PopFollow();

					adaptor.AddChild(root_0, shift_expr433.Tree);

					}
					break;

				default:
					if (cnt193 >= 1)
						goto loop193;

					EarlyExitException eee193 = new EarlyExitException( 193, input );
					DebugRecognitionException(eee193);
					throw eee193;
				}
				cnt193++;
			}
			loop193:
				;

			} finally { DebugExitSubRule(193); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 73);
			LeaveRule("chain_list", 73);
			LeaveRule_chain_list();
		}
		DebugLocation(571, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:572:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 74);
		TraceIn("cmp_expr", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal434 = default(IToken);
		IToken char_literal436 = default(IToken);
		IToken char_literal437 = default(IToken);
		IToken char_literal439 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list440 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list441 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree char_literal436_tree = default(CommonTree);
		CommonTree char_literal437_tree = default(CommonTree);
		CommonTree char_literal439_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(572, 1);
		try
		{
			// SugarCpp.g:573:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:573:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(573, 4);
			// SugarCpp.g:573:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:573:5: a= shift_expr
			{
			DebugLocation(573, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr4822);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 573:18: -> $a
			{
				DebugLocation(573, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(573, 25);
			// SugarCpp.g:573:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt198=3;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==109))
			{
				alt198 = 1;
			}
			else if ((LA198_0==82||LA198_0==113||LA198_0==115||(LA198_0>=117 && LA198_0<=118)||(LA198_0>=144 && LA198_0<=145)))
			{
				alt198 = 2;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:573:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(573, 27);
				char_literal434=(IToken)Match(input,109,Follow._109_in_cmp_expr4832);  
				stream_109.Add(char_literal434);

				DebugLocation(573, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr4836);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(573, 44);
				// SugarCpp.g:573:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt196=3;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt196 = 1;
					}
					break;
				case 117:
					{
					int LA196_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt196 = 1;
					}
					else if ((true))
					{
						alt196 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 196, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 82:
				case 109:
				case 113:
				case 115:
				case 118:
				case 144:
				case 145:
					{
					alt196 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 84:
				case 85:
				case 86:
				case 87:
				case 89:
				case 91:
				case 94:
				case 95:
				case 98:
				case 104:
				case 105:
				case 107:
				case 108:
				case 112:
				case 114:
				case 116:
				case 120:
				case 121:
				case 125:
				case 126:
				case 127:
				case 129:
				case 131:
				case 136:
				case 140:
				case 141:
				case 143:
				case 152:
				case 156:
				case 157:
				case 160:
				case 162:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
					{
					alt196 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:573:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(573, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(573, 76);
					// SugarCpp.g:573:76: ( ident )*
					try { DebugEnterSubRule(194);
					while (true)
					{
						int alt194=2;
						try { DebugEnterDecision(194, false);
						int LA194_0 = input.LA(1);

						if ((LA194_0==IDENT))
						{
							alt194 = 1;
						}


						} finally { DebugExitDecision(194); }
						switch ( alt194 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:573:76: ident
							{
							DebugLocation(573, 76);
							PushFollow(Follow._ident_in_cmp_expr4842);
							ident435=ident();
							PopFollow();

							stream_ident.Add(ident435.Tree);

							}
							break;

						default:
							goto loop194;
						}
					}

					loop194:
						;

					} finally { DebugExitSubRule(194); }

					DebugLocation(573, 83);
					char_literal436=(IToken)Match(input,117,Follow._117_in_cmp_expr4845);  
					stream_117.Add(char_literal436);

					DebugLocation(573, 87);
					char_literal437=(IToken)Match(input,88,Follow._88_in_cmp_expr4847);  
					stream_88.Add(char_literal437);

					DebugLocation(573, 91);
					// SugarCpp.g:573:91: ( expr_list )?
					int alt195=2;
					try { DebugEnterSubRule(195);
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==IDENT||LA195_0==NUMBER||LA195_0==STRING||LA195_0==81||LA195_0==86||LA195_0==88||LA195_0==90||(LA195_0>=92 && LA195_0<=93)||(LA195_0>=96 && LA195_0<=97)||(LA195_0>=123 && LA195_0<=124)||LA195_0==146||LA195_0==148||(LA195_0>=150 && LA195_0<=151)||LA195_0==170))
					{
						alt195 = 1;
					}
					} finally { DebugExitDecision(195); }
					switch (alt195)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:573:91: expr_list
						{
						DebugLocation(573, 91);
						PushFollow(Follow._expr_list_in_cmp_expr4849);
						expr_list438=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list438.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(195); }

					DebugLocation(573, 102);
					char_literal439=(IToken)Match(input,89,Follow._89_in_cmp_expr4852);  
					stream_89.Add(char_literal439);



					{
					// AST REWRITE
					// elements: cmp_expr, ident, expr_list, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 573:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(573, 109);
						// SugarCpp.g:573:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(573, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(573, 131);
						// SugarCpp.g:573:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(573, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(573, 155);
						// SugarCpp.g:573:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(573, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(573, 163);
						// SugarCpp.g:573:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(573, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:574:46: chain_list
					{
					DebugLocation(574, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4921);
					chain_list440=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list440.Tree);


					{
					// AST REWRITE
					// elements: b, 109, chain_list, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(574, 60);
						// SugarCpp.g:574:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(574, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(574, 84);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(574, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(574, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:575:16: 
					{

					{
					// AST REWRITE
					// elements: 109, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 575:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(575, 19);
						// SugarCpp.g:575:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(575, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(575, 30);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(575, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(575, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(196); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:576:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(576, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4998);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(576, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5002);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(576, 54);
				// SugarCpp.g:576:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt197=2;
				try { DebugEnterSubRule(197);
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==82||LA197_0==109||LA197_0==113||LA197_0==115||(LA197_0>=117 && LA197_0<=118)||(LA197_0>=144 && LA197_0<=145)))
				{
					alt197 = 1;
				}
				else if ((LA197_0==DEDENT||LA197_0==INDENT||LA197_0==NEWLINE||(LA197_0>=84 && LA197_0<=87)||LA197_0==89||LA197_0==91||(LA197_0>=94 && LA197_0<=95)||LA197_0==98||(LA197_0>=104 && LA197_0<=105)||(LA197_0>=107 && LA197_0<=108)||LA197_0==112||LA197_0==114||LA197_0==116||(LA197_0>=120 && LA197_0<=121)||(LA197_0>=125 && LA197_0<=127)||LA197_0==129||LA197_0==131||LA197_0==136||(LA197_0>=140 && LA197_0<=141)||LA197_0==143||LA197_0==152||(LA197_0>=156 && LA197_0<=157)||LA197_0==160||LA197_0==162||(LA197_0>=165 && LA197_0<=169)))
				{
					alt197 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 197, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(197); }
				switch (alt197)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:576:56: chain_list
					{
					DebugLocation(576, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5006);
					chain_list441=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list441.Tree);


					{
					// AST REWRITE
					// elements: chain_list, op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 576:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(576, 70);
						// SugarCpp.g:576:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(576, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(576, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(576, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(576, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(576, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:577:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(577, 20);
						// SugarCpp.g:577:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(577, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(577, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(577, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(197); }


				}
				break;

			}
			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 74);
			LeaveRule("cmp_expr", 74);
			LeaveRule_cmp_expr();
		}
		DebugLocation(580, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:582:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 75);
		TraceIn("shift_expr_op", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set442 = default(IToken);

		CommonTree set442_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(582, 27);
		try
		{
			// SugarCpp.g:582:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(582, 14);

			set442=(IToken)input.LT(1);
			if (input.LA(1)==111||input.LA(1)==119)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set442));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 75);
			LeaveRule("shift_expr_op", 75);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(582, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:583:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 76);
		TraceIn("shift_expr", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op443 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(583, 1);
		try
		{
			// SugarCpp.g:584:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:584:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(584, 4);
			// SugarCpp.g:584:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:584:5: a= add_expr
			{
			DebugLocation(584, 6);
			PushFollow(Follow._add_expr_in_shift_expr5108);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 584:16: -> $a
			{
				DebugLocation(584, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(584, 23);
			// SugarCpp.g:584:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(199);
			while (true)
			{
				int alt199=2;
				try { DebugEnterDecision(199, false);
				int LA199_0 = input.LA(1);

				if ((LA199_0==111||LA199_0==119))
				{
					alt199 = 1;
				}


				} finally { DebugExitDecision(199); }
				switch ( alt199 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:584:24: shift_expr_op b= add_expr
					{
					DebugLocation(584, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5117);
					shift_expr_op443=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op443.Tree);
					DebugLocation(584, 39);
					PushFollow(Follow._add_expr_in_shift_expr5121);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 584:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(584, 52);
						// SugarCpp.g:584:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(584, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(584, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(584, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(584, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop199;
				}
			}

			loop199:
				;

			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 76);
			LeaveRule("shift_expr", 76);
			LeaveRule_shift_expr();
		}
		DebugLocation(585, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:587:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 77);
		TraceIn("add_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal444 = default(IToken);
		IToken char_literal445 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal444_tree = default(CommonTree);
		CommonTree char_literal445_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(587, 1);
		try
		{
			// SugarCpp.g:588:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:588:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(588, 4);
			// SugarCpp.g:588:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:588:5: a= mul_expr
			{
			DebugLocation(588, 6);
			PushFollow(Follow._mul_expr_in_add_expr5151);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 588:16: -> $a
			{
				DebugLocation(588, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(588, 23);
			// SugarCpp.g:588:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=3;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==92))
				{
					alt200 = 1;
				}
				else if ((LA200_0==96))
				{
					alt200 = 2;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:588:25: '+' b= mul_expr
					{
					DebugLocation(588, 25);
					char_literal444=(IToken)Match(input,92,Follow._92_in_add_expr5161);  
					stream_92.Add(char_literal444);

					DebugLocation(588, 30);
					PushFollow(Follow._mul_expr_in_add_expr5165);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 588:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(588, 43);
						// SugarCpp.g:588:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(588, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(588, 54);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(588, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(588, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:589:10: '-' b= mul_expr
					{
					DebugLocation(589, 10);
					char_literal445=(IToken)Match(input,96,Follow._96_in_add_expr5190);  
					stream_96.Add(char_literal445);

					DebugLocation(589, 15);
					PushFollow(Follow._mul_expr_in_add_expr5194);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(589, 28);
						// SugarCpp.g:589:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(589, 39);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(589, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(589, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 77);
			LeaveRule("add_expr", 77);
			LeaveRule_add_expr();
		}
		DebugLocation(591, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:593:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 78);
		TraceIn("mul_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal446 = default(IToken);
		IToken char_literal447 = default(IToken);
		IToken char_literal448 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal448_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(593, 1);
		try
		{
			// SugarCpp.g:594:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:594:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(594, 4);
			// SugarCpp.g:594:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:594:5: a= infix_expr
			{
			DebugLocation(594, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5232);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 594:18: -> $a
			{
				DebugLocation(594, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(594, 25);
			// SugarCpp.g:594:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=4;
				try { DebugEnterDecision(201, false);
				switch (input.LA(1))
				{
				case 90:
					{
					alt201 = 1;
					}
					break;
				case 103:
					{
					alt201 = 2;
					}
					break;
				case 83:
					{
					alt201 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:594:27: '*' b= infix_expr
					{
					DebugLocation(594, 27);
					char_literal446=(IToken)Match(input,90,Follow._90_in_mul_expr5242);  
					stream_90.Add(char_literal446);

					DebugLocation(594, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5246);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 90
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 594:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(594, 47);
						// SugarCpp.g:594:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(594, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(594, 58);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(594, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(594, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:595:12: '/' b= infix_expr
					{
					DebugLocation(595, 12);
					char_literal447=(IToken)Match(input,103,Follow._103_in_mul_expr5273);  
					stream_103.Add(char_literal447);

					DebugLocation(595, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5277);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 103, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 595:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(595, 32);
						// SugarCpp.g:595:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(595, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(595, 43);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(595, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(595, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:596:12: '%' b= infix_expr
					{
					DebugLocation(596, 12);
					char_literal448=(IToken)Match(input,83,Follow._83_in_mul_expr5304);  
					stream_83.Add(char_literal448);

					DebugLocation(596, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5308);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 596:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(596, 32);
						// SugarCpp.g:596:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(596, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(596, 43);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(596, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(596, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 78);
			LeaveRule("mul_expr", 78);
			LeaveRule_mul_expr();
		}
		DebugLocation(598, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:600:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 79);
		TraceIn("infix_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func449 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(600, 1);
		try
		{
			// SugarCpp.g:601:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:601:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(601, 4);
			// SugarCpp.g:601:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:601:5: a= selector_expr
			{
			DebugLocation(601, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5348);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 601:21: -> $a
			{
				DebugLocation(601, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(601, 28);
			// SugarCpp.g:601:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(202);
			while (true)
			{
				int alt202=2;
				try { DebugEnterDecision(202, false);
				int LA202_0 = input.LA(1);

				if ((LA202_0==128))
				{
					alt202 = 1;
				}


				} finally { DebugExitDecision(202); }
				switch ( alt202 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:601:30: infix_func b= selector_expr
					{
					DebugLocation(601, 30);
					PushFollow(Follow._infix_func_in_infix_expr5358);
					infix_func449=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func449.Tree);
					DebugLocation(601, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5362);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 601:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(601, 61);
						// SugarCpp.g:601:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(601, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(601, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(601, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(601, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop202;
				}
			}

			loop202:
				;

			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 79);
			LeaveRule("infix_expr", 79);
			LeaveRule_infix_expr();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:604:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 80);
		TraceIn("selector_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal450 = default(IToken);
		IToken string_literal451 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal450_tree = default(CommonTree);
		CommonTree string_literal451_tree = default(CommonTree);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(604, 1);
		try
		{
			// SugarCpp.g:605:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:605:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(605, 4);
			// SugarCpp.g:605:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:605:5: a= cast_expr
			{
			DebugLocation(605, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5394);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 605:17: -> $a
			{
				DebugLocation(605, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(605, 24);
			// SugarCpp.g:605:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=3;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==100))
				{
					alt203 = 1;
				}
				else if ((LA203_0==102))
				{
					alt203 = 2;
				}


				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:605:26: '->*' b= ident
					{
					DebugLocation(605, 26);
					string_literal450=(IToken)Match(input,100,Follow._100_in_selector_expr5404);  
					stream_100.Add(string_literal450);

					DebugLocation(605, 33);
					PushFollow(Follow._ident_in_selector_expr5408);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 100, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 605:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(605, 43);
						// SugarCpp.g:605:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(605, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(605, 57);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(605, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(605, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:606:11: '.*' b= ident
					{
					DebugLocation(606, 11);
					string_literal451=(IToken)Match(input,102,Follow._102_in_selector_expr5434);  
					stream_102.Add(string_literal451);

					DebugLocation(606, 18);
					PushFollow(Follow._ident_in_selector_expr5439);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 102, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(606, 28);
						// SugarCpp.g:606:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(606, 42);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(606, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(606, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 80);
			LeaveRule("selector_expr", 80);
			LeaveRule_selector_expr();
		}
		DebugLocation(608, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:610:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 81);
		TraceIn("cast_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal452 = default(IToken);
		IToken char_literal453 = default(IToken);
		IToken char_literal455 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name454 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal452_tree = default(CommonTree);
		CommonTree char_literal453_tree = default(CommonTree);
		CommonTree char_literal455_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(610, 1);
		try
		{
			// SugarCpp.g:611:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:611:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(611, 4);
			// SugarCpp.g:611:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:611:5: a= prefix_expr
			{
			DebugLocation(611, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5479);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 611:19: -> $a
			{
				DebugLocation(611, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(611, 26);
			// SugarCpp.g:611:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_0 = input.LA(1);

			if ((LA204_0==130))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:611:27: 'as' '(' type_name ')'
				{
				DebugLocation(611, 27);
				string_literal452=(IToken)Match(input,130,Follow._130_in_cast_expr5488);  
				stream_130.Add(string_literal452);

				DebugLocation(611, 32);
				char_literal453=(IToken)Match(input,88,Follow._88_in_cast_expr5490);  
				stream_88.Add(char_literal453);

				DebugLocation(611, 36);
				PushFollow(Follow._type_name_in_cast_expr5492);
				type_name454=type_name();
				PopFollow();

				stream_type_name.Add(type_name454.Tree);
				DebugLocation(611, 46);
				char_literal455=(IToken)Match(input,89,Follow._89_in_cast_expr5494);  
				stream_89.Add(char_literal455);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 611:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(611, 53);
					// SugarCpp.g:611:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(611, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(611, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(611, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 81);
			LeaveRule("cast_expr", 81);
			LeaveRule_cast_expr();
		}
		DebugLocation(612, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:614:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 82);
		TraceIn("prefix_expr_op", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set456 = default(IToken);

		CommonTree set456_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(614, 71);
		try
		{
			// SugarCpp.g:614:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(614, 15);

			set456=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==86||input.LA(1)==90||(input.LA(1)>=92 && input.LA(1)<=93)||(input.LA(1)>=96 && input.LA(1)<=97)||input.LA(1)==151||input.LA(1)==170)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set456));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 82);
			LeaveRule("prefix_expr_op", 82);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(614, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:615:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 83);
		TraceIn("prefix_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal459 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken char_literal463 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr458 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr464 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal459_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree char_literal463_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(615, 1);
		try
		{
			// SugarCpp.g:616:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt206=3;
			try { DebugEnterDecision(206, false);
			switch (input.LA(1))
			{
			case 81:
			case 86:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 151:
			case 170:
				{
				alt206 = 1;
				}
				break;
			case 150:
				{
				alt206 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 88:
			case 123:
				{
				alt206 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:616:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(616, 4);
				// SugarCpp.g:616:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:616:5: prefix_expr_op prefix_expr
				{
				DebugLocation(616, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5556);
				prefix_expr_op457=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op457.Tree);
				DebugLocation(616, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5558);
				prefix_expr458=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr458.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 616:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(616, 36);
					// SugarCpp.g:616:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(616, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(616, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(616, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:617:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(617, 4);
				string_literal459=(IToken)Match(input,150,Follow._150_in_prefix_expr5574);  
				stream_150.Add(string_literal459);

				DebugLocation(617, 10);
				PushFollow(Follow._type_name_in_prefix_expr5576);
				type_name460=type_name();
				PopFollow();

				stream_type_name.Add(type_name460.Tree);
				DebugLocation(617, 20);
				char_literal461=(IToken)Match(input,88,Follow._88_in_prefix_expr5578);  
				stream_88.Add(char_literal461);

				DebugLocation(617, 24);
				// SugarCpp.g:617:24: ( expr_list )?
				int alt205=2;
				try { DebugEnterSubRule(205);
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==IDENT||LA205_0==NUMBER||LA205_0==STRING||LA205_0==81||LA205_0==86||LA205_0==88||LA205_0==90||(LA205_0>=92 && LA205_0<=93)||(LA205_0>=96 && LA205_0<=97)||(LA205_0>=123 && LA205_0<=124)||LA205_0==146||LA205_0==148||(LA205_0>=150 && LA205_0<=151)||LA205_0==170))
				{
					alt205 = 1;
				}
				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:617:24: expr_list
					{
					DebugLocation(617, 24);
					PushFollow(Follow._expr_list_in_prefix_expr5580);
					expr_list462=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list462.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(205); }

				DebugLocation(617, 35);
				char_literal463=(IToken)Match(input,89,Follow._89_in_prefix_expr5583);  
				stream_89.Add(char_literal463);



				{
				// AST REWRITE
				// elements: type_name, expr_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 617:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(617, 42);
					// SugarCpp.g:617:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(617, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(617, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(617, 68);
					// SugarCpp.g:617:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(617, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:618:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(618, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5599);
				suffix_expr464=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr464.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 83);
			LeaveRule("prefix_expr", 83);
			LeaveRule_prefix_expr();
		}
		DebugLocation(619, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:621:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 84);
		TraceIn("expr_list", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal466 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr465 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr467 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal466_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(621, 1);
		try
		{
			// SugarCpp.g:622:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:622:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(622, 4);
			PushFollow(Follow._expr_in_expr_list5611);
			expr465=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr465.Tree);
			DebugLocation(622, 9);
			// SugarCpp.g:622:9: ( ',' ! expr )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==95))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:622:10: ',' ! expr
					{
					DebugLocation(622, 13);
					char_literal466=(IToken)Match(input,95,Follow._95_in_expr_list5614); 
					DebugLocation(622, 15);
					PushFollow(Follow._expr_in_expr_list5617);
					expr467=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr467.Tree);

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 84);
			LeaveRule("expr_list", 84);
			LeaveRule_expr_list();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:625:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 85);
		TraceIn("suffix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal468 = default(IToken);
		IToken string_literal469 = default(IToken);
		IToken char_literal470 = default(IToken);
		IToken string_literal472 = default(IToken);
		IToken char_literal474 = default(IToken);
		IToken char_literal476 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken char_literal478 = default(IToken);
		IToken char_literal480 = default(IToken);
		IToken char_literal481 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list479 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal468_tree = default(CommonTree);
		CommonTree string_literal469_tree = default(CommonTree);
		CommonTree char_literal470_tree = default(CommonTree);
		CommonTree string_literal472_tree = default(CommonTree);
		CommonTree char_literal474_tree = default(CommonTree);
		CommonTree char_literal476_tree = default(CommonTree);
		CommonTree char_literal477_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		CommonTree char_literal480_tree = default(CommonTree);
		CommonTree char_literal481_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(625, 1);
		try
		{
			// SugarCpp.g:626:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:626:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(626, 4);
			// SugarCpp.g:626:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:626:5: a= atom_expr
			{
			DebugLocation(626, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5633);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 626:17: -> $a
			{
				DebugLocation(626, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(626, 24);
			// SugarCpp.g:626:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=7;
				try { DebugEnterDecision(210, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt210 = 1;
					}
					break;
				case 97:
					{
					alt210 = 2;
					}
					break;
				case 101:
					{
					alt210 = 3;
					}
					break;
				case 99:
					{
					alt210 = 4;
					}
					break;
				case 88:
					{
					alt210 = 5;
					}
					break;
				case 124:
					{
					alt210 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:626:26: '++'
					{
					DebugLocation(626, 26);
					string_literal468=(IToken)Match(input,93,Follow._93_in_suffix_expr5643);  
					stream_93.Add(string_literal468);



					{
					// AST REWRITE
					// elements: 93, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(626, 34);
						// SugarCpp.g:626:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(626, 48);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(626, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:627:14: '--'
					{
					DebugLocation(627, 14);
					string_literal469=(IToken)Match(input,97,Follow._97_in_suffix_expr5669);  
					stream_97.Add(string_literal469);



					{
					// AST REWRITE
					// elements: suffix_expr, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 627:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(627, 22);
						// SugarCpp.g:627:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(627, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(627, 36);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(627, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:628:11: '.' ident
					{
					DebugLocation(628, 11);
					char_literal470=(IToken)Match(input,101,Follow._101_in_suffix_expr5692);  
					stream_101.Add(char_literal470);

					DebugLocation(628, 15);
					PushFollow(Follow._ident_in_suffix_expr5694);
					ident471=ident();
					PopFollow();

					stream_ident.Add(ident471.Tree);


					{
					// AST REWRITE
					// elements: ident, 101, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 628:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(628, 24);
						// SugarCpp.g:628:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(628, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(628, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(628, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(628, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:629:11: '->' ident
					{
					DebugLocation(629, 11);
					string_literal472=(IToken)Match(input,99,Follow._99_in_suffix_expr5719);  
					stream_99.Add(string_literal472);

					DebugLocation(629, 16);
					PushFollow(Follow._ident_in_suffix_expr5721);
					ident473=ident();
					PopFollow();

					stream_ident.Add(ident473.Tree);


					{
					// AST REWRITE
					// elements: ident, 99, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 629:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(629, 25);
						// SugarCpp.g:629:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(629, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(629, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(629, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(629, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:630:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(630, 11);
					char_literal474=(IToken)Match(input,88,Follow._88_in_suffix_expr5746);  
					stream_88.Add(char_literal474);

					DebugLocation(630, 15);
					// SugarCpp.g:630:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt208=2;
					try { DebugEnterSubRule(208);
					try { DebugEnterDecision(208, false);
					int LA208_0 = input.LA(1);

					if ((LA208_0==IDENT||LA208_0==NUMBER||LA208_0==STRING||LA208_0==81||LA208_0==86||LA208_0==88||LA208_0==90||(LA208_0>=92 && LA208_0<=93)||(LA208_0>=96 && LA208_0<=97)||(LA208_0>=123 && LA208_0<=124)||LA208_0==146||LA208_0==148||(LA208_0>=150 && LA208_0<=151)||LA208_0==170))
					{
						alt208 = 1;
					}
					else if ((LA208_0==89))
					{
						alt208 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(208); }
					switch (alt208)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:630:17: expr_list ')'
						{
						DebugLocation(630, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5750);
						expr_list475=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list475.Tree);
						DebugLocation(630, 27);
						char_literal476=(IToken)Match(input,89,Follow._89_in_suffix_expr5752);  
						stream_89.Add(char_literal476);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 630:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(630, 34);
							// SugarCpp.g:630:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(630, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(630, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(630, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:631:17: ')'
						{
						DebugLocation(631, 17);
						char_literal477=(IToken)Match(input,89,Follow._89_in_suffix_expr5781);  
						stream_89.Add(char_literal477);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 631:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(631, 24);
							// SugarCpp.g:631:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(631, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(631, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(208); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:633:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(633, 11);
					char_literal478=(IToken)Match(input,124,Follow._124_in_suffix_expr5812);  
					stream_124.Add(char_literal478);

					DebugLocation(633, 15);
					// SugarCpp.g:633:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt209=2;
					try { DebugEnterSubRule(209);
					try { DebugEnterDecision(209, false);
					int LA209_0 = input.LA(1);

					if ((LA209_0==IDENT||LA209_0==NUMBER||LA209_0==STRING||LA209_0==81||LA209_0==86||LA209_0==88||LA209_0==90||(LA209_0>=92 && LA209_0<=93)||(LA209_0>=96 && LA209_0<=97)||(LA209_0>=123 && LA209_0<=124)||LA209_0==146||LA209_0==148||(LA209_0>=150 && LA209_0<=151)||LA209_0==170))
					{
						alt209 = 1;
					}
					else if ((LA209_0==125))
					{
						alt209 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 209, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(209); }
					switch (alt209)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:633:17: expr_list ']'
						{
						DebugLocation(633, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5816);
						expr_list479=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list479.Tree);
						DebugLocation(633, 27);
						char_literal480=(IToken)Match(input,125,Follow._125_in_suffix_expr5818);  
						stream_125.Add(char_literal480);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 633:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(633, 34);
							// SugarCpp.g:633:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(633, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(633, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(633, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:634:17: ']'
						{
						DebugLocation(634, 17);
						char_literal481=(IToken)Match(input,125,Follow._125_in_suffix_expr5847);  
						stream_125.Add(char_literal481);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 634:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(634, 24);
							// SugarCpp.g:634:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(634, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(634, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(209); }


					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 85);
			LeaveRule("suffix_expr", 85);
			LeaveRule_suffix_expr();
		}
		DebugLocation(638, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:640:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 86);
		TraceIn("atom_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER482 = default(IToken);
		IToken STRING484 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal487 = default(IToken);
		IToken char_literal488 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken char_literal491 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr489 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER482_tree = default(CommonTree);
		CommonTree STRING484_tree = default(CommonTree);
		CommonTree char_literal485_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		CommonTree char_literal488_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree char_literal491_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(640, 1);
		try
		{
			// SugarCpp.g:641:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt213=5;
			try { DebugEnterDecision(213, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt213 = 1;
				}
				break;
			case IDENT:
				{
				alt213 = 2;
				}
				break;
			case STRING:
				{
				alt213 = 3;
				}
				break;
			case 123:
				{
				alt213 = 4;
				}
				break;
			case 88:
				{
				alt213 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 213, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:641:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(641, 4);
				NUMBER482=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr5900); 
				NUMBER482_tree = (CommonTree)adaptor.Create(NUMBER482);
				adaptor.AddChild(root_0, NUMBER482_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:642:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(642, 4);
				PushFollow(Follow._ident_in_atom_expr5905);
				ident483=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident483.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:643:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(643, 4);
				STRING484=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr5910); 
				STRING484_tree = (CommonTree)adaptor.Create(STRING484);
				adaptor.AddChild(root_0, STRING484_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:644:4: '@' ident
				{
				DebugLocation(644, 4);
				char_literal485=(IToken)Match(input,123,Follow._123_in_atom_expr5915);  
				stream_123.Add(char_literal485);

				DebugLocation(644, 8);
				PushFollow(Follow._ident_in_atom_expr5917);
				ident486=ident();
				PopFollow();

				stream_ident.Add(ident486.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 644:14: -> ^( '@' ident )
				{
					DebugLocation(644, 17);
					// SugarCpp.g:644:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(644, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(644, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:645:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(645, 4);
				char_literal487=(IToken)Match(input,88,Follow._88_in_atom_expr5930);  
				stream_88.Add(char_literal487);

				DebugLocation(645, 9);
				PushFollow(Follow._expr_in_atom_expr5934);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(645, 15);
				// SugarCpp.g:645:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt212=2;
				try { DebugEnterSubRule(212);
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==95))
				{
					alt212 = 1;
				}
				else if ((LA212_0==89))
				{
					alt212 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 212, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(212); }
				switch (alt212)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:645:17: ( ',' expr )+ ')'
					{
					DebugLocation(645, 17);
					// SugarCpp.g:645:17: ( ',' expr )+
					int cnt211=0;
					try { DebugEnterSubRule(211);
					while (true)
					{
						int alt211=2;
						try { DebugEnterDecision(211, false);
						int LA211_0 = input.LA(1);

						if ((LA211_0==95))
						{
							alt211 = 1;
						}


						} finally { DebugExitDecision(211); }
						switch (alt211)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:645:18: ',' expr
							{
							DebugLocation(645, 18);
							char_literal488=(IToken)Match(input,95,Follow._95_in_atom_expr5939);  
							stream_95.Add(char_literal488);

							DebugLocation(645, 22);
							PushFollow(Follow._expr_in_atom_expr5941);
							expr489=expr();
							PopFollow();

							stream_expr.Add(expr489.Tree);

							}
							break;

						default:
							if (cnt211 >= 1)
								goto loop211;

							EarlyExitException eee211 = new EarlyExitException( 211, input );
							DebugRecognitionException(eee211);
							throw eee211;
						}
						cnt211++;
					}
					loop211:
						;

					} finally { DebugExitSubRule(211); }

					DebugLocation(645, 29);
					char_literal490=(IToken)Match(input,89,Follow._89_in_atom_expr5945);  
					stream_89.Add(char_literal490);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 645:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(645, 36);
						// SugarCpp.g:645:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(645, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(645, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(645, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:646:17: ')' {...}?
					{
					DebugLocation(646, 17);
					char_literal491=(IToken)Match(input,89,Follow._89_in_atom_expr5972);  
					stream_89.Add(char_literal491);

					DebugLocation(646, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 646:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(646, 40);
						// SugarCpp.g:646:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(646, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(646, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(212); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 86);
			LeaveRule("atom_expr", 86);
			LeaveRule_atom_expr();
		}
		DebugLocation(648, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:650:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 87);
		TraceIn("lvalue_item", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix492 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(650, 1);
		try
		{
			// SugarCpp.g:651:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:651:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(651, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6003);
			lvalue_prefix492=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix492.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 87);
			LeaveRule("lvalue_item", 87);
			LeaveRule_lvalue_item();
		}
		DebugLocation(652, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:654:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 88);
		TraceIn("lvalue_prefix", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix494 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix495 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(654, 1);
		try
		{
			// SugarCpp.g:655:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt214=2;
			try { DebugEnterDecision(214, false);
			int LA214_0 = input.LA(1);

			if ((LA214_0==81||LA214_0==86||LA214_0==90||(LA214_0>=92 && LA214_0<=93)||(LA214_0>=96 && LA214_0<=97)||LA214_0==151||LA214_0==170))
			{
				alt214 = 1;
			}
			else if ((LA214_0==IDENT||LA214_0==123))
			{
				alt214 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 214, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:655:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(655, 4);
				// SugarCpp.g:655:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:655:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(655, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6015);
				prefix_expr_op493=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op493.Tree);
				DebugLocation(655, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6017);
				lvalue_prefix494=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix494.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 655:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(655, 38);
					// SugarCpp.g:655:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(655, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(655, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(655, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:656:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(656, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6033);
				lvalue_suffix495=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix495.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 88);
			LeaveRule("lvalue_prefix", 88);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(657, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:659:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 89);
		TraceIn("lvalue_suffix", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal496 = default(IToken);
		IToken string_literal497 = default(IToken);
		IToken char_literal498 = default(IToken);
		IToken string_literal500 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken char_literal505 = default(IToken);
		IToken char_literal506 = default(IToken);
		IToken char_literal508 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter502 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list504 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list507 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal496_tree = default(CommonTree);
		CommonTree string_literal497_tree = default(CommonTree);
		CommonTree char_literal498_tree = default(CommonTree);
		CommonTree string_literal500_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree char_literal505_tree = default(CommonTree);
		CommonTree char_literal506_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(659, 1);
		try
		{
			// SugarCpp.g:660:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:660:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(660, 4);
			// SugarCpp.g:660:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:660:5: a= lvalue_atom
			{
			DebugLocation(660, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6047);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 660:19: -> $a
			{
				DebugLocation(660, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(660, 26);
			// SugarCpp.g:660:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=7;
				try { DebugEnterDecision(218, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt218 = 1;
					}
					break;
				case 97:
					{
					alt218 = 2;
					}
					break;
				case 101:
					{
					alt218 = 3;
					}
					break;
				case 99:
					{
					alt218 = 4;
					}
					break;
				case 88:
				case 109:
					{
					alt218 = 5;
					}
					break;
				case 124:
					{
					alt218 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:660:28: '++'
					{
					DebugLocation(660, 28);
					string_literal496=(IToken)Match(input,93,Follow._93_in_lvalue_suffix6057);  
					stream_93.Add(string_literal496);



					{
					// AST REWRITE
					// elements: 93, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 660:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(660, 36);
						// SugarCpp.g:660:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(660, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(660, 50);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(660, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:661:16: '--'
					{
					DebugLocation(661, 16);
					string_literal497=(IToken)Match(input,97,Follow._97_in_lvalue_suffix6085);  
					stream_97.Add(string_literal497);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 661:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(661, 24);
						// SugarCpp.g:661:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(661, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(661, 38);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(661, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:662:13: '.' ident
					{
					DebugLocation(662, 13);
					char_literal498=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6110);  
					stream_101.Add(char_literal498);

					DebugLocation(662, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6112);
					ident499=ident();
					PopFollow();

					stream_ident.Add(ident499.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_suffix, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 662:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(662, 26);
						// SugarCpp.g:662:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(662, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(662, 40);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(662, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(662, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:663:13: '->' ident
					{
					DebugLocation(663, 13);
					string_literal500=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6139);  
					stream_99.Add(string_literal500);

					DebugLocation(663, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6141);
					ident501=ident();
					PopFollow();

					stream_ident.Add(ident501.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 99, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 663:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(663, 27);
						// SugarCpp.g:663:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(663, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(663, 41);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(663, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(663, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:664:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(664, 13);
					// SugarCpp.g:664:13: ( generic_parameter )?
					int alt215=2;
					try { DebugEnterSubRule(215);
					try { DebugEnterDecision(215, false);
					int LA215_0 = input.LA(1);

					if ((LA215_0==109))
					{
						alt215 = 1;
					}
					} finally { DebugExitDecision(215); }
					switch (alt215)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:664:13: generic_parameter
						{
						DebugLocation(664, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6168);
						generic_parameter502=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter502.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(215); }

					DebugLocation(664, 32);
					char_literal503=(IToken)Match(input,88,Follow._88_in_lvalue_suffix6171);  
					stream_88.Add(char_literal503);

					DebugLocation(664, 36);
					// SugarCpp.g:664:36: ( expr_list )?
					int alt216=2;
					try { DebugEnterSubRule(216);
					try { DebugEnterDecision(216, false);
					int LA216_0 = input.LA(1);

					if ((LA216_0==IDENT||LA216_0==NUMBER||LA216_0==STRING||LA216_0==81||LA216_0==86||LA216_0==88||LA216_0==90||(LA216_0>=92 && LA216_0<=93)||(LA216_0>=96 && LA216_0<=97)||(LA216_0>=123 && LA216_0<=124)||LA216_0==146||LA216_0==148||(LA216_0>=150 && LA216_0<=151)||LA216_0==170))
					{
						alt216 = 1;
					}
					} finally { DebugExitDecision(216); }
					switch (alt216)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:664:36: expr_list
						{
						DebugLocation(664, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix6173);
						expr_list504=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list504.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(216); }

					DebugLocation(664, 47);
					char_literal505=(IToken)Match(input,89,Follow._89_in_lvalue_suffix6176);  
					stream_89.Add(char_literal505);



					{
					// AST REWRITE
					// elements: lvalue_suffix, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 664:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(664, 54);
						// SugarCpp.g:664:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(664, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(664, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(664, 81);
						// SugarCpp.g:664:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(664, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(664, 100);
						// SugarCpp.g:664:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(664, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:665:13: '[' ( expr_list )? ']'
					{
					DebugLocation(665, 13);
					char_literal506=(IToken)Match(input,124,Follow._124_in_lvalue_suffix6205);  
					stream_124.Add(char_literal506);

					DebugLocation(665, 17);
					// SugarCpp.g:665:17: ( expr_list )?
					int alt217=2;
					try { DebugEnterSubRule(217);
					try { DebugEnterDecision(217, false);
					int LA217_0 = input.LA(1);

					if ((LA217_0==IDENT||LA217_0==NUMBER||LA217_0==STRING||LA217_0==81||LA217_0==86||LA217_0==88||LA217_0==90||(LA217_0>=92 && LA217_0<=93)||(LA217_0>=96 && LA217_0<=97)||(LA217_0>=123 && LA217_0<=124)||LA217_0==146||LA217_0==148||(LA217_0>=150 && LA217_0<=151)||LA217_0==170))
					{
						alt217 = 1;
					}
					} finally { DebugExitDecision(217); }
					switch (alt217)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:665:17: expr_list
						{
						DebugLocation(665, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix6207);
						expr_list507=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list507.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(217); }

					DebugLocation(665, 28);
					char_literal508=(IToken)Match(input,125,Follow._125_in_lvalue_suffix6210);  
					stream_125.Add(char_literal508);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 665:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(665, 35);
						// SugarCpp.g:665:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(665, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(665, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(665, 62);
						// SugarCpp.g:665:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(665, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 89);
			LeaveRule("lvalue_suffix", 89);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(667, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:669:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 90);
		TraceIn("lvalue_atom", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal510 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident511 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal510_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(669, 1);
		try
		{
			// SugarCpp.g:670:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt219=2;
			try { DebugEnterDecision(219, false);
			int LA219_0 = input.LA(1);

			if ((LA219_0==IDENT))
			{
				alt219 = 1;
			}
			else if ((LA219_0==123))
			{
				alt219 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 219, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:670:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(670, 4);
				PushFollow(Follow._ident_in_lvalue_atom6249);
				ident509=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident509.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:671:4: '@' ident
				{
				DebugLocation(671, 4);
				char_literal510=(IToken)Match(input,123,Follow._123_in_lvalue_atom6254);  
				stream_123.Add(char_literal510);

				DebugLocation(671, 8);
				PushFollow(Follow._ident_in_lvalue_atom6256);
				ident511=ident();
				PopFollow();

				stream_ident.Add(ident511.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 671:14: -> ^( '@' ident )
				{
					DebugLocation(671, 17);
					// SugarCpp.g:671:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(671, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(671, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 90);
			LeaveRule("lvalue_atom", 90);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:674:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 91);
		TraceIn("lvalue", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal512 = default(IToken);
		IToken char_literal514 = default(IToken);
		IToken char_literal516 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item513 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item517 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal512_tree = default(CommonTree);
		CommonTree char_literal514_tree = default(CommonTree);
		CommonTree char_literal516_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(674, 1);
		try
		{
			// SugarCpp.g:675:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt221=2;
			try { DebugEnterDecision(221, false);
			int LA221_0 = input.LA(1);

			if ((LA221_0==88))
			{
				alt221 = 1;
			}
			else if ((LA221_0==IDENT||LA221_0==81||LA221_0==86||LA221_0==90||(LA221_0>=92 && LA221_0<=93)||(LA221_0>=96 && LA221_0<=97)||LA221_0==123||LA221_0==151||LA221_0==170))
			{
				alt221 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 221, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(221); }
			switch (alt221)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:675:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(675, 4);
				char_literal512=(IToken)Match(input,88,Follow._88_in_lvalue6275);  
				stream_88.Add(char_literal512);

				DebugLocation(675, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6277);
				lvalue_item513=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item513.Tree);
				DebugLocation(675, 20);
				// SugarCpp.g:675:20: ( ',' lvalue_item )+
				int cnt220=0;
				try { DebugEnterSubRule(220);
				while (true)
				{
					int alt220=2;
					try { DebugEnterDecision(220, false);
					int LA220_0 = input.LA(1);

					if ((LA220_0==95))
					{
						alt220 = 1;
					}


					} finally { DebugExitDecision(220); }
					switch (alt220)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:675:21: ',' lvalue_item
						{
						DebugLocation(675, 21);
						char_literal514=(IToken)Match(input,95,Follow._95_in_lvalue6280);  
						stream_95.Add(char_literal514);

						DebugLocation(675, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6282);
						lvalue_item515=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item515.Tree);

						}
						break;

					default:
						if (cnt220 >= 1)
							goto loop220;

						EarlyExitException eee220 = new EarlyExitException( 220, input );
						DebugRecognitionException(eee220);
						throw eee220;
					}
					cnt220++;
				}
				loop220:
					;

				} finally { DebugExitSubRule(220); }

				DebugLocation(675, 39);
				char_literal516=(IToken)Match(input,89,Follow._89_in_lvalue6286);  
				stream_89.Add(char_literal516);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 675:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(675, 46);
					// SugarCpp.g:675:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(675, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(675, 60);
					// SugarCpp.g:675:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(675, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:676:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(676, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6300);
				lvalue_item517=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item517.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 91);
			LeaveRule("lvalue", 91);
			LeaveRule_lvalue();
		}
		DebugLocation(677, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:679:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 92);
		TraceIn("ident", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT518 = default(IToken);
		IToken string_literal519 = default(IToken);
		IToken IDENT520 = default(IToken);

		CommonTree IDENT518_tree = default(CommonTree);
		CommonTree string_literal519_tree = default(CommonTree);
		CommonTree IDENT520_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(679, 1);
		try
		{
			// SugarCpp.g:680:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:680:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(680, 4);
			IDENT518=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6311); 
			IDENT518_tree = (CommonTree)adaptor.Create(IDENT518);
			adaptor.AddChild(root_0, IDENT518_tree);
			DebugLocation(680, 10);
			// SugarCpp.g:680:10: ( '::' IDENT )*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=2;
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==106))
				{
					alt222 = 1;
				}


				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:680:11: '::' IDENT
					{
					DebugLocation(680, 11);
					string_literal519=(IToken)Match(input,106,Follow._106_in_ident6314); 
					string_literal519_tree = (CommonTree)adaptor.Create(string_literal519);
					adaptor.AddChild(root_0, string_literal519_tree);
					DebugLocation(680, 16);
					IDENT520=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6316); 
					IDENT520_tree = (CommonTree)adaptor.Create(IDENT520);
					adaptor.AddChild(root_0, IDENT520_tree);

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 92);
			LeaveRule("ident", 92);
			LeaveRule_ident();
		}
		DebugLocation(681, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:683:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 93);
		TraceIn("infix_func", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal521 = default(IToken);
		IToken char_literal523 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident522 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal521_tree = default(CommonTree);
		CommonTree char_literal523_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(683, 1);
		try
		{
			// SugarCpp.g:684:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:684:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(684, 7);
			char_literal521=(IToken)Match(input,128,Follow._128_in_infix_func6329); 
			DebugLocation(684, 9);
			PushFollow(Follow._ident_in_infix_func6332);
			ident522=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident522.Tree);
			DebugLocation(684, 18);
			char_literal523=(IToken)Match(input,128,Follow._128_in_infix_func6334); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 93);
			LeaveRule("infix_func", 93);
			LeaveRule_infix_func();
		}
		DebugLocation(685, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA69 dfa69;
	private DFA86 dfa86;
	private DFA95 dfa95;
	private DFA100 dfa100;
	private DFA113 dfa113;
	private DFA156 dfa156;
	private DFA145 dfa145;
	private DFA177 dfa177;
	private DFA176 dfa176;
	private DFA182 dfa182;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa69 = new DFA69( this );
		dfa86 = new DFA86( this );
		dfa95 = new DFA95( this );
		dfa100 = new DFA100( this );
		dfa113 = new DFA113( this );
		dfa156 = new DFA156( this );
		dfa145 = new DFA145( this );
		dfa177 = new DFA177( this );
		dfa176 = new DFA176( this );
		dfa182 = new DFA182( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x58\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x58\x3\x59\x2\x58\x1\x2A\x3\x59\x1\x2A\x1\x5F\x5\x2A\x1\x5F"+
			"\x1\x2A\x4\x59\x1\x58\xA\x59\x2\x2A\x1\x5F\x2\x2A\x1\x5F\x2\x2A\xA\x59"+
			"\x2\x2A\x2\x59";
		private const string DFA4_maxS =
			"\x1\xAA\x1\x86\x1\xFFFF\x1\xAA\x6\xFFFF\x2\x7D\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x86\x1\x33\x1\x39\x1\xAA\x1\x7D\x2\x5F\x1\x6A\x2\x7D\x1\xAA"+
			"\x2\x5F\x1\x6A\x1\x39\x1\x7D\x2\x2A\x3\x39\x1\x7D\x1\x2A\x2\x5F\x2\x6A"+
			"\x1\x7D\x2\x5F\x1\x6A\x2\x5F\x1\x6A\x2\x5F\x2\x6A\x1\x2A\x1\x39\x1\x7D"+
			"\x1\x2A\x1\x39\x1\x7D\x2\x2A\x1\x6A\x2\x5F\x2\x6A\x2\x5F\x3\x6A\x2\x2A"+
			"\x2\x6A";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x5B\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5B\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1"+
				"\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x33\x1\xAA\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "270:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA69 : DFA
	{
		private const string DFA69_eotS =
			"\x11\xFFFF";
		private const string DFA69_eofS =
			"\x11\xFFFF";
		private const string DFA69_minS =
			"\x1\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x4\x2A\x1\x56\x3\x2A\x2\x56\x1\x2A\x1"+
			"\x56";
		private const string DFA69_maxS =
			"\x1\xAA\x1\xFFFF\x1\xAA\x1\xA1\x1\xFFFF\x1\x2A\x1\xA1\x1\x6B\x1\xAA\x1"+
			"\x7C\x1\x2A\x1\xA1\x1\xAA\x2\x7C\x1\x2A\x1\x7C";
		private const string DFA69_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA69_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA69_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2D\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1"+
				"\x8\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x6\xFFFF"+
				"\x1\x4\x1E\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1C\xFFFF\x1\x1\x10\xFFFF\x1\x1\x13\xFFFF\x1"+
				"\x1\x6\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2D\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x18\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
		private static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
		private static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
		private static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
		private static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
		private static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
		private static readonly short[][] DFA69_transition;

		static DFA69()
		{
			int numStates = DFA69_transitionS.Length;
			DFA69_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA69_transition[i] = DFA.UnpackEncodedString(DFA69_transitionS[i]);
			}
		}

		public DFA69( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}

		public override string Description { get { return "337:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA86 : DFA
	{
		private const string DFA86_eotS =
			"\x9\xFFFF";
		private const string DFA86_eofS =
			"\x9\xFFFF";
		private const string DFA86_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA86_maxS =
			"\x1\xAA\x1\xA8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA8";
		private const string DFA86_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA86_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA86_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1B\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
		private static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
		private static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
		private static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
		private static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
		private static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
		private static readonly short[][] DFA86_transition;

		static DFA86()
		{
			int numStates = DFA86_transitionS.Length;
			DFA86_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA86_transition[i] = DFA.UnpackEncodedString(DFA86_transitionS[i]);
			}
		}

		public DFA86( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}

		public override string Description { get { return "377:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA95 : DFA
	{
		private const string DFA95_eotS =
			"\x4\xFFFF";
		private const string DFA95_eofS =
			"\x4\xFFFF";
		private const string DFA95_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA95_maxS =
			"\x1\x8F\x1\xAA\x2\xFFFF";
		private const string DFA95_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA95_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA95_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x55\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA95_eot = DFA.UnpackEncodedString(DFA95_eotS);
		private static readonly short[] DFA95_eof = DFA.UnpackEncodedString(DFA95_eofS);
		private static readonly char[] DFA95_min = DFA.UnpackEncodedStringToUnsignedChars(DFA95_minS);
		private static readonly char[] DFA95_max = DFA.UnpackEncodedStringToUnsignedChars(DFA95_maxS);
		private static readonly short[] DFA95_accept = DFA.UnpackEncodedString(DFA95_acceptS);
		private static readonly short[] DFA95_special = DFA.UnpackEncodedString(DFA95_specialS);
		private static readonly short[][] DFA95_transition;

		static DFA95()
		{
			int numStates = DFA95_transitionS.Length;
			DFA95_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA95_transition[i] = DFA.UnpackEncodedString(DFA95_transitionS[i]);
			}
		}

		public DFA95( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 95;
			this.eot = DFA95_eot;
			this.eof = DFA95_eof;
			this.min = DFA95_min;
			this.max = DFA95_max;
			this.accept = DFA95_accept;
			this.special = DFA95_special;
			this.transition = DFA95_transition;
		}

		public override string Description { get { return "408:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA100 : DFA
	{
		private const string DFA100_eotS =
			"\x4\xFFFF";
		private const string DFA100_eofS =
			"\x4\xFFFF";
		private const string DFA100_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA100_maxS =
			"\x1\x8F\x1\xAA\x2\xFFFF";
		private const string DFA100_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA100_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA100_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x55\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
		private static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
		private static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
		private static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
		private static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
		private static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
		private static readonly short[][] DFA100_transition;

		static DFA100()
		{
			int numStates = DFA100_transitionS.Length;
			DFA100_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA100_transition[i] = DFA.UnpackEncodedString(DFA100_transitionS[i]);
			}
		}

		public DFA100( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 100;
			this.eot = DFA100_eot;
			this.eof = DFA100_eof;
			this.min = DFA100_min;
			this.max = DFA100_max;
			this.accept = DFA100_accept;
			this.special = DFA100_special;
			this.transition = DFA100_transition;
		}

		public override string Description { get { return "411:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\x6\xFFFF";
		private const string DFA113_eofS =
			"\x6\xFFFF";
		private const string DFA113_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA113_maxS =
			"\x1\xAA\x1\xA9\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA9";
		private const string DFA113_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA113_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2"
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "437:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA156 : DFA
	{
		private const string DFA156_eotS =
			"\x7\xFFFF";
		private const string DFA156_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA156_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA156_maxS =
			"\x1\xA6\x1\xAA\x2\xFFFF\x2\xAA\x1\xFFFF";
		private const string DFA156_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA156_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA156_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x1F\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x10\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x8\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x7\x3\x1\xFFFF\x2\x3\x2\xFFFF"+
				"\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA156_eot = DFA.UnpackEncodedString(DFA156_eotS);
		private static readonly short[] DFA156_eof = DFA.UnpackEncodedString(DFA156_eofS);
		private static readonly char[] DFA156_min = DFA.UnpackEncodedStringToUnsignedChars(DFA156_minS);
		private static readonly char[] DFA156_max = DFA.UnpackEncodedStringToUnsignedChars(DFA156_maxS);
		private static readonly short[] DFA156_accept = DFA.UnpackEncodedString(DFA156_acceptS);
		private static readonly short[] DFA156_special = DFA.UnpackEncodedString(DFA156_specialS);
		private static readonly short[][] DFA156_transition;

		static DFA156()
		{
			int numStates = DFA156_transitionS.Length;
			DFA156_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA156_transition[i] = DFA.UnpackEncodedString(DFA156_transitionS[i]);
			}
		}

		public DFA156( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 156;
			this.eot = DFA156_eot;
			this.eof = DFA156_eof;
			this.min = DFA156_min;
			this.max = DFA156_max;
			this.accept = DFA156_accept;
			this.special = DFA156_special;
			this.transition = DFA156_transition;
		}

		public override string Description { get { return "487:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA145 : DFA
	{
		private const string DFA145_eotS =
			"\x4\xFFFF";
		private const string DFA145_eofS =
			"\x4\xFFFF";
		private const string DFA145_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA145_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA145_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA145_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA145_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA145_eot = DFA.UnpackEncodedString(DFA145_eotS);
		private static readonly short[] DFA145_eof = DFA.UnpackEncodedString(DFA145_eofS);
		private static readonly char[] DFA145_min = DFA.UnpackEncodedStringToUnsignedChars(DFA145_minS);
		private static readonly char[] DFA145_max = DFA.UnpackEncodedStringToUnsignedChars(DFA145_maxS);
		private static readonly short[] DFA145_accept = DFA.UnpackEncodedString(DFA145_acceptS);
		private static readonly short[] DFA145_special = DFA.UnpackEncodedString(DFA145_specialS);
		private static readonly short[][] DFA145_transition;

		static DFA145()
		{
			int numStates = DFA145_transitionS.Length;
			DFA145_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA145_transition[i] = DFA.UnpackEncodedString(DFA145_transitionS[i]);
			}
		}

		public DFA145( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 145;
			this.eot = DFA145_eot;
			this.eof = DFA145_eof;
			this.min = DFA145_min;
			this.max = DFA145_max;
			this.accept = DFA145_accept;
			this.special = DFA145_special;
			this.transition = DFA145_transition;
		}

		public override string Description { get { return "487:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA177 : DFA
	{
		private const string DFA177_eotS =
			"\x7\xFFFF";
		private const string DFA177_eofS =
			"\x7\xFFFF";
		private const string DFA177_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA177_maxS =
			"\x5\xAA\x2\xFFFF";
		private const string DFA177_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA177_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA177_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA177_eot = DFA.UnpackEncodedString(DFA177_eotS);
		private static readonly short[] DFA177_eof = DFA.UnpackEncodedString(DFA177_eofS);
		private static readonly char[] DFA177_min = DFA.UnpackEncodedStringToUnsignedChars(DFA177_minS);
		private static readonly char[] DFA177_max = DFA.UnpackEncodedStringToUnsignedChars(DFA177_maxS);
		private static readonly short[] DFA177_accept = DFA.UnpackEncodedString(DFA177_acceptS);
		private static readonly short[] DFA177_special = DFA.UnpackEncodedString(DFA177_specialS);
		private static readonly short[][] DFA177_transition;

		static DFA177()
		{
			int numStates = DFA177_transitionS.Length;
			DFA177_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA177_transition[i] = DFA.UnpackEncodedString(DFA177_transitionS[i]);
			}
		}

		public DFA177( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 177;
			this.eot = DFA177_eot;
			this.eof = DFA177_eof;
			this.min = DFA177_min;
			this.max = DFA177_max;
			this.accept = DFA177_accept;
			this.special = DFA177_special;
			this.transition = DFA177_transition;
		}

		public override string Description { get { return "522:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA176 : DFA
	{
		private const string DFA176_eotS =
			"\x7\xFFFF";
		private const string DFA176_eofS =
			"\x7\xFFFF";
		private const string DFA176_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA176_maxS =
			"\x1\x7D\x4\xAA\x2\xFFFF";
		private const string DFA176_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA176_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA176_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA176_eot = DFA.UnpackEncodedString(DFA176_eotS);
		private static readonly short[] DFA176_eof = DFA.UnpackEncodedString(DFA176_eofS);
		private static readonly char[] DFA176_min = DFA.UnpackEncodedStringToUnsignedChars(DFA176_minS);
		private static readonly char[] DFA176_max = DFA.UnpackEncodedStringToUnsignedChars(DFA176_maxS);
		private static readonly short[] DFA176_accept = DFA.UnpackEncodedString(DFA176_acceptS);
		private static readonly short[] DFA176_special = DFA.UnpackEncodedString(DFA176_specialS);
		private static readonly short[][] DFA176_transition;

		static DFA176()
		{
			int numStates = DFA176_transitionS.Length;
			DFA176_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA176_transition[i] = DFA.UnpackEncodedString(DFA176_transitionS[i]);
			}
		}

		public DFA176( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}

		public override string Description { get { return "()* loopback of 522:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA182 : DFA
	{
		private const string DFA182_eotS =
			"\xB\xFFFF";
		private const string DFA182_eofS =
			"\xB\xFFFF";
		private const string DFA182_minS =
			"\x2\x2A\x1\xFFFF\x1\x52\x1\xFFFF\x2\x2A\x2\x52\x1\x2A\x1\x52";
		private const string DFA182_maxS =
			"\x2\xAA\x1\xFFFF\x1\xA9\x1\xFFFF\x1\x2A\x1\xAA\x2\xA9\x1\x2A\x1\xA9";
		private const string DFA182_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA182_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA182_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1A\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2"
			};

		private static readonly short[] DFA182_eot = DFA.UnpackEncodedString(DFA182_eotS);
		private static readonly short[] DFA182_eof = DFA.UnpackEncodedString(DFA182_eofS);
		private static readonly char[] DFA182_min = DFA.UnpackEncodedStringToUnsignedChars(DFA182_minS);
		private static readonly char[] DFA182_max = DFA.UnpackEncodedStringToUnsignedChars(DFA182_maxS);
		private static readonly short[] DFA182_accept = DFA.UnpackEncodedString(DFA182_acceptS);
		private static readonly short[] DFA182_special = DFA.UnpackEncodedString(DFA182_specialS);
		private static readonly short[][] DFA182_transition;

		static DFA182()
		{
			int numStates = DFA182_transitionS.Length;
			DFA182_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA182_transition[i] = DFA.UnpackEncodedString(DFA182_transitionS[i]);
			}
		}

		public DFA182( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}

		public override string Description { get { return "526:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root559 = new BitSet(new ulong[]{0x8040000000000UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_root562 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block584 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block586 = new BitSet(new ulong[]{0x8040000000002UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _func_def_in_node609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item677 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item680 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item682 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item685 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item687 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_attribute_item709 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item712 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item714 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item717 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item719 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute748 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _attribute_item_in_attribute750 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_attribute753 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _attribute_item_in_attribute755 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_attribute759 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute761 = new BitSet(new ulong[]{0x8000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc780 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc783 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_global_alloc787 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_global_alloc789 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_global_alloc794 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_global_alloc798 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_global_alloc861 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_global_alloc863 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_global_alloc866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_global_alloc939 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc942 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_global_alloc945 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_global_alloc947 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_using984 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_using987 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _stmt_using_item_in_global_using989 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _attribute_in_global_typedef1013 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_global_typedef1016 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1018 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_global_typedef1020 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_global_typedef1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_import_def1049 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1051 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1055 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1058 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1060 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1065 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1067 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_enum_def1100 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1102 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_enum_def1104 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1107 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_enum_def1110 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1112 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_namespace_def1148 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1150 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1153 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1156 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1158 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_namespace_def1161 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_class_def1194 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1196 = new BitSet(new ulong[]{0x8000000000002UL,0x220001000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1199 = new BitSet(new ulong[]{0x8000000000002UL,0x20001000000UL});
		public static readonly BitSet _88_in_class_def1204 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_in_class_def1206 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_class_def1208 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1213 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1215 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1218 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1220 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1227 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1230 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _NEWLINE_in_class_def1232 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x40A84204460UL});
		public static readonly BitSet _global_block_in_class_def1235 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1280 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_list1283 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_list1285 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_single_in_type_name1307 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1311 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_name1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1318 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1361 = new BitSet(new ulong[]{0x40000000000UL,0x3000000UL,0x204000040UL});
		public static readonly BitSet _type_list_in_type_name1363 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1366 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1368 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_name1371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1375 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1401 = new BitSet(new ulong[]{0x2UL,0x1000000000400000UL});
		public static readonly BitSet _86_in_type_single1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_single1421 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_type_single1423 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_type_single1426 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_type_single1428 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1470 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star1474 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1520 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_type_template_type1524 = new BitSet(new ulong[]{0x40000000000UL,0x20000001000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_template_type1527 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _95_in_type_template_type1530 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_type_template_type1532 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _117_in_type_template_type1538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_type_ident1578 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x204000000UL});
		public static readonly BitSet _161_in_type_ident1581 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_type_ident1584 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1615 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_generic_parameter_inside1618 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1620 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _109_in_generic_parameter1642 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1644 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_generic_parameter1646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1661 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_func_args1664 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1666 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1688 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_func_args_item1690 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_func_args_item1692 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_func_args_item1697 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_func_args_item1701 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_func_args_item1704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_args_item1752 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_func_args_item1754 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_args_item1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_func_args_item1814 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name1852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_name1861 = new BitSet(new ulong[]{0x0UL,0x8114000000UL});
		public static readonly BitSet _operator_in_func_name1863 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_name1865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1880 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x40204000040UL});
		public static readonly BitSet _type_name_in_func_def1883 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x40000000000UL});
		public static readonly BitSet _170_in_func_def1886 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL});
		public static readonly BitSet _func_name_in_func_def1889 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _generic_parameter_in_func_def1891 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_def1894 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_func_def1896 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_def1899 = new BitSet(new ulong[]{0x8000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1902 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_func_def1958 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_func_def1960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2001 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2003 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2013 = new BitSet(new ulong[]{0x8000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2016 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _108_in_stmt_block_item2021 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2023 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2040 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2042 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2045 = new BitSet(new ulong[]{0x40000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_stmt_block2048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2134 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _141_in_stmt_expr2144 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2146 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _160_in_stmt_expr2175 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2177 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _166_in_stmt_expr2206 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _162_in_stmt_expr2237 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_expr2239 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4500003000UL});
		public static readonly BitSet _140_in_stmt_expr2268 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_expr2270 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4500003000UL});
		public static readonly BitSet _95_in_stmt_expr2273 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_expr2275 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4500003000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_defer2348 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_in_stmt_defer2350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_stmt_defer2363 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _stmt_in_stmt_defer2365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_typedef2384 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2386 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_typedef2388 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_stmt_typedef2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_using_item2413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_using2421 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2423 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _153_in_stmt_return2444 = new BitSet(new ulong[]{0x210040000000002UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_return2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2467 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_inline_stmt_block2470 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2472 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _141_in_stmt_if2494 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_if2496 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2499 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2502 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x200UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2505 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_stmt_if2508 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2510 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_if2545 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2568 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_if2570 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2573 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2576 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x200UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2579 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_stmt_if2582 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2584 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_if2623 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while2656 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2658 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2662 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while2689 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_while2715 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2717 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2721 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while2748 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_while2774 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_while2776 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2779 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2804 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_for_range2806 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2810 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000100UL});
		public static readonly BitSet _157_in_for_range2813 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2817 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range2820 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_for_range2853 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2857 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range2860 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_for_range2864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_for2957 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_for2961 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_for2964 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _for_item_in_stmt_for2966 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2970 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_try3004 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3006 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3009 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3011 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_stmt_try3014 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3016 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3018 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_switch_item3044 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_switch_item3046 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x10000000UL});
		public static readonly BitSet _95_in_switch_item3049 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_switch_item3051 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3057 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_switch_item3102 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40882800000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_switch3140 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_stmt_switch3142 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3145 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3148 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3150 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3154 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3156 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x1000000200UL});
		public static readonly BitSet _137_in_stmt_switch3162 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3164 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3167 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3169 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3200 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_ident_list3203 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3205 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3227 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_stmt_alloc3231 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_stmt_alloc3233 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_stmt_alloc3238 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _107_in_stmt_alloc3242 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_stmt_alloc3293 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3295 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_stmt_alloc3298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_alloc3359 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3363 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_alloc3366 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3368 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3394 = new BitSet(new ulong[]{0x2UL,0x8585810448900000UL,0x10000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3398 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_modify3424 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_modify3453 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_modify3484 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3534 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3544 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3547 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3549 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_where_expr3552 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3556 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3560 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3596 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3599 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3601 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3605 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3607 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3612 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3614 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3667 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3670 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3672 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3676 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3678 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3683 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3685 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_where_expr3726 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3728 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3731 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_where_expr3733 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_where_expr3737 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3739 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _DEDENT_in_where_expr3744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_let_expr3802 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_let_expr3804 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_let_expr3808 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3836 = new BitSet(new ulong[]{0x2180C0000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _INDENT_in_let_expr3841 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3843 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3846 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3848 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr3877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3924 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_let_expr3927 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _NEWLINE_in_let_expr3929 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA883880UL});
		public static readonly BitSet _where_item_in_let_expr3933 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3935 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44DCA88B880UL});
		public static readonly BitSet _143_in_let_expr3940 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_let_expr3942 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3944 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_match_item3979 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_match_item3981 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_match_item3983 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _where_expr_in_match_item3985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_match_expr4006 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_match_expr4008 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4011 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4014 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4016 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _match_item_in_match_expr4020 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4022 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_list_expr4071 = new BitSet(new ulong[]{0x2180C0000000100UL,0x38000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _95_in_list_expr4075 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4079 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _INDENT_in_list_expr4083 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _DEDENT_in_list_expr4087 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _list_expr_in_list_expr4091 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4095 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4099 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _INDENT_in_list_expr4103 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _DEDENT_in_list_expr4107 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40000C00000UL});
		public static readonly BitSet _list_expr_in_list_expr4111 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4118 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4122 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _INDENT_in_list_expr4126 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4130 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_list_expr4134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lambda_expr4159 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4161 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lambda_expr4164 = new BitSet(new ulong[]{0x0UL,0x10000800000000UL});
		public static readonly BitSet _99_in_lambda_expr4168 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_lambda_expr4170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_lambda_expr4210 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_lambda_expr4212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4289 = new BitSet(new ulong[]{0x2UL,0x8105090448900000UL,0x10000000000UL});
		public static readonly BitSet _set_in_modify_expr4293 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_modify_expr4347 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4350 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4375 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_cond_expr4384 = new BitSet(new ulong[]{0x210040000000002UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4390 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_cond_expr4394 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4512 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20001000000UL});
		public static readonly BitSet _or_op_in_or_expr4523 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _and_expr_in_or_expr4527 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20001000000UL});
		public static readonly BitSet _bit_or_in_and_expr4569 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _and_op_in_and_expr4580 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_or_in_and_expr4584 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _bit_xor_in_bit_or4615 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_bit_or4624 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_xor_in_bit_or4628 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4658 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_bit_xor4667 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _bit_and_in_bit_xor4671 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4701 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_bit_and4710 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4714 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _chain_op_in_chain_list4806 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_chain_list4808 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4822 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _109_in_cmp_expr4832 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4836 = new BitSet(new ulong[]{0x40000000002UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _ident_in_cmp_expr4842 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000000UL});
		public static readonly BitSet _117_in_cmp_expr4845 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cmp_expr4847 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_cmp_expr4849 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cmp_expr4852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4998 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5002 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x30000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5108 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5117 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _add_expr_in_shift_expr5121 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5151 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _92_in_add_expr5161 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _mul_expr_in_add_expr5165 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _96_in_add_expr5190 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _mul_expr_in_add_expr5194 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5232 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _90_in_mul_expr5242 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5246 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _103_in_mul_expr5273 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5277 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _83_in_mul_expr5304 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5308 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5348 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _infix_func_in_infix_expr5358 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5362 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cast_expr_in_selector_expr5394 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _100_in_selector_expr5404 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5408 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _102_in_selector_expr5434 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5439 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5479 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_cast_expr5488 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cast_expr5490 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_cast_expr5492 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cast_expr5494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5556 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40000C00000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_prefix_expr5574 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x204000040UL});
		public static readonly BitSet _type_name_in_prefix_expr5576 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_prefix_expr5578 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5580 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_prefix_expr5583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5611 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_expr_list5614 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_expr_list5617 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5633 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _93_in_suffix_expr5643 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _97_in_suffix_expr5669 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _101_in_suffix_expr5692 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5694 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _99_in_suffix_expr5719 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5721 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _88_in_suffix_expr5746 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5750 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr5752 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr5781 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _124_in_suffix_expr5812 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5816 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_suffix_expr5818 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _125_in_suffix_expr5847 = new BitSet(new ulong[]{0x2UL,0x1000002A21000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr5900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr5905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr5910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_atom_expr5915 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr5917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_atom_expr5930 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_atom_expr5934 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_atom_expr5939 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_in_atom_expr5941 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_atom_expr5945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_atom_expr5972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6015 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6047 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _93_in_lvalue_suffix6057 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _97_in_lvalue_suffix6085 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6110 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6112 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6139 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6141 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6168 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lvalue_suffix6171 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6173 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lvalue_suffix6176 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _124_in_lvalue_suffix6205 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40000D40000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6207 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_lvalue_suffix6210 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lvalue_atom6254 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lvalue6275 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6277 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_lvalue6280 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40000800000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6282 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_lvalue6286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6311 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_ident6314 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident6316 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _128_in_infix_func6329 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func6332 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_infix_func6334 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
