//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-18 11:38:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Switch=62;
	public const int Stmt_Try=63;
	public const int Stmt_Typedef=64;
	public const int Stmt_Unless=65;
	public const int Stmt_Until=66;
	public const int Stmt_Using=67;
	public const int Stmt_While=68;
	public const int Switch_Item=69;
	public const int Type_Array=70;
	public const int Type_Ident=71;
	public const int Type_Ref=72;
	public const int Type_Star=73;
	public const int Type_Template=74;
	public const int White_Space=75;

		class Indentation
		{
			public int Level;
			public int CharIndex;

			public Indentation(int Level, int CharIndex)
			{
				this.Level = Level;
				this.CharIndex = CharIndex;
			}
		}

		int CurrentIndent = 0;
		Stack<Indentation> Indents = new Stack<Indentation>();
		Stack<int>[] Bracket = new Stack<int>[3];

		Queue<IToken> tokens = new Queue<IToken>();

	    public override void Emit(IToken token) 
	    {
	        state.token = token;
	        tokens.Enqueue(token);
	    }

	    public override IToken NextToken()
	    {
	        base.NextToken();
	        if (tokens.Count == 0)
			{
				if (Indents != null && Indents.Count > 0)
				{
					Emit(this.CreateToken(NEWLINE, "NEWLINE"));
					Emit(this.CreateToken(DEDENT, "DEDENT"));
					Indents.Pop();
					CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
					base.NextToken();
					return tokens.Dequeue();
				}
				if (Indents != null)
				{
					Indents = null;
					return this.CreateToken(NEWLINE, "NEWLINE");
				}
	            return this.CreateToken(EOF, "EOF");
			}
	        return tokens.Dequeue();
	    }

		public CommonToken CreateToken(int type, string text)
		{
			var x = new CommonToken(type, text);
			x.Line = this.Line;
			x.CharPositionInLine = this.CharPositionInLine;
			x.StartIndex = this.CharIndex;
			x.StopIndex = this.CharIndex;
			return x;
		}


    // delegates
    // delegators

	public SugarCppLexer()
	{
		OnCreated();
	}

	public SugarCppLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SugarCppLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__76();
	partial void LeaveRule_T__76();

	// $ANTLR start "T__76"
	[GrammarRule("T__76")]
	private void mT__76()
	{
		EnterRule_T__76();
		EnterRule("T__76", 1);
		TraceIn("T__76", 1);
		try
		{
			int _type = T__76;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:81:7: ( '!' )
			DebugEnterAlt(1);
			// SugarCpp.g:81:9: '!'
			{
			DebugLocation(81, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__76", 1);
			LeaveRule("T__76", 1);
			LeaveRule_T__76();
		}
	}
	// $ANTLR end "T__76"

	partial void EnterRule_T__77();
	partial void LeaveRule_T__77();

	// $ANTLR start "T__77"
	[GrammarRule("T__77")]
	private void mT__77()
	{
		EnterRule_T__77();
		EnterRule("T__77", 2);
		TraceIn("T__77", 2);
		try
		{
			int _type = T__77;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:82:7: ( '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:82:9: '!='
			{
			DebugLocation(82, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__77", 2);
			LeaveRule("T__77", 2);
			LeaveRule_T__77();
		}
	}
	// $ANTLR end "T__77"

	partial void EnterRule_T__78();
	partial void LeaveRule_T__78();

	// $ANTLR start "T__78"
	[GrammarRule("T__78")]
	private void mT__78()
	{
		EnterRule_T__78();
		EnterRule("T__78", 3);
		TraceIn("T__78", 3);
		try
		{
			int _type = T__78;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:83:7: ( '%' )
			DebugEnterAlt(1);
			// SugarCpp.g:83:9: '%'
			{
			DebugLocation(83, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__78", 3);
			LeaveRule("T__78", 3);
			LeaveRule_T__78();
		}
	}
	// $ANTLR end "T__78"

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 4);
		TraceIn("T__79", 4);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:84:7: ( '%=' )
			DebugEnterAlt(1);
			// SugarCpp.g:84:9: '%='
			{
			DebugLocation(84, 9);
			Match("%="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 4);
			LeaveRule("T__79", 4);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 5);
		TraceIn("T__80", 5);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:85:7: ( '&&' )
			DebugEnterAlt(1);
			// SugarCpp.g:85:9: '&&'
			{
			DebugLocation(85, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 5);
			LeaveRule("T__80", 5);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 6);
		TraceIn("T__81", 6);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:86:7: ( '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:86:9: '&'
			{
			DebugLocation(86, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 6);
			LeaveRule("T__81", 6);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 7);
		TraceIn("T__82", 7);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:87:7: ( '&=' )
			DebugEnterAlt(1);
			// SugarCpp.g:87:9: '&='
			{
			DebugLocation(87, 9);
			Match("&="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 7);
			LeaveRule("T__82", 7);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 8);
		TraceIn("T__83", 8);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:88:7: ( '(' )
			DebugEnterAlt(1);
			// SugarCpp.g:88:9: '('
			{
			DebugLocation(88, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 8);
			LeaveRule("T__83", 8);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 9);
		TraceIn("T__84", 9);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:89:7: ( ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:89:9: ')'
			{
			DebugLocation(89, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 9);
			LeaveRule("T__84", 9);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_T__85();
	partial void LeaveRule_T__85();

	// $ANTLR start "T__85"
	[GrammarRule("T__85")]
	private void mT__85()
	{
		EnterRule_T__85();
		EnterRule("T__85", 10);
		TraceIn("T__85", 10);
		try
		{
			int _type = T__85;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:90:7: ( '*' )
			DebugEnterAlt(1);
			// SugarCpp.g:90:9: '*'
			{
			DebugLocation(90, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__85", 10);
			LeaveRule("T__85", 10);
			LeaveRule_T__85();
		}
	}
	// $ANTLR end "T__85"

	partial void EnterRule_T__86();
	partial void LeaveRule_T__86();

	// $ANTLR start "T__86"
	[GrammarRule("T__86")]
	private void mT__86()
	{
		EnterRule_T__86();
		EnterRule("T__86", 11);
		TraceIn("T__86", 11);
		try
		{
			int _type = T__86;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:91:7: ( '*=' )
			DebugEnterAlt(1);
			// SugarCpp.g:91:9: '*='
			{
			DebugLocation(91, 9);
			Match("*="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__86", 11);
			LeaveRule("T__86", 11);
			LeaveRule_T__86();
		}
	}
	// $ANTLR end "T__86"

	partial void EnterRule_T__87();
	partial void LeaveRule_T__87();

	// $ANTLR start "T__87"
	[GrammarRule("T__87")]
	private void mT__87()
	{
		EnterRule_T__87();
		EnterRule("T__87", 12);
		TraceIn("T__87", 12);
		try
		{
			int _type = T__87;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:92:7: ( '+' )
			DebugEnterAlt(1);
			// SugarCpp.g:92:9: '+'
			{
			DebugLocation(92, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__87", 12);
			LeaveRule("T__87", 12);
			LeaveRule_T__87();
		}
	}
	// $ANTLR end "T__87"

	partial void EnterRule_T__88();
	partial void LeaveRule_T__88();

	// $ANTLR start "T__88"
	[GrammarRule("T__88")]
	private void mT__88()
	{
		EnterRule_T__88();
		EnterRule("T__88", 13);
		TraceIn("T__88", 13);
		try
		{
			int _type = T__88;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:93:7: ( '++' )
			DebugEnterAlt(1);
			// SugarCpp.g:93:9: '++'
			{
			DebugLocation(93, 9);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__88", 13);
			LeaveRule("T__88", 13);
			LeaveRule_T__88();
		}
	}
	// $ANTLR end "T__88"

	partial void EnterRule_T__89();
	partial void LeaveRule_T__89();

	// $ANTLR start "T__89"
	[GrammarRule("T__89")]
	private void mT__89()
	{
		EnterRule_T__89();
		EnterRule("T__89", 14);
		TraceIn("T__89", 14);
		try
		{
			int _type = T__89;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:94:7: ( '+=' )
			DebugEnterAlt(1);
			// SugarCpp.g:94:9: '+='
			{
			DebugLocation(94, 9);
			Match("+="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__89", 14);
			LeaveRule("T__89", 14);
			LeaveRule_T__89();
		}
	}
	// $ANTLR end "T__89"

	partial void EnterRule_T__90();
	partial void LeaveRule_T__90();

	// $ANTLR start "T__90"
	[GrammarRule("T__90")]
	private void mT__90()
	{
		EnterRule_T__90();
		EnterRule("T__90", 15);
		TraceIn("T__90", 15);
		try
		{
			int _type = T__90;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:95:7: ( ',' )
			DebugEnterAlt(1);
			// SugarCpp.g:95:9: ','
			{
			DebugLocation(95, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__90", 15);
			LeaveRule("T__90", 15);
			LeaveRule_T__90();
		}
	}
	// $ANTLR end "T__90"

	partial void EnterRule_T__91();
	partial void LeaveRule_T__91();

	// $ANTLR start "T__91"
	[GrammarRule("T__91")]
	private void mT__91()
	{
		EnterRule_T__91();
		EnterRule("T__91", 16);
		TraceIn("T__91", 16);
		try
		{
			int _type = T__91;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:96:7: ( '-' )
			DebugEnterAlt(1);
			// SugarCpp.g:96:9: '-'
			{
			DebugLocation(96, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__91", 16);
			LeaveRule("T__91", 16);
			LeaveRule_T__91();
		}
	}
	// $ANTLR end "T__91"

	partial void EnterRule_T__92();
	partial void LeaveRule_T__92();

	// $ANTLR start "T__92"
	[GrammarRule("T__92")]
	private void mT__92()
	{
		EnterRule_T__92();
		EnterRule("T__92", 17);
		TraceIn("T__92", 17);
		try
		{
			int _type = T__92;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:97:7: ( '--' )
			DebugEnterAlt(1);
			// SugarCpp.g:97:9: '--'
			{
			DebugLocation(97, 9);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__92", 17);
			LeaveRule("T__92", 17);
			LeaveRule_T__92();
		}
	}
	// $ANTLR end "T__92"

	partial void EnterRule_T__93();
	partial void LeaveRule_T__93();

	// $ANTLR start "T__93"
	[GrammarRule("T__93")]
	private void mT__93()
	{
		EnterRule_T__93();
		EnterRule("T__93", 18);
		TraceIn("T__93", 18);
		try
		{
			int _type = T__93;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:98:7: ( '-=' )
			DebugEnterAlt(1);
			// SugarCpp.g:98:9: '-='
			{
			DebugLocation(98, 9);
			Match("-="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__93", 18);
			LeaveRule("T__93", 18);
			LeaveRule_T__93();
		}
	}
	// $ANTLR end "T__93"

	partial void EnterRule_T__94();
	partial void LeaveRule_T__94();

	// $ANTLR start "T__94"
	[GrammarRule("T__94")]
	private void mT__94()
	{
		EnterRule_T__94();
		EnterRule("T__94", 19);
		TraceIn("T__94", 19);
		try
		{
			int _type = T__94;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:99:7: ( '->' )
			DebugEnterAlt(1);
			// SugarCpp.g:99:9: '->'
			{
			DebugLocation(99, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__94", 19);
			LeaveRule("T__94", 19);
			LeaveRule_T__94();
		}
	}
	// $ANTLR end "T__94"

	partial void EnterRule_T__95();
	partial void LeaveRule_T__95();

	// $ANTLR start "T__95"
	[GrammarRule("T__95")]
	private void mT__95()
	{
		EnterRule_T__95();
		EnterRule("T__95", 20);
		TraceIn("T__95", 20);
		try
		{
			int _type = T__95;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:100:7: ( '->*' )
			DebugEnterAlt(1);
			// SugarCpp.g:100:9: '->*'
			{
			DebugLocation(100, 9);
			Match("->*"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__95", 20);
			LeaveRule("T__95", 20);
			LeaveRule_T__95();
		}
	}
	// $ANTLR end "T__95"

	partial void EnterRule_T__96();
	partial void LeaveRule_T__96();

	// $ANTLR start "T__96"
	[GrammarRule("T__96")]
	private void mT__96()
	{
		EnterRule_T__96();
		EnterRule("T__96", 21);
		TraceIn("T__96", 21);
		try
		{
			int _type = T__96;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:101:7: ( '.' )
			DebugEnterAlt(1);
			// SugarCpp.g:101:9: '.'
			{
			DebugLocation(101, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__96", 21);
			LeaveRule("T__96", 21);
			LeaveRule_T__96();
		}
	}
	// $ANTLR end "T__96"

	partial void EnterRule_T__97();
	partial void LeaveRule_T__97();

	// $ANTLR start "T__97"
	[GrammarRule("T__97")]
	private void mT__97()
	{
		EnterRule_T__97();
		EnterRule("T__97", 22);
		TraceIn("T__97", 22);
		try
		{
			int _type = T__97;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:102:7: ( '.*' )
			DebugEnterAlt(1);
			// SugarCpp.g:102:9: '.*'
			{
			DebugLocation(102, 9);
			Match(".*"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__97", 22);
			LeaveRule("T__97", 22);
			LeaveRule_T__97();
		}
	}
	// $ANTLR end "T__97"

	partial void EnterRule_T__98();
	partial void LeaveRule_T__98();

	// $ANTLR start "T__98"
	[GrammarRule("T__98")]
	private void mT__98()
	{
		EnterRule_T__98();
		EnterRule("T__98", 23);
		TraceIn("T__98", 23);
		try
		{
			int _type = T__98;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:103:7: ( '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:103:9: '/'
			{
			DebugLocation(103, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__98", 23);
			LeaveRule("T__98", 23);
			LeaveRule_T__98();
		}
	}
	// $ANTLR end "T__98"

	partial void EnterRule_T__99();
	partial void LeaveRule_T__99();

	// $ANTLR start "T__99"
	[GrammarRule("T__99")]
	private void mT__99()
	{
		EnterRule_T__99();
		EnterRule("T__99", 24);
		TraceIn("T__99", 24);
		try
		{
			int _type = T__99;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:104:7: ( '/=' )
			DebugEnterAlt(1);
			// SugarCpp.g:104:9: '/='
			{
			DebugLocation(104, 9);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__99", 24);
			LeaveRule("T__99", 24);
			LeaveRule_T__99();
		}
	}
	// $ANTLR end "T__99"

	partial void EnterRule_T__100();
	partial void LeaveRule_T__100();

	// $ANTLR start "T__100"
	[GrammarRule("T__100")]
	private void mT__100()
	{
		EnterRule_T__100();
		EnterRule("T__100", 25);
		TraceIn("T__100", 25);
		try
		{
			int _type = T__100;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:105:8: ( ':' )
			DebugEnterAlt(1);
			// SugarCpp.g:105:10: ':'
			{
			DebugLocation(105, 10);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__100", 25);
			LeaveRule("T__100", 25);
			LeaveRule_T__100();
		}
	}
	// $ANTLR end "T__100"

	partial void EnterRule_T__101();
	partial void LeaveRule_T__101();

	// $ANTLR start "T__101"
	[GrammarRule("T__101")]
	private void mT__101()
	{
		EnterRule_T__101();
		EnterRule("T__101", 26);
		TraceIn("T__101", 26);
		try
		{
			int _type = T__101;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:106:8: ( '::' )
			DebugEnterAlt(1);
			// SugarCpp.g:106:10: '::'
			{
			DebugLocation(106, 10);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__101", 26);
			LeaveRule("T__101", 26);
			LeaveRule_T__101();
		}
	}
	// $ANTLR end "T__101"

	partial void EnterRule_T__102();
	partial void LeaveRule_T__102();

	// $ANTLR start "T__102"
	[GrammarRule("T__102")]
	private void mT__102()
	{
		EnterRule_T__102();
		EnterRule("T__102", 27);
		TraceIn("T__102", 27);
		try
		{
			int _type = T__102;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:107:8: ( ':=' )
			DebugEnterAlt(1);
			// SugarCpp.g:107:10: ':='
			{
			DebugLocation(107, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__102", 27);
			LeaveRule("T__102", 27);
			LeaveRule_T__102();
		}
	}
	// $ANTLR end "T__102"

	partial void EnterRule_T__103();
	partial void LeaveRule_T__103();

	// $ANTLR start "T__103"
	[GrammarRule("T__103")]
	private void mT__103()
	{
		EnterRule_T__103();
		EnterRule("T__103", 28);
		TraceIn("T__103", 28);
		try
		{
			int _type = T__103;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:108:8: ( ';' )
			DebugEnterAlt(1);
			// SugarCpp.g:108:10: ';'
			{
			DebugLocation(108, 10);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__103", 28);
			LeaveRule("T__103", 28);
			LeaveRule_T__103();
		}
	}
	// $ANTLR end "T__103"

	partial void EnterRule_T__104();
	partial void LeaveRule_T__104();

	// $ANTLR start "T__104"
	[GrammarRule("T__104")]
	private void mT__104()
	{
		EnterRule_T__104();
		EnterRule("T__104", 29);
		TraceIn("T__104", 29);
		try
		{
			int _type = T__104;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:109:8: ( '<' )
			DebugEnterAlt(1);
			// SugarCpp.g:109:10: '<'
			{
			DebugLocation(109, 10);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__104", 29);
			LeaveRule("T__104", 29);
			LeaveRule_T__104();
		}
	}
	// $ANTLR end "T__104"

	partial void EnterRule_T__105();
	partial void LeaveRule_T__105();

	// $ANTLR start "T__105"
	[GrammarRule("T__105")]
	private void mT__105()
	{
		EnterRule_T__105();
		EnterRule("T__105", 30);
		TraceIn("T__105", 30);
		try
		{
			int _type = T__105;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:110:8: ( '<-' )
			DebugEnterAlt(1);
			// SugarCpp.g:110:10: '<-'
			{
			DebugLocation(110, 10);
			Match("<-"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__105", 30);
			LeaveRule("T__105", 30);
			LeaveRule_T__105();
		}
	}
	// $ANTLR end "T__105"

	partial void EnterRule_T__106();
	partial void LeaveRule_T__106();

	// $ANTLR start "T__106"
	[GrammarRule("T__106")]
	private void mT__106()
	{
		EnterRule_T__106();
		EnterRule("T__106", 31);
		TraceIn("T__106", 31);
		try
		{
			int _type = T__106;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:111:8: ( '<<' )
			DebugEnterAlt(1);
			// SugarCpp.g:111:10: '<<'
			{
			DebugLocation(111, 10);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__106", 31);
			LeaveRule("T__106", 31);
			LeaveRule_T__106();
		}
	}
	// $ANTLR end "T__106"

	partial void EnterRule_T__107();
	partial void LeaveRule_T__107();

	// $ANTLR start "T__107"
	[GrammarRule("T__107")]
	private void mT__107()
	{
		EnterRule_T__107();
		EnterRule("T__107", 32);
		TraceIn("T__107", 32);
		try
		{
			int _type = T__107;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:112:8: ( '<<=' )
			DebugEnterAlt(1);
			// SugarCpp.g:112:10: '<<='
			{
			DebugLocation(112, 10);
			Match("<<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__107", 32);
			LeaveRule("T__107", 32);
			LeaveRule_T__107();
		}
	}
	// $ANTLR end "T__107"

	partial void EnterRule_T__108();
	partial void LeaveRule_T__108();

	// $ANTLR start "T__108"
	[GrammarRule("T__108")]
	private void mT__108()
	{
		EnterRule_T__108();
		EnterRule("T__108", 33);
		TraceIn("T__108", 33);
		try
		{
			int _type = T__108;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:113:8: ( '<=' )
			DebugEnterAlt(1);
			// SugarCpp.g:113:10: '<='
			{
			DebugLocation(113, 10);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__108", 33);
			LeaveRule("T__108", 33);
			LeaveRule_T__108();
		}
	}
	// $ANTLR end "T__108"

	partial void EnterRule_T__109();
	partial void LeaveRule_T__109();

	// $ANTLR start "T__109"
	[GrammarRule("T__109")]
	private void mT__109()
	{
		EnterRule_T__109();
		EnterRule("T__109", 34);
		TraceIn("T__109", 34);
		try
		{
			int _type = T__109;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:114:8: ( '=' )
			DebugEnterAlt(1);
			// SugarCpp.g:114:10: '='
			{
			DebugLocation(114, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__109", 34);
			LeaveRule("T__109", 34);
			LeaveRule_T__109();
		}
	}
	// $ANTLR end "T__109"

	partial void EnterRule_T__110();
	partial void LeaveRule_T__110();

	// $ANTLR start "T__110"
	[GrammarRule("T__110")]
	private void mT__110()
	{
		EnterRule_T__110();
		EnterRule("T__110", 35);
		TraceIn("T__110", 35);
		try
		{
			int _type = T__110;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:115:8: ( '==' )
			DebugEnterAlt(1);
			// SugarCpp.g:115:10: '=='
			{
			DebugLocation(115, 10);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__110", 35);
			LeaveRule("T__110", 35);
			LeaveRule_T__110();
		}
	}
	// $ANTLR end "T__110"

	partial void EnterRule_T__111();
	partial void LeaveRule_T__111();

	// $ANTLR start "T__111"
	[GrammarRule("T__111")]
	private void mT__111()
	{
		EnterRule_T__111();
		EnterRule("T__111", 36);
		TraceIn("T__111", 36);
		try
		{
			int _type = T__111;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:116:8: ( '=>' )
			DebugEnterAlt(1);
			// SugarCpp.g:116:10: '=>'
			{
			DebugLocation(116, 10);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__111", 36);
			LeaveRule("T__111", 36);
			LeaveRule_T__111();
		}
	}
	// $ANTLR end "T__111"

	partial void EnterRule_T__112();
	partial void LeaveRule_T__112();

	// $ANTLR start "T__112"
	[GrammarRule("T__112")]
	private void mT__112()
	{
		EnterRule_T__112();
		EnterRule("T__112", 37);
		TraceIn("T__112", 37);
		try
		{
			int _type = T__112;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:117:8: ( '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:117:10: '>'
			{
			DebugLocation(117, 10);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__112", 37);
			LeaveRule("T__112", 37);
			LeaveRule_T__112();
		}
	}
	// $ANTLR end "T__112"

	partial void EnterRule_T__113();
	partial void LeaveRule_T__113();

	// $ANTLR start "T__113"
	[GrammarRule("T__113")]
	private void mT__113()
	{
		EnterRule_T__113();
		EnterRule("T__113", 38);
		TraceIn("T__113", 38);
		try
		{
			int _type = T__113;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:118:8: ( '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:118:10: '>='
			{
			DebugLocation(118, 10);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__113", 38);
			LeaveRule("T__113", 38);
			LeaveRule_T__113();
		}
	}
	// $ANTLR end "T__113"

	partial void EnterRule_T__114();
	partial void LeaveRule_T__114();

	// $ANTLR start "T__114"
	[GrammarRule("T__114")]
	private void mT__114()
	{
		EnterRule_T__114();
		EnterRule("T__114", 39);
		TraceIn("T__114", 39);
		try
		{
			int _type = T__114;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:119:8: ( '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:119:10: '>>'
			{
			DebugLocation(119, 10);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__114", 39);
			LeaveRule("T__114", 39);
			LeaveRule_T__114();
		}
	}
	// $ANTLR end "T__114"

	partial void EnterRule_T__115();
	partial void LeaveRule_T__115();

	// $ANTLR start "T__115"
	[GrammarRule("T__115")]
	private void mT__115()
	{
		EnterRule_T__115();
		EnterRule("T__115", 40);
		TraceIn("T__115", 40);
		try
		{
			int _type = T__115;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:120:8: ( '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:120:10: '>>='
			{
			DebugLocation(120, 10);
			Match(">>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__115", 40);
			LeaveRule("T__115", 40);
			LeaveRule_T__115();
		}
	}
	// $ANTLR end "T__115"

	partial void EnterRule_T__116();
	partial void LeaveRule_T__116();

	// $ANTLR start "T__116"
	[GrammarRule("T__116")]
	private void mT__116()
	{
		EnterRule_T__116();
		EnterRule("T__116", 41);
		TraceIn("T__116", 41);
		try
		{
			int _type = T__116;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:121:8: ( '?' )
			DebugEnterAlt(1);
			// SugarCpp.g:121:10: '?'
			{
			DebugLocation(121, 10);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__116", 41);
			LeaveRule("T__116", 41);
			LeaveRule_T__116();
		}
	}
	// $ANTLR end "T__116"

	partial void EnterRule_T__117();
	partial void LeaveRule_T__117();

	// $ANTLR start "T__117"
	[GrammarRule("T__117")]
	private void mT__117()
	{
		EnterRule_T__117();
		EnterRule("T__117", 42);
		TraceIn("T__117", 42);
		try
		{
			int _type = T__117;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:122:8: ( '?=' )
			DebugEnterAlt(1);
			// SugarCpp.g:122:10: '?='
			{
			DebugLocation(122, 10);
			Match("?="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__117", 42);
			LeaveRule("T__117", 42);
			LeaveRule_T__117();
		}
	}
	// $ANTLR end "T__117"

	partial void EnterRule_T__118();
	partial void LeaveRule_T__118();

	// $ANTLR start "T__118"
	[GrammarRule("T__118")]
	private void mT__118()
	{
		EnterRule_T__118();
		EnterRule("T__118", 43);
		TraceIn("T__118", 43);
		try
		{
			int _type = T__118;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:123:8: ( '@' )
			DebugEnterAlt(1);
			// SugarCpp.g:123:10: '@'
			{
			DebugLocation(123, 10);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__118", 43);
			LeaveRule("T__118", 43);
			LeaveRule_T__118();
		}
	}
	// $ANTLR end "T__118"

	partial void EnterRule_T__119();
	partial void LeaveRule_T__119();

	// $ANTLR start "T__119"
	[GrammarRule("T__119")]
	private void mT__119()
	{
		EnterRule_T__119();
		EnterRule("T__119", 44);
		TraceIn("T__119", 44);
		try
		{
			int _type = T__119;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:124:8: ( '[' )
			DebugEnterAlt(1);
			// SugarCpp.g:124:10: '['
			{
			DebugLocation(124, 10);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__119", 44);
			LeaveRule("T__119", 44);
			LeaveRule_T__119();
		}
	}
	// $ANTLR end "T__119"

	partial void EnterRule_T__120();
	partial void LeaveRule_T__120();

	// $ANTLR start "T__120"
	[GrammarRule("T__120")]
	private void mT__120()
	{
		EnterRule_T__120();
		EnterRule("T__120", 45);
		TraceIn("T__120", 45);
		try
		{
			int _type = T__120;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:125:8: ( ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:125:10: ']'
			{
			DebugLocation(125, 10);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__120", 45);
			LeaveRule("T__120", 45);
			LeaveRule_T__120();
		}
	}
	// $ANTLR end "T__120"

	partial void EnterRule_T__121();
	partial void LeaveRule_T__121();

	// $ANTLR start "T__121"
	[GrammarRule("T__121")]
	private void mT__121()
	{
		EnterRule_T__121();
		EnterRule("T__121", 46);
		TraceIn("T__121", 46);
		try
		{
			int _type = T__121;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:126:8: ( '^' )
			DebugEnterAlt(1);
			// SugarCpp.g:126:10: '^'
			{
			DebugLocation(126, 10);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__121", 46);
			LeaveRule("T__121", 46);
			LeaveRule_T__121();
		}
	}
	// $ANTLR end "T__121"

	partial void EnterRule_T__122();
	partial void LeaveRule_T__122();

	// $ANTLR start "T__122"
	[GrammarRule("T__122")]
	private void mT__122()
	{
		EnterRule_T__122();
		EnterRule("T__122", 47);
		TraceIn("T__122", 47);
		try
		{
			int _type = T__122;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:127:8: ( '^=' )
			DebugEnterAlt(1);
			// SugarCpp.g:127:10: '^='
			{
			DebugLocation(127, 10);
			Match("^="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__122", 47);
			LeaveRule("T__122", 47);
			LeaveRule_T__122();
		}
	}
	// $ANTLR end "T__122"

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 48);
		TraceIn("T__123", 48);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:128:8: ( '`' )
			DebugEnterAlt(1);
			// SugarCpp.g:128:10: '`'
			{
			DebugLocation(128, 10);
			Match('`'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 48);
			LeaveRule("T__123", 48);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 49);
		TraceIn("T__124", 49);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:129:8: ( 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:129:10: 'and'
			{
			DebugLocation(129, 10);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 49);
			LeaveRule("T__124", 49);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_T__125();
	partial void LeaveRule_T__125();

	// $ANTLR start "T__125"
	[GrammarRule("T__125")]
	private void mT__125()
	{
		EnterRule_T__125();
		EnterRule("T__125", 50);
		TraceIn("T__125", 50);
		try
		{
			int _type = T__125;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:130:8: ( 'as' )
			DebugEnterAlt(1);
			// SugarCpp.g:130:10: 'as'
			{
			DebugLocation(130, 10);
			Match("as"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__125", 50);
			LeaveRule("T__125", 50);
			LeaveRule_T__125();
		}
	}
	// $ANTLR end "T__125"

	partial void EnterRule_T__126();
	partial void LeaveRule_T__126();

	// $ANTLR start "T__126"
	[GrammarRule("T__126")]
	private void mT__126()
	{
		EnterRule_T__126();
		EnterRule("T__126", 51);
		TraceIn("T__126", 51);
		try
		{
			int _type = T__126;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:131:8: ( 'by' )
			DebugEnterAlt(1);
			// SugarCpp.g:131:10: 'by'
			{
			DebugLocation(131, 10);
			Match("by"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__126", 51);
			LeaveRule("T__126", 51);
			LeaveRule_T__126();
		}
	}
	// $ANTLR end "T__126"

	partial void EnterRule_T__127();
	partial void LeaveRule_T__127();

	// $ANTLR start "T__127"
	[GrammarRule("T__127")]
	private void mT__127()
	{
		EnterRule_T__127();
		EnterRule("T__127", 52);
		TraceIn("T__127", 52);
		try
		{
			int _type = T__127;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:132:8: ( 'catch' )
			DebugEnterAlt(1);
			// SugarCpp.g:132:10: 'catch'
			{
			DebugLocation(132, 10);
			Match("catch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__127", 52);
			LeaveRule("T__127", 52);
			LeaveRule_T__127();
		}
	}
	// $ANTLR end "T__127"

	partial void EnterRule_T__128();
	partial void LeaveRule_T__128();

	// $ANTLR start "T__128"
	[GrammarRule("T__128")]
	private void mT__128()
	{
		EnterRule_T__128();
		EnterRule("T__128", 53);
		TraceIn("T__128", 53);
		try
		{
			int _type = T__128;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:133:8: ( 'class' )
			DebugEnterAlt(1);
			// SugarCpp.g:133:10: 'class'
			{
			DebugLocation(133, 10);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__128", 53);
			LeaveRule("T__128", 53);
			LeaveRule_T__128();
		}
	}
	// $ANTLR end "T__128"

	partial void EnterRule_T__129();
	partial void LeaveRule_T__129();

	// $ANTLR start "T__129"
	[GrammarRule("T__129")]
	private void mT__129()
	{
		EnterRule_T__129();
		EnterRule("T__129", 54);
		TraceIn("T__129", 54);
		try
		{
			int _type = T__129;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:134:8: ( 'const' )
			DebugEnterAlt(1);
			// SugarCpp.g:134:10: 'const'
			{
			DebugLocation(134, 10);
			Match("const"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__129", 54);
			LeaveRule("T__129", 54);
			LeaveRule_T__129();
		}
	}
	// $ANTLR end "T__129"

	partial void EnterRule_T__130();
	partial void LeaveRule_T__130();

	// $ANTLR start "T__130"
	[GrammarRule("T__130")]
	private void mT__130()
	{
		EnterRule_T__130();
		EnterRule("T__130", 55);
		TraceIn("T__130", 55);
		try
		{
			int _type = T__130;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:135:8: ( 'defer' )
			DebugEnterAlt(1);
			// SugarCpp.g:135:10: 'defer'
			{
			DebugLocation(135, 10);
			Match("defer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__130", 55);
			LeaveRule("T__130", 55);
			LeaveRule_T__130();
		}
	}
	// $ANTLR end "T__130"

	partial void EnterRule_T__131();
	partial void LeaveRule_T__131();

	// $ANTLR start "T__131"
	[GrammarRule("T__131")]
	private void mT__131()
	{
		EnterRule_T__131();
		EnterRule("T__131", 56);
		TraceIn("T__131", 56);
		try
		{
			int _type = T__131;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:136:8: ( 'downto' )
			DebugEnterAlt(1);
			// SugarCpp.g:136:10: 'downto'
			{
			DebugLocation(136, 10);
			Match("downto"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__131", 56);
			LeaveRule("T__131", 56);
			LeaveRule_T__131();
		}
	}
	// $ANTLR end "T__131"

	partial void EnterRule_T__132();
	partial void LeaveRule_T__132();

	// $ANTLR start "T__132"
	[GrammarRule("T__132")]
	private void mT__132()
	{
		EnterRule_T__132();
		EnterRule("T__132", 57);
		TraceIn("T__132", 57);
		try
		{
			int _type = T__132;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:137:8: ( 'else' )
			DebugEnterAlt(1);
			// SugarCpp.g:137:10: 'else'
			{
			DebugLocation(137, 10);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__132", 57);
			LeaveRule("T__132", 57);
			LeaveRule_T__132();
		}
	}
	// $ANTLR end "T__132"

	partial void EnterRule_T__133();
	partial void LeaveRule_T__133();

	// $ANTLR start "T__133"
	[GrammarRule("T__133")]
	private void mT__133()
	{
		EnterRule_T__133();
		EnterRule("T__133", 58);
		TraceIn("T__133", 58);
		try
		{
			int _type = T__133;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:138:8: ( 'enum' )
			DebugEnterAlt(1);
			// SugarCpp.g:138:10: 'enum'
			{
			DebugLocation(138, 10);
			Match("enum"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__133", 58);
			LeaveRule("T__133", 58);
			LeaveRule_T__133();
		}
	}
	// $ANTLR end "T__133"

	partial void EnterRule_T__134();
	partial void LeaveRule_T__134();

	// $ANTLR start "T__134"
	[GrammarRule("T__134")]
	private void mT__134()
	{
		EnterRule_T__134();
		EnterRule("T__134", 59);
		TraceIn("T__134", 59);
		try
		{
			int _type = T__134;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:139:8: ( 'finally' )
			DebugEnterAlt(1);
			// SugarCpp.g:139:10: 'finally'
			{
			DebugLocation(139, 10);
			Match("finally"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__134", 59);
			LeaveRule("T__134", 59);
			LeaveRule_T__134();
		}
	}
	// $ANTLR end "T__134"

	partial void EnterRule_T__135();
	partial void LeaveRule_T__135();

	// $ANTLR start "T__135"
	[GrammarRule("T__135")]
	private void mT__135()
	{
		EnterRule_T__135();
		EnterRule("T__135", 60);
		TraceIn("T__135", 60);
		try
		{
			int _type = T__135;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:140:8: ( 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:140:10: 'for'
			{
			DebugLocation(140, 10);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__135", 60);
			LeaveRule("T__135", 60);
			LeaveRule_T__135();
		}
	}
	// $ANTLR end "T__135"

	partial void EnterRule_T__136();
	partial void LeaveRule_T__136();

	// $ANTLR start "T__136"
	[GrammarRule("T__136")]
	private void mT__136()
	{
		EnterRule_T__136();
		EnterRule("T__136", 61);
		TraceIn("T__136", 61);
		try
		{
			int _type = T__136;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:141:8: ( 'if' )
			DebugEnterAlt(1);
			// SugarCpp.g:141:10: 'if'
			{
			DebugLocation(141, 10);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__136", 61);
			LeaveRule("T__136", 61);
			LeaveRule_T__136();
		}
	}
	// $ANTLR end "T__136"

	partial void EnterRule_T__137();
	partial void LeaveRule_T__137();

	// $ANTLR start "T__137"
	[GrammarRule("T__137")]
	private void mT__137()
	{
		EnterRule_T__137();
		EnterRule("T__137", 62);
		TraceIn("T__137", 62);
		try
		{
			int _type = T__137;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:142:8: ( 'import' )
			DebugEnterAlt(1);
			// SugarCpp.g:142:10: 'import'
			{
			DebugLocation(142, 10);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__137", 62);
			LeaveRule("T__137", 62);
			LeaveRule_T__137();
		}
	}
	// $ANTLR end "T__137"

	partial void EnterRule_T__138();
	partial void LeaveRule_T__138();

	// $ANTLR start "T__138"
	[GrammarRule("T__138")]
	private void mT__138()
	{
		EnterRule_T__138();
		EnterRule("T__138", 63);
		TraceIn("T__138", 63);
		try
		{
			int _type = T__138;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:143:8: ( 'is' )
			DebugEnterAlt(1);
			// SugarCpp.g:143:10: 'is'
			{
			DebugLocation(143, 10);
			Match("is"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__138", 63);
			LeaveRule("T__138", 63);
			LeaveRule_T__138();
		}
	}
	// $ANTLR end "T__138"

	partial void EnterRule_T__139();
	partial void LeaveRule_T__139();

	// $ANTLR start "T__139"
	[GrammarRule("T__139")]
	private void mT__139()
	{
		EnterRule_T__139();
		EnterRule("T__139", 64);
		TraceIn("T__139", 64);
		try
		{
			int _type = T__139;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:144:8: ( 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:144:10: 'isnt'
			{
			DebugLocation(144, 10);
			Match("isnt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__139", 64);
			LeaveRule("T__139", 64);
			LeaveRule_T__139();
		}
	}
	// $ANTLR end "T__139"

	partial void EnterRule_T__140();
	partial void LeaveRule_T__140();

	// $ANTLR start "T__140"
	[GrammarRule("T__140")]
	private void mT__140()
	{
		EnterRule_T__140();
		EnterRule("T__140", 65);
		TraceIn("T__140", 65);
		try
		{
			int _type = T__140;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:145:8: ( 'loop' )
			DebugEnterAlt(1);
			// SugarCpp.g:145:10: 'loop'
			{
			DebugLocation(145, 10);
			Match("loop"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__140", 65);
			LeaveRule("T__140", 65);
			LeaveRule_T__140();
		}
	}
	// $ANTLR end "T__140"

	partial void EnterRule_T__141();
	partial void LeaveRule_T__141();

	// $ANTLR start "T__141"
	[GrammarRule("T__141")]
	private void mT__141()
	{
		EnterRule_T__141();
		EnterRule("T__141", 66);
		TraceIn("T__141", 66);
		try
		{
			int _type = T__141;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:146:8: ( 'namespace' )
			DebugEnterAlt(1);
			// SugarCpp.g:146:10: 'namespace'
			{
			DebugLocation(146, 10);
			Match("namespace"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__141", 66);
			LeaveRule("T__141", 66);
			LeaveRule_T__141();
		}
	}
	// $ANTLR end "T__141"

	partial void EnterRule_T__142();
	partial void LeaveRule_T__142();

	// $ANTLR start "T__142"
	[GrammarRule("T__142")]
	private void mT__142()
	{
		EnterRule_T__142();
		EnterRule("T__142", 67);
		TraceIn("T__142", 67);
		try
		{
			int _type = T__142;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:147:8: ( 'new' )
			DebugEnterAlt(1);
			// SugarCpp.g:147:10: 'new'
			{
			DebugLocation(147, 10);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__142", 67);
			LeaveRule("T__142", 67);
			LeaveRule_T__142();
		}
	}
	// $ANTLR end "T__142"

	partial void EnterRule_T__143();
	partial void LeaveRule_T__143();

	// $ANTLR start "T__143"
	[GrammarRule("T__143")]
	private void mT__143()
	{
		EnterRule_T__143();
		EnterRule("T__143", 68);
		TraceIn("T__143", 68);
		try
		{
			int _type = T__143;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:148:8: ( 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:148:10: 'not'
			{
			DebugLocation(148, 10);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__143", 68);
			LeaveRule("T__143", 68);
			LeaveRule_T__143();
		}
	}
	// $ANTLR end "T__143"

	partial void EnterRule_T__144();
	partial void LeaveRule_T__144();

	// $ANTLR start "T__144"
	[GrammarRule("T__144")]
	private void mT__144()
	{
		EnterRule_T__144();
		EnterRule("T__144", 69);
		TraceIn("T__144", 69);
		try
		{
			int _type = T__144;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:149:8: ( 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:149:10: 'or'
			{
			DebugLocation(149, 10);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__144", 69);
			LeaveRule("T__144", 69);
			LeaveRule_T__144();
		}
	}
	// $ANTLR end "T__144"

	partial void EnterRule_T__145();
	partial void LeaveRule_T__145();

	// $ANTLR start "T__145"
	[GrammarRule("T__145")]
	private void mT__145()
	{
		EnterRule_T__145();
		EnterRule("T__145", 70);
		TraceIn("T__145", 70);
		try
		{
			int _type = T__145;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:150:8: ( 'return' )
			DebugEnterAlt(1);
			// SugarCpp.g:150:10: 'return'
			{
			DebugLocation(150, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__145", 70);
			LeaveRule("T__145", 70);
			LeaveRule_T__145();
		}
	}
	// $ANTLR end "T__145"

	partial void EnterRule_T__146();
	partial void LeaveRule_T__146();

	// $ANTLR start "T__146"
	[GrammarRule("T__146")]
	private void mT__146()
	{
		EnterRule_T__146();
		EnterRule("T__146", 71);
		TraceIn("T__146", 71);
		try
		{
			int _type = T__146;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:151:8: ( 'struct' )
			DebugEnterAlt(1);
			// SugarCpp.g:151:10: 'struct'
			{
			DebugLocation(151, 10);
			Match("struct"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__146", 71);
			LeaveRule("T__146", 71);
			LeaveRule_T__146();
		}
	}
	// $ANTLR end "T__146"

	partial void EnterRule_T__147();
	partial void LeaveRule_T__147();

	// $ANTLR start "T__147"
	[GrammarRule("T__147")]
	private void mT__147()
	{
		EnterRule_T__147();
		EnterRule("T__147", 72);
		TraceIn("T__147", 72);
		try
		{
			int _type = T__147;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:152:8: ( 'switch' )
			DebugEnterAlt(1);
			// SugarCpp.g:152:10: 'switch'
			{
			DebugLocation(152, 10);
			Match("switch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__147", 72);
			LeaveRule("T__147", 72);
			LeaveRule_T__147();
		}
	}
	// $ANTLR end "T__147"

	partial void EnterRule_T__148();
	partial void LeaveRule_T__148();

	// $ANTLR start "T__148"
	[GrammarRule("T__148")]
	private void mT__148()
	{
		EnterRule_T__148();
		EnterRule("T__148", 73);
		TraceIn("T__148", 73);
		try
		{
			int _type = T__148;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:153:8: ( 'then' )
			DebugEnterAlt(1);
			// SugarCpp.g:153:10: 'then'
			{
			DebugLocation(153, 10);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__148", 73);
			LeaveRule("T__148", 73);
			LeaveRule_T__148();
		}
	}
	// $ANTLR end "T__148"

	partial void EnterRule_T__149();
	partial void LeaveRule_T__149();

	// $ANTLR start "T__149"
	[GrammarRule("T__149")]
	private void mT__149()
	{
		EnterRule_T__149();
		EnterRule("T__149", 74);
		TraceIn("T__149", 74);
		try
		{
			int _type = T__149;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:154:8: ( 'to' )
			DebugEnterAlt(1);
			// SugarCpp.g:154:10: 'to'
			{
			DebugLocation(154, 10);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__149", 74);
			LeaveRule("T__149", 74);
			LeaveRule_T__149();
		}
	}
	// $ANTLR end "T__149"

	partial void EnterRule_T__150();
	partial void LeaveRule_T__150();

	// $ANTLR start "T__150"
	[GrammarRule("T__150")]
	private void mT__150()
	{
		EnterRule_T__150();
		EnterRule("T__150", 75);
		TraceIn("T__150", 75);
		try
		{
			int _type = T__150;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:155:8: ( 'try' )
			DebugEnterAlt(1);
			// SugarCpp.g:155:10: 'try'
			{
			DebugLocation(155, 10);
			Match("try"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__150", 75);
			LeaveRule("T__150", 75);
			LeaveRule_T__150();
		}
	}
	// $ANTLR end "T__150"

	partial void EnterRule_T__151();
	partial void LeaveRule_T__151();

	// $ANTLR start "T__151"
	[GrammarRule("T__151")]
	private void mT__151()
	{
		EnterRule_T__151();
		EnterRule("T__151", 76);
		TraceIn("T__151", 76);
		try
		{
			int _type = T__151;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:156:8: ( 'typedef' )
			DebugEnterAlt(1);
			// SugarCpp.g:156:10: 'typedef'
			{
			DebugLocation(156, 10);
			Match("typedef"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__151", 76);
			LeaveRule("T__151", 76);
			LeaveRule_T__151();
		}
	}
	// $ANTLR end "T__151"

	partial void EnterRule_T__152();
	partial void LeaveRule_T__152();

	// $ANTLR start "T__152"
	[GrammarRule("T__152")]
	private void mT__152()
	{
		EnterRule_T__152();
		EnterRule("T__152", 77);
		TraceIn("T__152", 77);
		try
		{
			int _type = T__152;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:157:8: ( 'unless' )
			DebugEnterAlt(1);
			// SugarCpp.g:157:10: 'unless'
			{
			DebugLocation(157, 10);
			Match("unless"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__152", 77);
			LeaveRule("T__152", 77);
			LeaveRule_T__152();
		}
	}
	// $ANTLR end "T__152"

	partial void EnterRule_T__153();
	partial void LeaveRule_T__153();

	// $ANTLR start "T__153"
	[GrammarRule("T__153")]
	private void mT__153()
	{
		EnterRule_T__153();
		EnterRule("T__153", 78);
		TraceIn("T__153", 78);
		try
		{
			int _type = T__153;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:158:8: ( 'unsigned' )
			DebugEnterAlt(1);
			// SugarCpp.g:158:10: 'unsigned'
			{
			DebugLocation(158, 10);
			Match("unsigned"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__153", 78);
			LeaveRule("T__153", 78);
			LeaveRule_T__153();
		}
	}
	// $ANTLR end "T__153"

	partial void EnterRule_T__154();
	partial void LeaveRule_T__154();

	// $ANTLR start "T__154"
	[GrammarRule("T__154")]
	private void mT__154()
	{
		EnterRule_T__154();
		EnterRule("T__154", 79);
		TraceIn("T__154", 79);
		try
		{
			int _type = T__154;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:159:8: ( 'until' )
			DebugEnterAlt(1);
			// SugarCpp.g:159:10: 'until'
			{
			DebugLocation(159, 10);
			Match("until"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__154", 79);
			LeaveRule("T__154", 79);
			LeaveRule_T__154();
		}
	}
	// $ANTLR end "T__154"

	partial void EnterRule_T__155();
	partial void LeaveRule_T__155();

	// $ANTLR start "T__155"
	[GrammarRule("T__155")]
	private void mT__155()
	{
		EnterRule_T__155();
		EnterRule("T__155", 80);
		TraceIn("T__155", 80);
		try
		{
			int _type = T__155;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:160:8: ( 'using' )
			DebugEnterAlt(1);
			// SugarCpp.g:160:10: 'using'
			{
			DebugLocation(160, 10);
			Match("using"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__155", 80);
			LeaveRule("T__155", 80);
			LeaveRule_T__155();
		}
	}
	// $ANTLR end "T__155"

	partial void EnterRule_T__156();
	partial void LeaveRule_T__156();

	// $ANTLR start "T__156"
	[GrammarRule("T__156")]
	private void mT__156()
	{
		EnterRule_T__156();
		EnterRule("T__156", 81);
		TraceIn("T__156", 81);
		try
		{
			int _type = T__156;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:161:8: ( 'when' )
			DebugEnterAlt(1);
			// SugarCpp.g:161:10: 'when'
			{
			DebugLocation(161, 10);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__156", 81);
			LeaveRule("T__156", 81);
			LeaveRule_T__156();
		}
	}
	// $ANTLR end "T__156"

	partial void EnterRule_T__157();
	partial void LeaveRule_T__157();

	// $ANTLR start "T__157"
	[GrammarRule("T__157")]
	private void mT__157()
	{
		EnterRule_T__157();
		EnterRule("T__157", 82);
		TraceIn("T__157", 82);
		try
		{
			int _type = T__157;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:162:8: ( 'while' )
			DebugEnterAlt(1);
			// SugarCpp.g:162:10: 'while'
			{
			DebugLocation(162, 10);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__157", 82);
			LeaveRule("T__157", 82);
			LeaveRule_T__157();
		}
	}
	// $ANTLR end "T__157"

	partial void EnterRule_T__158();
	partial void LeaveRule_T__158();

	// $ANTLR start "T__158"
	[GrammarRule("T__158")]
	private void mT__158()
	{
		EnterRule_T__158();
		EnterRule("T__158", 83);
		TraceIn("T__158", 83);
		try
		{
			int _type = T__158;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:163:8: ( '|' )
			DebugEnterAlt(1);
			// SugarCpp.g:163:10: '|'
			{
			DebugLocation(163, 10);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__158", 83);
			LeaveRule("T__158", 83);
			LeaveRule_T__158();
		}
	}
	// $ANTLR end "T__158"

	partial void EnterRule_T__159();
	partial void LeaveRule_T__159();

	// $ANTLR start "T__159"
	[GrammarRule("T__159")]
	private void mT__159()
	{
		EnterRule_T__159();
		EnterRule("T__159", 84);
		TraceIn("T__159", 84);
		try
		{
			int _type = T__159;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:164:8: ( '|=' )
			DebugEnterAlt(1);
			// SugarCpp.g:164:10: '|='
			{
			DebugLocation(164, 10);
			Match("|="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__159", 84);
			LeaveRule("T__159", 84);
			LeaveRule_T__159();
		}
	}
	// $ANTLR end "T__159"

	partial void EnterRule_T__160();
	partial void LeaveRule_T__160();

	// $ANTLR start "T__160"
	[GrammarRule("T__160")]
	private void mT__160()
	{
		EnterRule_T__160();
		EnterRule("T__160", 85);
		TraceIn("T__160", 85);
		try
		{
			int _type = T__160;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:165:8: ( '||' )
			DebugEnterAlt(1);
			// SugarCpp.g:165:10: '||'
			{
			DebugLocation(165, 10);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__160", 85);
			LeaveRule("T__160", 85);
			LeaveRule_T__160();
		}
	}
	// $ANTLR end "T__160"

	partial void EnterRule_T__161();
	partial void LeaveRule_T__161();

	// $ANTLR start "T__161"
	[GrammarRule("T__161")]
	private void mT__161()
	{
		EnterRule_T__161();
		EnterRule("T__161", 86);
		TraceIn("T__161", 86);
		try
		{
			int _type = T__161;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:166:8: ( '~' )
			DebugEnterAlt(1);
			// SugarCpp.g:166:10: '~'
			{
			DebugLocation(166, 10);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__161", 86);
			LeaveRule("T__161", 86);
			LeaveRule_T__161();
		}
	}
	// $ANTLR end "T__161"

	partial void EnterRule_DOT_DOT();
	partial void LeaveRule_DOT_DOT();

	// $ANTLR start "DOT_DOT"
	[GrammarRule("DOT_DOT")]
	private void mDOT_DOT()
	{
		EnterRule_DOT_DOT();
		EnterRule("DOT_DOT", 87);
		TraceIn("DOT_DOT", 87);
		try
		{
			int _type = DOT_DOT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:608:8: ( '..' )
			DebugEnterAlt(1);
			// SugarCpp.g:608:10: '..'
			{
			DebugLocation(608, 10);
			Match(".."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT_DOT", 87);
			LeaveRule("DOT_DOT", 87);
			LeaveRule_DOT_DOT();
		}
	}
	// $ANTLR end "DOT_DOT"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 88);
		TraceIn("IDENT", 88);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:610:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ ( '0' .. '9' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:610:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ ( '0' .. '9' )*
			{
			DebugLocation(610, 8);
			// SugarCpp.g:610:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(610, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(610, 37);
			// SugarCpp.g:610:37: ( '0' .. '9' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(610, 37);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 88);
			LeaveRule("IDENT", 88);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 89);
		TraceIn("NUMBER", 89);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:612:7: ( ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:612:9: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			{
			DebugLocation(612, 9);
			// SugarCpp.g:612:9: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0=='0'))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1=='x'))
				{
					alt17 = 2;
				}
				else
				{
					alt17 = 1;
				}
			}
			else if (((LA17_0>='1' && LA17_0<='9')))
			{
				alt17 = 1;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:612:11: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )?
				{
				DebugLocation(612, 11);
				// SugarCpp.g:612:11: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(612, 11);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(612, 21);
				// SugarCpp.g:612:21: ( '.' ( '0' .. '9' )+ )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='.'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:612:22: '.' ( '0' .. '9' )+
					{
					DebugLocation(612, 22);
					Match('.'); 
					DebugLocation(612, 26);
					// SugarCpp.g:612:26: ( '0' .. '9' )+
					int cnt4=0;
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_0 = input.LA(1);

						if (((LA4_0>='0' && LA4_0<='9')))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch (alt4)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:
							{
							DebugLocation(612, 26);
							input.Consume();


							}
							break;

						default:
							if (cnt4 >= 1)
								goto loop4;

							EarlyExitException eee4 = new EarlyExitException( 4, input );
							DebugRecognitionException(eee4);
							throw eee4;
						}
						cnt4++;
					}
					loop4:
						;

					} finally { DebugExitSubRule(4); }


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(612, 38);
				// SugarCpp.g:612:38: ( 'e' ( '-' )? ( '0' .. '9' )+ )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:612:39: 'e' ( '-' )? ( '0' .. '9' )+
					{
					DebugLocation(612, 39);
					Match('e'); 
					DebugLocation(612, 43);
					// SugarCpp.g:612:43: ( '-' )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0=='-'))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:612:43: '-'
						{
						DebugLocation(612, 43);
						Match('-'); 

						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(612, 48);
					// SugarCpp.g:612:48: ( '0' .. '9' )+
					int cnt7=0;
					try { DebugEnterSubRule(7);
					while (true)
					{
						int alt7=2;
						try { DebugEnterDecision(7, false);
						int LA7_0 = input.LA(1);

						if (((LA7_0>='0' && LA7_0<='9')))
						{
							alt7 = 1;
						}


						} finally { DebugExitDecision(7); }
						switch (alt7)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:
							{
							DebugLocation(612, 48);
							input.Consume();


							}
							break;

						default:
							if (cnt7 >= 1)
								goto loop7;

							EarlyExitException eee7 = new EarlyExitException( 7, input );
							DebugRecognitionException(eee7);
							throw eee7;
						}
						cnt7++;
					}
					loop7:
						;

					} finally { DebugExitSubRule(7); }


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(612, 60);
				// SugarCpp.g:612:60: ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )?
				int alt15=7;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				switch (input.LA(1))
				{
				case 'f':
					{
					alt15 = 1;
					}
					break;
				case 'F':
					{
					alt15 = 2;
					}
					break;
				case 'u':
					{
					alt15 = 3;
					}
					break;
				case 'l':
					{
					alt15 = 4;
					}
					break;
				case 'U':
					{
					alt15 = 5;
					}
					break;
				case 'L':
					{
					alt15 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:612:61: 'f'
					{
					DebugLocation(612, 61);
					Match('f'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:612:67: 'F'
					{
					DebugLocation(612, 67);
					Match('F'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:612:73: 'u' ( 'l' ( 'l' )? )?
					{
					DebugLocation(612, 73);
					Match('u'); 
					DebugLocation(612, 77);
					// SugarCpp.g:612:77: ( 'l' ( 'l' )? )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0=='l'))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:612:78: 'l' ( 'l' )?
						{
						DebugLocation(612, 78);
						Match('l'); 
						DebugLocation(612, 82);
						// SugarCpp.g:612:82: ( 'l' )?
						int alt9=2;
						try { DebugEnterSubRule(9);
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0=='l'))
						{
							alt9 = 1;
						}
						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:612:82: 'l'
							{
							DebugLocation(612, 82);
							Match('l'); 

							}
							break;

						}
						} finally { DebugExitSubRule(9); }


						}
						break;

					}
					} finally { DebugExitSubRule(10); }


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:612:91: 'l' ( 'l' )?
					{
					DebugLocation(612, 91);
					Match('l'); 
					DebugLocation(612, 95);
					// SugarCpp.g:612:95: ( 'l' )?
					int alt11=2;
					try { DebugEnterSubRule(11);
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if ((LA11_0=='l'))
					{
						alt11 = 1;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:612:95: 'l'
						{
						DebugLocation(612, 95);
						Match('l'); 

						}
						break;

					}
					} finally { DebugExitSubRule(11); }


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:612:102: 'U' ( 'L' ( 'L' )? )?
					{
					DebugLocation(612, 102);
					Match('U'); 
					DebugLocation(612, 106);
					// SugarCpp.g:612:106: ( 'L' ( 'L' )? )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0=='L'))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:612:107: 'L' ( 'L' )?
						{
						DebugLocation(612, 107);
						Match('L'); 
						DebugLocation(612, 111);
						// SugarCpp.g:612:111: ( 'L' )?
						int alt12=2;
						try { DebugEnterSubRule(12);
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0=='L'))
						{
							alt12 = 1;
						}
						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:612:111: 'L'
							{
							DebugLocation(612, 111);
							Match('L'); 

							}
							break;

						}
						} finally { DebugExitSubRule(12); }


						}
						break;

					}
					} finally { DebugExitSubRule(13); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:612:120: 'L' ( 'L' )?
					{
					DebugLocation(612, 120);
					Match('L'); 
					DebugLocation(612, 124);
					// SugarCpp.g:612:124: ( 'L' )?
					int alt14=2;
					try { DebugEnterSubRule(14);
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0=='L'))
					{
						alt14 = 1;
					}
					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:612:124: 'L'
						{
						DebugLocation(612, 124);
						Match('L'); 

						}
						break;

					}
					} finally { DebugExitSubRule(14); }


					}
					break;

				}
				} finally { DebugExitSubRule(15); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:613:11: '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				{
				DebugLocation(613, 11);
				Match('0'); 
				DebugLocation(613, 15);
				Match('x'); 
				DebugLocation(613, 19);
				// SugarCpp.g:613:19: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if (((LA16_0>='0' && LA16_0<='9')||(LA16_0>='A' && LA16_0<='F')||(LA16_0>='a' && LA16_0<='f')))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(613, 19);
						input.Consume();


						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 89);
			LeaveRule("NUMBER", 89);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 90);
		TraceIn("STRING", 90);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:618:2: ( '\"' (~ '\"' )* '\"' | '\\'' (~ '\\'' )+ '\\'' )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0=='\"'))
			{
				alt20 = 1;
			}
			else if ((LA20_0=='\''))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:618:4: '\"' (~ '\"' )* '\"'
				{
				DebugLocation(618, 4);
				Match('\"'); 
				DebugLocation(618, 8);
				// SugarCpp.g:618:8: (~ '\"' )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if (((LA18_0>='\u0000' && LA18_0<='!')||(LA18_0>='#' && LA18_0<='\uFFFF')))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(618, 8);
						input.Consume();


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(618, 16);
				Match('\"'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:619:4: '\\'' (~ '\\'' )+ '\\''
				{
				DebugLocation(619, 4);
				Match('\''); 
				DebugLocation(619, 9);
				// SugarCpp.g:619:9: (~ '\\'' )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if (((LA19_0>='\u0000' && LA19_0<='&')||(LA19_0>='(' && LA19_0<='\uFFFF')))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(619, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(619, 18);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 90);
			LeaveRule("STRING", 90);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_Comment();
	partial void LeaveRule_Comment();

	// $ANTLR start "Comment"
	[GrammarRule("Comment")]
	private void mComment()
	{
		EnterRule_Comment();
		EnterRule("Comment", 91);
		TraceIn("Comment", 91);
		try
		{
			int _type = Comment;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:623:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// SugarCpp.g:623:4: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(623, 4);
			Match("/*"); 

			DebugLocation(623, 9);
			// SugarCpp.g:623:9: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0=='*'))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1=='/'))
					{
						alt21 = 2;
					}
					else if (((LA21_1>='\u0000' && LA21_1<='.')||(LA21_1>='0' && LA21_1<='\uFFFF')))
					{
						alt21 = 1;
					}


				}
				else if (((LA21_0>='\u0000' && LA21_0<=')')||(LA21_0>='+' && LA21_0<='\uFFFF')))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:41: .
					{
					DebugLocation(623, 41);
					MatchAny(); 

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(623, 46);
			Match("*/"); 

			DebugLocation(623, 51);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Comment", 91);
			LeaveRule("Comment", 91);
			LeaveRule_Comment();
		}
	}
	// $ANTLR end "Comment"

	partial void EnterRule_LineComment();
	partial void LeaveRule_LineComment();

	// $ANTLR start "LineComment"
	[GrammarRule("LineComment")]
	private void mLineComment()
	{
		EnterRule_LineComment();
		EnterRule("LineComment", 92);
		TraceIn("LineComment", 92);
		try
		{
			int _type = LineComment;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:627:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:627:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(627, 4);
			Match("//"); 

			DebugLocation(627, 9);
			// SugarCpp.g:627:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if (((LA22_0>='\u0000' && LA22_0<='\t')||(LA22_0>='\u000B' && LA22_0<='\f')||(LA22_0>='\u000E' && LA22_0<='\uFFFF')))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(627, 9);
					input.Consume();


					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(627, 24);
			// SugarCpp.g:627:24: ( '\\r' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0=='\r'))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:627:24: '\\r'
				{
				DebugLocation(627, 24);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(627, 30);
			Match('\n'); 
			DebugLocation(627, 35);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LineComment", 92);
			LeaveRule("LineComment", 92);
			LeaveRule_LineComment();
		}
	}
	// $ANTLR end "LineComment"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 93);
		TraceIn("EXPONENT", 93);
		try
		{
			// SugarCpp.g:632:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:633:5: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(633, 5);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 15);
			// SugarCpp.g:633:15: ( '+' | '-' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0=='+'||LA24_0=='-'))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:
				{
				DebugLocation(633, 15);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(633, 26);
			// SugarCpp.g:633:26: ( '0' .. '9' )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if (((LA25_0>='0' && LA25_0<='9')))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(633, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 93);
			LeaveRule("EXPONENT", 93);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_Left_Bracket();
	partial void LeaveRule_Left_Bracket();

	// $ANTLR start "Left_Bracket"
	[GrammarRule("Left_Bracket")]
	private void mLeft_Bracket()
	{
		EnterRule_Left_Bracket();
		EnterRule("Left_Bracket", 94);
		TraceIn("Left_Bracket", 94);
		try
		{
			int _type = Left_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:637:2: ( '(' | '[' | '{' )
			int alt26=3;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case '(':
				{
				alt26 = 1;
				}
				break;
			case '[':
				{
				alt26 = 2;
				}
				break;
			case '{':
				{
				alt26 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:637:4: '('
				{
				DebugLocation(637, 4);
				Match('('); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:637:10: '['
				{
				DebugLocation(637, 10);
				Match('['); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:637:16: '{'
				{
				DebugLocation(637, 16);
				Match('{'); 
				DebugLocation(638, 2);

						int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
						if (Bracket[k] == null) Bracket[k] = new Stack<int>();
						Bracket[k].Push(CharIndex);
					

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Left_Bracket", 94);
			LeaveRule("Left_Bracket", 94);
			LeaveRule_Left_Bracket();
		}
	}
	// $ANTLR end "Left_Bracket"

	partial void EnterRule_Right_Bracket();
	partial void LeaveRule_Right_Bracket();

	// $ANTLR start "Right_Bracket"
	[GrammarRule("Right_Bracket")]
	private void mRight_Bracket()
	{
		EnterRule_Right_Bracket();
		EnterRule("Right_Bracket", 95);
		TraceIn("Right_Bracket", 95);
		try
		{
			int _type = Right_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:646:2: ( ')' | ']' | '}' )
			int alt27=3;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case ')':
				{
				alt27 = 1;
				}
				break;
			case ']':
				{
				alt27 = 2;
				}
				break;
			case '}':
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:646:4: ')'
				{
				DebugLocation(646, 4);
				Match(')'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:646:10: ']'
				{
				DebugLocation(646, 10);
				Match(']'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:646:16: '}'
				{
				DebugLocation(646, 16);
				Match('}'); 
				DebugLocation(647, 2);

						int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
						int pos = Bracket[k].Pop();
						while (Indents.Count > 0 && pos < Indents.First().CharIndex)
						{
							Emit(this.CreateToken(DEDENT, "DEDENT"));
							Indents.Pop();
							CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
						}
					

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Right_Bracket", 95);
			LeaveRule("Right_Bracket", 95);
			LeaveRule_Right_Bracket();
		}
	}
	// $ANTLR end "Right_Bracket"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 96);
		TraceIn("NEWLINE", 96);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			CommonToken SP1 = default(CommonToken);

			// SugarCpp.g:660:2: ( ( ( '\\r' )? '\\n' )+ ( SP )? )
			DebugEnterAlt(1);
			// SugarCpp.g:660:4: ( ( '\\r' )? '\\n' )+ ( SP )?
			{
			DebugLocation(660, 4);
			// SugarCpp.g:660:4: ( ( '\\r' )? '\\n' )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0=='\n'||LA29_0=='\r'))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:660:5: ( '\\r' )? '\\n'
					{
					DebugLocation(660, 5);
					// SugarCpp.g:660:5: ( '\\r' )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0=='\r'))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:660:5: '\\r'
						{
						DebugLocation(660, 5);
						Match('\r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(660, 11);
					Match('\n'); 

					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(660, 18);
			// SugarCpp.g:660:18: ( SP )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0=='\t'||LA30_0==' '))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:660:18: SP
				{
				DebugLocation(660, 18);
				int SP1Start1071 = CharIndex;
				int SP1StartLine1071 = Line;
				int SP1StartCharPos1071 = CharPositionInLine;
				mSP(); 
				SP1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, SP1Start1071, CharIndex-1);
				SP1.Line = SP1StartLine1071;
				SP1.CharPositionInLine = SP1StartCharPos1071;

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(661, 2);

					int indent = (SP1!=null?SP1.Text:null) == null ? 0 : (SP1!=null?SP1.Text:null).Length;
					if (indent > CurrentIndent)
					{
						Emit(this.CreateToken(NEWLINE, "NEWLINE"));
						Emit(this.CreateToken(INDENT, "INDENT"));
						Emit(this.CreateToken(NEWLINE, "NEWLINE"));
						Indents.Push(new Indentation(indent, CharIndex));
						CurrentIndent = indent;
					}
					else if (indent < CurrentIndent)
					{
						while (Indents.Count > 0 && indent < CurrentIndent)
						{
							Emit(this.CreateToken(NEWLINE, "NEWLINE"));
							Emit(this.CreateToken(DEDENT, "DEDENT"));
							Indents.Pop();
							CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
						}
						Emit(this.CreateToken(NEWLINE, "NEWLINE"));
					}
					else
					{
						Emit(this.CreateToken(NEWLINE, "NEWLINE"));
						Skip();
					}
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 96);
			LeaveRule("NEWLINE", 96);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_SP();
	partial void LeaveRule_SP();

	// $ANTLR start "SP"
	[GrammarRule("SP")]
	private void mSP()
	{
		EnterRule_SP();
		EnterRule("SP", 97);
		TraceIn("SP", 97);
		try
		{
			// SugarCpp.g:690:12: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:690:14: ( ' ' | '\\t' )+
			{
			DebugLocation(690, 14);
			// SugarCpp.g:690:14: ( ' ' | '\\t' )+
			int cnt31=0;
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0=='\t'||LA31_0==' '))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(690, 14);
					input.Consume();


					}
					break;

				default:
					if (cnt31 >= 1)
						goto loop31;

					EarlyExitException eee31 = new EarlyExitException( 31, input );
					DebugRecognitionException(eee31);
					throw eee31;
				}
				cnt31++;
			}
			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

		}
		finally
		{
			TraceOut("SP", 97);
			LeaveRule("SP", 97);
			LeaveRule_SP();
		}
	}
	// $ANTLR end "SP"

	partial void EnterRule_White_Space();
	partial void LeaveRule_White_Space();

	// $ANTLR start "White_Space"
	[GrammarRule("White_Space")]
	private void mWhite_Space()
	{
		EnterRule_White_Space();
		EnterRule("White_Space", 98);
		TraceIn("White_Space", 98);
		try
		{
			int _type = White_Space;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:692:12: ( ' ' )
			DebugEnterAlt(1);
			// SugarCpp.g:692:14: ' '
			{
			DebugLocation(692, 14);
			Match(' '); 
			DebugLocation(692, 18);
			 Skip(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("White_Space", 98);
			LeaveRule("White_Space", 98);
			LeaveRule_White_Space();
		}
	}
	// $ANTLR end "White_Space"

	partial void EnterRule_INDENT();
	partial void LeaveRule_INDENT();

	// $ANTLR start "INDENT"
	[GrammarRule("INDENT")]
	private void mINDENT()
	{
		EnterRule_INDENT();
		EnterRule("INDENT", 99);
		TraceIn("INDENT", 99);
		try
		{
			int _type = INDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:694:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:694:9: {...}? => ( '\\n' )
			{
			DebugLocation(694, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "INDENT", "0==1");
			}
			DebugLocation(694, 19);
			// SugarCpp.g:694:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:694:20: '\\n'
			{
			DebugLocation(694, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDENT", 99);
			LeaveRule("INDENT", 99);
			LeaveRule_INDENT();
		}
	}
	// $ANTLR end "INDENT"

	partial void EnterRule_DEDENT();
	partial void LeaveRule_DEDENT();

	// $ANTLR start "DEDENT"
	[GrammarRule("DEDENT")]
	private void mDEDENT()
	{
		EnterRule_DEDENT();
		EnterRule("DEDENT", 100);
		TraceIn("DEDENT", 100);
		try
		{
			int _type = DEDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:695:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:695:9: {...}? => ( '\\n' )
			{
			DebugLocation(695, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "DEDENT", "0==1");
			}
			DebugLocation(695, 19);
			// SugarCpp.g:695:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:695:20: '\\n'
			{
			DebugLocation(695, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEDENT", 100);
			LeaveRule("DEDENT", 100);
			LeaveRule_DEDENT();
		}
	}
	// $ANTLR end "DEDENT"

	public override void mTokens()
	{
		// SugarCpp.g:1:8: ( T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | T__147 | T__148 | T__149 | T__150 | T__151 | T__152 | T__153 | T__154 | T__155 | T__156 | T__157 | T__158 | T__159 | T__160 | T__161 | DOT_DOT | IDENT | NUMBER | STRING | Comment | LineComment | Left_Bracket | Right_Bracket | NEWLINE | White_Space | INDENT | DEDENT )
		int alt32=98;
		try { DebugEnterDecision(32, false);
		try
		{
			alt32 = dfa32.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(32); }
		switch (alt32)
		{
		case 1:
			DebugEnterAlt(1);
			// SugarCpp.g:1:10: T__76
			{
			DebugLocation(1, 10);
			mT__76(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// SugarCpp.g:1:16: T__77
			{
			DebugLocation(1, 16);
			mT__77(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// SugarCpp.g:1:22: T__78
			{
			DebugLocation(1, 22);
			mT__78(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// SugarCpp.g:1:28: T__79
			{
			DebugLocation(1, 28);
			mT__79(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// SugarCpp.g:1:34: T__80
			{
			DebugLocation(1, 34);
			mT__80(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// SugarCpp.g:1:40: T__81
			{
			DebugLocation(1, 40);
			mT__81(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// SugarCpp.g:1:46: T__82
			{
			DebugLocation(1, 46);
			mT__82(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// SugarCpp.g:1:52: T__83
			{
			DebugLocation(1, 52);
			mT__83(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// SugarCpp.g:1:58: T__84
			{
			DebugLocation(1, 58);
			mT__84(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// SugarCpp.g:1:64: T__85
			{
			DebugLocation(1, 64);
			mT__85(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// SugarCpp.g:1:70: T__86
			{
			DebugLocation(1, 70);
			mT__86(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// SugarCpp.g:1:76: T__87
			{
			DebugLocation(1, 76);
			mT__87(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// SugarCpp.g:1:82: T__88
			{
			DebugLocation(1, 82);
			mT__88(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// SugarCpp.g:1:88: T__89
			{
			DebugLocation(1, 88);
			mT__89(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// SugarCpp.g:1:94: T__90
			{
			DebugLocation(1, 94);
			mT__90(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// SugarCpp.g:1:100: T__91
			{
			DebugLocation(1, 100);
			mT__91(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// SugarCpp.g:1:106: T__92
			{
			DebugLocation(1, 106);
			mT__92(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// SugarCpp.g:1:112: T__93
			{
			DebugLocation(1, 112);
			mT__93(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// SugarCpp.g:1:118: T__94
			{
			DebugLocation(1, 118);
			mT__94(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// SugarCpp.g:1:124: T__95
			{
			DebugLocation(1, 124);
			mT__95(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// SugarCpp.g:1:130: T__96
			{
			DebugLocation(1, 130);
			mT__96(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// SugarCpp.g:1:136: T__97
			{
			DebugLocation(1, 136);
			mT__97(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// SugarCpp.g:1:142: T__98
			{
			DebugLocation(1, 142);
			mT__98(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// SugarCpp.g:1:148: T__99
			{
			DebugLocation(1, 148);
			mT__99(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// SugarCpp.g:1:154: T__100
			{
			DebugLocation(1, 154);
			mT__100(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// SugarCpp.g:1:161: T__101
			{
			DebugLocation(1, 161);
			mT__101(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// SugarCpp.g:1:168: T__102
			{
			DebugLocation(1, 168);
			mT__102(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// SugarCpp.g:1:175: T__103
			{
			DebugLocation(1, 175);
			mT__103(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// SugarCpp.g:1:182: T__104
			{
			DebugLocation(1, 182);
			mT__104(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// SugarCpp.g:1:189: T__105
			{
			DebugLocation(1, 189);
			mT__105(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// SugarCpp.g:1:196: T__106
			{
			DebugLocation(1, 196);
			mT__106(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// SugarCpp.g:1:203: T__107
			{
			DebugLocation(1, 203);
			mT__107(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// SugarCpp.g:1:210: T__108
			{
			DebugLocation(1, 210);
			mT__108(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// SugarCpp.g:1:217: T__109
			{
			DebugLocation(1, 217);
			mT__109(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// SugarCpp.g:1:224: T__110
			{
			DebugLocation(1, 224);
			mT__110(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// SugarCpp.g:1:231: T__111
			{
			DebugLocation(1, 231);
			mT__111(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// SugarCpp.g:1:238: T__112
			{
			DebugLocation(1, 238);
			mT__112(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// SugarCpp.g:1:245: T__113
			{
			DebugLocation(1, 245);
			mT__113(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// SugarCpp.g:1:252: T__114
			{
			DebugLocation(1, 252);
			mT__114(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// SugarCpp.g:1:259: T__115
			{
			DebugLocation(1, 259);
			mT__115(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// SugarCpp.g:1:266: T__116
			{
			DebugLocation(1, 266);
			mT__116(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// SugarCpp.g:1:273: T__117
			{
			DebugLocation(1, 273);
			mT__117(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// SugarCpp.g:1:280: T__118
			{
			DebugLocation(1, 280);
			mT__118(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// SugarCpp.g:1:287: T__119
			{
			DebugLocation(1, 287);
			mT__119(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// SugarCpp.g:1:294: T__120
			{
			DebugLocation(1, 294);
			mT__120(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// SugarCpp.g:1:301: T__121
			{
			DebugLocation(1, 301);
			mT__121(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// SugarCpp.g:1:308: T__122
			{
			DebugLocation(1, 308);
			mT__122(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// SugarCpp.g:1:315: T__123
			{
			DebugLocation(1, 315);
			mT__123(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// SugarCpp.g:1:322: T__124
			{
			DebugLocation(1, 322);
			mT__124(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// SugarCpp.g:1:329: T__125
			{
			DebugLocation(1, 329);
			mT__125(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// SugarCpp.g:1:336: T__126
			{
			DebugLocation(1, 336);
			mT__126(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// SugarCpp.g:1:343: T__127
			{
			DebugLocation(1, 343);
			mT__127(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// SugarCpp.g:1:350: T__128
			{
			DebugLocation(1, 350);
			mT__128(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// SugarCpp.g:1:357: T__129
			{
			DebugLocation(1, 357);
			mT__129(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// SugarCpp.g:1:364: T__130
			{
			DebugLocation(1, 364);
			mT__130(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// SugarCpp.g:1:371: T__131
			{
			DebugLocation(1, 371);
			mT__131(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// SugarCpp.g:1:378: T__132
			{
			DebugLocation(1, 378);
			mT__132(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// SugarCpp.g:1:385: T__133
			{
			DebugLocation(1, 385);
			mT__133(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// SugarCpp.g:1:392: T__134
			{
			DebugLocation(1, 392);
			mT__134(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// SugarCpp.g:1:399: T__135
			{
			DebugLocation(1, 399);
			mT__135(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// SugarCpp.g:1:406: T__136
			{
			DebugLocation(1, 406);
			mT__136(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// SugarCpp.g:1:413: T__137
			{
			DebugLocation(1, 413);
			mT__137(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// SugarCpp.g:1:420: T__138
			{
			DebugLocation(1, 420);
			mT__138(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// SugarCpp.g:1:427: T__139
			{
			DebugLocation(1, 427);
			mT__139(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// SugarCpp.g:1:434: T__140
			{
			DebugLocation(1, 434);
			mT__140(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// SugarCpp.g:1:441: T__141
			{
			DebugLocation(1, 441);
			mT__141(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// SugarCpp.g:1:448: T__142
			{
			DebugLocation(1, 448);
			mT__142(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// SugarCpp.g:1:455: T__143
			{
			DebugLocation(1, 455);
			mT__143(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// SugarCpp.g:1:462: T__144
			{
			DebugLocation(1, 462);
			mT__144(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// SugarCpp.g:1:469: T__145
			{
			DebugLocation(1, 469);
			mT__145(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// SugarCpp.g:1:476: T__146
			{
			DebugLocation(1, 476);
			mT__146(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// SugarCpp.g:1:483: T__147
			{
			DebugLocation(1, 483);
			mT__147(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// SugarCpp.g:1:490: T__148
			{
			DebugLocation(1, 490);
			mT__148(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// SugarCpp.g:1:497: T__149
			{
			DebugLocation(1, 497);
			mT__149(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// SugarCpp.g:1:504: T__150
			{
			DebugLocation(1, 504);
			mT__150(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// SugarCpp.g:1:511: T__151
			{
			DebugLocation(1, 511);
			mT__151(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// SugarCpp.g:1:518: T__152
			{
			DebugLocation(1, 518);
			mT__152(); 

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// SugarCpp.g:1:525: T__153
			{
			DebugLocation(1, 525);
			mT__153(); 

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// SugarCpp.g:1:532: T__154
			{
			DebugLocation(1, 532);
			mT__154(); 

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// SugarCpp.g:1:539: T__155
			{
			DebugLocation(1, 539);
			mT__155(); 

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// SugarCpp.g:1:546: T__156
			{
			DebugLocation(1, 546);
			mT__156(); 

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// SugarCpp.g:1:553: T__157
			{
			DebugLocation(1, 553);
			mT__157(); 

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// SugarCpp.g:1:560: T__158
			{
			DebugLocation(1, 560);
			mT__158(); 

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// SugarCpp.g:1:567: T__159
			{
			DebugLocation(1, 567);
			mT__159(); 

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// SugarCpp.g:1:574: T__160
			{
			DebugLocation(1, 574);
			mT__160(); 

			}
			break;
		case 86:
			DebugEnterAlt(86);
			// SugarCpp.g:1:581: T__161
			{
			DebugLocation(1, 581);
			mT__161(); 

			}
			break;
		case 87:
			DebugEnterAlt(87);
			// SugarCpp.g:1:588: DOT_DOT
			{
			DebugLocation(1, 588);
			mDOT_DOT(); 

			}
			break;
		case 88:
			DebugEnterAlt(88);
			// SugarCpp.g:1:596: IDENT
			{
			DebugLocation(1, 596);
			mIDENT(); 

			}
			break;
		case 89:
			DebugEnterAlt(89);
			// SugarCpp.g:1:602: NUMBER
			{
			DebugLocation(1, 602);
			mNUMBER(); 

			}
			break;
		case 90:
			DebugEnterAlt(90);
			// SugarCpp.g:1:609: STRING
			{
			DebugLocation(1, 609);
			mSTRING(); 

			}
			break;
		case 91:
			DebugEnterAlt(91);
			// SugarCpp.g:1:616: Comment
			{
			DebugLocation(1, 616);
			mComment(); 

			}
			break;
		case 92:
			DebugEnterAlt(92);
			// SugarCpp.g:1:624: LineComment
			{
			DebugLocation(1, 624);
			mLineComment(); 

			}
			break;
		case 93:
			DebugEnterAlt(93);
			// SugarCpp.g:1:636: Left_Bracket
			{
			DebugLocation(1, 636);
			mLeft_Bracket(); 

			}
			break;
		case 94:
			DebugEnterAlt(94);
			// SugarCpp.g:1:649: Right_Bracket
			{
			DebugLocation(1, 649);
			mRight_Bracket(); 

			}
			break;
		case 95:
			DebugEnterAlt(95);
			// SugarCpp.g:1:663: NEWLINE
			{
			DebugLocation(1, 663);
			mNEWLINE(); 

			}
			break;
		case 96:
			DebugEnterAlt(96);
			// SugarCpp.g:1:671: White_Space
			{
			DebugLocation(1, 671);
			mWhite_Space(); 

			}
			break;
		case 97:
			DebugEnterAlt(97);
			// SugarCpp.g:1:683: INDENT
			{
			DebugLocation(1, 683);
			mINDENT(); 

			}
			break;
		case 98:
			DebugEnterAlt(98);
			// SugarCpp.g:1:690: DEDENT
			{
			DebugLocation(1, 690);
			mDEDENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa32 = new DFA32(this, SpecialStateTransition32);
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x1\xFFFF\x1\x31\x1\x33\x1\x36\x2\xFFFF\x1\x3A\x1\x3D\x1\xFFFF\x1\x41"+
			"\x1\x44\x1\x48\x1\x4B\x1\xFFFF\x1\x4F\x1\x52\x1\x55\x1\x57\x3\xFFFF\x1"+
			"\x5B\x1\xFFFF\xF\x28\x1\x7C\x7\xFFFF\x1\x7D\x11\xFFFF\x1\x7F\xC\xFFFF"+
			"\x1\x81\x6\xFFFF\x1\x83\x7\xFFFF\x1\x28\x1\x85\x1\x86\x9\x28\x1\x90\x1"+
			"\x28\x1\x93\x4\x28\x1\x98\x4\x28\x1\x9D\x5\x28\xA\xFFFF\x1\xA8\x2\xFFFF"+
			"\x8\x28\x1\xB1\x1\xFFFF\x2\x28\x1\xFFFF\x2\x28\x1\xB6\x1\xB7\x1\xFFFF"+
			"\x4\x28\x1\xFFFF\x1\xBC\x7\x28\x3\xFFFF\x5\x28\x1\xC9\x1\xCA\x1\x28\x1"+
			"\xFFFF\x1\x28\x1\xCD\x1\xCE\x1\x28\x2\xFFFF\x3\x28\x1\xD3\x1\xFFFF\x5"+
			"\x28\x1\xD9\x1\x28\x1\xDB\x1\xDC\x1\xDD\x1\xDE\x1\x28\x2\xFFFF\x2\x28"+
			"\x2\xFFFF\x4\x28\x1\xFFFF\x3\x28\x1\xE9\x1\xEA\x1\xFFFF\x1\xEB\x4\xFFFF"+
			"\x1\xEC\x1\x28\x1\xEE\x1\x28\x1\xF0\x1\xF1\x1\xF2\x1\x28\x1\xF4\x1\x28"+
			"\x4\xFFFF\x1\xF6\x1\xFFFF\x1\x28\x3\xFFFF\x1\xF8\x1\xFFFF\x1\x28\x1\xFFFF"+
			"\x1\x28\x1\xFFFF\x1\xFB\x1\xFC\x2\xFFFF";
		private const string DFA32_eofS =
			"\xFD\xFFFF";
		private const string DFA32_minS =
			"\x1\xA\x2\x3D\x1\x26\x2\xFFFF\x1\x3D\x1\x2B\x1\xFFFF\x1\x2D\x2\x2A\x1"+
			"\x3A\x1\xFFFF\x1\x2D\x3\x3D\x3\xFFFF\x1\x3D\x1\xFFFF\x1\x6E\x1\x79\x1"+
			"\x61\x1\x65\x1\x6C\x1\x69\x1\x66\x1\x6F\x1\x61\x1\x72\x1\x65\x1\x74\x1"+
			"\x68\x1\x6E\x1\x68\x1\x3D\x7\xFFFF\x1\x9\x11\xFFFF\x1\x2A\xC\xFFFF\x1"+
			"\x3D\x6\xFFFF\x1\x3D\x7\xFFFF\x1\x64\x2\x30\x1\x74\x1\x61\x1\x6E\x1\x66"+
			"\x1\x77\x1\x73\x1\x75\x1\x6E\x1\x72\x1\x30\x1\x70\x1\x30\x1\x6F\x1\x6D"+
			"\x1\x77\x1\x74\x1\x30\x1\x74\x1\x72\x1\x69\x1\x65\x1\x30\x1\x79\x1\x70"+
			"\x1\x6C\x1\x69\x1\x65\x3\xFFFF\x1\x0\x6\xFFFF\x1\x30\x2\xFFFF\x1\x63"+
			"\x2\x73\x1\x65\x1\x6E\x1\x65\x1\x6D\x1\x61\x1\x30\x1\xFFFF\x1\x6F\x1"+
			"\x74\x1\xFFFF\x1\x70\x1\x65\x2\x30\x1\xFFFF\x2\x75\x1\x74\x1\x6E\x1\xFFFF"+
			"\x1\x30\x2\x65\x2\x69\x2\x6E\x1\x6C\x3\xFFFF\x1\x68\x1\x73\x1\x74\x1"+
			"\x72\x1\x74\x2\x30\x1\x6C\x1\xFFFF\x1\x72\x2\x30\x1\x73\x2\xFFFF\x1\x72"+
			"\x2\x63\x1\x30\x1\xFFFF\x1\x64\x1\x73\x1\x67\x1\x6C\x1\x67\x1\x30\x1"+
			"\x65\x4\x30\x1\x6F\x2\xFFFF\x1\x6C\x1\x74\x2\xFFFF\x1\x70\x1\x6E\x1\x74"+
			"\x1\x68\x1\xFFFF\x1\x65\x1\x73\x1\x6E\x2\x30\x1\xFFFF\x1\x30\x4\xFFFF"+
			"\x1\x30\x1\x79\x1\x30\x1\x61\x3\x30\x1\x66\x1\x30\x1\x65\x4\xFFFF\x1"+
			"\x30\x1\xFFFF\x1\x63\x3\xFFFF\x1\x30\x1\xFFFF\x1\x64\x1\xFFFF\x1\x65"+
			"\x1\xFFFF\x2\x30\x2\xFFFF";
		private const string DFA32_maxS =
			"\x1\x7E\x3\x3D\x2\xFFFF\x2\x3D\x1\xFFFF\x1\x3E\x1\x2E\x2\x3D\x1\xFFFF"+
			"\x1\x3D\x2\x3E\x1\x3D\x3\xFFFF\x1\x3D\x1\xFFFF\x1\x73\x1\x79\x2\x6F\x1"+
			"\x6E\x1\x6F\x1\x73\x2\x6F\x1\x72\x1\x65\x1\x77\x1\x79\x1\x73\x1\x68\x1"+
			"\x7C\x7\xFFFF\x1\x20\x11\xFFFF\x1\x2A\xC\xFFFF\x1\x3D\x6\xFFFF\x1\x3D"+
			"\x7\xFFFF\x1\x64\x2\x7A\x1\x74\x1\x61\x1\x6E\x1\x66\x1\x77\x1\x73\x1"+
			"\x75\x1\x6E\x1\x72\x1\x7A\x1\x70\x1\x7A\x1\x6F\x1\x6D\x1\x77\x1\x74\x1"+
			"\x7A\x1\x74\x1\x72\x1\x69\x1\x65\x1\x7A\x1\x79\x1\x70\x1\x74\x2\x69\x3"+
			"\xFFFF\x1\x0\x6\xFFFF\x1\x7A\x2\xFFFF\x1\x63\x2\x73\x1\x65\x1\x6E\x1"+
			"\x65\x1\x6D\x1\x61\x1\x7A\x1\xFFFF\x1\x6F\x1\x74\x1\xFFFF\x1\x70\x1\x65"+
			"\x2\x7A\x1\xFFFF\x2\x75\x1\x74\x1\x6E\x1\xFFFF\x1\x7A\x2\x65\x2\x69\x2"+
			"\x6E\x1\x6C\x3\xFFFF\x1\x68\x1\x73\x1\x74\x1\x72\x1\x74\x2\x7A\x1\x6C"+
			"\x1\xFFFF\x1\x72\x2\x7A\x1\x73\x2\xFFFF\x1\x72\x2\x63\x1\x7A\x1\xFFFF"+
			"\x1\x64\x1\x73\x1\x67\x1\x6C\x1\x67\x1\x7A\x1\x65\x4\x7A\x1\x6F\x2\xFFFF"+
			"\x1\x6C\x1\x74\x2\xFFFF\x1\x70\x1\x6E\x1\x74\x1\x68\x1\xFFFF\x1\x65\x1"+
			"\x73\x1\x6E\x2\x7A\x1\xFFFF\x1\x7A\x4\xFFFF\x1\x7A\x1\x79\x1\x7A\x1\x61"+
			"\x3\x7A\x1\x66\x1\x7A\x1\x65\x4\xFFFF\x1\x7A\x1\xFFFF\x1\x63\x3\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x64\x1\xFFFF\x1\x65\x1\xFFFF\x2\x7A\x2\xFFFF";
		private const string DFA32_acceptS =
			"\x4\xFFFF\x1\x8\x1\x9\x2\xFFFF\x1\xF\x4\xFFFF\x1\x1C\x4\xFFFF\x1\x2B"+
			"\x1\x2C\x1\x2D\x1\xFFFF\x1\x30\x10\xFFFF\x1\x56\x1\x58\x1\x59\x1\x5A"+
			"\x1\x5D\x1\x5E\x1\x5F\x1\xFFFF\x1\x60\x1\x2\x1\x1\x1\x4\x1\x3\x1\x5\x1"+
			"\x7\x1\x6\x1\x8\x1\x9\x1\xB\x1\xA\x1\xD\x1\xE\x1\xC\x1\x11\x1\x12\x1"+
			"\xFFFF\x1\x10\x1\x16\x1\x57\x1\x15\x1\x18\x1\x5B\x1\x5C\x1\x17\x1\x1A"+
			"\x1\x1B\x1\x19\x1\x1E\x1\xFFFF\x1\x21\x1\x1D\x1\x23\x1\x24\x1\x22\x1"+
			"\x26\x1\xFFFF\x1\x25\x1\x2A\x1\x29\x1\x2C\x1\x2D\x1\x2F\x1\x2E\x1E\xFFFF"+
			"\x1\x54\x1\x55\x1\x53\x1\xFFFF\x1\x14\x1\x13\x1\x20\x1\x1F\x1\x28\x1"+
			"\x27\x1\xFFFF\x1\x32\x1\x33\x9\xFFFF\x1\x3D\x2\xFFFF\x1\x3F\x4\xFFFF"+
			"\x1\x45\x4\xFFFF\x1\x4A\x8\xFFFF\x1\x61\x1\x62\x1\x31\x8\xFFFF\x1\x3C"+
			"\x4\xFFFF\x1\x43\x1\x44\x4\xFFFF\x1\x4B\xC\xFFFF\x1\x39\x1\x3A\x2\xFFFF"+
			"\x1\x40\x1\x41\x4\xFFFF\x1\x49\x5\xFFFF\x1\x51\x1\xFFFF\x1\x34\x1\x35"+
			"\x1\x36\x1\x37\xA\xFFFF\x1\x4F\x1\x50\x1\x52\x1\x38\x1\xFFFF\x1\x3E\x1"+
			"\xFFFF\x1\x46\x1\x47\x1\x48\x1\xFFFF\x1\x4D\x1\xFFFF\x1\x3B\x1\xFFFF"+
			"\x1\x4C\x2\xFFFF\x1\x4E\x1\x42";
		private const string DFA32_specialS =
			"\x7D\xFFFF\x1\x0\x7F\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x2E\x2\xFFFF\x1\x2D\x12\xFFFF\x1\x2F\x1\x1\x1\x2A\x2\xFFFF\x1\x2"+
				"\x1\x3\x1\x2A\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\xA\x29"+
				"\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1A\x28\x1\x13\x1\xFFFF"+
				"\x1\x14\x1\x15\x1\x28\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C"+
				"\x2\x28\x1\x1D\x2\x28\x1\x1E\x1\x28\x1\x1F\x1\x20\x2\x28\x1\x21\x1\x22"+
				"\x1\x23\x1\x24\x1\x28\x1\x25\x3\x28\x1\x2B\x1\x26\x1\x2C\x1\x27",
				"\x1\x30",
				"\x1\x32",
				"\x1\x34\x16\xFFFF\x1\x35",
				"",
				"",
				"\x1\x39",
				"\x1\x3B\x11\xFFFF\x1\x3C",
				"",
				"\x1\x3E\xF\xFFFF\x1\x3F\x1\x40",
				"\x1\x42\x3\xFFFF\x1\x43",
				"\x1\x46\x4\xFFFF\x1\x47\xD\xFFFF\x1\x45",
				"\x1\x49\x2\xFFFF\x1\x4A",
				"",
				"\x1\x4C\xE\xFFFF\x1\x4D\x1\x4E",
				"\x1\x50\x1\x51",
				"\x1\x53\x1\x54",
				"\x1\x56",
				"",
				"",
				"",
				"\x1\x5A",
				"",
				"\x1\x5C\x4\xFFFF\x1\x5D",
				"\x1\x5E",
				"\x1\x5F\xA\xFFFF\x1\x60\x2\xFFFF\x1\x61",
				"\x1\x62\x9\xFFFF\x1\x63",
				"\x1\x64\x1\xFFFF\x1\x65",
				"\x1\x66\x5\xFFFF\x1\x67",
				"\x1\x68\x6\xFFFF\x1\x69\x5\xFFFF\x1\x6A",
				"\x1\x6B",
				"\x1\x6C\x3\xFFFF\x1\x6D\x9\xFFFF\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71\x2\xFFFF\x1\x72",
				"\x1\x73\x6\xFFFF\x1\x74\x2\xFFFF\x1\x75\x6\xFFFF\x1\x76",
				"\x1\x77\x4\xFFFF\x1\x78",
				"\x1\x79",
				"\x1\x7A\x3E\xFFFF\x1\x7B",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x2\x2D\x2\xFFFF\x1\x2D\x12\xFFFF\x1\x2D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x7E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x80",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x82",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x84",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x91",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\xD\x28\x1\x92\xC"+
				"\x28",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x9C",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0\x6\xFFFF\x1\xA1\x1\xA2",
				"\x1\xA3",
				"\x1\xA4\x3\xFFFF\x1\xA5",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\x1\xA9",
				"\x1\xAA",
				"\x1\xAB",
				"\x1\xAC",
				"\x1\xAD",
				"\x1\xAE",
				"\x1\xAF",
				"\x1\xB0",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xB2",
				"\x1\xB3",
				"",
				"\x1\xB4",
				"\x1\xB5",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"\x1\xBB",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xBD",
				"\x1\xBE",
				"\x1\xBF",
				"\x1\xC0",
				"\x1\xC1",
				"\x1\xC2",
				"\x1\xC3",
				"",
				"",
				"",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xCB",
				"",
				"\x1\xCC",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xCF",
				"",
				"",
				"\x1\xD0",
				"\x1\xD1",
				"\x1\xD2",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\xD7",
				"\x1\xD8",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xDA",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xDF",
				"",
				"",
				"\x1\xE0",
				"\x1\xE1",
				"",
				"",
				"\x1\xE2",
				"\x1\xE3",
				"\x1\xE4",
				"\x1\xE5",
				"",
				"\x1\xE6",
				"\x1\xE7",
				"\x1\xE8",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xED",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xEF",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xF3",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xF5",
				"",
				"",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xF7",
				"",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xF9",
				"",
				"\x1\xFA",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				""
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | T__147 | T__148 | T__149 | T__150 | T__151 | T__152 | T__153 | T__154 | T__155 | T__156 | T__157 | T__158 | T__159 | T__160 | T__161 | DOT_DOT | IDENT | NUMBER | STRING | Comment | LineComment | Left_Bracket | Right_Bracket | NEWLINE | White_Space | INDENT | DEDENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition32(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA32_125 = input.LA(1);


				int index32_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((!(((0==1))))) {s = 45;}

				else if (((0==1))) {s = 166;}

				else if (((0==1))) {s = 167;}


				input.Seek(index32_125);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 32, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  SugarCpp.Compiler 
