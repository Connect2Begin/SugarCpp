//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-26 12:55:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;
	using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_Map=36;
	public const int For_Item_To=37;
	public const int For_Item_When=38;
	public const int Func_Args=39;
	public const int Func_Def=40;
	public const int Generic_Patameters=41;
	public const int Global_Block=42;
	public const int IDENT=43;
	public const int INDENT=44;
	public const int Ident_List=45;
	public const int Import=46;
	public const int Left_Bracket=47;
	public const int LineComment=48;
	public const int Match_Expr=49;
	public const int Match_Expr_Item=50;
	public const int Match_Tuple=51;
	public const int NEWLINE=52;
	public const int NUMBER=53;
	public const int Namespace=54;
	public const int Right_Bracket=55;
	public const int Root=56;
	public const int SP=57;
	public const int STRING=58;
	public const int Stmt_Block=59;
	public const int Stmt_Defer=60;
	public const int Stmt_Finally=61;
	public const int Stmt_For=62;
	public const int Stmt_If=63;
	public const int Stmt_Loop=64;
	public const int Stmt_Return=65;
	public const int Stmt_Switch=66;
	public const int Stmt_Try=67;
	public const int Stmt_Typedef=68;
	public const int Stmt_Unless=69;
	public const int Stmt_Until=70;
	public const int Stmt_Using=71;
	public const int Stmt_While=72;
	public const int Switch_Item=73;
	public const int Type_Array=74;
	public const int Type_Func=75;
	public const int Type_Ident=76;
	public const int Type_List=77;
	public const int Type_Ref=78;
	public const int Type_Star=79;
	public const int Type_Template=80;
	public const int White_Space=81;

		class Indentation
		{
			public int Level;
			public int CharIndex;

			public Indentation(int Level, int CharIndex)
			{
				this.Level = Level;
				this.CharIndex = CharIndex;
			}
		}

		int CurrentIndent = 0;
		Stack<Indentation> Indents = new Stack<Indentation>();
		Stack<int>[] Bracket = new Stack<int>[3];

		Queue<IToken> tokens = new Queue<IToken>();

	    public override void Emit(IToken token) 
	    {
	        state.token = token;
	        tokens.Enqueue(token);
	    }

	    public override IToken NextToken()
	    {
	        base.NextToken();
	        if (tokens.Count == 0)
			{
				if (Indents != null && Indents.Count > 0)
				{
					Emit(this.CreateToken(NEWLINE, "NEWLINE"));
					Emit(this.CreateToken(DEDENT, "DEDENT"));
					Indents.Pop();
					CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
					base.NextToken();
					return tokens.Dequeue();
				}
				if (Indents != null)
				{
					Indents = null;
					return this.CreateToken(NEWLINE, "NEWLINE");
				}
	            return this.CreateToken(EOF, "EOF");
			}
	        return tokens.Dequeue();
	    }

		public CommonToken CreateToken(int type, string text)
		{
			var x = new CommonToken(type, text);
			x.Line = this.Line;
			x.CharPositionInLine = this.CharPositionInLine;
			x.StartIndex = this.CharIndex;
			x.StopIndex = this.CharIndex;
			return x;
		}


    // delegates
    // delegators

	public SugarCppLexer()
	{
		OnCreated();
	}

	public SugarCppLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SugarCppLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 1);
		TraceIn("T__82", 1);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:82:7: ( '!' )
			DebugEnterAlt(1);
			// SugarCpp.g:82:9: '!'
			{
			DebugLocation(82, 9);
			Match('!'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 1);
			LeaveRule("T__82", 1);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 2);
		TraceIn("T__83", 2);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:83:7: ( '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:83:9: '!='
			{
			DebugLocation(83, 9);
			Match("!="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 2);
			LeaveRule("T__83", 2);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 3);
		TraceIn("T__84", 3);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:84:7: ( '%' )
			DebugEnterAlt(1);
			// SugarCpp.g:84:9: '%'
			{
			DebugLocation(84, 9);
			Match('%'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 3);
			LeaveRule("T__84", 3);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_T__85();
	partial void LeaveRule_T__85();

	// $ANTLR start "T__85"
	[GrammarRule("T__85")]
	private void mT__85()
	{
		EnterRule_T__85();
		EnterRule("T__85", 4);
		TraceIn("T__85", 4);
		try
		{
			int _type = T__85;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:85:7: ( '%=' )
			DebugEnterAlt(1);
			// SugarCpp.g:85:9: '%='
			{
			DebugLocation(85, 9);
			Match("%="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__85", 4);
			LeaveRule("T__85", 4);
			LeaveRule_T__85();
		}
	}
	// $ANTLR end "T__85"

	partial void EnterRule_T__86();
	partial void LeaveRule_T__86();

	// $ANTLR start "T__86"
	[GrammarRule("T__86")]
	private void mT__86()
	{
		EnterRule_T__86();
		EnterRule("T__86", 5);
		TraceIn("T__86", 5);
		try
		{
			int _type = T__86;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:86:7: ( '&&' )
			DebugEnterAlt(1);
			// SugarCpp.g:86:9: '&&'
			{
			DebugLocation(86, 9);
			Match("&&"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__86", 5);
			LeaveRule("T__86", 5);
			LeaveRule_T__86();
		}
	}
	// $ANTLR end "T__86"

	partial void EnterRule_T__87();
	partial void LeaveRule_T__87();

	// $ANTLR start "T__87"
	[GrammarRule("T__87")]
	private void mT__87()
	{
		EnterRule_T__87();
		EnterRule("T__87", 6);
		TraceIn("T__87", 6);
		try
		{
			int _type = T__87;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:87:7: ( '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:87:9: '&'
			{
			DebugLocation(87, 9);
			Match('&'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__87", 6);
			LeaveRule("T__87", 6);
			LeaveRule_T__87();
		}
	}
	// $ANTLR end "T__87"

	partial void EnterRule_T__88();
	partial void LeaveRule_T__88();

	// $ANTLR start "T__88"
	[GrammarRule("T__88")]
	private void mT__88()
	{
		EnterRule_T__88();
		EnterRule("T__88", 7);
		TraceIn("T__88", 7);
		try
		{
			int _type = T__88;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:88:7: ( '&=' )
			DebugEnterAlt(1);
			// SugarCpp.g:88:9: '&='
			{
			DebugLocation(88, 9);
			Match("&="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__88", 7);
			LeaveRule("T__88", 7);
			LeaveRule_T__88();
		}
	}
	// $ANTLR end "T__88"

	partial void EnterRule_T__89();
	partial void LeaveRule_T__89();

	// $ANTLR start "T__89"
	[GrammarRule("T__89")]
	private void mT__89()
	{
		EnterRule_T__89();
		EnterRule("T__89", 8);
		TraceIn("T__89", 8);
		try
		{
			int _type = T__89;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:89:7: ( '(' )
			DebugEnterAlt(1);
			// SugarCpp.g:89:9: '('
			{
			DebugLocation(89, 9);
			Match('('); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__89", 8);
			LeaveRule("T__89", 8);
			LeaveRule_T__89();
		}
	}
	// $ANTLR end "T__89"

	partial void EnterRule_T__90();
	partial void LeaveRule_T__90();

	// $ANTLR start "T__90"
	[GrammarRule("T__90")]
	private void mT__90()
	{
		EnterRule_T__90();
		EnterRule("T__90", 9);
		TraceIn("T__90", 9);
		try
		{
			int _type = T__90;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:90:7: ( ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:90:9: ')'
			{
			DebugLocation(90, 9);
			Match(')'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__90", 9);
			LeaveRule("T__90", 9);
			LeaveRule_T__90();
		}
	}
	// $ANTLR end "T__90"

	partial void EnterRule_T__91();
	partial void LeaveRule_T__91();

	// $ANTLR start "T__91"
	[GrammarRule("T__91")]
	private void mT__91()
	{
		EnterRule_T__91();
		EnterRule("T__91", 10);
		TraceIn("T__91", 10);
		try
		{
			int _type = T__91;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:91:7: ( '*' )
			DebugEnterAlt(1);
			// SugarCpp.g:91:9: '*'
			{
			DebugLocation(91, 9);
			Match('*'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__91", 10);
			LeaveRule("T__91", 10);
			LeaveRule_T__91();
		}
	}
	// $ANTLR end "T__91"

	partial void EnterRule_T__92();
	partial void LeaveRule_T__92();

	// $ANTLR start "T__92"
	[GrammarRule("T__92")]
	private void mT__92()
	{
		EnterRule_T__92();
		EnterRule("T__92", 11);
		TraceIn("T__92", 11);
		try
		{
			int _type = T__92;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:92:7: ( '*=' )
			DebugEnterAlt(1);
			// SugarCpp.g:92:9: '*='
			{
			DebugLocation(92, 9);
			Match("*="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__92", 11);
			LeaveRule("T__92", 11);
			LeaveRule_T__92();
		}
	}
	// $ANTLR end "T__92"

	partial void EnterRule_T__93();
	partial void LeaveRule_T__93();

	// $ANTLR start "T__93"
	[GrammarRule("T__93")]
	private void mT__93()
	{
		EnterRule_T__93();
		EnterRule("T__93", 12);
		TraceIn("T__93", 12);
		try
		{
			int _type = T__93;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:93:7: ( '+' )
			DebugEnterAlt(1);
			// SugarCpp.g:93:9: '+'
			{
			DebugLocation(93, 9);
			Match('+'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__93", 12);
			LeaveRule("T__93", 12);
			LeaveRule_T__93();
		}
	}
	// $ANTLR end "T__93"

	partial void EnterRule_T__94();
	partial void LeaveRule_T__94();

	// $ANTLR start "T__94"
	[GrammarRule("T__94")]
	private void mT__94()
	{
		EnterRule_T__94();
		EnterRule("T__94", 13);
		TraceIn("T__94", 13);
		try
		{
			int _type = T__94;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:94:7: ( '++' )
			DebugEnterAlt(1);
			// SugarCpp.g:94:9: '++'
			{
			DebugLocation(94, 9);
			Match("++"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__94", 13);
			LeaveRule("T__94", 13);
			LeaveRule_T__94();
		}
	}
	// $ANTLR end "T__94"

	partial void EnterRule_T__95();
	partial void LeaveRule_T__95();

	// $ANTLR start "T__95"
	[GrammarRule("T__95")]
	private void mT__95()
	{
		EnterRule_T__95();
		EnterRule("T__95", 14);
		TraceIn("T__95", 14);
		try
		{
			int _type = T__95;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:95:7: ( '+=' )
			DebugEnterAlt(1);
			// SugarCpp.g:95:9: '+='
			{
			DebugLocation(95, 9);
			Match("+="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__95", 14);
			LeaveRule("T__95", 14);
			LeaveRule_T__95();
		}
	}
	// $ANTLR end "T__95"

	partial void EnterRule_T__96();
	partial void LeaveRule_T__96();

	// $ANTLR start "T__96"
	[GrammarRule("T__96")]
	private void mT__96()
	{
		EnterRule_T__96();
		EnterRule("T__96", 15);
		TraceIn("T__96", 15);
		try
		{
			int _type = T__96;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:96:7: ( ',' )
			DebugEnterAlt(1);
			// SugarCpp.g:96:9: ','
			{
			DebugLocation(96, 9);
			Match(','); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__96", 15);
			LeaveRule("T__96", 15);
			LeaveRule_T__96();
		}
	}
	// $ANTLR end "T__96"

	partial void EnterRule_T__97();
	partial void LeaveRule_T__97();

	// $ANTLR start "T__97"
	[GrammarRule("T__97")]
	private void mT__97()
	{
		EnterRule_T__97();
		EnterRule("T__97", 16);
		TraceIn("T__97", 16);
		try
		{
			int _type = T__97;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:97:7: ( '-' )
			DebugEnterAlt(1);
			// SugarCpp.g:97:9: '-'
			{
			DebugLocation(97, 9);
			Match('-'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__97", 16);
			LeaveRule("T__97", 16);
			LeaveRule_T__97();
		}
	}
	// $ANTLR end "T__97"

	partial void EnterRule_T__98();
	partial void LeaveRule_T__98();

	// $ANTLR start "T__98"
	[GrammarRule("T__98")]
	private void mT__98()
	{
		EnterRule_T__98();
		EnterRule("T__98", 17);
		TraceIn("T__98", 17);
		try
		{
			int _type = T__98;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:98:7: ( '--' )
			DebugEnterAlt(1);
			// SugarCpp.g:98:9: '--'
			{
			DebugLocation(98, 9);
			Match("--"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__98", 17);
			LeaveRule("T__98", 17);
			LeaveRule_T__98();
		}
	}
	// $ANTLR end "T__98"

	partial void EnterRule_T__99();
	partial void LeaveRule_T__99();

	// $ANTLR start "T__99"
	[GrammarRule("T__99")]
	private void mT__99()
	{
		EnterRule_T__99();
		EnterRule("T__99", 18);
		TraceIn("T__99", 18);
		try
		{
			int _type = T__99;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:99:7: ( '-=' )
			DebugEnterAlt(1);
			// SugarCpp.g:99:9: '-='
			{
			DebugLocation(99, 9);
			Match("-="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__99", 18);
			LeaveRule("T__99", 18);
			LeaveRule_T__99();
		}
	}
	// $ANTLR end "T__99"

	partial void EnterRule_T__100();
	partial void LeaveRule_T__100();

	// $ANTLR start "T__100"
	[GrammarRule("T__100")]
	private void mT__100()
	{
		EnterRule_T__100();
		EnterRule("T__100", 19);
		TraceIn("T__100", 19);
		try
		{
			int _type = T__100;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:100:8: ( '->' )
			DebugEnterAlt(1);
			// SugarCpp.g:100:10: '->'
			{
			DebugLocation(100, 10);
			Match("->"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__100", 19);
			LeaveRule("T__100", 19);
			LeaveRule_T__100();
		}
	}
	// $ANTLR end "T__100"

	partial void EnterRule_T__101();
	partial void LeaveRule_T__101();

	// $ANTLR start "T__101"
	[GrammarRule("T__101")]
	private void mT__101()
	{
		EnterRule_T__101();
		EnterRule("T__101", 20);
		TraceIn("T__101", 20);
		try
		{
			int _type = T__101;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:101:8: ( '->*' )
			DebugEnterAlt(1);
			// SugarCpp.g:101:10: '->*'
			{
			DebugLocation(101, 10);
			Match("->*"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__101", 20);
			LeaveRule("T__101", 20);
			LeaveRule_T__101();
		}
	}
	// $ANTLR end "T__101"

	partial void EnterRule_T__102();
	partial void LeaveRule_T__102();

	// $ANTLR start "T__102"
	[GrammarRule("T__102")]
	private void mT__102()
	{
		EnterRule_T__102();
		EnterRule("T__102", 21);
		TraceIn("T__102", 21);
		try
		{
			int _type = T__102;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:102:8: ( '.' )
			DebugEnterAlt(1);
			// SugarCpp.g:102:10: '.'
			{
			DebugLocation(102, 10);
			Match('.'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__102", 21);
			LeaveRule("T__102", 21);
			LeaveRule_T__102();
		}
	}
	// $ANTLR end "T__102"

	partial void EnterRule_T__103();
	partial void LeaveRule_T__103();

	// $ANTLR start "T__103"
	[GrammarRule("T__103")]
	private void mT__103()
	{
		EnterRule_T__103();
		EnterRule("T__103", 22);
		TraceIn("T__103", 22);
		try
		{
			int _type = T__103;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:103:8: ( '.*' )
			DebugEnterAlt(1);
			// SugarCpp.g:103:10: '.*'
			{
			DebugLocation(103, 10);
			Match(".*"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__103", 22);
			LeaveRule("T__103", 22);
			LeaveRule_T__103();
		}
	}
	// $ANTLR end "T__103"

	partial void EnterRule_T__104();
	partial void LeaveRule_T__104();

	// $ANTLR start "T__104"
	[GrammarRule("T__104")]
	private void mT__104()
	{
		EnterRule_T__104();
		EnterRule("T__104", 23);
		TraceIn("T__104", 23);
		try
		{
			int _type = T__104;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:104:8: ( '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:104:10: '/'
			{
			DebugLocation(104, 10);
			Match('/'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__104", 23);
			LeaveRule("T__104", 23);
			LeaveRule_T__104();
		}
	}
	// $ANTLR end "T__104"

	partial void EnterRule_T__105();
	partial void LeaveRule_T__105();

	// $ANTLR start "T__105"
	[GrammarRule("T__105")]
	private void mT__105()
	{
		EnterRule_T__105();
		EnterRule("T__105", 24);
		TraceIn("T__105", 24);
		try
		{
			int _type = T__105;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:105:8: ( '/=' )
			DebugEnterAlt(1);
			// SugarCpp.g:105:10: '/='
			{
			DebugLocation(105, 10);
			Match("/="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__105", 24);
			LeaveRule("T__105", 24);
			LeaveRule_T__105();
		}
	}
	// $ANTLR end "T__105"

	partial void EnterRule_T__106();
	partial void LeaveRule_T__106();

	// $ANTLR start "T__106"
	[GrammarRule("T__106")]
	private void mT__106()
	{
		EnterRule_T__106();
		EnterRule("T__106", 25);
		TraceIn("T__106", 25);
		try
		{
			int _type = T__106;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:106:8: ( ':' )
			DebugEnterAlt(1);
			// SugarCpp.g:106:10: ':'
			{
			DebugLocation(106, 10);
			Match(':'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__106", 25);
			LeaveRule("T__106", 25);
			LeaveRule_T__106();
		}
	}
	// $ANTLR end "T__106"

	partial void EnterRule_T__107();
	partial void LeaveRule_T__107();

	// $ANTLR start "T__107"
	[GrammarRule("T__107")]
	private void mT__107()
	{
		EnterRule_T__107();
		EnterRule("T__107", 26);
		TraceIn("T__107", 26);
		try
		{
			int _type = T__107;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:107:8: ( '::' )
			DebugEnterAlt(1);
			// SugarCpp.g:107:10: '::'
			{
			DebugLocation(107, 10);
			Match("::"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__107", 26);
			LeaveRule("T__107", 26);
			LeaveRule_T__107();
		}
	}
	// $ANTLR end "T__107"

	partial void EnterRule_T__108();
	partial void LeaveRule_T__108();

	// $ANTLR start "T__108"
	[GrammarRule("T__108")]
	private void mT__108()
	{
		EnterRule_T__108();
		EnterRule("T__108", 27);
		TraceIn("T__108", 27);
		try
		{
			int _type = T__108;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:108:8: ( ':=' )
			DebugEnterAlt(1);
			// SugarCpp.g:108:10: ':='
			{
			DebugLocation(108, 10);
			Match(":="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__108", 27);
			LeaveRule("T__108", 27);
			LeaveRule_T__108();
		}
	}
	// $ANTLR end "T__108"

	partial void EnterRule_T__109();
	partial void LeaveRule_T__109();

	// $ANTLR start "T__109"
	[GrammarRule("T__109")]
	private void mT__109()
	{
		EnterRule_T__109();
		EnterRule("T__109", 28);
		TraceIn("T__109", 28);
		try
		{
			int _type = T__109;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:109:8: ( ';' )
			DebugEnterAlt(1);
			// SugarCpp.g:109:10: ';'
			{
			DebugLocation(109, 10);
			Match(';'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__109", 28);
			LeaveRule("T__109", 28);
			LeaveRule_T__109();
		}
	}
	// $ANTLR end "T__109"

	partial void EnterRule_T__110();
	partial void LeaveRule_T__110();

	// $ANTLR start "T__110"
	[GrammarRule("T__110")]
	private void mT__110()
	{
		EnterRule_T__110();
		EnterRule("T__110", 29);
		TraceIn("T__110", 29);
		try
		{
			int _type = T__110;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:110:8: ( '<' )
			DebugEnterAlt(1);
			// SugarCpp.g:110:10: '<'
			{
			DebugLocation(110, 10);
			Match('<'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__110", 29);
			LeaveRule("T__110", 29);
			LeaveRule_T__110();
		}
	}
	// $ANTLR end "T__110"

	partial void EnterRule_T__111();
	partial void LeaveRule_T__111();

	// $ANTLR start "T__111"
	[GrammarRule("T__111")]
	private void mT__111()
	{
		EnterRule_T__111();
		EnterRule("T__111", 30);
		TraceIn("T__111", 30);
		try
		{
			int _type = T__111;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:111:8: ( '<-' )
			DebugEnterAlt(1);
			// SugarCpp.g:111:10: '<-'
			{
			DebugLocation(111, 10);
			Match("<-"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__111", 30);
			LeaveRule("T__111", 30);
			LeaveRule_T__111();
		}
	}
	// $ANTLR end "T__111"

	partial void EnterRule_T__112();
	partial void LeaveRule_T__112();

	// $ANTLR start "T__112"
	[GrammarRule("T__112")]
	private void mT__112()
	{
		EnterRule_T__112();
		EnterRule("T__112", 31);
		TraceIn("T__112", 31);
		try
		{
			int _type = T__112;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:112:8: ( '<<' )
			DebugEnterAlt(1);
			// SugarCpp.g:112:10: '<<'
			{
			DebugLocation(112, 10);
			Match("<<"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__112", 31);
			LeaveRule("T__112", 31);
			LeaveRule_T__112();
		}
	}
	// $ANTLR end "T__112"

	partial void EnterRule_T__113();
	partial void LeaveRule_T__113();

	// $ANTLR start "T__113"
	[GrammarRule("T__113")]
	private void mT__113()
	{
		EnterRule_T__113();
		EnterRule("T__113", 32);
		TraceIn("T__113", 32);
		try
		{
			int _type = T__113;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:113:8: ( '<<=' )
			DebugEnterAlt(1);
			// SugarCpp.g:113:10: '<<='
			{
			DebugLocation(113, 10);
			Match("<<="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__113", 32);
			LeaveRule("T__113", 32);
			LeaveRule_T__113();
		}
	}
	// $ANTLR end "T__113"

	partial void EnterRule_T__114();
	partial void LeaveRule_T__114();

	// $ANTLR start "T__114"
	[GrammarRule("T__114")]
	private void mT__114()
	{
		EnterRule_T__114();
		EnterRule("T__114", 33);
		TraceIn("T__114", 33);
		try
		{
			int _type = T__114;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:114:8: ( '<=' )
			DebugEnterAlt(1);
			// SugarCpp.g:114:10: '<='
			{
			DebugLocation(114, 10);
			Match("<="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__114", 33);
			LeaveRule("T__114", 33);
			LeaveRule_T__114();
		}
	}
	// $ANTLR end "T__114"

	partial void EnterRule_T__115();
	partial void LeaveRule_T__115();

	// $ANTLR start "T__115"
	[GrammarRule("T__115")]
	private void mT__115()
	{
		EnterRule_T__115();
		EnterRule("T__115", 34);
		TraceIn("T__115", 34);
		try
		{
			int _type = T__115;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:115:8: ( '=' )
			DebugEnterAlt(1);
			// SugarCpp.g:115:10: '='
			{
			DebugLocation(115, 10);
			Match('='); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__115", 34);
			LeaveRule("T__115", 34);
			LeaveRule_T__115();
		}
	}
	// $ANTLR end "T__115"

	partial void EnterRule_T__116();
	partial void LeaveRule_T__116();

	// $ANTLR start "T__116"
	[GrammarRule("T__116")]
	private void mT__116()
	{
		EnterRule_T__116();
		EnterRule("T__116", 35);
		TraceIn("T__116", 35);
		try
		{
			int _type = T__116;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:116:8: ( '==' )
			DebugEnterAlt(1);
			// SugarCpp.g:116:10: '=='
			{
			DebugLocation(116, 10);
			Match("=="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__116", 35);
			LeaveRule("T__116", 35);
			LeaveRule_T__116();
		}
	}
	// $ANTLR end "T__116"

	partial void EnterRule_T__117();
	partial void LeaveRule_T__117();

	// $ANTLR start "T__117"
	[GrammarRule("T__117")]
	private void mT__117()
	{
		EnterRule_T__117();
		EnterRule("T__117", 36);
		TraceIn("T__117", 36);
		try
		{
			int _type = T__117;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:117:8: ( '=>' )
			DebugEnterAlt(1);
			// SugarCpp.g:117:10: '=>'
			{
			DebugLocation(117, 10);
			Match("=>"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__117", 36);
			LeaveRule("T__117", 36);
			LeaveRule_T__117();
		}
	}
	// $ANTLR end "T__117"

	partial void EnterRule_T__118();
	partial void LeaveRule_T__118();

	// $ANTLR start "T__118"
	[GrammarRule("T__118")]
	private void mT__118()
	{
		EnterRule_T__118();
		EnterRule("T__118", 37);
		TraceIn("T__118", 37);
		try
		{
			int _type = T__118;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:118:8: ( '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:118:10: '>'
			{
			DebugLocation(118, 10);
			Match('>'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__118", 37);
			LeaveRule("T__118", 37);
			LeaveRule_T__118();
		}
	}
	// $ANTLR end "T__118"

	partial void EnterRule_T__119();
	partial void LeaveRule_T__119();

	// $ANTLR start "T__119"
	[GrammarRule("T__119")]
	private void mT__119()
	{
		EnterRule_T__119();
		EnterRule("T__119", 38);
		TraceIn("T__119", 38);
		try
		{
			int _type = T__119;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:119:8: ( '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:119:10: '>='
			{
			DebugLocation(119, 10);
			Match(">="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__119", 38);
			LeaveRule("T__119", 38);
			LeaveRule_T__119();
		}
	}
	// $ANTLR end "T__119"

	partial void EnterRule_T__120();
	partial void LeaveRule_T__120();

	// $ANTLR start "T__120"
	[GrammarRule("T__120")]
	private void mT__120()
	{
		EnterRule_T__120();
		EnterRule("T__120", 39);
		TraceIn("T__120", 39);
		try
		{
			int _type = T__120;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:120:8: ( '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:120:10: '>>'
			{
			DebugLocation(120, 10);
			Match(">>"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__120", 39);
			LeaveRule("T__120", 39);
			LeaveRule_T__120();
		}
	}
	// $ANTLR end "T__120"

	partial void EnterRule_T__121();
	partial void LeaveRule_T__121();

	// $ANTLR start "T__121"
	[GrammarRule("T__121")]
	private void mT__121()
	{
		EnterRule_T__121();
		EnterRule("T__121", 40);
		TraceIn("T__121", 40);
		try
		{
			int _type = T__121;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:121:8: ( '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:121:10: '>>='
			{
			DebugLocation(121, 10);
			Match(">>="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__121", 40);
			LeaveRule("T__121", 40);
			LeaveRule_T__121();
		}
	}
	// $ANTLR end "T__121"

	partial void EnterRule_T__122();
	partial void LeaveRule_T__122();

	// $ANTLR start "T__122"
	[GrammarRule("T__122")]
	private void mT__122()
	{
		EnterRule_T__122();
		EnterRule("T__122", 41);
		TraceIn("T__122", 41);
		try
		{
			int _type = T__122;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:122:8: ( '?' )
			DebugEnterAlt(1);
			// SugarCpp.g:122:10: '?'
			{
			DebugLocation(122, 10);
			Match('?'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__122", 41);
			LeaveRule("T__122", 41);
			LeaveRule_T__122();
		}
	}
	// $ANTLR end "T__122"

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 42);
		TraceIn("T__123", 42);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:123:8: ( '?=' )
			DebugEnterAlt(1);
			// SugarCpp.g:123:10: '?='
			{
			DebugLocation(123, 10);
			Match("?="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 42);
			LeaveRule("T__123", 42);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 43);
		TraceIn("T__124", 43);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:124:8: ( '@' )
			DebugEnterAlt(1);
			// SugarCpp.g:124:10: '@'
			{
			DebugLocation(124, 10);
			Match('@'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 43);
			LeaveRule("T__124", 43);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_T__125();
	partial void LeaveRule_T__125();

	// $ANTLR start "T__125"
	[GrammarRule("T__125")]
	private void mT__125()
	{
		EnterRule_T__125();
		EnterRule("T__125", 44);
		TraceIn("T__125", 44);
		try
		{
			int _type = T__125;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:125:8: ( '[' )
			DebugEnterAlt(1);
			// SugarCpp.g:125:10: '['
			{
			DebugLocation(125, 10);
			Match('['); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__125", 44);
			LeaveRule("T__125", 44);
			LeaveRule_T__125();
		}
	}
	// $ANTLR end "T__125"

	partial void EnterRule_T__126();
	partial void LeaveRule_T__126();

	// $ANTLR start "T__126"
	[GrammarRule("T__126")]
	private void mT__126()
	{
		EnterRule_T__126();
		EnterRule("T__126", 45);
		TraceIn("T__126", 45);
		try
		{
			int _type = T__126;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:126:8: ( ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:126:10: ']'
			{
			DebugLocation(126, 10);
			Match(']'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__126", 45);
			LeaveRule("T__126", 45);
			LeaveRule_T__126();
		}
	}
	// $ANTLR end "T__126"

	partial void EnterRule_T__127();
	partial void LeaveRule_T__127();

	// $ANTLR start "T__127"
	[GrammarRule("T__127")]
	private void mT__127()
	{
		EnterRule_T__127();
		EnterRule("T__127", 46);
		TraceIn("T__127", 46);
		try
		{
			int _type = T__127;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:127:8: ( '^' )
			DebugEnterAlt(1);
			// SugarCpp.g:127:10: '^'
			{
			DebugLocation(127, 10);
			Match('^'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__127", 46);
			LeaveRule("T__127", 46);
			LeaveRule_T__127();
		}
	}
	// $ANTLR end "T__127"

	partial void EnterRule_T__128();
	partial void LeaveRule_T__128();

	// $ANTLR start "T__128"
	[GrammarRule("T__128")]
	private void mT__128()
	{
		EnterRule_T__128();
		EnterRule("T__128", 47);
		TraceIn("T__128", 47);
		try
		{
			int _type = T__128;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:128:8: ( '^=' )
			DebugEnterAlt(1);
			// SugarCpp.g:128:10: '^='
			{
			DebugLocation(128, 10);
			Match("^="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__128", 47);
			LeaveRule("T__128", 47);
			LeaveRule_T__128();
		}
	}
	// $ANTLR end "T__128"

	partial void EnterRule_T__129();
	partial void LeaveRule_T__129();

	// $ANTLR start "T__129"
	[GrammarRule("T__129")]
	private void mT__129()
	{
		EnterRule_T__129();
		EnterRule("T__129", 48);
		TraceIn("T__129", 48);
		try
		{
			int _type = T__129;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:129:8: ( '`' )
			DebugEnterAlt(1);
			// SugarCpp.g:129:10: '`'
			{
			DebugLocation(129, 10);
			Match('`'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__129", 48);
			LeaveRule("T__129", 48);
			LeaveRule_T__129();
		}
	}
	// $ANTLR end "T__129"

	partial void EnterRule_T__130();
	partial void LeaveRule_T__130();

	// $ANTLR start "T__130"
	[GrammarRule("T__130")]
	private void mT__130()
	{
		EnterRule_T__130();
		EnterRule("T__130", 49);
		TraceIn("T__130", 49);
		try
		{
			int _type = T__130;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:130:8: ( 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:130:10: 'and'
			{
			DebugLocation(130, 10);
			Match("and"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__130", 49);
			LeaveRule("T__130", 49);
			LeaveRule_T__130();
		}
	}
	// $ANTLR end "T__130"

	partial void EnterRule_T__131();
	partial void LeaveRule_T__131();

	// $ANTLR start "T__131"
	[GrammarRule("T__131")]
	private void mT__131()
	{
		EnterRule_T__131();
		EnterRule("T__131", 50);
		TraceIn("T__131", 50);
		try
		{
			int _type = T__131;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:131:8: ( 'as' )
			DebugEnterAlt(1);
			// SugarCpp.g:131:10: 'as'
			{
			DebugLocation(131, 10);
			Match("as"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__131", 50);
			LeaveRule("T__131", 50);
			LeaveRule_T__131();
		}
	}
	// $ANTLR end "T__131"

	partial void EnterRule_T__132();
	partial void LeaveRule_T__132();

	// $ANTLR start "T__132"
	[GrammarRule("T__132")]
	private void mT__132()
	{
		EnterRule_T__132();
		EnterRule("T__132", 51);
		TraceIn("T__132", 51);
		try
		{
			int _type = T__132;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:132:8: ( 'by' )
			DebugEnterAlt(1);
			// SugarCpp.g:132:10: 'by'
			{
			DebugLocation(132, 10);
			Match("by"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__132", 51);
			LeaveRule("T__132", 51);
			LeaveRule_T__132();
		}
	}
	// $ANTLR end "T__132"

	partial void EnterRule_T__133();
	partial void LeaveRule_T__133();

	// $ANTLR start "T__133"
	[GrammarRule("T__133")]
	private void mT__133()
	{
		EnterRule_T__133();
		EnterRule("T__133", 52);
		TraceIn("T__133", 52);
		try
		{
			int _type = T__133;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:133:8: ( 'case' )
			DebugEnterAlt(1);
			// SugarCpp.g:133:10: 'case'
			{
			DebugLocation(133, 10);
			Match("case"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__133", 52);
			LeaveRule("T__133", 52);
			LeaveRule_T__133();
		}
	}
	// $ANTLR end "T__133"

	partial void EnterRule_T__134();
	partial void LeaveRule_T__134();

	// $ANTLR start "T__134"
	[GrammarRule("T__134")]
	private void mT__134()
	{
		EnterRule_T__134();
		EnterRule("T__134", 53);
		TraceIn("T__134", 53);
		try
		{
			int _type = T__134;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:134:8: ( 'catch' )
			DebugEnterAlt(1);
			// SugarCpp.g:134:10: 'catch'
			{
			DebugLocation(134, 10);
			Match("catch"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__134", 53);
			LeaveRule("T__134", 53);
			LeaveRule_T__134();
		}
	}
	// $ANTLR end "T__134"

	partial void EnterRule_T__135();
	partial void LeaveRule_T__135();

	// $ANTLR start "T__135"
	[GrammarRule("T__135")]
	private void mT__135()
	{
		EnterRule_T__135();
		EnterRule("T__135", 54);
		TraceIn("T__135", 54);
		try
		{
			int _type = T__135;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:135:8: ( 'class' )
			DebugEnterAlt(1);
			// SugarCpp.g:135:10: 'class'
			{
			DebugLocation(135, 10);
			Match("class"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__135", 54);
			LeaveRule("T__135", 54);
			LeaveRule_T__135();
		}
	}
	// $ANTLR end "T__135"

	partial void EnterRule_T__136();
	partial void LeaveRule_T__136();

	// $ANTLR start "T__136"
	[GrammarRule("T__136")]
	private void mT__136()
	{
		EnterRule_T__136();
		EnterRule("T__136", 55);
		TraceIn("T__136", 55);
		try
		{
			int _type = T__136;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:136:8: ( 'const' )
			DebugEnterAlt(1);
			// SugarCpp.g:136:10: 'const'
			{
			DebugLocation(136, 10);
			Match("const"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__136", 55);
			LeaveRule("T__136", 55);
			LeaveRule_T__136();
		}
	}
	// $ANTLR end "T__136"

	partial void EnterRule_T__137();
	partial void LeaveRule_T__137();

	// $ANTLR start "T__137"
	[GrammarRule("T__137")]
	private void mT__137()
	{
		EnterRule_T__137();
		EnterRule("T__137", 56);
		TraceIn("T__137", 56);
		try
		{
			int _type = T__137;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:137:8: ( 'defer' )
			DebugEnterAlt(1);
			// SugarCpp.g:137:10: 'defer'
			{
			DebugLocation(137, 10);
			Match("defer"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__137", 56);
			LeaveRule("T__137", 56);
			LeaveRule_T__137();
		}
	}
	// $ANTLR end "T__137"

	partial void EnterRule_T__138();
	partial void LeaveRule_T__138();

	// $ANTLR start "T__138"
	[GrammarRule("T__138")]
	private void mT__138()
	{
		EnterRule_T__138();
		EnterRule("T__138", 57);
		TraceIn("T__138", 57);
		try
		{
			int _type = T__138;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:138:8: ( 'downto' )
			DebugEnterAlt(1);
			// SugarCpp.g:138:10: 'downto'
			{
			DebugLocation(138, 10);
			Match("downto"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__138", 57);
			LeaveRule("T__138", 57);
			LeaveRule_T__138();
		}
	}
	// $ANTLR end "T__138"

	partial void EnterRule_T__139();
	partial void LeaveRule_T__139();

	// $ANTLR start "T__139"
	[GrammarRule("T__139")]
	private void mT__139()
	{
		EnterRule_T__139();
		EnterRule("T__139", 58);
		TraceIn("T__139", 58);
		try
		{
			int _type = T__139;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:139:8: ( 'else' )
			DebugEnterAlt(1);
			// SugarCpp.g:139:10: 'else'
			{
			DebugLocation(139, 10);
			Match("else"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__139", 58);
			LeaveRule("T__139", 58);
			LeaveRule_T__139();
		}
	}
	// $ANTLR end "T__139"

	partial void EnterRule_T__140();
	partial void LeaveRule_T__140();

	// $ANTLR start "T__140"
	[GrammarRule("T__140")]
	private void mT__140()
	{
		EnterRule_T__140();
		EnterRule("T__140", 59);
		TraceIn("T__140", 59);
		try
		{
			int _type = T__140;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:140:8: ( 'enum' )
			DebugEnterAlt(1);
			// SugarCpp.g:140:10: 'enum'
			{
			DebugLocation(140, 10);
			Match("enum"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__140", 59);
			LeaveRule("T__140", 59);
			LeaveRule_T__140();
		}
	}
	// $ANTLR end "T__140"

	partial void EnterRule_T__141();
	partial void LeaveRule_T__141();

	// $ANTLR start "T__141"
	[GrammarRule("T__141")]
	private void mT__141()
	{
		EnterRule_T__141();
		EnterRule("T__141", 60);
		TraceIn("T__141", 60);
		try
		{
			int _type = T__141;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:141:8: ( 'finally' )
			DebugEnterAlt(1);
			// SugarCpp.g:141:10: 'finally'
			{
			DebugLocation(141, 10);
			Match("finally"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__141", 60);
			LeaveRule("T__141", 60);
			LeaveRule_T__141();
		}
	}
	// $ANTLR end "T__141"

	partial void EnterRule_T__142();
	partial void LeaveRule_T__142();

	// $ANTLR start "T__142"
	[GrammarRule("T__142")]
	private void mT__142()
	{
		EnterRule_T__142();
		EnterRule("T__142", 61);
		TraceIn("T__142", 61);
		try
		{
			int _type = T__142;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:142:8: ( 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:142:10: 'for'
			{
			DebugLocation(142, 10);
			Match("for"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__142", 61);
			LeaveRule("T__142", 61);
			LeaveRule_T__142();
		}
	}
	// $ANTLR end "T__142"

	partial void EnterRule_T__143();
	partial void LeaveRule_T__143();

	// $ANTLR start "T__143"
	[GrammarRule("T__143")]
	private void mT__143()
	{
		EnterRule_T__143();
		EnterRule("T__143", 62);
		TraceIn("T__143", 62);
		try
		{
			int _type = T__143;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:143:8: ( 'if' )
			DebugEnterAlt(1);
			// SugarCpp.g:143:10: 'if'
			{
			DebugLocation(143, 10);
			Match("if"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__143", 62);
			LeaveRule("T__143", 62);
			LeaveRule_T__143();
		}
	}
	// $ANTLR end "T__143"

	partial void EnterRule_T__144();
	partial void LeaveRule_T__144();

	// $ANTLR start "T__144"
	[GrammarRule("T__144")]
	private void mT__144()
	{
		EnterRule_T__144();
		EnterRule("T__144", 63);
		TraceIn("T__144", 63);
		try
		{
			int _type = T__144;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:144:8: ( 'import' )
			DebugEnterAlt(1);
			// SugarCpp.g:144:10: 'import'
			{
			DebugLocation(144, 10);
			Match("import"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__144", 63);
			LeaveRule("T__144", 63);
			LeaveRule_T__144();
		}
	}
	// $ANTLR end "T__144"

	partial void EnterRule_T__145();
	partial void LeaveRule_T__145();

	// $ANTLR start "T__145"
	[GrammarRule("T__145")]
	private void mT__145()
	{
		EnterRule_T__145();
		EnterRule("T__145", 64);
		TraceIn("T__145", 64);
		try
		{
			int _type = T__145;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:145:8: ( 'in' )
			DebugEnterAlt(1);
			// SugarCpp.g:145:10: 'in'
			{
			DebugLocation(145, 10);
			Match("in"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__145", 64);
			LeaveRule("T__145", 64);
			LeaveRule_T__145();
		}
	}
	// $ANTLR end "T__145"

	partial void EnterRule_T__146();
	partial void LeaveRule_T__146();

	// $ANTLR start "T__146"
	[GrammarRule("T__146")]
	private void mT__146()
	{
		EnterRule_T__146();
		EnterRule("T__146", 65);
		TraceIn("T__146", 65);
		try
		{
			int _type = T__146;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:146:8: ( 'is' )
			DebugEnterAlt(1);
			// SugarCpp.g:146:10: 'is'
			{
			DebugLocation(146, 10);
			Match("is"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__146", 65);
			LeaveRule("T__146", 65);
			LeaveRule_T__146();
		}
	}
	// $ANTLR end "T__146"

	partial void EnterRule_T__147();
	partial void LeaveRule_T__147();

	// $ANTLR start "T__147"
	[GrammarRule("T__147")]
	private void mT__147()
	{
		EnterRule_T__147();
		EnterRule("T__147", 66);
		TraceIn("T__147", 66);
		try
		{
			int _type = T__147;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:147:8: ( 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:147:10: 'isnt'
			{
			DebugLocation(147, 10);
			Match("isnt"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__147", 66);
			LeaveRule("T__147", 66);
			LeaveRule_T__147();
		}
	}
	// $ANTLR end "T__147"

	partial void EnterRule_T__148();
	partial void LeaveRule_T__148();

	// $ANTLR start "T__148"
	[GrammarRule("T__148")]
	private void mT__148()
	{
		EnterRule_T__148();
		EnterRule("T__148", 67);
		TraceIn("T__148", 67);
		try
		{
			int _type = T__148;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:148:8: ( 'let' )
			DebugEnterAlt(1);
			// SugarCpp.g:148:10: 'let'
			{
			DebugLocation(148, 10);
			Match("let"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__148", 67);
			LeaveRule("T__148", 67);
			LeaveRule_T__148();
		}
	}
	// $ANTLR end "T__148"

	partial void EnterRule_T__149();
	partial void LeaveRule_T__149();

	// $ANTLR start "T__149"
	[GrammarRule("T__149")]
	private void mT__149()
	{
		EnterRule_T__149();
		EnterRule("T__149", 68);
		TraceIn("T__149", 68);
		try
		{
			int _type = T__149;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:149:8: ( 'long' )
			DebugEnterAlt(1);
			// SugarCpp.g:149:10: 'long'
			{
			DebugLocation(149, 10);
			Match("long"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__149", 68);
			LeaveRule("T__149", 68);
			LeaveRule_T__149();
		}
	}
	// $ANTLR end "T__149"

	partial void EnterRule_T__150();
	partial void LeaveRule_T__150();

	// $ANTLR start "T__150"
	[GrammarRule("T__150")]
	private void mT__150()
	{
		EnterRule_T__150();
		EnterRule("T__150", 69);
		TraceIn("T__150", 69);
		try
		{
			int _type = T__150;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:150:8: ( 'loop' )
			DebugEnterAlt(1);
			// SugarCpp.g:150:10: 'loop'
			{
			DebugLocation(150, 10);
			Match("loop"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__150", 69);
			LeaveRule("T__150", 69);
			LeaveRule_T__150();
		}
	}
	// $ANTLR end "T__150"

	partial void EnterRule_T__151();
	partial void LeaveRule_T__151();

	// $ANTLR start "T__151"
	[GrammarRule("T__151")]
	private void mT__151()
	{
		EnterRule_T__151();
		EnterRule("T__151", 70);
		TraceIn("T__151", 70);
		try
		{
			int _type = T__151;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:151:8: ( 'match' )
			DebugEnterAlt(1);
			// SugarCpp.g:151:10: 'match'
			{
			DebugLocation(151, 10);
			Match("match"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__151", 70);
			LeaveRule("T__151", 70);
			LeaveRule_T__151();
		}
	}
	// $ANTLR end "T__151"

	partial void EnterRule_T__152();
	partial void LeaveRule_T__152();

	// $ANTLR start "T__152"
	[GrammarRule("T__152")]
	private void mT__152()
	{
		EnterRule_T__152();
		EnterRule("T__152", 71);
		TraceIn("T__152", 71);
		try
		{
			int _type = T__152;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:152:8: ( 'namespace' )
			DebugEnterAlt(1);
			// SugarCpp.g:152:10: 'namespace'
			{
			DebugLocation(152, 10);
			Match("namespace"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__152", 71);
			LeaveRule("T__152", 71);
			LeaveRule_T__152();
		}
	}
	// $ANTLR end "T__152"

	partial void EnterRule_T__153();
	partial void LeaveRule_T__153();

	// $ANTLR start "T__153"
	[GrammarRule("T__153")]
	private void mT__153()
	{
		EnterRule_T__153();
		EnterRule("T__153", 72);
		TraceIn("T__153", 72);
		try
		{
			int _type = T__153;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:153:8: ( 'new' )
			DebugEnterAlt(1);
			// SugarCpp.g:153:10: 'new'
			{
			DebugLocation(153, 10);
			Match("new"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__153", 72);
			LeaveRule("T__153", 72);
			LeaveRule_T__153();
		}
	}
	// $ANTLR end "T__153"

	partial void EnterRule_T__154();
	partial void LeaveRule_T__154();

	// $ANTLR start "T__154"
	[GrammarRule("T__154")]
	private void mT__154()
	{
		EnterRule_T__154();
		EnterRule("T__154", 73);
		TraceIn("T__154", 73);
		try
		{
			int _type = T__154;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:154:8: ( 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:154:10: 'not'
			{
			DebugLocation(154, 10);
			Match("not"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__154", 73);
			LeaveRule("T__154", 73);
			LeaveRule_T__154();
		}
	}
	// $ANTLR end "T__154"

	partial void EnterRule_T__155();
	partial void LeaveRule_T__155();

	// $ANTLR start "T__155"
	[GrammarRule("T__155")]
	private void mT__155()
	{
		EnterRule_T__155();
		EnterRule("T__155", 74);
		TraceIn("T__155", 74);
		try
		{
			int _type = T__155;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:155:8: ( 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:155:10: 'or'
			{
			DebugLocation(155, 10);
			Match("or"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__155", 74);
			LeaveRule("T__155", 74);
			LeaveRule_T__155();
		}
	}
	// $ANTLR end "T__155"

	partial void EnterRule_T__156();
	partial void LeaveRule_T__156();

	// $ANTLR start "T__156"
	[GrammarRule("T__156")]
	private void mT__156()
	{
		EnterRule_T__156();
		EnterRule("T__156", 75);
		TraceIn("T__156", 75);
		try
		{
			int _type = T__156;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:156:8: ( 'return' )
			DebugEnterAlt(1);
			// SugarCpp.g:156:10: 'return'
			{
			DebugLocation(156, 10);
			Match("return"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__156", 75);
			LeaveRule("T__156", 75);
			LeaveRule_T__156();
		}
	}
	// $ANTLR end "T__156"

	partial void EnterRule_T__157();
	partial void LeaveRule_T__157();

	// $ANTLR start "T__157"
	[GrammarRule("T__157")]
	private void mT__157()
	{
		EnterRule_T__157();
		EnterRule("T__157", 76);
		TraceIn("T__157", 76);
		try
		{
			int _type = T__157;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:157:8: ( 'struct' )
			DebugEnterAlt(1);
			// SugarCpp.g:157:10: 'struct'
			{
			DebugLocation(157, 10);
			Match("struct"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__157", 76);
			LeaveRule("T__157", 76);
			LeaveRule_T__157();
		}
	}
	// $ANTLR end "T__157"

	partial void EnterRule_T__158();
	partial void LeaveRule_T__158();

	// $ANTLR start "T__158"
	[GrammarRule("T__158")]
	private void mT__158()
	{
		EnterRule_T__158();
		EnterRule("T__158", 77);
		TraceIn("T__158", 77);
		try
		{
			int _type = T__158;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:158:8: ( 'switch' )
			DebugEnterAlt(1);
			// SugarCpp.g:158:10: 'switch'
			{
			DebugLocation(158, 10);
			Match("switch"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__158", 77);
			LeaveRule("T__158", 77);
			LeaveRule_T__158();
		}
	}
	// $ANTLR end "T__158"

	partial void EnterRule_T__159();
	partial void LeaveRule_T__159();

	// $ANTLR start "T__159"
	[GrammarRule("T__159")]
	private void mT__159()
	{
		EnterRule_T__159();
		EnterRule("T__159", 78);
		TraceIn("T__159", 78);
		try
		{
			int _type = T__159;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:159:8: ( 'then' )
			DebugEnterAlt(1);
			// SugarCpp.g:159:10: 'then'
			{
			DebugLocation(159, 10);
			Match("then"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__159", 78);
			LeaveRule("T__159", 78);
			LeaveRule_T__159();
		}
	}
	// $ANTLR end "T__159"

	partial void EnterRule_T__160();
	partial void LeaveRule_T__160();

	// $ANTLR start "T__160"
	[GrammarRule("T__160")]
	private void mT__160()
	{
		EnterRule_T__160();
		EnterRule("T__160", 79);
		TraceIn("T__160", 79);
		try
		{
			int _type = T__160;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:160:8: ( 'to' )
			DebugEnterAlt(1);
			// SugarCpp.g:160:10: 'to'
			{
			DebugLocation(160, 10);
			Match("to"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__160", 79);
			LeaveRule("T__160", 79);
			LeaveRule_T__160();
		}
	}
	// $ANTLR end "T__160"

	partial void EnterRule_T__161();
	partial void LeaveRule_T__161();

	// $ANTLR start "T__161"
	[GrammarRule("T__161")]
	private void mT__161()
	{
		EnterRule_T__161();
		EnterRule("T__161", 80);
		TraceIn("T__161", 80);
		try
		{
			int _type = T__161;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:161:8: ( 'try' )
			DebugEnterAlt(1);
			// SugarCpp.g:161:10: 'try'
			{
			DebugLocation(161, 10);
			Match("try"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__161", 80);
			LeaveRule("T__161", 80);
			LeaveRule_T__161();
		}
	}
	// $ANTLR end "T__161"

	partial void EnterRule_T__162();
	partial void LeaveRule_T__162();

	// $ANTLR start "T__162"
	[GrammarRule("T__162")]
	private void mT__162()
	{
		EnterRule_T__162();
		EnterRule("T__162", 81);
		TraceIn("T__162", 81);
		try
		{
			int _type = T__162;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:162:8: ( 'type' )
			DebugEnterAlt(1);
			// SugarCpp.g:162:10: 'type'
			{
			DebugLocation(162, 10);
			Match("type"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__162", 81);
			LeaveRule("T__162", 81);
			LeaveRule_T__162();
		}
	}
	// $ANTLR end "T__162"

	partial void EnterRule_T__163();
	partial void LeaveRule_T__163();

	// $ANTLR start "T__163"
	[GrammarRule("T__163")]
	private void mT__163()
	{
		EnterRule_T__163();
		EnterRule("T__163", 82);
		TraceIn("T__163", 82);
		try
		{
			int _type = T__163;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:163:8: ( 'unless' )
			DebugEnterAlt(1);
			// SugarCpp.g:163:10: 'unless'
			{
			DebugLocation(163, 10);
			Match("unless"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__163", 82);
			LeaveRule("T__163", 82);
			LeaveRule_T__163();
		}
	}
	// $ANTLR end "T__163"

	partial void EnterRule_T__164();
	partial void LeaveRule_T__164();

	// $ANTLR start "T__164"
	[GrammarRule("T__164")]
	private void mT__164()
	{
		EnterRule_T__164();
		EnterRule("T__164", 83);
		TraceIn("T__164", 83);
		try
		{
			int _type = T__164;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:164:8: ( 'until' )
			DebugEnterAlt(1);
			// SugarCpp.g:164:10: 'until'
			{
			DebugLocation(164, 10);
			Match("until"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__164", 83);
			LeaveRule("T__164", 83);
			LeaveRule_T__164();
		}
	}
	// $ANTLR end "T__164"

	partial void EnterRule_T__165();
	partial void LeaveRule_T__165();

	// $ANTLR start "T__165"
	[GrammarRule("T__165")]
	private void mT__165()
	{
		EnterRule_T__165();
		EnterRule("T__165", 84);
		TraceIn("T__165", 84);
		try
		{
			int _type = T__165;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:165:8: ( 'using' )
			DebugEnterAlt(1);
			// SugarCpp.g:165:10: 'using'
			{
			DebugLocation(165, 10);
			Match("using"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__165", 84);
			LeaveRule("T__165", 84);
			LeaveRule_T__165();
		}
	}
	// $ANTLR end "T__165"

	partial void EnterRule_T__166();
	partial void LeaveRule_T__166();

	// $ANTLR start "T__166"
	[GrammarRule("T__166")]
	private void mT__166()
	{
		EnterRule_T__166();
		EnterRule("T__166", 85);
		TraceIn("T__166", 85);
		try
		{
			int _type = T__166;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:166:8: ( 'when' )
			DebugEnterAlt(1);
			// SugarCpp.g:166:10: 'when'
			{
			DebugLocation(166, 10);
			Match("when"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__166", 85);
			LeaveRule("T__166", 85);
			LeaveRule_T__166();
		}
	}
	// $ANTLR end "T__166"

	partial void EnterRule_T__167();
	partial void LeaveRule_T__167();

	// $ANTLR start "T__167"
	[GrammarRule("T__167")]
	private void mT__167()
	{
		EnterRule_T__167();
		EnterRule("T__167", 86);
		TraceIn("T__167", 86);
		try
		{
			int _type = T__167;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:167:8: ( 'where' )
			DebugEnterAlt(1);
			// SugarCpp.g:167:10: 'where'
			{
			DebugLocation(167, 10);
			Match("where"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__167", 86);
			LeaveRule("T__167", 86);
			LeaveRule_T__167();
		}
	}
	// $ANTLR end "T__167"

	partial void EnterRule_T__168();
	partial void LeaveRule_T__168();

	// $ANTLR start "T__168"
	[GrammarRule("T__168")]
	private void mT__168()
	{
		EnterRule_T__168();
		EnterRule("T__168", 87);
		TraceIn("T__168", 87);
		try
		{
			int _type = T__168;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:168:8: ( 'while' )
			DebugEnterAlt(1);
			// SugarCpp.g:168:10: 'while'
			{
			DebugLocation(168, 10);
			Match("while"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__168", 87);
			LeaveRule("T__168", 87);
			LeaveRule_T__168();
		}
	}
	// $ANTLR end "T__168"

	partial void EnterRule_T__169();
	partial void LeaveRule_T__169();

	// $ANTLR start "T__169"
	[GrammarRule("T__169")]
	private void mT__169()
	{
		EnterRule_T__169();
		EnterRule("T__169", 88);
		TraceIn("T__169", 88);
		try
		{
			int _type = T__169;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:169:8: ( '|' )
			DebugEnterAlt(1);
			// SugarCpp.g:169:10: '|'
			{
			DebugLocation(169, 10);
			Match('|'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__169", 88);
			LeaveRule("T__169", 88);
			LeaveRule_T__169();
		}
	}
	// $ANTLR end "T__169"

	partial void EnterRule_T__170();
	partial void LeaveRule_T__170();

	// $ANTLR start "T__170"
	[GrammarRule("T__170")]
	private void mT__170()
	{
		EnterRule_T__170();
		EnterRule("T__170", 89);
		TraceIn("T__170", 89);
		try
		{
			int _type = T__170;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:170:8: ( '|=' )
			DebugEnterAlt(1);
			// SugarCpp.g:170:10: '|='
			{
			DebugLocation(170, 10);
			Match("|="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__170", 89);
			LeaveRule("T__170", 89);
			LeaveRule_T__170();
		}
	}
	// $ANTLR end "T__170"

	partial void EnterRule_T__171();
	partial void LeaveRule_T__171();

	// $ANTLR start "T__171"
	[GrammarRule("T__171")]
	private void mT__171()
	{
		EnterRule_T__171();
		EnterRule("T__171", 90);
		TraceIn("T__171", 90);
		try
		{
			int _type = T__171;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:171:8: ( '||' )
			DebugEnterAlt(1);
			// SugarCpp.g:171:10: '||'
			{
			DebugLocation(171, 10);
			Match("||"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__171", 90);
			LeaveRule("T__171", 90);
			LeaveRule_T__171();
		}
	}
	// $ANTLR end "T__171"

	partial void EnterRule_T__172();
	partial void LeaveRule_T__172();

	// $ANTLR start "T__172"
	[GrammarRule("T__172")]
	private void mT__172()
	{
		EnterRule_T__172();
		EnterRule("T__172", 91);
		TraceIn("T__172", 91);
		try
		{
			int _type = T__172;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:172:8: ( '~' )
			DebugEnterAlt(1);
			// SugarCpp.g:172:10: '~'
			{
			DebugLocation(172, 10);
			Match('~'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__172", 91);
			LeaveRule("T__172", 91);
			LeaveRule_T__172();
		}
	}
	// $ANTLR end "T__172"

	partial void EnterRule_DOT_DOT();
	partial void LeaveRule_DOT_DOT();

	// $ANTLR start "DOT_DOT"
	[GrammarRule("DOT_DOT")]
	private void mDOT_DOT()
	{
		EnterRule_DOT_DOT();
		EnterRule("DOT_DOT", 92);
		TraceIn("DOT_DOT", 92);
		try
		{
			int _type = DOT_DOT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:727:8: ( '..' )
			DebugEnterAlt(1);
			// SugarCpp.g:727:10: '..'
			{
			DebugLocation(727, 10);
			Match(".."); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT_DOT", 92);
			LeaveRule("DOT_DOT", 92);
			LeaveRule_DOT_DOT();
		}
	}
	// $ANTLR end "DOT_DOT"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 93);
		TraceIn("IDENT", 93);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:729:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:729:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(729, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(729, 36);
			// SugarCpp.g:729:36: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(729, 36);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 93);
			LeaveRule("IDENT", 93);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 94);
		TraceIn("NUMBER", 94);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:731:7: ( ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:731:9: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			{
			DebugLocation(731, 9);
			// SugarCpp.g:731:9: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )? | '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='0'))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1=='x'))
				{
					alt16 = 2;
				}
				else
				{
					alt16 = 1;
				}
			}
			else if (((LA16_0>='1' && LA16_0<='9')))
			{
				alt16 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:731:11: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'e' ( '-' )? ( '0' .. '9' )+ )? ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )?
				{
				DebugLocation(731, 11);
				// SugarCpp.g:731:11: ( '0' .. '9' )+
				int cnt2=0;
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>='0' && LA2_0<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(731, 11);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						if (cnt2 >= 1)
							goto loop2;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee2 = new EarlyExitException( 2, input );
						DebugRecognitionException(eee2);
						throw eee2;
					}
					cnt2++;
				}
				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(731, 21);
				// SugarCpp.g:731:21: ( '.' ( '0' .. '9' )+ )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='.'))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:731:22: '.' ( '0' .. '9' )+
					{
					DebugLocation(731, 22);
					Match('.'); if (state.failed) return;
					DebugLocation(731, 26);
					// SugarCpp.g:731:26: ( '0' .. '9' )+
					int cnt3=0;
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if (((LA3_0>='0' && LA3_0<='9')))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch (alt3)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:
							{
							DebugLocation(731, 26);
							input.Consume();
							state.failed=false;

							}
							break;

						default:
							if (cnt3 >= 1)
								goto loop3;

							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee3 = new EarlyExitException( 3, input );
							DebugRecognitionException(eee3);
							throw eee3;
						}
						cnt3++;
					}
					loop3:
						;

					} finally { DebugExitSubRule(3); }


					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(731, 38);
				// SugarCpp.g:731:38: ( 'e' ( '-' )? ( '0' .. '9' )+ )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='e'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:731:39: 'e' ( '-' )? ( '0' .. '9' )+
					{
					DebugLocation(731, 39);
					Match('e'); if (state.failed) return;
					DebugLocation(731, 43);
					// SugarCpp.g:731:43: ( '-' )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0=='-'))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:43: '-'
						{
						DebugLocation(731, 43);
						Match('-'); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(731, 48);
					// SugarCpp.g:731:48: ( '0' .. '9' )+
					int cnt6=0;
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if (((LA6_0>='0' && LA6_0<='9')))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch (alt6)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:
							{
							DebugLocation(731, 48);
							input.Consume();
							state.failed=false;

							}
							break;

						default:
							if (cnt6 >= 1)
								goto loop6;

							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee6 = new EarlyExitException( 6, input );
							DebugRecognitionException(eee6);
							throw eee6;
						}
						cnt6++;
					}
					loop6:
						;

					} finally { DebugExitSubRule(6); }


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(731, 60);
				// SugarCpp.g:731:60: ( 'f' | 'F' | 'u' ( 'l' ( 'l' )? )? | 'l' ( 'l' )? | 'U' ( 'L' ( 'L' )? )? | 'L' ( 'L' )? )?
				int alt14=7;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				switch (input.LA(1))
				{
				case 'f':
					{
					alt14 = 1;
					}
					break;
				case 'F':
					{
					alt14 = 2;
					}
					break;
				case 'u':
					{
					alt14 = 3;
					}
					break;
				case 'l':
					{
					alt14 = 4;
					}
					break;
				case 'U':
					{
					alt14 = 5;
					}
					break;
				case 'L':
					{
					alt14 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:731:61: 'f'
					{
					DebugLocation(731, 61);
					Match('f'); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:731:67: 'F'
					{
					DebugLocation(731, 67);
					Match('F'); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:731:73: 'u' ( 'l' ( 'l' )? )?
					{
					DebugLocation(731, 73);
					Match('u'); if (state.failed) return;
					DebugLocation(731, 77);
					// SugarCpp.g:731:77: ( 'l' ( 'l' )? )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='l'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:78: 'l' ( 'l' )?
						{
						DebugLocation(731, 78);
						Match('l'); if (state.failed) return;
						DebugLocation(731, 82);
						// SugarCpp.g:731:82: ( 'l' )?
						int alt8=2;
						try { DebugEnterSubRule(8);
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0=='l'))
						{
							alt8 = 1;
						}
						} finally { DebugExitDecision(8); }
						switch (alt8)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:731:82: 'l'
							{
							DebugLocation(731, 82);
							Match('l'); if (state.failed) return;

							}
							break;

						}
						} finally { DebugExitSubRule(8); }


						}
						break;

					}
					} finally { DebugExitSubRule(9); }


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:731:91: 'l' ( 'l' )?
					{
					DebugLocation(731, 91);
					Match('l'); if (state.failed) return;
					DebugLocation(731, 95);
					// SugarCpp.g:731:95: ( 'l' )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0=='l'))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:95: 'l'
						{
						DebugLocation(731, 95);
						Match('l'); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(10); }


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:731:102: 'U' ( 'L' ( 'L' )? )?
					{
					DebugLocation(731, 102);
					Match('U'); if (state.failed) return;
					DebugLocation(731, 106);
					// SugarCpp.g:731:106: ( 'L' ( 'L' )? )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0=='L'))
					{
						alt12 = 1;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:107: 'L' ( 'L' )?
						{
						DebugLocation(731, 107);
						Match('L'); if (state.failed) return;
						DebugLocation(731, 111);
						// SugarCpp.g:731:111: ( 'L' )?
						int alt11=2;
						try { DebugEnterSubRule(11);
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0=='L'))
						{
							alt11 = 1;
						}
						} finally { DebugExitDecision(11); }
						switch (alt11)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:731:111: 'L'
							{
							DebugLocation(731, 111);
							Match('L'); if (state.failed) return;

							}
							break;

						}
						} finally { DebugExitSubRule(11); }


						}
						break;

					}
					} finally { DebugExitSubRule(12); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:731:120: 'L' ( 'L' )?
					{
					DebugLocation(731, 120);
					Match('L'); if (state.failed) return;
					DebugLocation(731, 124);
					// SugarCpp.g:731:124: ( 'L' )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0=='L'))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:124: 'L'
						{
						DebugLocation(731, 124);
						Match('L'); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(13); }


					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:732:11: '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				{
				DebugLocation(732, 11);
				Match('0'); if (state.failed) return;
				DebugLocation(732, 15);
				Match('x'); if (state.failed) return;
				DebugLocation(732, 19);
				// SugarCpp.g:732:19: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				int cnt15=0;
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if (((LA15_0>='0' && LA15_0<='9')||(LA15_0>='A' && LA15_0<='F')||(LA15_0>='a' && LA15_0<='f')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:
						{
						DebugLocation(732, 19);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						if (cnt15 >= 1)
							goto loop15;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee15 = new EarlyExitException( 15, input );
						DebugRecognitionException(eee15);
						throw eee15;
					}
					cnt15++;
				}
				loop15:
					;

				} finally { DebugExitSubRule(15); }


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 94);
			LeaveRule("NUMBER", 94);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 95);
		TraceIn("STRING", 95);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:737:2: ( ( '\"' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\"' | '\\'' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\\'' | '@\\\"\"\"' ( options {greedy=false; } : ( ( '\"' '\"' )=> '\"' '\"' | . ) )* '\\\"\"\"' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:737:4: ( '\"' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\"' | '\\'' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\\'' | '@\\\"\"\"' ( options {greedy=false; } : ( ( '\"' '\"' )=> '\"' '\"' | . ) )* '\\\"\"\"' )
			{
			DebugLocation(737, 4);
			// SugarCpp.g:737:4: ( '\"' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\"' | '\\'' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\\'' | '@\\\"\"\"' ( options {greedy=false; } : ( ( '\"' '\"' )=> '\"' '\"' | . ) )* '\\\"\"\"' )
			int alt23=3;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case '\"':
				{
				alt23 = 1;
				}
				break;
			case '\'':
				{
				alt23 = 2;
				}
				break;
			case '@':
				{
				alt23 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:737:6: '\"' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\"'
				{
				DebugLocation(737, 6);
				Match('\"'); if (state.failed) return;
				DebugLocation(737, 10);
				// SugarCpp.g:737:10: ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0=='\"'))
					{
						alt18 = 2;
					}
					else if (((LA18_0>='\u0000' && LA18_0<='!')||(LA18_0>='#' && LA18_0<='\uFFFF')))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:737:42: ( ( '\\\\' )=> '\\\\' . | . )
						{
						DebugLocation(737, 42);
						// SugarCpp.g:737:42: ( ( '\\\\' )=> '\\\\' . | . )
						int alt17=2;
						try { DebugEnterSubRule(17);
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0=='\\'))
						{
							int LA17_1 = input.LA(2);

							if ((LA17_1=='\"'))
							{
								int LA17_3 = input.LA(3);

								if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
								{
									alt17 = 1;
								}
								else if ((true))
								{
									alt17 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 17, 3, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if ((LA17_1=='\\'))
							{
								int LA17_4 = input.LA(3);

								if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
								{
									alt17 = 1;
								}
								else if ((true))
								{
									alt17 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 17, 4, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if (((LA17_1>='\u0000' && LA17_1<='!')||(LA17_1>='#' && LA17_1<='[')||(LA17_1>=']' && LA17_1<='\uFFFF')))
							{
								int LA17_5 = input.LA(3);

								if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
								{
									alt17 = 1;
								}
								else if ((true))
								{
									alt17 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 17, 5, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if (((LA17_0>='\u0000' && LA17_0<='[')||(LA17_0>=']' && LA17_0<='\uFFFF')))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(17); }
						switch (alt17)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:737:43: ( '\\\\' )=> '\\\\' .
							{
							DebugLocation(737, 53);
							Match('\\'); if (state.failed) return;
							DebugLocation(737, 58);
							MatchAny(); if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:737:62: .
							{
							DebugLocation(737, 62);
							MatchAny(); if (state.failed) return;

							}
							break;

						}
						} finally { DebugExitSubRule(17); }


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(737, 69);
				Match('\"'); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:738:6: '\\'' ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )* '\\''
				{
				DebugLocation(738, 6);
				Match('\''); if (state.failed) return;
				DebugLocation(738, 11);
				// SugarCpp.g:738:11: ( options {greedy=false; } : ( ( '\\\\' )=> '\\\\' . | . ) )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0=='\''))
					{
						alt20 = 2;
					}
					else if (((LA20_0>='\u0000' && LA20_0<='&')||(LA20_0>='(' && LA20_0<='\uFFFF')))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:738:43: ( ( '\\\\' )=> '\\\\' . | . )
						{
						DebugLocation(738, 43);
						// SugarCpp.g:738:43: ( ( '\\\\' )=> '\\\\' . | . )
						int alt19=2;
						try { DebugEnterSubRule(19);
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0=='\\'))
						{
							int LA19_1 = input.LA(2);

							if ((LA19_1=='\''))
							{
								int LA19_3 = input.LA(3);

								if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
								{
									alt19 = 1;
								}
								else if ((true))
								{
									alt19 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 19, 3, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if ((LA19_1=='\\'))
							{
								int LA19_4 = input.LA(3);

								if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
								{
									alt19 = 1;
								}
								else if ((true))
								{
									alt19 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 19, 4, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if (((LA19_1>='\u0000' && LA19_1<='&')||(LA19_1>='(' && LA19_1<='[')||(LA19_1>=']' && LA19_1<='\uFFFF')))
							{
								int LA19_5 = input.LA(3);

								if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
								{
									alt19 = 1;
								}
								else if ((true))
								{
									alt19 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 19, 5, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if (((LA19_0>='\u0000' && LA19_0<='[')||(LA19_0>=']' && LA19_0<='\uFFFF')))
						{
							alt19 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(19); }
						switch (alt19)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:738:44: ( '\\\\' )=> '\\\\' .
							{
							DebugLocation(738, 54);
							Match('\\'); if (state.failed) return;
							DebugLocation(738, 59);
							MatchAny(); if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:738:63: .
							{
							DebugLocation(738, 63);
							MatchAny(); if (state.failed) return;

							}
							break;

						}
						} finally { DebugExitSubRule(19); }


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(738, 70);
				Match('\''); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:739:6: '@\\\"\"\"' ( options {greedy=false; } : ( ( '\"' '\"' )=> '\"' '\"' | . ) )* '\\\"\"\"'
				{
				DebugLocation(739, 6);
				Match("@\"\"\""); if (state.failed) return;

				DebugLocation(739, 14);
				// SugarCpp.g:739:14: ( options {greedy=false; } : ( ( '\"' '\"' )=> '\"' '\"' | . ) )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0=='\"'))
					{
						int LA22_1 = input.LA(2);

						if ((LA22_1=='\"'))
						{
							int LA22_3 = input.LA(3);

							if ((LA22_3=='\"'))
							{
								alt22 = 2;
							}
							else if (((LA22_3>='\u0000' && LA22_3<='!')||(LA22_3>='#' && LA22_3<='\uFFFF')))
							{
								alt22 = 1;
							}


						}
						else if (((LA22_1>='\u0000' && LA22_1<='!')||(LA22_1>='#' && LA22_1<='\uFFFF')))
						{
							alt22 = 1;
						}


					}
					else if (((LA22_0>='\u0000' && LA22_0<='!')||(LA22_0>='#' && LA22_0<='\uFFFF')))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:739:46: ( ( '\"' '\"' )=> '\"' '\"' | . )
						{
						DebugLocation(739, 46);
						// SugarCpp.g:739:46: ( ( '\"' '\"' )=> '\"' '\"' | . )
						int alt21=2;
						try { DebugEnterSubRule(21);
						try { DebugEnterDecision(21, false);
						int LA21_0 = input.LA(1);

						if ((LA21_0=='\"'))
						{
							int LA21_1 = input.LA(2);

							if ((LA21_1=='\"'))
							{
								int LA21_3 = input.LA(3);

								if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
								{
									alt21 = 1;
								}
								else if ((true))
								{
									alt21 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 21, 3, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if (((LA21_1>='\u0000' && LA21_1<='!')||(LA21_1>='#' && LA21_1<='\uFFFF')))
							{
								alt21 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if (((LA21_0>='\u0000' && LA21_0<='!')||(LA21_0>='#' && LA21_0<='\uFFFF')))
						{
							alt21 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(21); }
						switch (alt21)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:739:47: ( '\"' '\"' )=> '\"' '\"'
							{
							DebugLocation(739, 60);
							Match('\"'); if (state.failed) return;
							DebugLocation(739, 64);
							Match('\"'); if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:739:70: .
							{
							DebugLocation(739, 70);
							MatchAny(); if (state.failed) return;

							}
							break;

						}
						} finally { DebugExitSubRule(21); }


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(739, 77);
				Match("\"\"\""); if (state.failed) return;


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(741, 2);
			if (state.backtracking == 0)
			{

						StringBuilder sb = new StringBuilder();
						int erase = 0;
						bool at_string = false;
						if (Text[0] == '@')
						{
							at_string = true;
							Text = Text.Substring(3, Text.Length - 5);
						}
						int ct = 0;
						foreach (var c in Text)
						{
							ct++;
							if (c == '\n')
							{
								erase = CurrentIndent;
								sb.Append("\\n");
								continue;
							}
							if (erase == 0)
							{
								if (at_string)
								{
									sb.Append(c == '\\' ? "\\\\" : c == '"' && ct != 1 && ct != Text.Length ? "\\\"" : c.ToString());
								}
								else
								{
									sb.Append(c);
								}
							}
							else
							{
								erase--;
								continue;
							}
						}
						Text = sb.ToString();
					
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 95);
			LeaveRule("STRING", 95);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_Comment();
	partial void LeaveRule_Comment();

	// $ANTLR start "Comment"
	[GrammarRule("Comment")]
	private void mComment()
	{
		EnterRule_Comment();
		EnterRule("Comment", 96);
		TraceIn("Comment", 96);
		try
		{
			int _type = Comment;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:782:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// SugarCpp.g:782:4: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(782, 4);
			Match("/*"); if (state.failed) return;

			DebugLocation(782, 9);
			// SugarCpp.g:782:9: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0=='*'))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1=='/'))
					{
						alt24 = 2;
					}
					else if (((LA24_1>='\u0000' && LA24_1<='.')||(LA24_1>='0' && LA24_1<='\uFFFF')))
					{
						alt24 = 1;
					}


				}
				else if (((LA24_0>='\u0000' && LA24_0<=')')||(LA24_0>='+' && LA24_0<='\uFFFF')))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:782:41: .
					{
					DebugLocation(782, 41);
					MatchAny(); if (state.failed) return;

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(782, 46);
			Match("*/"); if (state.failed) return;

			DebugLocation(782, 51);
			if (state.backtracking == 0)
			{
				 _channel = Hidden; 
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Comment", 96);
			LeaveRule("Comment", 96);
			LeaveRule_Comment();
		}
	}
	// $ANTLR end "Comment"

	partial void EnterRule_LineComment();
	partial void LeaveRule_LineComment();

	// $ANTLR start "LineComment"
	[GrammarRule("LineComment")]
	private void mLineComment()
	{
		EnterRule_LineComment();
		EnterRule("LineComment", 97);
		TraceIn("LineComment", 97);
		try
		{
			int _type = LineComment;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:786:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:786:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(786, 4);
			Match("//"); if (state.failed) return;

			DebugLocation(786, 9);
			// SugarCpp.g:786:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if (((LA25_0>='\u0000' && LA25_0<='\t')||(LA25_0>='\u000B' && LA25_0<='\f')||(LA25_0>='\u000E' && LA25_0<='\uFFFF')))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(786, 9);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(786, 25);
			// SugarCpp.g:786:25: ( '\\r' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0=='\r'))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:786:25: '\\r'
				{
				DebugLocation(786, 25);
				Match('\r'); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(786, 31);
			Match('\n'); if (state.failed) return;
			DebugLocation(786, 36);
			if (state.backtracking == 0)
			{
				 _channel = Hidden; 
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LineComment", 97);
			LeaveRule("LineComment", 97);
			LeaveRule_LineComment();
		}
	}
	// $ANTLR end "LineComment"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 98);
		TraceIn("EXPONENT", 98);
		try
		{
			// SugarCpp.g:791:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:792:5: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(792, 5);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(792, 15);
			// SugarCpp.g:792:15: ( '+' | '-' )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0=='+'||LA27_0=='-'))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:
				{
				DebugLocation(792, 15);
				input.Consume();
				state.failed=false;

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(792, 26);
			// SugarCpp.g:792:26: ( '0' .. '9' )+
			int cnt28=0;
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>='0' && LA28_0<='9')))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(792, 26);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt28 >= 1)
						goto loop28;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee28 = new EarlyExitException( 28, input );
					DebugRecognitionException(eee28);
					throw eee28;
				}
				cnt28++;
			}
			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 98);
			LeaveRule("EXPONENT", 98);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_Left_Bracket();
	partial void LeaveRule_Left_Bracket();

	// $ANTLR start "Left_Bracket"
	[GrammarRule("Left_Bracket")]
	private void mLeft_Bracket()
	{
		EnterRule_Left_Bracket();
		EnterRule("Left_Bracket", 99);
		TraceIn("Left_Bracket", 99);
		try
		{
			int _type = Left_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:796:2: ( '(' | '[' | '{' )
			int alt29=3;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case '(':
				{
				alt29 = 1;
				}
				break;
			case '[':
				{
				alt29 = 2;
				}
				break;
			case '{':
				{
				alt29 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:796:4: '('
				{
				DebugLocation(796, 4);
				Match('('); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:796:10: '['
				{
				DebugLocation(796, 10);
				Match('['); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:796:16: '{'
				{
				DebugLocation(796, 16);
				Match('{'); if (state.failed) return;
				DebugLocation(797, 2);
				if (state.backtracking == 0)
				{

							int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
							if (Bracket[k] == null) Bracket[k] = new Stack<int>();
							Bracket[k].Push(CharIndex);
						
				}

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Left_Bracket", 99);
			LeaveRule("Left_Bracket", 99);
			LeaveRule_Left_Bracket();
		}
	}
	// $ANTLR end "Left_Bracket"

	partial void EnterRule_Right_Bracket();
	partial void LeaveRule_Right_Bracket();

	// $ANTLR start "Right_Bracket"
	[GrammarRule("Right_Bracket")]
	private void mRight_Bracket()
	{
		EnterRule_Right_Bracket();
		EnterRule("Right_Bracket", 100);
		TraceIn("Right_Bracket", 100);
		try
		{
			int _type = Right_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:805:2: ( ')' | ']' | '}' )
			int alt30=3;
			try { DebugEnterDecision(30, false);
			switch (input.LA(1))
			{
			case ')':
				{
				alt30 = 1;
				}
				break;
			case ']':
				{
				alt30 = 2;
				}
				break;
			case '}':
				{
				alt30 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:805:4: ')'
				{
				DebugLocation(805, 4);
				Match(')'); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:805:10: ']'
				{
				DebugLocation(805, 10);
				Match(']'); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:805:16: '}'
				{
				DebugLocation(805, 16);
				Match('}'); if (state.failed) return;
				DebugLocation(806, 2);
				if (state.backtracking == 0)
				{

							int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
							int pos = Bracket[k].Pop();
							while (Indents.Count > 0 && pos < Indents.First().CharIndex)
							{
								Emit(this.CreateToken(DEDENT, "DEDENT"));
								Indents.Pop();
								CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
							}
						
				}

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Right_Bracket", 100);
			LeaveRule("Right_Bracket", 100);
			LeaveRule_Right_Bracket();
		}
	}
	// $ANTLR end "Right_Bracket"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 101);
		TraceIn("NEWLINE", 101);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			CommonToken SP1 = default(CommonToken);

			// SugarCpp.g:819:2: ( ( ( '\\r' )? '\\n' )+ ( SP )? )
			DebugEnterAlt(1);
			// SugarCpp.g:819:4: ( ( '\\r' )? '\\n' )+ ( SP )?
			{
			DebugLocation(819, 4);
			// SugarCpp.g:819:4: ( ( '\\r' )? '\\n' )+
			int cnt32=0;
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0=='\n'||LA32_0=='\r'))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:819:5: ( '\\r' )? '\\n'
					{
					DebugLocation(819, 5);
					// SugarCpp.g:819:5: ( '\\r' )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0=='\r'))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:819:5: '\\r'
						{
						DebugLocation(819, 5);
						Match('\r'); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(819, 11);
					Match('\n'); if (state.failed) return;

					}
					break;

				default:
					if (cnt32 >= 1)
						goto loop32;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee32 = new EarlyExitException( 32, input );
					DebugRecognitionException(eee32);
					throw eee32;
				}
				cnt32++;
			}
			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(819, 18);
			// SugarCpp.g:819:18: ( SP )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0=='\t'||LA33_0==' '))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:819:18: SP
				{
				DebugLocation(819, 18);
				int SP1Start1243 = CharIndex;
				int SP1StartLine1243 = Line;
				int SP1StartCharPos1243 = CharPositionInLine;
				mSP(); if (state.failed) return;
				SP1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, SP1Start1243, CharIndex-1);
				SP1.Line = SP1StartLine1243;
				SP1.CharPositionInLine = SP1StartCharPos1243;

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(820, 2);
			if (state.backtracking == 0)
			{

						int indent = (SP1!=null?SP1.Text:null) == null ? 0 : (SP1!=null?SP1.Text:null).Length;
						if (indent > CurrentIndent)
						{
							Emit(this.CreateToken(NEWLINE, "NEWLINE"));
							Emit(this.CreateToken(INDENT, "INDENT"));
							Emit(this.CreateToken(NEWLINE, "NEWLINE"));
							Indents.Push(new Indentation(indent, CharIndex));
							CurrentIndent = indent;
						}
						else if (indent < CurrentIndent)
						{
							while (Indents.Count > 0 && indent < CurrentIndent)
							{
								Emit(this.CreateToken(NEWLINE, "NEWLINE"));
								Emit(this.CreateToken(DEDENT, "DEDENT"));
								Indents.Pop();
								CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
							}
							Emit(this.CreateToken(NEWLINE, "NEWLINE"));
						}
						else
						{
							Emit(this.CreateToken(NEWLINE, "NEWLINE"));
							Skip();
						}
					
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 101);
			LeaveRule("NEWLINE", 101);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_SP();
	partial void LeaveRule_SP();

	// $ANTLR start "SP"
	[GrammarRule("SP")]
	private void mSP()
	{
		EnterRule_SP();
		EnterRule("SP", 102);
		TraceIn("SP", 102);
		try
		{
			// SugarCpp.g:849:12: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:849:14: ( ' ' | '\\t' )+
			{
			DebugLocation(849, 14);
			// SugarCpp.g:849:14: ( ' ' | '\\t' )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0=='\t'||LA34_0==' '))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(849, 14);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

		}
		finally
		{
			TraceOut("SP", 102);
			LeaveRule("SP", 102);
			LeaveRule_SP();
		}
	}
	// $ANTLR end "SP"

	partial void EnterRule_White_Space();
	partial void LeaveRule_White_Space();

	// $ANTLR start "White_Space"
	[GrammarRule("White_Space")]
	private void mWhite_Space()
	{
		EnterRule_White_Space();
		EnterRule("White_Space", 103);
		TraceIn("White_Space", 103);
		try
		{
			int _type = White_Space;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:851:12: ( ' ' )
			DebugEnterAlt(1);
			// SugarCpp.g:851:14: ' '
			{
			DebugLocation(851, 14);
			Match(' '); if (state.failed) return;
			DebugLocation(851, 18);
			if (state.backtracking == 0)
			{
				 Skip(); 
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("White_Space", 103);
			LeaveRule("White_Space", 103);
			LeaveRule_White_Space();
		}
	}
	// $ANTLR end "White_Space"

	partial void EnterRule_INDENT();
	partial void LeaveRule_INDENT();

	// $ANTLR start "INDENT"
	[GrammarRule("INDENT")]
	private void mINDENT()
	{
		EnterRule_INDENT();
		EnterRule("INDENT", 104);
		TraceIn("INDENT", 104);
		try
		{
			int _type = INDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:853:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:853:9: {...}? => ( '\\n' )
			{
			DebugLocation(853, 9);
			if (!((0==1)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "INDENT", "0==1");
			}
			DebugLocation(853, 19);
			// SugarCpp.g:853:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:853:20: '\\n'
			{
			DebugLocation(853, 20);
			Match('\n'); if (state.failed) return;

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDENT", 104);
			LeaveRule("INDENT", 104);
			LeaveRule_INDENT();
		}
	}
	// $ANTLR end "INDENT"

	partial void EnterRule_DEDENT();
	partial void LeaveRule_DEDENT();

	// $ANTLR start "DEDENT"
	[GrammarRule("DEDENT")]
	private void mDEDENT()
	{
		EnterRule_DEDENT();
		EnterRule("DEDENT", 105);
		TraceIn("DEDENT", 105);
		try
		{
			int _type = DEDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:854:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:854:9: {...}? => ( '\\n' )
			{
			DebugLocation(854, 9);
			if (!((0==1)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "DEDENT", "0==1");
			}
			DebugLocation(854, 19);
			// SugarCpp.g:854:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:854:20: '\\n'
			{
			DebugLocation(854, 20);
			Match('\n'); if (state.failed) return;

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEDENT", 105);
			LeaveRule("DEDENT", 105);
			LeaveRule_DEDENT();
		}
	}
	// $ANTLR end "DEDENT"

	public override void mTokens()
	{
		// SugarCpp.g:1:8: ( T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | T__147 | T__148 | T__149 | T__150 | T__151 | T__152 | T__153 | T__154 | T__155 | T__156 | T__157 | T__158 | T__159 | T__160 | T__161 | T__162 | T__163 | T__164 | T__165 | T__166 | T__167 | T__168 | T__169 | T__170 | T__171 | T__172 | DOT_DOT | IDENT | NUMBER | STRING | Comment | LineComment | Left_Bracket | Right_Bracket | NEWLINE | White_Space | INDENT | DEDENT )
		int alt35=103;
		try { DebugEnterDecision(35, false);
		try
		{
			alt35 = dfa35.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(35); }
		switch (alt35)
		{
		case 1:
			DebugEnterAlt(1);
			// SugarCpp.g:1:10: T__82
			{
			DebugLocation(1, 10);
			mT__82(); if (state.failed) return;

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// SugarCpp.g:1:16: T__83
			{
			DebugLocation(1, 16);
			mT__83(); if (state.failed) return;

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// SugarCpp.g:1:22: T__84
			{
			DebugLocation(1, 22);
			mT__84(); if (state.failed) return;

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// SugarCpp.g:1:28: T__85
			{
			DebugLocation(1, 28);
			mT__85(); if (state.failed) return;

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// SugarCpp.g:1:34: T__86
			{
			DebugLocation(1, 34);
			mT__86(); if (state.failed) return;

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// SugarCpp.g:1:40: T__87
			{
			DebugLocation(1, 40);
			mT__87(); if (state.failed) return;

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// SugarCpp.g:1:46: T__88
			{
			DebugLocation(1, 46);
			mT__88(); if (state.failed) return;

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// SugarCpp.g:1:52: T__89
			{
			DebugLocation(1, 52);
			mT__89(); if (state.failed) return;

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// SugarCpp.g:1:58: T__90
			{
			DebugLocation(1, 58);
			mT__90(); if (state.failed) return;

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// SugarCpp.g:1:64: T__91
			{
			DebugLocation(1, 64);
			mT__91(); if (state.failed) return;

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// SugarCpp.g:1:70: T__92
			{
			DebugLocation(1, 70);
			mT__92(); if (state.failed) return;

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// SugarCpp.g:1:76: T__93
			{
			DebugLocation(1, 76);
			mT__93(); if (state.failed) return;

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// SugarCpp.g:1:82: T__94
			{
			DebugLocation(1, 82);
			mT__94(); if (state.failed) return;

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// SugarCpp.g:1:88: T__95
			{
			DebugLocation(1, 88);
			mT__95(); if (state.failed) return;

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// SugarCpp.g:1:94: T__96
			{
			DebugLocation(1, 94);
			mT__96(); if (state.failed) return;

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// SugarCpp.g:1:100: T__97
			{
			DebugLocation(1, 100);
			mT__97(); if (state.failed) return;

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// SugarCpp.g:1:106: T__98
			{
			DebugLocation(1, 106);
			mT__98(); if (state.failed) return;

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// SugarCpp.g:1:112: T__99
			{
			DebugLocation(1, 112);
			mT__99(); if (state.failed) return;

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// SugarCpp.g:1:118: T__100
			{
			DebugLocation(1, 118);
			mT__100(); if (state.failed) return;

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// SugarCpp.g:1:125: T__101
			{
			DebugLocation(1, 125);
			mT__101(); if (state.failed) return;

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// SugarCpp.g:1:132: T__102
			{
			DebugLocation(1, 132);
			mT__102(); if (state.failed) return;

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// SugarCpp.g:1:139: T__103
			{
			DebugLocation(1, 139);
			mT__103(); if (state.failed) return;

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// SugarCpp.g:1:146: T__104
			{
			DebugLocation(1, 146);
			mT__104(); if (state.failed) return;

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// SugarCpp.g:1:153: T__105
			{
			DebugLocation(1, 153);
			mT__105(); if (state.failed) return;

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// SugarCpp.g:1:160: T__106
			{
			DebugLocation(1, 160);
			mT__106(); if (state.failed) return;

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// SugarCpp.g:1:167: T__107
			{
			DebugLocation(1, 167);
			mT__107(); if (state.failed) return;

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// SugarCpp.g:1:174: T__108
			{
			DebugLocation(1, 174);
			mT__108(); if (state.failed) return;

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// SugarCpp.g:1:181: T__109
			{
			DebugLocation(1, 181);
			mT__109(); if (state.failed) return;

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// SugarCpp.g:1:188: T__110
			{
			DebugLocation(1, 188);
			mT__110(); if (state.failed) return;

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// SugarCpp.g:1:195: T__111
			{
			DebugLocation(1, 195);
			mT__111(); if (state.failed) return;

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// SugarCpp.g:1:202: T__112
			{
			DebugLocation(1, 202);
			mT__112(); if (state.failed) return;

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// SugarCpp.g:1:209: T__113
			{
			DebugLocation(1, 209);
			mT__113(); if (state.failed) return;

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// SugarCpp.g:1:216: T__114
			{
			DebugLocation(1, 216);
			mT__114(); if (state.failed) return;

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// SugarCpp.g:1:223: T__115
			{
			DebugLocation(1, 223);
			mT__115(); if (state.failed) return;

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// SugarCpp.g:1:230: T__116
			{
			DebugLocation(1, 230);
			mT__116(); if (state.failed) return;

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// SugarCpp.g:1:237: T__117
			{
			DebugLocation(1, 237);
			mT__117(); if (state.failed) return;

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// SugarCpp.g:1:244: T__118
			{
			DebugLocation(1, 244);
			mT__118(); if (state.failed) return;

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// SugarCpp.g:1:251: T__119
			{
			DebugLocation(1, 251);
			mT__119(); if (state.failed) return;

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// SugarCpp.g:1:258: T__120
			{
			DebugLocation(1, 258);
			mT__120(); if (state.failed) return;

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// SugarCpp.g:1:265: T__121
			{
			DebugLocation(1, 265);
			mT__121(); if (state.failed) return;

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// SugarCpp.g:1:272: T__122
			{
			DebugLocation(1, 272);
			mT__122(); if (state.failed) return;

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// SugarCpp.g:1:279: T__123
			{
			DebugLocation(1, 279);
			mT__123(); if (state.failed) return;

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// SugarCpp.g:1:286: T__124
			{
			DebugLocation(1, 286);
			mT__124(); if (state.failed) return;

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// SugarCpp.g:1:293: T__125
			{
			DebugLocation(1, 293);
			mT__125(); if (state.failed) return;

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// SugarCpp.g:1:300: T__126
			{
			DebugLocation(1, 300);
			mT__126(); if (state.failed) return;

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// SugarCpp.g:1:307: T__127
			{
			DebugLocation(1, 307);
			mT__127(); if (state.failed) return;

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// SugarCpp.g:1:314: T__128
			{
			DebugLocation(1, 314);
			mT__128(); if (state.failed) return;

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// SugarCpp.g:1:321: T__129
			{
			DebugLocation(1, 321);
			mT__129(); if (state.failed) return;

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// SugarCpp.g:1:328: T__130
			{
			DebugLocation(1, 328);
			mT__130(); if (state.failed) return;

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// SugarCpp.g:1:335: T__131
			{
			DebugLocation(1, 335);
			mT__131(); if (state.failed) return;

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// SugarCpp.g:1:342: T__132
			{
			DebugLocation(1, 342);
			mT__132(); if (state.failed) return;

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// SugarCpp.g:1:349: T__133
			{
			DebugLocation(1, 349);
			mT__133(); if (state.failed) return;

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// SugarCpp.g:1:356: T__134
			{
			DebugLocation(1, 356);
			mT__134(); if (state.failed) return;

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// SugarCpp.g:1:363: T__135
			{
			DebugLocation(1, 363);
			mT__135(); if (state.failed) return;

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// SugarCpp.g:1:370: T__136
			{
			DebugLocation(1, 370);
			mT__136(); if (state.failed) return;

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// SugarCpp.g:1:377: T__137
			{
			DebugLocation(1, 377);
			mT__137(); if (state.failed) return;

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// SugarCpp.g:1:384: T__138
			{
			DebugLocation(1, 384);
			mT__138(); if (state.failed) return;

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// SugarCpp.g:1:391: T__139
			{
			DebugLocation(1, 391);
			mT__139(); if (state.failed) return;

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// SugarCpp.g:1:398: T__140
			{
			DebugLocation(1, 398);
			mT__140(); if (state.failed) return;

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// SugarCpp.g:1:405: T__141
			{
			DebugLocation(1, 405);
			mT__141(); if (state.failed) return;

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// SugarCpp.g:1:412: T__142
			{
			DebugLocation(1, 412);
			mT__142(); if (state.failed) return;

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// SugarCpp.g:1:419: T__143
			{
			DebugLocation(1, 419);
			mT__143(); if (state.failed) return;

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// SugarCpp.g:1:426: T__144
			{
			DebugLocation(1, 426);
			mT__144(); if (state.failed) return;

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// SugarCpp.g:1:433: T__145
			{
			DebugLocation(1, 433);
			mT__145(); if (state.failed) return;

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// SugarCpp.g:1:440: T__146
			{
			DebugLocation(1, 440);
			mT__146(); if (state.failed) return;

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// SugarCpp.g:1:447: T__147
			{
			DebugLocation(1, 447);
			mT__147(); if (state.failed) return;

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// SugarCpp.g:1:454: T__148
			{
			DebugLocation(1, 454);
			mT__148(); if (state.failed) return;

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// SugarCpp.g:1:461: T__149
			{
			DebugLocation(1, 461);
			mT__149(); if (state.failed) return;

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// SugarCpp.g:1:468: T__150
			{
			DebugLocation(1, 468);
			mT__150(); if (state.failed) return;

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// SugarCpp.g:1:475: T__151
			{
			DebugLocation(1, 475);
			mT__151(); if (state.failed) return;

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// SugarCpp.g:1:482: T__152
			{
			DebugLocation(1, 482);
			mT__152(); if (state.failed) return;

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// SugarCpp.g:1:489: T__153
			{
			DebugLocation(1, 489);
			mT__153(); if (state.failed) return;

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// SugarCpp.g:1:496: T__154
			{
			DebugLocation(1, 496);
			mT__154(); if (state.failed) return;

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// SugarCpp.g:1:503: T__155
			{
			DebugLocation(1, 503);
			mT__155(); if (state.failed) return;

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// SugarCpp.g:1:510: T__156
			{
			DebugLocation(1, 510);
			mT__156(); if (state.failed) return;

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// SugarCpp.g:1:517: T__157
			{
			DebugLocation(1, 517);
			mT__157(); if (state.failed) return;

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// SugarCpp.g:1:524: T__158
			{
			DebugLocation(1, 524);
			mT__158(); if (state.failed) return;

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// SugarCpp.g:1:531: T__159
			{
			DebugLocation(1, 531);
			mT__159(); if (state.failed) return;

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// SugarCpp.g:1:538: T__160
			{
			DebugLocation(1, 538);
			mT__160(); if (state.failed) return;

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// SugarCpp.g:1:545: T__161
			{
			DebugLocation(1, 545);
			mT__161(); if (state.failed) return;

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// SugarCpp.g:1:552: T__162
			{
			DebugLocation(1, 552);
			mT__162(); if (state.failed) return;

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// SugarCpp.g:1:559: T__163
			{
			DebugLocation(1, 559);
			mT__163(); if (state.failed) return;

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// SugarCpp.g:1:566: T__164
			{
			DebugLocation(1, 566);
			mT__164(); if (state.failed) return;

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// SugarCpp.g:1:573: T__165
			{
			DebugLocation(1, 573);
			mT__165(); if (state.failed) return;

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// SugarCpp.g:1:580: T__166
			{
			DebugLocation(1, 580);
			mT__166(); if (state.failed) return;

			}
			break;
		case 86:
			DebugEnterAlt(86);
			// SugarCpp.g:1:587: T__167
			{
			DebugLocation(1, 587);
			mT__167(); if (state.failed) return;

			}
			break;
		case 87:
			DebugEnterAlt(87);
			// SugarCpp.g:1:594: T__168
			{
			DebugLocation(1, 594);
			mT__168(); if (state.failed) return;

			}
			break;
		case 88:
			DebugEnterAlt(88);
			// SugarCpp.g:1:601: T__169
			{
			DebugLocation(1, 601);
			mT__169(); if (state.failed) return;

			}
			break;
		case 89:
			DebugEnterAlt(89);
			// SugarCpp.g:1:608: T__170
			{
			DebugLocation(1, 608);
			mT__170(); if (state.failed) return;

			}
			break;
		case 90:
			DebugEnterAlt(90);
			// SugarCpp.g:1:615: T__171
			{
			DebugLocation(1, 615);
			mT__171(); if (state.failed) return;

			}
			break;
		case 91:
			DebugEnterAlt(91);
			// SugarCpp.g:1:622: T__172
			{
			DebugLocation(1, 622);
			mT__172(); if (state.failed) return;

			}
			break;
		case 92:
			DebugEnterAlt(92);
			// SugarCpp.g:1:629: DOT_DOT
			{
			DebugLocation(1, 629);
			mDOT_DOT(); if (state.failed) return;

			}
			break;
		case 93:
			DebugEnterAlt(93);
			// SugarCpp.g:1:637: IDENT
			{
			DebugLocation(1, 637);
			mIDENT(); if (state.failed) return;

			}
			break;
		case 94:
			DebugEnterAlt(94);
			// SugarCpp.g:1:643: NUMBER
			{
			DebugLocation(1, 643);
			mNUMBER(); if (state.failed) return;

			}
			break;
		case 95:
			DebugEnterAlt(95);
			// SugarCpp.g:1:650: STRING
			{
			DebugLocation(1, 650);
			mSTRING(); if (state.failed) return;

			}
			break;
		case 96:
			DebugEnterAlt(96);
			// SugarCpp.g:1:657: Comment
			{
			DebugLocation(1, 657);
			mComment(); if (state.failed) return;

			}
			break;
		case 97:
			DebugEnterAlt(97);
			// SugarCpp.g:1:665: LineComment
			{
			DebugLocation(1, 665);
			mLineComment(); if (state.failed) return;

			}
			break;
		case 98:
			DebugEnterAlt(98);
			// SugarCpp.g:1:677: Left_Bracket
			{
			DebugLocation(1, 677);
			mLeft_Bracket(); if (state.failed) return;

			}
			break;
		case 99:
			DebugEnterAlt(99);
			// SugarCpp.g:1:690: Right_Bracket
			{
			DebugLocation(1, 690);
			mRight_Bracket(); if (state.failed) return;

			}
			break;
		case 100:
			DebugEnterAlt(100);
			// SugarCpp.g:1:704: NEWLINE
			{
			DebugLocation(1, 704);
			mNEWLINE(); if (state.failed) return;

			}
			break;
		case 101:
			DebugEnterAlt(101);
			// SugarCpp.g:1:712: White_Space
			{
			DebugLocation(1, 712);
			mWhite_Space(); if (state.failed) return;

			}
			break;
		case 102:
			DebugEnterAlt(102);
			// SugarCpp.g:1:724: INDENT
			{
			DebugLocation(1, 724);
			mINDENT(); if (state.failed) return;

			}
			break;
		case 103:
			DebugEnterAlt(103);
			// SugarCpp.g:1:731: DEDENT
			{
			DebugLocation(1, 731);
			mDEDENT(); if (state.failed) return;

			}
			break;

		}

	}

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 107);
		TraceIn("synpred1_SugarCpp_fragment", 107);
		try
		{
			// SugarCpp.g:737:43: ( '\\\\' )
			DebugEnterAlt(1);
			// SugarCpp.g:737:44: '\\\\'
			{
			DebugLocation(737, 44);
			Match('\\'); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 107);
			LeaveRule("synpred1_SugarCpp_fragment", 107);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 108);
		TraceIn("synpred2_SugarCpp_fragment", 108);
		try
		{
			// SugarCpp.g:738:44: ( '\\\\' )
			DebugEnterAlt(1);
			// SugarCpp.g:738:45: '\\\\'
			{
			DebugLocation(738, 45);
			Match('\\'); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 108);
			LeaveRule("synpred2_SugarCpp_fragment", 108);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 109);
		TraceIn("synpred3_SugarCpp_fragment", 109);
		try
		{
			// SugarCpp.g:739:47: ( '\"' '\"' )
			DebugEnterAlt(1);
			// SugarCpp.g:739:48: '\"' '\"'
			{
			DebugLocation(739, 48);
			Match('\"'); if (state.failed) return;
			DebugLocation(739, 52);
			Match('\"'); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 109);
			LeaveRule("synpred3_SugarCpp_fragment", 109);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	DFA35 dfa35;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa35 = new DFA35(this, SpecialStateTransition35);
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x1\xFFFF\x1\x32\x1\x34\x1\x37\x2\xFFFF\x1\x3B\x1\x3E\x1\xFFFF\x1\x42"+
			"\x1\x45\x1\x49\x1\x4C\x1\xFFFF\x1\x50\x1\x53\x1\x56\x1\x58\x1\x59\x2"+
			"\xFFFF\x1\x5D\x1\xFFFF\x10\x29\x1\x81\x7\xFFFF\x1\x82\x11\xFFFF\x1\x84"+
			"\xC\xFFFF\x1\x86\x6\xFFFF\x1\x88\x8\xFFFF\x1\x29\x1\x8A\x1\x8B\x9\x29"+
			"\x1\x96\x1\x29\x1\x98\x1\x9A\x6\x29\x1\xA2\x4\x29\x1\xA7\x5\x29\xA\xFFFF"+
			"\x1\xB1\x2\xFFFF\x9\x29\x1\xBB\x1\xFFFF\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF"+
			"\x1\xBE\x4\x29\x1\xC3\x1\xC4\x1\xFFFF\x4\x29\x1\xFFFF\x1\xC9\x6\x29\x3"+
			"\xFFFF\x1\xD1\x5\x29\x1\xD7\x1\xD8\x1\x29\x1\xFFFF\x1\x29\x1\xDB\x1\xFFFF"+
			"\x1\xDC\x1\xDD\x2\x29\x2\xFFFF\x3\x29\x1\xE3\x1\xFFFF\x1\xE4\x3\x29\x1"+
			"\xE8\x2\x29\x1\xFFFF\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\x29\x2\xFFFF\x2\x29"+
			"\x3\xFFFF\x1\xF2\x4\x29\x2\xFFFF\x1\x29\x1\xF8\x1\xF9\x1\xFFFF\x1\xFA"+
			"\x1\xFB\x4\xFFFF\x1\xFC\x1\x29\x1\xFE\x1\xFFFF\x1\x29\x1\x100\x1\x101"+
			"\x1\x102\x1\x103\x5\xFFFF\x1\x104\x1\xFFFF\x1\x29\x5\xFFFF\x1\x29\x1"+
			"\x107\x1\xFFFF";
		private const string DFA35_eofS =
			"\x108\xFFFF";
		private const string DFA35_minS =
			"\x1\xA\x2\x3D\x1\x26\x2\xFFFF\x1\x3D\x1\x2B\x1\xFFFF\x1\x2D\x2\x2A\x1"+
			"\x3A\x1\xFFFF\x1\x2D\x3\x3D\x1\x22\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x6E\x1"+
			"\x79\x1\x61\x1\x65\x1\x6C\x1\x69\x1\x66\x1\x65\x2\x61\x1\x72\x1\x65\x1"+
			"\x74\x1\x68\x1\x6E\x1\x68\x1\x3D\x7\xFFFF\x1\x9\x11\xFFFF\x1\x2A\xC\xFFFF"+
			"\x1\x3D\x6\xFFFF\x1\x3D\x8\xFFFF\x1\x64\x2\x30\x1\x73\x1\x61\x1\x6E\x1"+
			"\x66\x1\x77\x1\x73\x1\x75\x1\x6E\x1\x72\x1\x30\x1\x70\x2\x30\x1\x74\x1"+
			"\x6E\x1\x74\x1\x6D\x1\x77\x1\x74\x1\x30\x1\x74\x1\x72\x1\x69\x1\x65\x1"+
			"\x30\x1\x79\x1\x70\x1\x6C\x1\x69\x1\x65\x3\xFFFF\x1\x0\x6\xFFFF\x1\x30"+
			"\x2\xFFFF\x1\x65\x1\x63\x2\x73\x1\x65\x1\x6E\x1\x65\x1\x6D\x1\x61\x1"+
			"\x30\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x74\x1\xFFFF\x1\x30\x1\x67\x1\x70\x1"+
			"\x63\x1\x65\x2\x30\x1\xFFFF\x2\x75\x1\x74\x1\x6E\x1\xFFFF\x1\x30\x2\x65"+
			"\x1\x69\x2\x6E\x1\x6C\x3\xFFFF\x1\x30\x1\x68\x1\x73\x1\x74\x1\x72\x1"+
			"\x74\x2\x30\x1\x6C\x1\xFFFF\x1\x72\x1\x30\x1\xFFFF\x2\x30\x1\x68\x1\x73"+
			"\x2\xFFFF\x1\x72\x2\x63\x1\x30\x1\xFFFF\x1\x30\x1\x73\x1\x6C\x1\x67\x1"+
			"\x30\x2\x65\x1\xFFFF\x4\x30\x1\x6F\x2\xFFFF\x1\x6C\x1\x74\x3\xFFFF\x1"+
			"\x30\x1\x70\x1\x6E\x1\x74\x1\x68\x2\xFFFF\x1\x73\x2\x30\x1\xFFFF\x2\x30"+
			"\x4\xFFFF\x1\x30\x1\x79\x1\x30\x1\xFFFF\x1\x61\x4\x30\x5\xFFFF\x1\x30"+
			"\x1\xFFFF\x1\x63\x5\xFFFF\x1\x65\x1\x30\x1\xFFFF";
		private const string DFA35_maxS =
			"\x1\x7E\x3\x3D\x2\xFFFF\x2\x3D\x1\xFFFF\x1\x3E\x1\x2E\x2\x3D\x1\xFFFF"+
			"\x1\x3D\x2\x3E\x1\x3D\x1\x22\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x73\x1\x79\x2"+
			"\x6F\x1\x6E\x1\x6F\x1\x73\x1\x6F\x1\x61\x1\x6F\x1\x72\x1\x65\x1\x77\x1"+
			"\x79\x1\x73\x1\x68\x1\x7C\x7\xFFFF\x1\x20\x11\xFFFF\x1\x2A\xC\xFFFF\x1"+
			"\x3D\x6\xFFFF\x1\x3D\x8\xFFFF\x1\x64\x2\x7A\x1\x74\x1\x61\x1\x6E\x1\x66"+
			"\x1\x77\x1\x73\x1\x75\x1\x6E\x1\x72\x1\x7A\x1\x70\x2\x7A\x1\x74\x1\x6F"+
			"\x1\x74\x1\x6D\x1\x77\x1\x74\x1\x7A\x1\x74\x1\x72\x1\x69\x1\x65\x1\x7A"+
			"\x1\x79\x1\x70\x1\x74\x2\x69\x3\xFFFF\x1\x0\x6\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x65\x1\x63\x2\x73\x1\x65\x1\x6E\x1\x65\x1\x6D\x1\x61\x1\x7A\x1\xFFFF"+
			"\x1\x6F\x1\xFFFF\x1\x74\x1\xFFFF\x1\x7A\x1\x67\x1\x70\x1\x63\x1\x65\x2"+
			"\x7A\x1\xFFFF\x2\x75\x1\x74\x1\x6E\x1\xFFFF\x1\x7A\x2\x65\x1\x69\x1\x6E"+
			"\x1\x72\x1\x6C\x3\xFFFF\x1\x7A\x1\x68\x1\x73\x1\x74\x1\x72\x1\x74\x2"+
			"\x7A\x1\x6C\x1\xFFFF\x1\x72\x1\x7A\x1\xFFFF\x2\x7A\x1\x68\x1\x73\x2\xFFFF"+
			"\x1\x72\x2\x63\x1\x7A\x1\xFFFF\x1\x7A\x1\x73\x1\x6C\x1\x67\x1\x7A\x2"+
			"\x65\x1\xFFFF\x4\x7A\x1\x6F\x2\xFFFF\x1\x6C\x1\x74\x3\xFFFF\x1\x7A\x1"+
			"\x70\x1\x6E\x1\x74\x1\x68\x2\xFFFF\x1\x73\x2\x7A\x1\xFFFF\x2\x7A\x4\xFFFF"+
			"\x1\x7A\x1\x79\x1\x7A\x1\xFFFF\x1\x61\x4\x7A\x5\xFFFF\x1\x7A\x1\xFFFF"+
			"\x1\x63\x5\xFFFF\x1\x65\x1\x7A\x1\xFFFF";
		private const string DFA35_acceptS =
			"\x4\xFFFF\x1\x8\x1\x9\x2\xFFFF\x1\xF\x4\xFFFF\x1\x1C\x5\xFFFF\x1\x2C"+
			"\x1\x2D\x1\xFFFF\x1\x30\x11\xFFFF\x1\x5B\x1\x5D\x1\x5E\x1\x5F\x1\x62"+
			"\x1\x63\x1\x64\x1\xFFFF\x1\x65\x1\x2\x1\x1\x1\x4\x1\x3\x1\x5\x1\x7\x1"+
			"\x6\x1\x8\x1\x9\x1\xB\x1\xA\x1\xD\x1\xE\x1\xC\x1\x11\x1\x12\x1\xFFFF"+
			"\x1\x10\x1\x16\x1\x5C\x1\x15\x1\x18\x1\x60\x1\x61\x1\x17\x1\x1A\x1\x1B"+
			"\x1\x19\x1\x1E\x1\xFFFF\x1\x21\x1\x1D\x1\x23\x1\x24\x1\x22\x1\x26\x1"+
			"\xFFFF\x1\x25\x1\x2A\x1\x29\x1\x2B\x1\x2C\x1\x2D\x1\x2F\x1\x2E\x21\xFFFF"+
			"\x1\x59\x1\x5A\x1\x58\x1\xFFFF\x1\x14\x1\x13\x1\x20\x1\x1F\x1\x28\x1"+
			"\x27\x1\xFFFF\x1\x32\x1\x33\xA\xFFFF\x1\x3E\x1\xFFFF\x1\x40\x1\xFFFF"+
			"\x1\x41\x7\xFFFF\x1\x4A\x4\xFFFF\x1\x4F\x7\xFFFF\x1\x66\x1\x67\x1\x31"+
			"\x9\xFFFF\x1\x3D\x2\xFFFF\x1\x43\x4\xFFFF\x1\x48\x1\x49\x4\xFFFF\x1\x50"+
			"\x7\xFFFF\x1\x34\x5\xFFFF\x1\x3A\x1\x3B\x2\xFFFF\x1\x42\x1\x44\x1\x45"+
			"\x5\xFFFF\x1\x4E\x1\x51\x3\xFFFF\x1\x55\x2\xFFFF\x1\x35\x1\x36\x1\x37"+
			"\x1\x38\x3\xFFFF\x1\x46\x5\xFFFF\x1\x53\x1\x54\x1\x56\x1\x57\x1\x39\x1"+
			"\xFFFF\x1\x3F\x1\xFFFF\x1\x4B\x1\x4C\x1\x4D\x1\x52\x1\x3C\x2\xFFFF\x1"+
			"\x47";
		private const string DFA35_specialS =
			"\x82\xFFFF\x1\x0\x85\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x2F\x2\xFFFF\x1\x2E\x12\xFFFF\x1\x30\x1\x1\x1\x2B\x2\xFFFF\x1\x2"+
				"\x1\x3\x1\x2B\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\xA\x2A"+
				"\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1A\x29\x1\x13\x1\xFFFF"+
				"\x1\x14\x1\x15\x1\x29\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C"+
				"\x2\x29\x1\x1D\x2\x29\x1\x1E\x1\x1F\x1\x20\x1\x21\x2\x29\x1\x22\x1\x23"+
				"\x1\x24\x1\x25\x1\x29\x1\x26\x3\x29\x1\x2C\x1\x27\x1\x2D\x1\x28",
				"\x1\x31",
				"\x1\x33",
				"\x1\x35\x16\xFFFF\x1\x36",
				"",
				"",
				"\x1\x3A",
				"\x1\x3C\x11\xFFFF\x1\x3D",
				"",
				"\x1\x3F\xF\xFFFF\x1\x40\x1\x41",
				"\x1\x43\x3\xFFFF\x1\x44",
				"\x1\x47\x4\xFFFF\x1\x48\xD\xFFFF\x1\x46",
				"\x1\x4A\x2\xFFFF\x1\x4B",
				"",
				"\x1\x4D\xE\xFFFF\x1\x4E\x1\x4F",
				"\x1\x51\x1\x52",
				"\x1\x54\x1\x55",
				"\x1\x57",
				"\x1\x2B",
				"",
				"",
				"\x1\x5C",
				"",
				"\x1\x5E\x4\xFFFF\x1\x5F",
				"\x1\x60",
				"\x1\x61\xA\xFFFF\x1\x62\x2\xFFFF\x1\x63",
				"\x1\x64\x9\xFFFF\x1\x65",
				"\x1\x66\x1\xFFFF\x1\x67",
				"\x1\x68\x5\xFFFF\x1\x69",
				"\x1\x6A\x6\xFFFF\x1\x6B\x1\x6C\x4\xFFFF\x1\x6D",
				"\x1\x6E\x9\xFFFF\x1\x6F",
				"\x1\x70",
				"\x1\x71\x3\xFFFF\x1\x72\x9\xFFFF\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\x1\x76\x2\xFFFF\x1\x77",
				"\x1\x78\x6\xFFFF\x1\x79\x2\xFFFF\x1\x7A\x6\xFFFF\x1\x7B",
				"\x1\x7C\x4\xFFFF\x1\x7D",
				"\x1\x7E",
				"\x1\x7F\x3E\xFFFF\x1\x80",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x2\x2E\x2\xFFFF\x1\x2E\x12\xFFFF\x1\x2E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x83",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x85",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x87",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x89",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x8C\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"\x1\x95",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x97",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\xD\x29\x1\x99\xC"+
				"\x29",
				"\x1\x9B",
				"\x1\x9C\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\xA1",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xA3",
				"\x1\xA4",
				"\x1\xA5",
				"\x1\xA6",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xA8",
				"\x1\xA9",
				"\x1\xAA\x7\xFFFF\x1\xAB",
				"\x1\xAC",
				"\x1\xAD\x3\xFFFF\x1\xAE",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"",
				"\x1\xB2",
				"\x1\xB3",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xBC",
				"",
				"\x1\xBD",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xBF",
				"\x1\xC0",
				"\x1\xC1",
				"\x1\xC2",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xCA",
				"\x1\xCB",
				"\x1\xCC",
				"\x1\xCD",
				"\x1\xCE\x3\xFFFF\x1\xCF",
				"\x1\xD0",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xD2",
				"\x1\xD3",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xD9",
				"",
				"\x1\xDA",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xDE",
				"\x1\xDF",
				"",
				"",
				"\x1\xE0",
				"\x1\xE1",
				"\x1\xE2",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xE5",
				"\x1\xE6",
				"\x1\xE7",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xE9",
				"\x1\xEA",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xEF",
				"",
				"",
				"\x1\xF0",
				"\x1\xF1",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xF3",
				"\x1\xF4",
				"\x1\xF5",
				"\x1\xF6",
				"",
				"",
				"\x1\xF7",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xFD",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xFF",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\x105",
				"",
				"",
				"",
				"",
				"",
				"\x1\x106",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | T__147 | T__148 | T__149 | T__150 | T__151 | T__152 | T__153 | T__154 | T__155 | T__156 | T__157 | T__158 | T__159 | T__160 | T__161 | T__162 | T__163 | T__164 | T__165 | T__166 | T__167 | T__168 | T__169 | T__170 | T__171 | T__172 | DOT_DOT | IDENT | NUMBER | STRING | Comment | LineComment | Left_Bracket | Right_Bracket | NEWLINE | White_Space | INDENT | DEDENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition35(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA35_130 = input.LA(1);


				int index35_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((!(((0==1))))) {s = 46;}

				else if (((0==1))) {s = 175;}

				else if (((0==1))) {s = 176;}


				input.Seek(index35_130);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 35, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  SugarCpp.Compiler 
