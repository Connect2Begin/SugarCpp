//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-16 13:11:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Switch=62;
	public const int Stmt_Try=63;
	public const int Stmt_Typedef=64;
	public const int Stmt_Unless=65;
	public const int Stmt_Until=66;
	public const int Stmt_Using=67;
	public const int Stmt_While=68;
	public const int Switch_Item=69;
	public const int Type_Array=70;
	public const int Type_Ident=71;
	public const int Type_Ref=72;
	public const int Type_Star=73;
	public const int Type_Template=74;
	public const int White_Space=75;
	public const int DOUBLE=159;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:32:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(32, 1);
		try
		{
			// SugarWalker.g:33:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:33:4: ^( Root a= global_block )
			{
			DebugLocation(33, 4);
			DebugLocation(33, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(33, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(34, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:39:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(39, 1);
		try
		{
			// SugarWalker.g:44:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:44:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(44, 4);
			DebugLocation(44, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(44, 19);
				// SugarWalker.g:44:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==102))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:44:20: a= node
						{
						DebugLocation(44, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(44, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:47:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(47, 1);
		try
		{
			// SugarWalker.g:52:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 102:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:52:4: a= func_def
				{
				DebugLocation(52, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(52, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:53:4: b= import_def
				{
				DebugLocation(53, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(53, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:54:4: c= enum_def
				{
				DebugLocation(54, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(54, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:55:4: d= class_def
				{
				DebugLocation(55, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(55, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:56:4: e= global_alloc
				{
				DebugLocation(56, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(56, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:57:4: f= global_using
				{
				DebugLocation(57, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(57, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:58:4: g= global_typedef
				{
				DebugLocation(58, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(58, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:59:4: h= namespace_def
				{
				DebugLocation(59, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(59, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:62:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(62, 1);
		try
		{
			// SugarWalker.g:67:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:67:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(67, 4);
			DebugLocation(67, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(67, 17);
				// SugarWalker.g:67:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:67:18: attr= attribute
					{
					DebugLocation(67, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(67, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(67, 65);
				// SugarWalker.g:67:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==140))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:67:67: a= ident
						{
						DebugLocation(67, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(67, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:68:22: b= 'namespace'
						{
						DebugLocation(68, 23);
						b=(CommonTree)Match(input,140,Follow._140_in_global_using281); 
						DebugLocation(68, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:71:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(71, 1);
		try
		{
			// SugarWalker.g:76:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt10 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt10 = 2;
				}
				break;
			case 102:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:76:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(76, 4);
				DebugLocation(76, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(76, 23);
				// SugarWalker.g:76:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:76:24: attr= attribute
					{
					DebugLocation(76, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(76, 42);
				PushFollow(Follow._type_name_in_global_alloc318);
				a=type_name();
				PopFollow();

				DebugLocation(76, 54);
				PushFollow(Follow._ident_list_in_global_alloc322);
				b=ident_list();
				PopFollow();

				DebugLocation(76, 66);
				// SugarWalker.g:76:66: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Tuple)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==79||LA6_0==82||LA6_0==86||LA6_0==89||LA6_0==93||LA6_0==99||LA6_0==102||LA6_0==106||LA6_0==108||LA6_0==114||LA6_0==117||LA6_0==121||LA6_0==156||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:76:67: c= expr_list
					{
					DebugLocation(76, 68);
					PushFollow(Follow._expr_list_in_global_alloc327);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(77, 2);

						if (c != null)
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Equal));
						}
						else
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Declare));
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:87:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(87, 4);
				DebugLocation(87, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc339); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(87, 25);
				// SugarWalker.g:87:25: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:87:26: attr= attribute
					{
					DebugLocation(87, 30);
					PushFollow(Follow._attribute_in_global_alloc344);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(87, 44);
				PushFollow(Follow._type_name_in_global_alloc350);
				a=type_name();
				PopFollow();

				DebugLocation(87, 56);
				PushFollow(Follow._ident_list_in_global_alloc354);
				b=ident_list();
				PopFollow();

				DebugLocation(87, 68);
				// SugarWalker.g:87:68: (c= expr_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>=Expr_Access && LA8_0<=Expr_Tuple)||LA8_0==IDENT||LA8_0==Match_Tuple||LA8_0==NUMBER||LA8_0==STRING||LA8_0==79||LA8_0==82||LA8_0==86||LA8_0==89||LA8_0==93||LA8_0==99||LA8_0==102||LA8_0==106||LA8_0==108||LA8_0==114||LA8_0==117||LA8_0==121||LA8_0==156||LA8_0==DOUBLE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:87:69: c= expr_list
					{
					DebugLocation(87, 70);
					PushFollow(Follow._expr_list_in_global_alloc359);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(88, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Bracket));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:91:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(91, 4);
				DebugLocation(91, 6);
				Match(input,102,Follow._102_in_global_alloc371); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(91, 11);
				// SugarWalker.g:91:11: (attr= attribute )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:91:12: attr= attribute
					{
					DebugLocation(91, 16);
					PushFollow(Follow._attribute_in_global_alloc376);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(91, 30);
				PushFollow(Follow._ident_list_in_global_alloc382);
				d=ident_list();
				PopFollow();

				DebugLocation(91, 43);
				PushFollow(Follow._expr_list_in_global_alloc386);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(92, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:102:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(102, 1);
		try
		{
			// SugarWalker.g:103:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:103:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(103, 4);
			DebugLocation(103, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef406); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(103, 19);
			// SugarWalker.g:103:19: (attr= attribute )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Attribute))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:103:20: attr= attribute
				{
				DebugLocation(103, 24);
				PushFollow(Follow._attribute_in_global_typedef411);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(103, 38);
			PushFollow(Follow._type_name_in_global_typedef417);
			a=type_name();
			PopFollow();

			DebugLocation(103, 50);
			PushFollow(Follow._ident_in_global_typedef421);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(104, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:110:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(110, 1);
		try
		{
			// SugarWalker.g:111:2: (a= NUMBER |a= STRING |b= ident )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt12 = 1;
				}
				break;
			case STRING:
				{
				alt12 = 2;
				}
				break;
			case IDENT:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:111:4: a= NUMBER
				{
				DebugLocation(111, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args442); 
				DebugLocation(112, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:115:4: a= STRING
				{
				DebugLocation(115, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args452); 
				DebugLocation(116, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:119:4: b= ident
				{
				DebugLocation(119, 5);
				PushFollow(Follow._ident_in_attribute_args462);
				b=ident();
				PopFollow();

				DebugLocation(120, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:125:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(125, 1);
		try
		{
			// SugarWalker.g:130:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:130:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(130, 4);
			DebugLocation(130, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item486); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(130, 16);
			// SugarWalker.g:130:16: (a= ident |c= 'const' )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==IDENT))
			{
				alt13 = 1;
			}
			else if ((LA13_0==128))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:130:17: a= ident
				{
				DebugLocation(130, 18);
				PushFollow(Follow._ident_in_attribute_item491);
				a=ident();
				PopFollow();

				DebugLocation(130, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:130:48: c= 'const'
				{
				DebugLocation(130, 49);
				c=(CommonTree)Match(input,128,Follow._128_in_attribute_item499); 
				DebugLocation(130, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(130, 86);
			// SugarWalker.g:130:86: (b= attribute_args )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENT||LA14_0==NUMBER||LA14_0==STRING))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:130:87: b= attribute_args
					{
					DebugLocation(130, 88);
					PushFollow(Follow._attribute_args_in_attribute_item507);
					b=attribute_args();
					PopFollow();

					DebugLocation(130, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:133:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(133, 1);
		try
		{
			// SugarWalker.g:138:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:138:4: (a= attribute_item )+
			{
			DebugLocation(138, 4);
			// SugarWalker.g:138:4: (a= attribute_item )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Attribute))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:138:5: a= attribute_item
					{
					DebugLocation(138, 6);
					PushFollow(Follow._attribute_item_in_attribute535);
					a=attribute_item();
					PopFollow();

					DebugLocation(138, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:141:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(141, 1);
		try
		{
			// SugarWalker.g:142:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:142:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(142, 4);
			DebugLocation(142, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def556); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(142, 17);
			PushFollow(Follow._ident_in_namespace_def560);
			a=ident();
			PopFollow();

			DebugLocation(142, 24);
			// SugarWalker.g:142:24: (b= global_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Global_Block))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:142:25: b= global_block
				{
				DebugLocation(142, 26);
				PushFollow(Follow._global_block_in_namespace_def565);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(143, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:148:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(148, 1);
		try
		{
			// SugarWalker.g:153:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:153:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(153, 4);
			DebugLocation(153, 6);
			Match(input,Import,Follow._Import_in_import_def592); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(153, 13);
				// SugarWalker.g:153:13: (attr= attribute )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==Attribute))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:153:14: attr= attribute
					{
					DebugLocation(153, 18);
					PushFollow(Follow._attribute_in_import_def597);
					attr=attribute();
					PopFollow();

					DebugLocation(153, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(153, 61);
				// SugarWalker.g:153:61: (a= STRING )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==STRING))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:153:62: a= STRING
						{
						DebugLocation(153, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def607); 
						DebugLocation(153, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:156:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(156, 1);
		try
		{
			// SugarWalker.g:157:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:157:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(157, 4);
			DebugLocation(157, 6);
			Match(input,Enum,Follow._Enum_in_enum_def628); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(157, 11);
			// SugarWalker.g:157:11: (attr= attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Attribute))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:157:12: attr= attribute
				{
				DebugLocation(157, 16);
				PushFollow(Follow._attribute_in_enum_def633);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(157, 30);
			PushFollow(Follow._ident_in_enum_def639);
			a=ident();
			PopFollow();

			DebugLocation(157, 38);
			PushFollow(Follow._ident_list_in_enum_def643);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(158, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:163:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(163, 1);
		try
		{
			// SugarWalker.g:164:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:164:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(164, 4);
			DebugLocation(164, 6);
			Match(input,Class,Follow._Class_in_class_def663); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(164, 12);
			// SugarWalker.g:164:12: (attr= attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Attribute))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:164:13: attr= attribute
				{
				DebugLocation(164, 17);
				PushFollow(Follow._attribute_in_class_def668);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(164, 31);
			PushFollow(Follow._ident_in_class_def674);
			a=ident();
			PopFollow();

			DebugLocation(164, 38);
			// SugarWalker.g:164:38: (b= generic_parameter )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Generic_Patameters))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:164:39: b= generic_parameter
				{
				DebugLocation(164, 40);
				PushFollow(Follow._generic_parameter_in_class_def679);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(164, 61);
			// SugarWalker.g:164:61: (c= func_args )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Func_Args))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:164:62: c= func_args
				{
				DebugLocation(164, 63);
				PushFollow(Follow._func_args_in_class_def686);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(164, 76);
			// SugarWalker.g:164:76: (d= ident_list )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Ident_List))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:164:77: d= ident_list
				{
				DebugLocation(164, 78);
				PushFollow(Follow._ident_list_in_class_def693);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(164, 92);
			// SugarWalker.g:164:92: (e= global_block )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Global_Block))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:164:93: e= global_block
				{
				DebugLocation(164, 94);
				PushFollow(Follow._global_block_in_class_def700);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(165, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:170:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' )? ( 'unsigned' )? a= ident ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(170, 1);
		try
		{
			// SugarWalker.g:175:2: ( ^( Type_Ident ( 'const' )? ( 'unsigned' )? a= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:175:4: ^( Type_Ident ( 'const' )? ( 'unsigned' )? a= ident )
			{
			DebugLocation(175, 4);
			DebugLocation(175, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident727); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(175, 17);
			// SugarWalker.g:175:17: ( 'const' )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==128))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:175:18: 'const'
				{
				DebugLocation(175, 18);
				Match(input,128,Follow._128_in_type_ident730); 
				DebugLocation(175, 26);
				type+="const";

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(175, 45);
			// SugarWalker.g:175:45: ( 'unsigned' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==150))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:175:46: 'unsigned'
				{
				DebugLocation(175, 46);
				Match(input,150,Follow._150_in_type_ident737); 
				DebugLocation(175, 57);
				type+="unsigned";

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(175, 80);
			PushFollow(Follow._ident_in_type_ident745);
			a=ident();
			PopFollow();

			DebugLocation(175, 87);
			type+=a;

			Match(input, TokenTypes.Up, null); 

			DebugLocation(176, 2);

					value = new IdentType(type);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:181:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(181, 1);
		try
		{
			// SugarWalker.g:186:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:186:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(186, 4);
			DebugLocation(186, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template772); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(186, 21);
			PushFollow(Follow._type_name_in_type_template776);
			a=type_name();
			PopFollow();

			DebugLocation(186, 32);
			// SugarWalker.g:186:32: (b= type_name )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if (((LA27_0>=Type_Array && LA27_0<=Type_Template)))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:186:33: b= type_name
					{
					DebugLocation(186, 34);
					PushFollow(Follow._type_name_in_type_template781);
					b=type_name();
					PopFollow();

					DebugLocation(186, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(187, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:192:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(192, 1);
		try
		{
			// SugarWalker.g:197:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:197:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(197, 4);
			DebugLocation(197, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array810); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(197, 18);
			PushFollow(Follow._type_name_in_type_array814);
			a=type_name();
			PopFollow();

			DebugLocation(197, 29);
			// SugarWalker.g:197:29: (b= expr )+
			int cnt28=0;
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>=Expr_Access && LA28_0<=Expr_Tuple)||LA28_0==IDENT||LA28_0==Match_Tuple||LA28_0==NUMBER||LA28_0==STRING||LA28_0==79||LA28_0==82||LA28_0==86||LA28_0==89||LA28_0==93||LA28_0==99||LA28_0==102||LA28_0==106||LA28_0==108||LA28_0==114||LA28_0==117||LA28_0==121||LA28_0==156||LA28_0==DOUBLE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:197:30: b= expr
					{
					DebugLocation(197, 31);
					PushFollow(Follow._expr_in_type_array819);
					b=expr();
					PopFollow();

					DebugLocation(197, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt28 >= 1)
						goto loop28;

					EarlyExitException eee28 = new EarlyExitException( 28, input );
					DebugRecognitionException(eee28);
					throw eee28;
				}
				cnt28++;
			}
			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(198, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:203:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(203, 1);
		try
		{
			// SugarWalker.g:204:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:204:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(204, 4);
			DebugLocation(204, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star843); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(204, 17);
			PushFollow(Follow._type_name_in_type_star847);
			a=type_name();
			PopFollow();

			DebugLocation(204, 28);
			Match(input,85,Follow._85_in_type_star849); 
			DebugLocation(204, 32);
			 value = new StarType(a); 
			DebugLocation(204, 62);
			// SugarWalker.g:204:62: ( '*' )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==85))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:204:63: '*'
					{
					DebugLocation(204, 63);
					Match(input,85,Follow._85_in_type_star854); 
					DebugLocation(204, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:208:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(208, 1);
		try
		{
			// SugarWalker.g:209:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:209:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(209, 4);
			DebugLocation(209, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref876); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(209, 16);
			PushFollow(Follow._type_name_in_type_ref880);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(210, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:215:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 19);
		TraceIn("type_name", 19);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(215, 1);
		try
		{
			// SugarWalker.g:216:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident )
			int alt30=5;
			try { DebugEnterDecision(30, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt30 = 1;
				}
				break;
			case Type_Ref:
				{
				alt30 = 2;
				}
				break;
			case Type_Star:
				{
				alt30 = 3;
				}
				break;
			case Type_Template:
				{
				alt30 = 4;
				}
				break;
			case Type_Ident:
				{
				alt30 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:216:4: a= type_array
				{
				DebugLocation(216, 5);
				PushFollow(Follow._type_array_in_type_name901);
				a=type_array();
				PopFollow();

				DebugLocation(216, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:217:4: a= type_ref
				{
				DebugLocation(217, 5);
				PushFollow(Follow._type_ref_in_type_name910);
				a=type_ref();
				PopFollow();

				DebugLocation(217, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:218:4: a= type_star
				{
				DebugLocation(218, 5);
				PushFollow(Follow._type_star_in_type_name919);
				a=type_star();
				PopFollow();

				DebugLocation(218, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:219:4: a= type_template
				{
				DebugLocation(219, 5);
				PushFollow(Follow._type_template_in_type_name928);
				a=type_template();
				PopFollow();

				DebugLocation(219, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:220:4: a= type_ident
				{
				DebugLocation(220, 5);
				PushFollow(Follow._type_ident_in_type_name937);
				a=type_ident();
				PopFollow();

				DebugLocation(220, 17);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 19);
			LeaveRule("type_name", 19);
			LeaveRule_type_name();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:223:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(223, 1);
		try
		{
			// SugarWalker.g:228:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:228:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(228, 4);
			DebugLocation(228, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args960); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(228, 16);
				// SugarWalker.g:228:16: (a= alloc_expr )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if (((LA31_0>=Expr_Alloc_Bracket && LA31_0<=Expr_Alloc_Equal)))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:228:17: a= alloc_expr
						{
						DebugLocation(228, 18);
						PushFollow(Follow._alloc_expr_in_func_args965);
						a=alloc_expr();
						PopFollow();

						DebugLocation(229, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:234:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 21);
		TraceIn("generic_parameter", 21);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:239:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:239:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(239, 4);
			DebugLocation(239, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter992); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(239, 25);
				// SugarWalker.g:239:25: (a= ident )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==IDENT))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:239:26: a= ident
						{
						DebugLocation(239, 27);
						PushFollow(Follow._ident_in_generic_parameter997);
						a=ident();
						PopFollow();

						DebugLocation(239, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 21);
			LeaveRule("generic_parameter", 21);
			LeaveRule_generic_parameter();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:242:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(242, 1);
		try
		{
			// SugarWalker.g:247:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:247:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(247, 4);
			DebugLocation(247, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1023); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(247, 15);
			// SugarWalker.g:247:15: (attr= attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Attribute))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:247:16: attr= attribute
				{
				DebugLocation(247, 20);
				PushFollow(Follow._attribute_in_func_def1028);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(247, 33);
			// SugarWalker.g:247:33: (a= type_name )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if (((LA34_0>=Type_Array && LA34_0<=Type_Template)))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:247:34: a= type_name
				{
				DebugLocation(247, 35);
				PushFollow(Follow._type_name_in_func_def1035);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(247, 48);
			// SugarWalker.g:247:48: (deconstructor= '~' )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==158))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:247:49: deconstructor= '~'
				{
				DebugLocation(247, 62);
				deconstructor=(CommonTree)Match(input,158,Follow._158_in_func_def1042); 

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(247, 70);
			PushFollow(Follow._ident_in_func_def1048);
			b=ident();
			PopFollow();

			DebugLocation(247, 77);
			// SugarWalker.g:247:77: (x= generic_parameter )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==Generic_Patameters))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:247:78: x= generic_parameter
				{
				DebugLocation(247, 79);
				PushFollow(Follow._generic_parameter_in_func_def1053);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(247, 101);
			// SugarWalker.g:247:101: (args= func_args )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==Func_Args))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:247:102: args= func_args
				{
				DebugLocation(247, 106);
				PushFollow(Follow._func_args_in_func_def1061);
				args=func_args();
				PopFollow();

				DebugLocation(247, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(248, 2);
			// SugarWalker.g:248:2: (e= stmt_block |f= expr )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Stmt_Block))
			{
				alt38 = 1;
			}
			else if (((LA38_0>=Expr_Access && LA38_0<=Expr_Tuple)||LA38_0==IDENT||LA38_0==Match_Tuple||LA38_0==NUMBER||LA38_0==STRING||LA38_0==79||LA38_0==82||LA38_0==86||LA38_0==89||LA38_0==93||LA38_0==99||LA38_0==102||LA38_0==106||LA38_0==108||LA38_0==114||LA38_0==117||LA38_0==121||LA38_0==156||LA38_0==DOUBLE))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:4: e= stmt_block
				{
				DebugLocation(248, 5);
				PushFollow(Follow._stmt_block_in_func_def1072);
				e=stmt_block();
				PopFollow();

				DebugLocation(249, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:263:4: f= expr
				{
				DebugLocation(263, 5);
				PushFollow(Follow._expr_in_func_def1082);
				f=expr();
				PopFollow();

				DebugLocation(264, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:290:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 23);
		TraceIn("stmt_block", 23);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(290, 4);
		try
		{
			// SugarWalker.g:295:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:295:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(295, 4);
			DebugLocation(295, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1110); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(295, 17);
				// SugarWalker.g:295:17: (a= stmt )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_0 = input.LA(1);

					if (((LA39_0>=Expr_Access && LA39_0<=Expr_Tuple)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||(LA39_0>=Stmt_Defer && LA39_0<=Stmt_While)||LA39_0==79||LA39_0==82||LA39_0==86||LA39_0==89||LA39_0==93||LA39_0==99||LA39_0==102||LA39_0==106||LA39_0==108||LA39_0==114||(LA39_0>=116 && LA39_0<=117)||LA39_0==121||LA39_0==156||LA39_0==DOUBLE))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:295:18: a= stmt
						{
						DebugLocation(295, 19);
						PushFollow(Follow._stmt_in_stmt_block1115);
						a=stmt();
						PopFollow();

						DebugLocation(295, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 23);
			LeaveRule("stmt_block", 23);
			LeaveRule_stmt_block();
		}
		DebugLocation(296, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:298:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 24);
		TraceIn("stmt", 24);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(298, 1);
		try
		{
			// SugarWalker.g:303:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt40=9;
			try { DebugEnterDecision(40, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 79:
			case 82:
			case 86:
			case 89:
			case 93:
			case 99:
			case 106:
			case 108:
			case 114:
			case 117:
			case 121:
			case 156:
			case DOUBLE:
				{
				alt40 = 1;
				}
				break;
			case 102:
				{
				int LA40_2 = input.LA(2);

				if ((LA40_2==DOWN))
				{
					int LA40_11 = input.LA(3);

					if (((LA40_11>=Expr_Access && LA40_11<=Expr_Tuple)||LA40_11==IDENT||LA40_11==Match_Tuple||LA40_11==NUMBER||LA40_11==STRING||LA40_11==79||LA40_11==82||LA40_11==86||LA40_11==89||LA40_11==93||LA40_11==99||LA40_11==102||LA40_11==106||LA40_11==108||LA40_11==114||LA40_11==117||LA40_11==121||LA40_11==156||LA40_11==DOUBLE))
					{
						alt40 = 1;
					}
					else if ((LA40_11==Ident_List))
					{
						alt40 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 40, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt40 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt40 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt40 = 4;
				}
				break;
			case Stmt_For:
				{
				alt40 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt40 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt40 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt40 = 8;
				}
				break;
			case 116:
				{
				alt40 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:303:4: a= stmt_expr
				{
				DebugLocation(303, 5);
				PushFollow(Follow._stmt_expr_in_stmt1146);
				a=stmt_expr();
				PopFollow();

				DebugLocation(303, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:304:4: a= stmt_return
				{
				DebugLocation(304, 5);
				PushFollow(Follow._stmt_return_in_stmt1155);
				a=stmt_return();
				PopFollow();

				DebugLocation(304, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:305:4: a= stmt_if
				{
				DebugLocation(305, 5);
				PushFollow(Follow._stmt_if_in_stmt1164);
				a=stmt_if();
				PopFollow();

				DebugLocation(305, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:306:4: a= stmt_while
				{
				DebugLocation(306, 5);
				PushFollow(Follow._stmt_while_in_stmt1173);
				a=stmt_while();
				PopFollow();

				DebugLocation(306, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:307:4: a= stmt_for
				{
				DebugLocation(307, 5);
				PushFollow(Follow._stmt_for_in_stmt1182);
				a=stmt_for();
				PopFollow();

				DebugLocation(307, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:308:4: a= stmt_try
				{
				DebugLocation(308, 5);
				PushFollow(Follow._stmt_try_in_stmt1191);
				a=stmt_try();
				PopFollow();

				DebugLocation(308, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:309:4: a= stmt_switch
				{
				DebugLocation(309, 5);
				PushFollow(Follow._stmt_switch_in_stmt1200);
				a=stmt_switch();
				PopFollow();

				DebugLocation(309, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:310:4: a= stmt_defer
				{
				DebugLocation(310, 5);
				PushFollow(Follow._stmt_defer_in_stmt1209);
				a=stmt_defer();
				PopFollow();

				DebugLocation(310, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:311:4: b= stmt_translate
				{
				DebugLocation(311, 5);
				PushFollow(Follow._stmt_translate_in_stmt1218);
				b=stmt_translate();
				PopFollow();

				DebugLocation(311, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 24);
			LeaveRule("stmt", 24);
			LeaveRule_stmt();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:314:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 25);
		TraceIn("stmt_translate", 25);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(314, 1);
		try
		{
			// SugarWalker.g:319:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==116))
			{
				alt41 = 1;
			}
			else if ((LA41_0==102))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:319:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(319, 4);
				DebugLocation(319, 6);
				Match(input,116,Follow._116_in_stmt_translate1241); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(319, 12);
				PushFollow(Follow._expr_in_stmt_translate1245);
				a=expr();
				PopFollow();

				DebugLocation(319, 19);
				PushFollow(Follow._expr_in_stmt_translate1249);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(320, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:326:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(326, 4);
				DebugLocation(326, 6);
				Match(input,102,Follow._102_in_stmt_translate1259); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(326, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1263);
				d=ident_list();
				PopFollow();

				DebugLocation(326, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1267);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(327, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 25);
			LeaveRule("stmt_translate", 25);
			LeaveRule_stmt_translate();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:337:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 26);
		TraceIn("stmt_switch_item_list", 26);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(337, 1);
		try
		{
			// SugarWalker.g:342:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:342:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(342, 4);
			// SugarWalker.g:342:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==Switch_Item))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:343:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(343, 3);
					DebugLocation(343, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1295); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(343, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1299);
					a=expr_list();
					PopFollow();

					DebugLocation(343, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1303);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(344, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 26);
			LeaveRule("stmt_switch_item_list", 26);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:350:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 27);
		TraceIn("stmt_switch", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(350, 1);
		try
		{
			// SugarWalker.g:351:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:351:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list )
			{
			DebugLocation(351, 4);
			DebugLocation(351, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1330); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(351, 18);
				// SugarWalker.g:351:18: (a= expr )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if (((LA43_0>=Expr_Access && LA43_0<=Expr_Tuple)||LA43_0==IDENT||LA43_0==Match_Tuple||LA43_0==NUMBER||LA43_0==STRING||LA43_0==79||LA43_0==82||LA43_0==86||LA43_0==89||LA43_0==93||LA43_0==99||LA43_0==102||LA43_0==106||LA43_0==108||LA43_0==114||LA43_0==117||LA43_0==121||LA43_0==156||LA43_0==DOUBLE))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:351:19: a= expr
					{
					DebugLocation(351, 20);
					PushFollow(Follow._expr_in_stmt_switch1335);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(351, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1341);
				b=stmt_switch_item_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(352, 2);

					value = new StmtSwitch(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 27);
			LeaveRule("stmt_switch", 27);
			LeaveRule_stmt_switch();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:357:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 28);
		TraceIn("stmt_defer", 28);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(357, 1);
		try
		{
			// SugarWalker.g:358:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==Stmt_Defer))
			{
				alt44 = 1;
			}
			else if ((LA44_0==Stmt_Finally))
			{
				alt44 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:358:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(358, 4);
				DebugLocation(358, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1361); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(358, 18);
				PushFollow(Follow._stmt_in_stmt_defer1365);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(359, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:362:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(362, 4);
				DebugLocation(362, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1375); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(362, 20);
				PushFollow(Follow._stmt_in_stmt_defer1379);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(363, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 28);
			LeaveRule("stmt_defer", 28);
			LeaveRule_stmt_defer();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:368:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 29);
		TraceIn("stmt_expr", 29);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(368, 1);
		try
		{
			// SugarWalker.g:369:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt45 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 79:
			case 82:
			case 86:
			case 89:
			case 93:
			case 99:
			case 102:
			case 106:
			case 108:
			case 114:
			case 117:
			case 121:
			case 156:
			case DOUBLE:
				{
				alt45 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:369:4: a= stmt_using
				{
				DebugLocation(369, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1400);
				a=stmt_using();
				PopFollow();

				DebugLocation(369, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:370:4: b= expr
				{
				DebugLocation(370, 5);
				PushFollow(Follow._expr_in_stmt_expr1409);
				b=expr();
				PopFollow();

				DebugLocation(370, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:371:4: c= stmt_typedef
				{
				DebugLocation(371, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1418);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(371, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 29);
			LeaveRule("stmt_expr", 29);
			LeaveRule_stmt_expr();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:374:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 30);
		TraceIn("stmt_using", 30);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(374, 1);
		try
		{
			// SugarWalker.g:379:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:379:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(379, 4);
			DebugLocation(379, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1441); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(379, 17);
				// SugarWalker.g:379:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=3;
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==IDENT))
					{
						alt46 = 1;
					}
					else if ((LA46_0==140))
					{
						alt46 = 2;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:379:19: a= ident
						{
						DebugLocation(379, 20);
						PushFollow(Follow._ident_in_stmt_using1447);
						a=ident();
						PopFollow();

						DebugLocation(379, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:380:10: b= 'namespace'
						{
						DebugLocation(380, 11);
						b=(CommonTree)Match(input,140,Follow._140_in_stmt_using1462); 
						DebugLocation(380, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 30);
			LeaveRule("stmt_using", 30);
			LeaveRule_stmt_using();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:383:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 31);
		TraceIn("stmt_typedef", 31);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(383, 1);
		try
		{
			// SugarWalker.g:384:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:384:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(384, 4);
			DebugLocation(384, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1483); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(384, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1487);
			a=type_name();
			PopFollow();

			DebugLocation(384, 32);
			PushFollow(Follow._ident_in_stmt_typedef1491);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(385, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 31);
			LeaveRule("stmt_typedef", 31);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:390:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 32);
		TraceIn("stmt_alloc", 32);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(390, 1);
		try
		{
			// SugarWalker.g:391:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:391:4: a= expr
			{
			DebugLocation(391, 5);
			PushFollow(Follow._expr_in_stmt_alloc1512);
			a=expr();
			PopFollow();

			DebugLocation(391, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 32);
			LeaveRule("stmt_alloc", 32);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:394:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 33);
		TraceIn("stmt_if", 33);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(394, 1);
		try
		{
			// SugarWalker.g:395:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==Stmt_If))
			{
				alt49 = 1;
			}
			else if ((LA49_0==Stmt_Unless))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:395:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(395, 4);
				DebugLocation(395, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1530); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(395, 15);
				PushFollow(Follow._expr_in_stmt_if1534);
				a=expr();
				PopFollow();

				DebugLocation(395, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1538);
				b=stmt_block();
				PopFollow();

				DebugLocation(395, 34);
				// SugarWalker.g:395:34: (c= stmt_block )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==Stmt_Block))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:395:35: c= stmt_block
					{
					DebugLocation(395, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1543);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(396, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:399:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(399, 4);
				DebugLocation(399, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1555); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(399, 19);
				PushFollow(Follow._expr_in_stmt_if1559);
				a=expr();
				PopFollow();

				DebugLocation(399, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1563);
				b=stmt_block();
				PopFollow();

				DebugLocation(399, 38);
				// SugarWalker.g:399:38: (c= stmt_block )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==Stmt_Block))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:399:39: c= stmt_block
					{
					DebugLocation(399, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1568);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(400, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 33);
			LeaveRule("stmt_if", 33);
			LeaveRule_stmt_if();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:405:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 34);
		TraceIn("stmt_while", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(405, 1);
		try
		{
			// SugarWalker.g:406:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt51=3;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt51 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt51 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt51 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:406:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(406, 4);
				DebugLocation(406, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1590); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(406, 18);
				PushFollow(Follow._expr_in_stmt_while1594);
				a=expr();
				PopFollow();

				DebugLocation(406, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1598);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(407, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:410:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(410, 4);
				DebugLocation(410, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1608); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(410, 18);
				PushFollow(Follow._expr_in_stmt_while1612);
				a=expr();
				PopFollow();

				DebugLocation(410, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1616);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(411, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:414:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(414, 4);
				DebugLocation(414, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1626); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(414, 16);
				// SugarWalker.g:414:16: (a= expr )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if (((LA50_0>=Expr_Access && LA50_0<=Expr_Tuple)||LA50_0==IDENT||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==79||LA50_0==82||LA50_0==86||LA50_0==89||LA50_0==93||LA50_0==99||LA50_0==102||LA50_0==106||LA50_0==108||LA50_0==114||LA50_0==117||LA50_0==121||LA50_0==156||LA50_0==DOUBLE))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:414:17: a= expr
					{
					DebugLocation(414, 18);
					PushFollow(Follow._expr_in_stmt_while1631);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(414, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1637);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(415, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 34);
			LeaveRule("stmt_while", 34);
			LeaveRule_stmt_while();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:432:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 35);
		TraceIn("for_item", 35);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(432, 1);
		try
		{
			// SugarWalker.g:433:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt54=4;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt54 = 1;
				}
				break;
			case For_Item_Down_To:
				{
				alt54 = 2;
				}
				break;
			case For_Item_Each:
				{
				alt54 = 3;
				}
				break;
			case For_Item_When:
				{
				alt54 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:433:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(433, 4);
				DebugLocation(433, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1657); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(433, 19);
				PushFollow(Follow._ident_in_for_item1661);
				a=ident();
				PopFollow();

				DebugLocation(433, 27);
				PushFollow(Follow._expr_in_for_item1665);
				b=expr();
				PopFollow();

				DebugLocation(433, 34);
				PushFollow(Follow._expr_in_for_item1669);
				c=expr();
				PopFollow();

				DebugLocation(433, 40);
				// SugarWalker.g:433:40: (d= expr )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if (((LA52_0>=Expr_Access && LA52_0<=Expr_Tuple)||LA52_0==IDENT||LA52_0==Match_Tuple||LA52_0==NUMBER||LA52_0==STRING||LA52_0==79||LA52_0==82||LA52_0==86||LA52_0==89||LA52_0==93||LA52_0==99||LA52_0==102||LA52_0==106||LA52_0==108||LA52_0==114||LA52_0==117||LA52_0==121||LA52_0==156||LA52_0==DOUBLE))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:433:41: d= expr
					{
					DebugLocation(433, 42);
					PushFollow(Follow._expr_in_for_item1674);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(434, 2);

						value = new ForItemTo(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:437:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(437, 4);
				DebugLocation(437, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1686); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(437, 24);
				PushFollow(Follow._ident_in_for_item1690);
				a=ident();
				PopFollow();

				DebugLocation(437, 32);
				PushFollow(Follow._expr_in_for_item1694);
				b=expr();
				PopFollow();

				DebugLocation(437, 39);
				PushFollow(Follow._expr_in_for_item1698);
				c=expr();
				PopFollow();

				DebugLocation(437, 45);
				// SugarWalker.g:437:45: (d= expr )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if (((LA53_0>=Expr_Access && LA53_0<=Expr_Tuple)||LA53_0==IDENT||LA53_0==Match_Tuple||LA53_0==NUMBER||LA53_0==STRING||LA53_0==79||LA53_0==82||LA53_0==86||LA53_0==89||LA53_0==93||LA53_0==99||LA53_0==102||LA53_0==106||LA53_0==108||LA53_0==114||LA53_0==117||LA53_0==121||LA53_0==156||LA53_0==DOUBLE))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:437:46: d= expr
					{
					DebugLocation(437, 47);
					PushFollow(Follow._expr_in_for_item1703);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(438, 2);

						value = new ForItemDownTo(a, b, c, d);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:441:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(441, 4);
				DebugLocation(441, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1715); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(441, 21);
				PushFollow(Follow._ident_in_for_item1719);
				a=ident();
				PopFollow();

				DebugLocation(441, 29);
				PushFollow(Follow._expr_in_for_item1723);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(442, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:445:4: ^( For_Item_When b= expr )
				{
				DebugLocation(445, 4);
				DebugLocation(445, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1733); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(445, 21);
				PushFollow(Follow._expr_in_for_item1737);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(446, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 35);
			LeaveRule("for_item", 35);
			LeaveRule_for_item();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:451:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 36);
		TraceIn("for_item_list", 36);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(451, 1);
		try
		{
			// SugarWalker.g:456:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:456:4: (a= for_item )+
			{
			DebugLocation(456, 4);
			// SugarWalker.g:456:4: (a= for_item )+
			int cnt55=0;
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=For_Item_Down_To && LA55_0<=For_Item_When)))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:456:5: a= for_item
					{
					DebugLocation(456, 6);
					PushFollow(Follow._for_item_in_for_item_list1764);
					a=for_item();
					PopFollow();

					DebugLocation(456, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt55 >= 1)
						goto loop55;

					EarlyExitException eee55 = new EarlyExitException( 55, input );
					DebugRecognitionException(eee55);
					throw eee55;
				}
				cnt55++;
			}
			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 36);
			LeaveRule("for_item_list", 36);
			LeaveRule_for_item_list();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:459:1: stmt_for returns [Stmt value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 37);
		TraceIn("stmt_for", 37);
		Stmt value = default(Stmt);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(459, 1);
		try
		{
			// SugarWalker.g:460:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:460:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(460, 4);
			DebugLocation(460, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1785); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(460, 16);
			PushFollow(Follow._for_item_list_in_stmt_for1789);
			a=for_item_list();
			PopFollow();

			DebugLocation(460, 32);
			PushFollow(Follow._stmt_block_in_stmt_for1793);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(461, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 37);
			LeaveRule("stmt_for", 37);
			LeaveRule_stmt_for();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:466:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 38);
		TraceIn("stmt_try", 38);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(466, 1);
		try
		{
			// SugarWalker.g:467:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:467:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(467, 4);
			DebugLocation(467, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1813); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(467, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1817);
			a=stmt_block();
			PopFollow();

			DebugLocation(467, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try1821);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(467, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1825);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(468, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 38);
			LeaveRule("stmt_try", 38);
			LeaveRule_stmt_try();
		}
		DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:473:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 39);
		TraceIn("stmt_return", 39);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(473, 1);
		try
		{
			// SugarWalker.g:474:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:474:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(474, 4);
			DebugLocation(474, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1845); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(474, 18);
				// SugarWalker.g:474:18: (a= expr )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=Expr_Access && LA56_0<=Expr_Tuple)||LA56_0==IDENT||LA56_0==Match_Tuple||LA56_0==NUMBER||LA56_0==STRING||LA56_0==79||LA56_0==82||LA56_0==86||LA56_0==89||LA56_0==93||LA56_0==99||LA56_0==102||LA56_0==106||LA56_0==108||LA56_0==114||LA56_0==117||LA56_0==121||LA56_0==156||LA56_0==DOUBLE))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:474:19: a= expr
					{
					DebugLocation(474, 20);
					PushFollow(Follow._expr_in_stmt_return1850);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(475, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 39);
			LeaveRule("stmt_return", 39);
			LeaveRule_stmt_return();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:480:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 40);
		TraceIn("ident", 40);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(480, 1);
		try
		{
			// SugarWalker.g:485:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:485:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(485, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1878); 
			DebugLocation(485, 12);
			 value += a.Text; 
			DebugLocation(485, 34);
			// SugarWalker.g:485:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==101))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:485:35: '::' a= IDENT
					{
					DebugLocation(485, 35);
					Match(input,101,Follow._101_in_ident1883); 
					DebugLocation(485, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1887); 
					DebugLocation(485, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 40);
			LeaveRule("ident", 40);
			LeaveRule_ident();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:488:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 41);
		TraceIn("ident_list", 41);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(488, 1);
		try
		{
			// SugarWalker.g:493:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:493:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(493, 4);
			DebugLocation(493, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1912); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(493, 17);
				// SugarWalker.g:493:17: (a= ident )*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:493:18: a= ident
						{
						DebugLocation(493, 19);
						PushFollow(Follow._ident_in_ident_list1917);
						a=ident();
						PopFollow();

						DebugLocation(493, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 41);
			LeaveRule("ident_list", 41);
			LeaveRule_ident_list();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:496:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 42);
		TraceIn("alloc_expr", 42);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(496, 1);
		try
		{
			// SugarWalker.g:497:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==Expr_Alloc_Equal))
			{
				alt61 = 1;
			}
			else if ((LA61_0==Expr_Alloc_Bracket))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:497:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(497, 4);
				DebugLocation(497, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1939); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(497, 24);
				PushFollow(Follow._type_name_in_alloc_expr1943);
				a=type_name();
				PopFollow();

				DebugLocation(497, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1947);
				b=ident_list();
				PopFollow();

				DebugLocation(497, 48);
				// SugarWalker.g:497:48: (c= expr_list )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if (((LA59_0>=Expr_Access && LA59_0<=Expr_Tuple)||LA59_0==IDENT||LA59_0==Match_Tuple||LA59_0==NUMBER||LA59_0==STRING||LA59_0==79||LA59_0==82||LA59_0==86||LA59_0==89||LA59_0==93||LA59_0==99||LA59_0==102||LA59_0==106||LA59_0==108||LA59_0==114||LA59_0==117||LA59_0==121||LA59_0==156||LA59_0==DOUBLE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:497:49: c= expr_list
					{
					DebugLocation(497, 50);
					PushFollow(Follow._expr_list_in_alloc_expr1952);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(498, 2);

						if (c != null)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:508:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(508, 4);
				DebugLocation(508, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1964); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(508, 26);
				PushFollow(Follow._type_name_in_alloc_expr1968);
				a=type_name();
				PopFollow();

				DebugLocation(508, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1972);
				b=ident_list();
				PopFollow();

				DebugLocation(508, 50);
				// SugarWalker.g:508:50: (c= expr_list )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if (((LA60_0>=Expr_Access && LA60_0<=Expr_Tuple)||LA60_0==IDENT||LA60_0==Match_Tuple||LA60_0==NUMBER||LA60_0==STRING||LA60_0==79||LA60_0==82||LA60_0==86||LA60_0==89||LA60_0==93||LA60_0==99||LA60_0==102||LA60_0==106||LA60_0==108||LA60_0==114||LA60_0==117||LA60_0==121||LA60_0==156||LA60_0==DOUBLE))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:508:51: c= expr_list
					{
					DebugLocation(508, 52);
					PushFollow(Follow._expr_list_in_alloc_expr1977);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(509, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 42);
			LeaveRule("alloc_expr", 42);
			LeaveRule_alloc_expr();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:514:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 43);
		TraceIn("expr_tuple", 43);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(514, 1);
		try
		{
			// SugarWalker.g:519:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:519:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(519, 4);
			DebugLocation(519, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2004); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(519, 17);
			// SugarWalker.g:519:17: (a= expr )+
			int cnt62=0;
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if (((LA62_0>=Expr_Access && LA62_0<=Expr_Tuple)||LA62_0==IDENT||LA62_0==Match_Tuple||LA62_0==NUMBER||LA62_0==STRING||LA62_0==79||LA62_0==82||LA62_0==86||LA62_0==89||LA62_0==93||LA62_0==99||LA62_0==102||LA62_0==106||LA62_0==108||LA62_0==114||LA62_0==117||LA62_0==121||LA62_0==156||LA62_0==DOUBLE))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:519:18: a= expr
					{
					DebugLocation(519, 19);
					PushFollow(Follow._expr_in_expr_tuple2009);
					a=expr();
					PopFollow();

					DebugLocation(519, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt62 >= 1)
						goto loop62;

					EarlyExitException eee62 = new EarlyExitException( 62, input );
					DebugRecognitionException(eee62);
					throw eee62;
				}
				cnt62++;
			}
			loop62:
				;

			} finally { DebugExitSubRule(62); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 43);
			LeaveRule("expr_tuple", 43);
			LeaveRule_expr_tuple();
		}
		DebugLocation(520, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:522:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 44);
		TraceIn("match_tuple", 44);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(522, 1);
		try
		{
			// SugarWalker.g:527:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:527:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(527, 4);
			DebugLocation(527, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2036); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(527, 18);
				// SugarWalker.g:527:18: (a= expr )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if (((LA63_0>=Expr_Access && LA63_0<=Expr_Tuple)||LA63_0==IDENT||LA63_0==Match_Tuple||LA63_0==NUMBER||LA63_0==STRING||LA63_0==79||LA63_0==82||LA63_0==86||LA63_0==89||LA63_0==93||LA63_0==99||LA63_0==102||LA63_0==106||LA63_0==108||LA63_0==114||LA63_0==117||LA63_0==121||LA63_0==156||LA63_0==DOUBLE))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:527:19: a= expr
						{
						DebugLocation(527, 20);
						PushFollow(Follow._expr_in_match_tuple2041);
						a=expr();
						PopFollow();

						DebugLocation(527, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 44);
			LeaveRule("match_tuple", 44);
			LeaveRule_match_tuple();
		}
		DebugLocation(528, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:530:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 45);
		TraceIn("expr_list", 45);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(530, 1);
		try
		{
			// SugarWalker.g:535:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:535:4: (a= expr )+
			{
			DebugLocation(535, 4);
			// SugarWalker.g:535:4: (a= expr )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if (((LA64_0>=Expr_Access && LA64_0<=Expr_Tuple)||LA64_0==IDENT||LA64_0==Match_Tuple||LA64_0==NUMBER||LA64_0==STRING||LA64_0==79||LA64_0==82||LA64_0==86||LA64_0==89||LA64_0==93||LA64_0==99||LA64_0==102||LA64_0==106||LA64_0==108||LA64_0==114||LA64_0==117||LA64_0==121||LA64_0==156||LA64_0==DOUBLE))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:535:5: a= expr
					{
					DebugLocation(535, 6);
					PushFollow(Follow._expr_in_expr_list2069);
					a=expr();
					PopFollow();

					DebugLocation(535, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 45);
			LeaveRule("expr_list", 45);
			LeaveRule_expr_list();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:538:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 46);
		TraceIn("call_expr", 46);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(538, 1);
		try
		{
			// SugarWalker.g:539:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:539:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(539, 4);
			DebugLocation(539, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2089); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(539, 17);
			PushFollow(Follow._expr_in_call_expr2093);
			a=expr();
			PopFollow();

			DebugLocation(539, 23);
			// SugarWalker.g:539:23: (b= generic_parameter )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==Generic_Patameters))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:539:24: b= generic_parameter
				{
				DebugLocation(539, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2098);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(539, 46);
			// SugarWalker.g:539:46: (c= expr_list )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if (((LA66_0>=Expr_Access && LA66_0<=Expr_Tuple)||LA66_0==IDENT||LA66_0==Match_Tuple||LA66_0==NUMBER||LA66_0==STRING||LA66_0==79||LA66_0==82||LA66_0==86||LA66_0==89||LA66_0==93||LA66_0==99||LA66_0==102||LA66_0==106||LA66_0==108||LA66_0==114||LA66_0==117||LA66_0==121||LA66_0==156||LA66_0==DOUBLE))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:539:47: c= expr_list
				{
				DebugLocation(539, 48);
				PushFollow(Follow._expr_list_in_call_expr2105);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(540, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 46);
			LeaveRule("call_expr", 46);
			LeaveRule_call_expr();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:545:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 47);
		TraceIn("dict_expr", 47);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(545, 1);
		try
		{
			// SugarWalker.g:546:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:546:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(546, 4);
			DebugLocation(546, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2127); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(546, 17);
			PushFollow(Follow._expr_in_dict_expr2131);
			a=expr();
			PopFollow();

			DebugLocation(546, 23);
			// SugarWalker.g:546:23: (b= expr_list )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if (((LA67_0>=Expr_Access && LA67_0<=Expr_Tuple)||LA67_0==IDENT||LA67_0==Match_Tuple||LA67_0==NUMBER||LA67_0==STRING||LA67_0==79||LA67_0==82||LA67_0==86||LA67_0==89||LA67_0==93||LA67_0==99||LA67_0==102||LA67_0==106||LA67_0==108||LA67_0==114||LA67_0==117||LA67_0==121||LA67_0==156||LA67_0==DOUBLE))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:546:24: b= expr_list
				{
				DebugLocation(546, 25);
				PushFollow(Follow._expr_list_in_dict_expr2136);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(547, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 47);
			LeaveRule("dict_expr", 47);
			LeaveRule_dict_expr();
		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:552:1: lambda_expr returns [ExprLambda value] : ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) );
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 48);
		TraceIn("lambda_expr", 48);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(552, 1);
		try
		{
			// SugarWalker.g:553:2: ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==Expr_Lambda))
			{
				int LA70_1 = input.LA(2);

				if ((LA70_1==DOWN))
				{
					int LA70_2 = input.LA(3);

					if ((LA70_2==94))
					{
						alt70 = 1;
					}
					else if ((LA70_2==110))
					{
						alt70 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 70, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:553:4: ^( Expr_Lambda '->' (b= func_args )? a= expr )
				{
				DebugLocation(553, 4);
				DebugLocation(553, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2158); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(553, 18);
				Match(input,94,Follow._94_in_lambda_expr2160); 
				DebugLocation(553, 23);
				// SugarWalker.g:553:23: (b= func_args )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==Func_Args))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:553:24: b= func_args
					{
					DebugLocation(553, 25);
					PushFollow(Follow._func_args_in_lambda_expr2165);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(553, 39);
				PushFollow(Follow._expr_in_lambda_expr2171);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(554, 2);

						value = new ExprLambda(a, b, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:557:4: ^( Expr_Lambda '=>' (b= func_args )? a= expr )
				{
				DebugLocation(557, 4);
				DebugLocation(557, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2181); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(557, 18);
				Match(input,110,Follow._110_in_lambda_expr2183); 
				DebugLocation(557, 23);
				// SugarWalker.g:557:23: (b= func_args )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==Func_Args))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:557:24: b= func_args
					{
					DebugLocation(557, 25);
					PushFollow(Follow._func_args_in_lambda_expr2188);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(557, 39);
				PushFollow(Follow._expr_in_lambda_expr2194);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(558, 2);

						value = new ExprLambda(a, b, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 48);
			LeaveRule("lambda_expr", 48);
			LeaveRule_lambda_expr();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:563:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 49);
		TraceIn("new_expr", 49);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(563, 1);
		try
		{
			// SugarWalker.g:564:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==Expr_New_Type))
			{
				alt72 = 1;
			}
			else if ((LA72_0==Expr_New_Array))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:564:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(564, 4);
				DebugLocation(564, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2214); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(564, 21);
				PushFollow(Follow._type_name_in_new_expr2218);
				a=type_name();
				PopFollow();

				DebugLocation(564, 33);
				// SugarWalker.g:564:33: (b= expr_list )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if (((LA71_0>=Expr_Access && LA71_0<=Expr_Tuple)||LA71_0==IDENT||LA71_0==Match_Tuple||LA71_0==NUMBER||LA71_0==STRING||LA71_0==79||LA71_0==82||LA71_0==86||LA71_0==89||LA71_0==93||LA71_0==99||LA71_0==102||LA71_0==106||LA71_0==108||LA71_0==114||LA71_0==117||LA71_0==121||LA71_0==156||LA71_0==DOUBLE))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:564:33: b= expr_list
					{
					DebugLocation(564, 33);
					PushFollow(Follow._expr_list_in_new_expr2222);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(565, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:568:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(568, 4);
				DebugLocation(568, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2233); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(568, 22);
				PushFollow(Follow._type_name_in_new_expr2237);
				a=type_name();
				PopFollow();

				DebugLocation(568, 34);
				PushFollow(Follow._expr_list_in_new_expr2241);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(569, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 49);
			LeaveRule("new_expr", 49);
			LeaveRule_new_expr();
		}
		DebugLocation(572, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:574:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 50);
		TraceIn("call_with_expr", 50);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(574, 1);
		try
		{
			// SugarWalker.g:575:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:575:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(575, 4);
			DebugLocation(575, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2261); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(575, 22);
			PushFollow(Follow._expr_in_call_with_expr2265);
			a=expr();
			PopFollow();

			DebugLocation(575, 29);
			PushFollow(Follow._ident_in_call_with_expr2269);
			b=ident();
			PopFollow();

			DebugLocation(575, 37);
			// SugarWalker.g:575:37: (c= expr_list )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if (((LA73_0>=Expr_Access && LA73_0<=Expr_Tuple)||LA73_0==IDENT||LA73_0==Match_Tuple||LA73_0==NUMBER||LA73_0==STRING||LA73_0==79||LA73_0==82||LA73_0==86||LA73_0==89||LA73_0==93||LA73_0==99||LA73_0==102||LA73_0==106||LA73_0==108||LA73_0==114||LA73_0==117||LA73_0==121||LA73_0==156||LA73_0==DOUBLE))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:575:37: c= expr_list
				{
				DebugLocation(575, 37);
				PushFollow(Follow._expr_list_in_call_with_expr2273);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(576, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 50);
			LeaveRule("call_with_expr", 50);
			LeaveRule_call_with_expr();
		}
		DebugLocation(588, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:590:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 51);
		TraceIn("cast_expr", 51);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(590, 1);
		try
		{
			// SugarWalker.g:591:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:591:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(591, 4);
			DebugLocation(591, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2294); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(591, 17);
			PushFollow(Follow._type_name_in_cast_expr2298);
			a=type_name();
			PopFollow();

			DebugLocation(591, 29);
			PushFollow(Follow._expr_in_cast_expr2302);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(592, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 51);
			LeaveRule("cast_expr", 51);
			LeaveRule_cast_expr();
		}
		DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:597:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr_list )? ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 52);
		TraceIn("list_expr", 52);
		ExprList value = default(ExprList);


		List<Expr> a = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(597, 1);
		try
		{
			// SugarWalker.g:598:2: ( ^( Expr_List (a= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:598:4: ^( Expr_List (a= expr_list )? )
			{
			DebugLocation(598, 4);
			DebugLocation(598, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2322); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(598, 17);
				// SugarWalker.g:598:17: (a= expr_list )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if (((LA74_0>=Expr_Access && LA74_0<=Expr_Tuple)||LA74_0==IDENT||LA74_0==Match_Tuple||LA74_0==NUMBER||LA74_0==STRING||LA74_0==79||LA74_0==82||LA74_0==86||LA74_0==89||LA74_0==93||LA74_0==99||LA74_0==102||LA74_0==106||LA74_0==108||LA74_0==114||LA74_0==117||LA74_0==121||LA74_0==156||LA74_0==DOUBLE))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:598:17: a= expr_list
					{
					DebugLocation(598, 17);
					PushFollow(Follow._expr_list_in_list_expr2326);
					a=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(599, 2);

					value = new ExprList(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 52);
			LeaveRule("list_expr", 52);
			LeaveRule_list_expr();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:604:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 53);
		TraceIn("chain_expr", 53);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(604, 1);
		try
		{
			// SugarWalker.g:609:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:609:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(609, 4);
			DebugLocation(609, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2352); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(610, 5);
			PushFollow(Follow._expr_in_chain_expr2359);
			a=expr();
			PopFollow();

			DebugLocation(611, 4);

							last=a;
						
			DebugLocation(614, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==103||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=137 && input.LA(1)<=138))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(614, 64);
			PushFollow(Follow._expr_in_chain_expr2405);
			a=expr();
			PopFollow();

			DebugLocation(615, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(619, 4);
			// SugarWalker.g:619:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==77||LA75_0==103||LA75_0==107||LA75_0==109||(LA75_0>=111 && LA75_0<=112)||(LA75_0>=137 && LA75_0<=138)))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:620:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(620, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==77||input.LA(1)==103||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=137 && input.LA(1)<=138))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(620, 65);
					PushFollow(Follow._expr_in_chain_expr2457);
					a=expr();
					PopFollow();

					DebugLocation(621, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 53);
			LeaveRule("chain_expr", 53);
			LeaveRule_chain_expr();
		}
		DebugLocation(626, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:627:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 54);
		TraceIn("expr", 54);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(627, 1);
		try
		{
			// SugarWalker.g:628:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt76=26;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt76 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt76 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt76 = 3;
				}
				break;
			case Expr_Call:
				{
				alt76 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt76 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt76 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt76 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt76 = 8;
				}
				break;
			case Expr_List:
				{
				alt76 = 9;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt76 = 10;
				}
				break;
			case Expr_Infix:
				{
				alt76 = 11;
				}
				break;
			case Expr_Cond:
				{
				alt76 = 12;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt76 = 13;
				}
				break;
			case Expr_Not_Null:
				{
				alt76 = 14;
				}
				break;
			case Expr_Access:
				{
				alt76 = 15;
				}
				break;
			case Expr_Chain:
				{
				alt76 = 16;
				}
				break;
			case Expr_Bin:
				{
				alt76 = 17;
				}
				break;
			case 79:
			case 82:
			case 86:
			case 89:
			case 93:
			case 99:
			case 106:
			case 108:
			case 114:
			case 121:
			case 156:
				{
				alt76 = 18;
				}
				break;
			case 117:
				{
				alt76 = 19;
				}
				break;
			case Expr_Bracket:
				{
				alt76 = 20;
				}
				break;
			case Expr_Suffix:
				{
				alt76 = 21;
				}
				break;
			case Expr_Prefix:
				{
				alt76 = 22;
				}
				break;
			case 102:
				{
				alt76 = 23;
				}
				break;
			case IDENT:
				{
				alt76 = 24;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt76 = 25;
				}
				break;
			case STRING:
				{
				alt76 = 26;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:628:7: tuple= expr_tuple
				{
				DebugLocation(628, 12);
				PushFollow(Follow._expr_tuple_in_expr2489);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(629, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:632:4: alloc= alloc_expr
				{
				DebugLocation(632, 9);
				PushFollow(Follow._alloc_expr_in_expr2499);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(633, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:636:4: match= match_tuple
				{
				DebugLocation(636, 9);
				PushFollow(Follow._match_tuple_in_expr2509);
				match=match_tuple();
				PopFollow();

				DebugLocation(637, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:640:4: call= call_expr
				{
				DebugLocation(640, 8);
				PushFollow(Follow._call_expr_in_expr2519);
				call=call_expr();
				PopFollow();

				DebugLocation(641, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:644:4: call_with= call_with_expr
				{
				DebugLocation(644, 13);
				PushFollow(Follow._call_with_expr_in_expr2529);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(645, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:648:4: dict= dict_expr
				{
				DebugLocation(648, 8);
				PushFollow(Follow._dict_expr_in_expr2539);
				dict=dict_expr();
				PopFollow();

				DebugLocation(649, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:652:4: lambda= lambda_expr
				{
				DebugLocation(652, 10);
				PushFollow(Follow._lambda_expr_in_expr2549);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(653, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:656:4: cast= cast_expr
				{
				DebugLocation(656, 8);
				PushFollow(Follow._cast_expr_in_expr2559);
				cast=cast_expr();
				PopFollow();

				DebugLocation(657, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:660:4: list= list_expr
				{
				DebugLocation(660, 8);
				PushFollow(Follow._list_expr_in_expr2569);
				list=list_expr();
				PopFollow();

				DebugLocation(661, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:664:4: expr_new= new_expr
				{
				DebugLocation(664, 12);
				PushFollow(Follow._new_expr_in_expr2579);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(665, 2);

						value = expr_new;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:668:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(668, 4);
				DebugLocation(668, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr2588); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(668, 27);
				PushFollow(Follow._ident_in_expr2592);
				ident_text=ident();
				PopFollow();

				DebugLocation(668, 35);
				PushFollow(Follow._expr_in_expr2596);
				a=expr();
				PopFollow();

				DebugLocation(668, 42);
				PushFollow(Follow._expr_in_expr2600);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(669, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:672:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(672, 4);
				DebugLocation(672, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2610); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(672, 17);
				PushFollow(Follow._expr_in_expr2614);
				a=expr();
				PopFollow();

				DebugLocation(672, 24);
				PushFollow(Follow._expr_in_expr2618);
				b=expr();
				PopFollow();

				DebugLocation(672, 31);
				PushFollow(Follow._expr_in_expr2622);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(673, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:676:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(676, 4);
				DebugLocation(676, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr2632); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(676, 26);
				PushFollow(Follow._expr_in_expr2636);
				a=expr();
				PopFollow();

				DebugLocation(676, 33);
				PushFollow(Follow._expr_in_expr2640);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(677, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident)), a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:680:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(680, 4);
				DebugLocation(680, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr2650); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(680, 21);
				PushFollow(Follow._expr_in_expr2654);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(681, 2);

						value = new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident));
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:684:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(684, 4);
				DebugLocation(684, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2664); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(684, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=94 && input.LA(1)<=97)||input.LA(1)==101)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(684, 57);
				PushFollow(Follow._expr_in_expr2690);
				a=expr();
				PopFollow();

				DebugLocation(684, 73);
				PushFollow(Follow._ident_in_expr2694);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(685, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:688:4: chain= chain_expr
				{
				DebugLocation(688, 10);
				PushFollow(Follow._chain_expr_in_expr2707);
				chain=chain_expr();
				PopFollow();

				DebugLocation(689, 2);

						value = chain;
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:692:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(692, 4);
				DebugLocation(692, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2716); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(692, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=77 && input.LA(1)<=78)||(input.LA(1)>=80 && input.LA(1)<=81)||input.LA(1)==85||input.LA(1)==87||input.LA(1)==91||input.LA(1)==98||input.LA(1)==103||input.LA(1)==105||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=113)||input.LA(1)==120||input.LA(1)==123||(input.LA(1)>=137 && input.LA(1)<=138)||input.LA(1)==142||input.LA(1)==155||input.LA(1)==157)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(699, 9);
				PushFollow(Follow._expr_in_expr2847);
				a=expr();
				PopFollow();

				DebugLocation(699, 16);
				PushFollow(Follow._expr_in_expr2851);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(700, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:703:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(703, 4);
				DebugLocation(703, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==99||input.LA(1)==106||input.LA(1)==108||input.LA(1)==114||input.LA(1)==121||input.LA(1)==156)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(703, 88);
				PushFollow(Follow._expr_in_expr2909);
				a=expr();
				PopFollow();

				DebugLocation(703, 95);
				PushFollow(Follow._expr_in_expr2913);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(704, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:707:4: ^( '@' text_ident= ident )
				{
				DebugLocation(707, 4);
				DebugLocation(707, 6);
				Match(input,117,Follow._117_in_expr2923); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(707, 20);
				PushFollow(Follow._ident_in_expr2927);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(708, 2);

						value = new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:711:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(711, 4);
				DebugLocation(711, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2937); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(711, 20);
				PushFollow(Follow._expr_in_expr2941);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(712, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:715:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(715, 4);
				DebugLocation(715, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2951); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(715, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==88||input.LA(1)==92)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(715, 36);
				PushFollow(Follow._expr_in_expr2965);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(716, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:719:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(719, 4);
				DebugLocation(719, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2975); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(719, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==76||input.LA(1)==81||input.LA(1)==85||(input.LA(1)>=87 && input.LA(1)<=88)||(input.LA(1)>=91 && input.LA(1)<=92)||input.LA(1)==158)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(719, 72);
				PushFollow(Follow._expr_in_expr3013);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(720, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:723:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(723, 4);
				DebugLocation(723, 6);
				Match(input,102,Follow._102_in_expr3023); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(723, 12);
				PushFollow(Follow._expr_in_expr3027);
				a=expr();
				PopFollow();

				DebugLocation(723, 19);
				PushFollow(Follow._expr_in_expr3031);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(724, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:731:4: text_ident= ident
				{
				DebugLocation(731, 15);
				PushFollow(Follow._ident_in_expr3044);
				text_ident=ident();
				PopFollow();

				DebugLocation(732, 2);

						if (text_ident == "nil") text_ident = "nullptr";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:736:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(736, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(737, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:740:4: text= STRING
				{
				DebugLocation(740, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3075); 
				DebugLocation(741, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 54);
			LeaveRule("expr", 54);
			LeaveRule_expr();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x4104000006848UL,0x4000000009UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x1000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_global_using281 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x1000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0x7C0UL});
		public static readonly BitSet _type_name_in_global_alloc318 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc322 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_global_alloc327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc344 = new BitSet(new ulong[]{0x0UL,0x7C0UL});
		public static readonly BitSet _type_name_in_global_alloc350 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc354 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_global_alloc359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _102_in_global_alloc371 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc376 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc382 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_global_alloc386 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef406 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef411 = new BitSet(new ulong[]{0x0UL,0x7C0UL});
		public static readonly BitSet _type_name_in_global_typedef417 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_global_typedef421 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item486 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item491 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _128_in_attribute_item499 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item507 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _attribute_item_in_attribute535 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def556 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def560 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _global_block_in_namespace_def565 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def597 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _STRING_in_import_def607 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _Enum_in_enum_def628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def633 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def639 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_enum_def643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def663 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def668 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def674 = new BitSet(new ulong[]{0x9A000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def679 = new BitSet(new ulong[]{0x92000000008UL});
		public static readonly BitSet _func_args_in_class_def686 = new BitSet(new ulong[]{0x90000000008UL});
		public static readonly BitSet _ident_list_in_class_def693 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _global_block_in_class_def700 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident727 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _128_in_type_ident730 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_type_ident737 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_ident745 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Template_in_type_template772 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template776 = new BitSet(new ulong[]{0x8UL,0x7C0UL});
		public static readonly BitSet _type_name_in_type_template781 = new BitSet(new ulong[]{0x8UL,0x7C0UL});
		public static readonly BitSet _Type_Array_in_type_array810 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array814 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_type_array819 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _Type_Star_in_type_star843 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star847 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_type_star849 = new BitSet(new ulong[]{0x8UL,0x200000UL});
		public static readonly BitSet _85_in_type_star854 = new BitSet(new ulong[]{0x8UL,0x200000UL});
		public static readonly BitSet _Type_Ref_in_type_ref876 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref880 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _type_array_in_type_name901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args960 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args965 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter992 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter997 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _Func_Def_in_func_def1023 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def1028 = new BitSet(new ulong[]{0x20000000000UL,0x7C0UL,0x40000000UL});
		public static readonly BitSet _type_name_in_func_def1035 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_func_def1042 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1048 = new BitSet(new ulong[]{0xC282A1FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _generic_parameter_in_func_def1053 = new BitSet(new ulong[]{0xC28221FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _func_args_in_func_def1061 = new BitSet(new ulong[]{0xC28201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _stmt_block_in_func_def1072 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1082 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1110 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1115 = new BitSet(new ulong[]{0xFF428201FFFFF008UL,0x23414482244801FUL,0x90000000UL});
		public static readonly BitSet _stmt_expr_in_stmt1146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_translate1241 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1245 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_stmt_translate1249 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _102_in_stmt_translate1259 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1263 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1267 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1295 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1299 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1303 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1330 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1335 = new BitSet(new ulong[]{0x8UL,0x20UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1341 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1361 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1365 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1375 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1441 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1447 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_using1462 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x1000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1483 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1487 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1491 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1530 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1534 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1538 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1543 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1555 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1559 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1563 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1568 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1590 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1594 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1598 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1608 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1612 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1616 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1631 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1637 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1657 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1661 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1665 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1669 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1674 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1686 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1690 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1694 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1698 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1703 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1715 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1719 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_for_item1723 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1733 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1737 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list1764 = new BitSet(new ulong[]{0x1E00000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1785 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for1789 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1793 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1813 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1817 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try1821 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1825 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1845 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1850 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1878 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_ident1883 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident1887 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1912 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1917 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1939 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1943 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1947 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1952 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1964 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1968 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1972 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1977 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2004 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2009 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2036 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2041 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr_list2069 = new BitSet(new ulong[]{0x428201FFFFF002UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _Expr_Call_in_call_expr2089 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2093 = new BitSet(new ulong[]{0x428281FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2098 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_call_expr2105 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2127 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2131 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_dict_expr2136 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2158 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _94_in_lambda_expr2160 = new BitSet(new ulong[]{0x428221FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2165 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_lambda_expr2171 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2181 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _110_in_lambda_expr2183 = new BitSet(new ulong[]{0x428221FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2188 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_lambda_expr2194 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2214 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2218 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_new_expr2222 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2233 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2237 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_new_expr2241 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2265 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2269 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2273 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2294 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2298 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_cast_expr2302 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_list_expr2326 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2352 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2359 = new BitSet(new ulong[]{0x0UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _set_in_chain_expr2371 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_chain_expr2405 = new BitSet(new ulong[]{0x8UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _set_in_chain_expr2423 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_chain_expr2457 = new BitSet(new ulong[]{0x8UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _expr_tuple_in_expr2489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr2588 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2592 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2596 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2600 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2610 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2614 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2618 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2622 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr2632 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2636 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2640 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr2650 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2654 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2664 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2668 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2690 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_expr2694 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr2707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr2716 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2720 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2847 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2851 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2863 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2909 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2913 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _117_in_expr2923 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2927 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2937 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2941 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2951 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2955 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr2965 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2975 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2979 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr3013 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _102_in_expr3023 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3027 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x224144822448000UL,0x90000000UL});
		public static readonly BitSet _expr_in_expr3031 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3075 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
