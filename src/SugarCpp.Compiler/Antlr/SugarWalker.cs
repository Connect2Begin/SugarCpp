//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-06-19 14:53:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Def=43;
	public const int Generic_Patameters=44;
	public const int Global_Block=45;
	public const int IDENT=46;
	public const int INDENT=47;
	public const int Ident_List=48;
	public const int Import=49;
	public const int Left_Bracket=50;
	public const int LineComment=51;
	public const int Match_Expr=52;
	public const int Match_Expr_Item=53;
	public const int Match_Tuple=54;
	public const int NEWLINE=55;
	public const int NUMBER=56;
	public const int Namespace=57;
	public const int Right_Bracket=58;
	public const int Root=59;
	public const int SP=60;
	public const int STRING=61;
	public const int Stmt_Block=62;
	public const int Stmt_Defer=63;
	public const int Stmt_Finally=64;
	public const int Stmt_For=65;
	public const int Stmt_If=66;
	public const int Stmt_Loop=67;
	public const int Stmt_Return=68;
	public const int Stmt_Switch=69;
	public const int Stmt_Try=70;
	public const int Stmt_Typedef=71;
	public const int Stmt_Unless=72;
	public const int Stmt_Until=73;
	public const int Stmt_Using=74;
	public const int Stmt_While=75;
	public const int Switch_Item=76;
	public const int Type_Array=77;
	public const int Type_Func=78;
	public const int Type_Ident=79;
	public const int Type_List=80;
	public const int Type_Ref=81;
	public const int Type_Star=82;
	public const int Type_Template=83;
	public const int White_Space=84;
	public const int DOUBLE=183;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			if (op == "uint") return "unsigned int";
			if (op == "uchar") return "unsigned char";
			if (op == "schar") return "signed char";
			if (op == "int8") return "int8_t";
			if (op == "int16") return "int16_t";
			if (op == "int32") return "int32_t";
			if (op == "int64") return "int64_t";
			if (op == "uint8") return "uint8_t";
			if (op == "uint16") return "uint16_t";
			if (op == "uint32") return "uint32_t";
			if (op == "uint64") return "uint64_t";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:44:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(44, 1);
		try
		{
			// SugarWalker.g:45:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: ^( Root a= global_block )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(45, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(46, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:51:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(51, 1);
		try
		{
			// SugarWalker.g:56:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:56:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(56, 4);
			DebugLocation(56, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(56, 19);
				// SugarWalker.g:56:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==112))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:56:20: a= node
						{
						DebugLocation(56, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(56, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:59:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(59, 1);
		try
		{
			// SugarWalker.g:64:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 112:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:64:4: a= func_def
				{
				DebugLocation(64, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(64, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:65:4: b= import_def
				{
				DebugLocation(65, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(65, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:66:4: c= enum_def
				{
				DebugLocation(66, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(66, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:67:4: d= class_def
				{
				DebugLocation(67, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(67, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:68:4: e= global_alloc
				{
				DebugLocation(68, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(68, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:69:4: f= global_using
				{
				DebugLocation(69, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(69, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:70:4: g= global_typedef
				{
				DebugLocation(70, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(70, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:71:4: h= namespace_def
				{
				DebugLocation(71, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(71, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:74:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:79:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:79:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(79, 4);
			DebugLocation(79, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 17);
				// SugarWalker.g:79:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:79:18: attr= attribute
					{
					DebugLocation(79, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(79, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(79, 65);
				// SugarWalker.g:79:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==156))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:79:67: a= ident
						{
						DebugLocation(79, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(79, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:80:22: b= 'namespace'
						{
						DebugLocation(80, 23);
						b=(CommonTree)Match(input,156,Follow._156_in_global_using281); 
						DebugLocation(80, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:83:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(83, 1);
		try
		{
			// SugarWalker.g:88:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 112:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:88:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(88, 4);
				DebugLocation(88, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(88, 23);
				// SugarWalker.g:88:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:88:24: attr= attribute
					{
					DebugLocation(88, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(88, 42);
				PushFollow(Follow._type_name_in_global_alloc318);
				a=type_name();
				PopFollow();

				DebugLocation(88, 54);
				PushFollow(Follow._ident_list_in_global_alloc322);
				b=ident_list();
				PopFollow();

				DebugLocation(88, 67);
				PushFollow(Follow._expr_list_in_global_alloc326);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(89, 2);

						if (c != null && c.Count > 0)
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Equal));
						}
						else
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Declare));
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:99:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(99, 4);
				DebugLocation(99, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc336); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(99, 25);
				// SugarWalker.g:99:25: (attr= attribute )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==Attribute))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:99:26: attr= attribute
					{
					DebugLocation(99, 30);
					PushFollow(Follow._attribute_in_global_alloc341);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(99, 44);
				PushFollow(Follow._type_name_in_global_alloc347);
				a=type_name();
				PopFollow();

				DebugLocation(99, 56);
				PushFollow(Follow._ident_list_in_global_alloc351);
				b=ident_list();
				PopFollow();

				DebugLocation(99, 69);
				PushFollow(Follow._expr_list_in_global_alloc355);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(100, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Bracket));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:103:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(103, 4);
				DebugLocation(103, 6);
				Match(input,112,Follow._112_in_global_alloc365); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(103, 11);
				// SugarWalker.g:103:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:103:12: attr= attribute
					{
					DebugLocation(103, 16);
					PushFollow(Follow._attribute_in_global_alloc370);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(103, 30);
				PushFollow(Follow._ident_list_in_global_alloc376);
				d=ident_list();
				PopFollow();

				DebugLocation(103, 43);
				PushFollow(Follow._expr_list_in_global_alloc380);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(104, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:114:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(114, 1);
		try
		{
			// SugarWalker.g:115:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:115:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(115, 4);
			DebugLocation(115, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef400); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(115, 19);
			// SugarWalker.g:115:19: (attr= attribute )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==Attribute))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:115:20: attr= attribute
				{
				DebugLocation(115, 24);
				PushFollow(Follow._attribute_in_global_typedef405);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(115, 38);
			PushFollow(Follow._type_name_in_global_typedef411);
			a=type_name();
			PopFollow();

			DebugLocation(115, 50);
			PushFollow(Follow._ident_in_global_typedef415);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(116, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:122:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(122, 1);
		try
		{
			// SugarWalker.g:123:2: (a= NUMBER |a= STRING |b= ident )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt10 = 1;
				}
				break;
			case STRING:
				{
				alt10 = 2;
				}
				break;
			case IDENT:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:123:4: a= NUMBER
				{
				DebugLocation(123, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args436); 
				DebugLocation(124, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:127:4: a= STRING
				{
				DebugLocation(127, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args446); 
				DebugLocation(128, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:131:4: b= ident
				{
				DebugLocation(131, 5);
				PushFollow(Follow._ident_in_attribute_args456);
				b=ident();
				PopFollow();

				DebugLocation(132, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:137:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		CommonTree d = default(CommonTree);
		CommonTree e = default(CommonTree);
		CommonTree f = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(137, 1);
		try
		{
			// SugarWalker.g:142:2: ( ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:142:4: ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* )
			{
			DebugLocation(142, 4);
			DebugLocation(142, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item480); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(142, 16);
			// SugarWalker.g:142:16: (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' )
			int alt11=5;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt11 = 1;
				}
				break;
			case 140:
				{
				alt11 = 2;
				}
				break;
			case 163:
				{
				alt11 = 3;
				}
				break;
			case 160:
				{
				alt11 = 4;
				}
				break;
			case 174:
				{
				alt11 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:142:17: a= ident
				{
				DebugLocation(142, 18);
				PushFollow(Follow._ident_in_attribute_item485);
				a=ident();
				PopFollow();

				DebugLocation(142, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:142:48: c= 'const'
				{
				DebugLocation(142, 49);
				c=(CommonTree)Match(input,140,Follow._140_in_attribute_item493); 
				DebugLocation(142, 58);
				 value.Name = "const"; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:142:87: d= 'static'
				{
				DebugLocation(142, 88);
				d=(CommonTree)Match(input,163,Follow._163_in_attribute_item501); 
				DebugLocation(142, 98);
				 value.Name = "static"; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:142:128: e= 'public'
				{
				DebugLocation(142, 129);
				e=(CommonTree)Match(input,160,Follow._160_in_attribute_item509); 
				DebugLocation(142, 139);
				 value.Name = "public"; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:142:169: f= 'virtual'
				{
				DebugLocation(142, 170);
				f=(CommonTree)Match(input,174,Follow._174_in_attribute_item517); 
				DebugLocation(142, 181);
				 value.Name = "virtual"; 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(142, 211);
			// SugarWalker.g:142:211: (b= attribute_args )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==IDENT||LA12_0==NUMBER||LA12_0==STRING))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:142:212: b= attribute_args
					{
					DebugLocation(142, 213);
					PushFollow(Follow._attribute_args_in_attribute_item525);
					b=attribute_args();
					PopFollow();

					DebugLocation(142, 229);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:145:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(145, 1);
		try
		{
			// SugarWalker.g:150:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:150:4: (a= attribute_item )+
			{
			DebugLocation(150, 4);
			// SugarWalker.g:150:4: (a= attribute_item )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==Attribute))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:150:5: a= attribute_item
					{
					DebugLocation(150, 6);
					PushFollow(Follow._attribute_item_in_attribute553);
					a=attribute_item();
					PopFollow();

					DebugLocation(150, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:153:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:154:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:154:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(154, 4);
			DebugLocation(154, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def574); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(154, 17);
			PushFollow(Follow._ident_in_namespace_def578);
			a=ident();
			PopFollow();

			DebugLocation(154, 24);
			// SugarWalker.g:154:24: (b= global_block )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Global_Block))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:25: b= global_block
				{
				DebugLocation(154, 26);
				PushFollow(Follow._global_block_in_namespace_def583);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(155, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:160:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(160, 1);
		try
		{
			// SugarWalker.g:165:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 6);
			Match(input,Import,Follow._Import_in_import_def610); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(165, 13);
				// SugarWalker.g:165:13: (attr= attribute )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Attribute))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:165:14: attr= attribute
					{
					DebugLocation(165, 18);
					PushFollow(Follow._attribute_in_import_def615);
					attr=attribute();
					PopFollow();

					DebugLocation(165, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(165, 61);
				// SugarWalker.g:165:61: (a= STRING )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==STRING))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:165:62: a= STRING
						{
						DebugLocation(165, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def625); 
						DebugLocation(165, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:168:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(168, 1);
		try
		{
			// SugarWalker.g:169:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:169:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(169, 4);
			DebugLocation(169, 6);
			Match(input,Enum,Follow._Enum_in_enum_def646); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(169, 11);
			// SugarWalker.g:169:11: (attr= attribute )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Attribute))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:169:12: attr= attribute
				{
				DebugLocation(169, 16);
				PushFollow(Follow._attribute_in_enum_def651);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(169, 30);
			PushFollow(Follow._ident_in_enum_def657);
			a=ident();
			PopFollow();

			DebugLocation(169, 38);
			PushFollow(Follow._ident_list_in_enum_def661);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(170, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:175:1: class_def returns [Class value] : ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		CommonTree pub = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(175, 1);
		try
		{
			// SugarWalker.g:176:2: ( ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:176:4: ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(176, 4);
			DebugLocation(176, 6);
			Match(input,Class,Follow._Class_in_class_def681); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(176, 12);
			// SugarWalker.g:176:12: (pub= 'public' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==160))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:13: pub= 'public'
				{
				DebugLocation(176, 16);
				pub=(CommonTree)Match(input,160,Follow._160_in_class_def686); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(176, 28);
			// SugarWalker.g:176:28: (attr= attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Attribute))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:29: attr= attribute
				{
				DebugLocation(176, 33);
				PushFollow(Follow._attribute_in_class_def693);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(176, 47);
			PushFollow(Follow._ident_in_class_def699);
			a=ident();
			PopFollow();

			DebugLocation(176, 54);
			// SugarWalker.g:176:54: (b= generic_parameter )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Generic_Patameters))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:55: b= generic_parameter
				{
				DebugLocation(176, 56);
				PushFollow(Follow._generic_parameter_in_class_def704);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(176, 77);
			// SugarWalker.g:176:77: (c= func_args )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Func_Args))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:78: c= func_args
				{
				DebugLocation(176, 79);
				PushFollow(Follow._func_args_in_class_def711);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(176, 92);
			// SugarWalker.g:176:92: (d= ident_list )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Ident_List))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:93: d= ident_list
				{
				DebugLocation(176, 94);
				PushFollow(Follow._ident_list_in_class_def718);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(176, 108);
			// SugarWalker.g:176:108: (e= global_block )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Global_Block))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:109: e= global_block
				{
				DebugLocation(176, 110);
				PushFollow(Follow._global_block_in_class_def725);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(177, 2);

					value = new Class(a, b, c, d, e, attr);
					if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
					if (c != null) value.Attribute.Add(new Attr { Name = "case" });
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:184:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(184, 1);
		try
		{
			// SugarWalker.g:189:2: ( ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:189:4: ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* )
			{
			DebugLocation(189, 4);
			DebugLocation(189, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident752); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(189, 17);
				// SugarWalker.g:189:17: ( 'const' | 'static' | 'long' | 'struct' |a= ident )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=6;
					try { DebugEnterDecision(24, false);
					switch (input.LA(1))
					{
					case 140:
						{
						alt24 = 1;
						}
						break;
					case 163:
						{
						alt24 = 2;
						}
						break;
					case 153:
						{
						alt24 = 3;
						}
						break;
					case 164:
						{
						alt24 = 4;
						}
						break;
					case IDENT:
						{
						alt24 = 5;
						}
						break;
					}

					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:189:19: 'const'
						{
						DebugLocation(189, 19);
						Match(input,140,Follow._140_in_type_ident756); 
						DebugLocation(189, 27);
						 type+="const "; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:190:10: 'static'
						{
						DebugLocation(190, 10);
						Match(input,163,Follow._163_in_type_ident769); 
						DebugLocation(190, 19);
						 type+="static "; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarWalker.g:191:10: 'long'
						{
						DebugLocation(191, 10);
						Match(input,153,Follow._153_in_type_ident782); 
						DebugLocation(191, 18);
						 type+="long "; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarWalker.g:192:10: 'struct'
						{
						DebugLocation(192, 10);
						Match(input,164,Follow._164_in_type_ident796); 
						DebugLocation(192, 19);
						 type+="struct "; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// SugarWalker.g:193:10: a= ident
						{
						DebugLocation(193, 11);
						PushFollow(Follow._ident_in_type_ident811);
						a=ident();
						PopFollow();

						DebugLocation(193, 18);
						 type+=Alias(a); 

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(195, 2);

					value = new IdentType(type.Trim());
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:200:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(200, 1);
		try
		{
			// SugarWalker.g:205:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:205:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(205, 4);
			DebugLocation(205, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template848); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(205, 21);
			PushFollow(Follow._type_name_in_type_template852);
			a=type_name();
			PopFollow();

			DebugLocation(205, 32);
			// SugarWalker.g:205:32: (b= type_name )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if (((LA25_0>=Type_Array && LA25_0<=Type_Ident)||(LA25_0>=Type_Ref && LA25_0<=Type_Template)))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:205:33: b= type_name
					{
					DebugLocation(205, 34);
					PushFollow(Follow._type_name_in_type_template857);
					b=type_name();
					PopFollow();

					DebugLocation(205, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(206, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:211:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(211, 1);
		try
		{
			// SugarWalker.g:216:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:216:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(216, 4);
			DebugLocation(216, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array886); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(216, 18);
			PushFollow(Follow._type_name_in_type_array890);
			a=type_name();
			PopFollow();

			DebugLocation(216, 29);
			// SugarWalker.g:216:29: (b= expr )+
			int cnt26=0;
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if (((LA26_0>=Expr_Access && LA26_0<=Expr_Alloc_Equal)||(LA26_0>=Expr_Bin && LA26_0<=Expr_Where)||LA26_0==IDENT||LA26_0==Match_Expr||LA26_0==Match_Tuple||LA26_0==NUMBER||LA26_0==STRING||LA26_0==88||LA26_0==91||LA26_0==95||LA26_0==98||LA26_0==103||LA26_0==109||LA26_0==112||LA26_0==117||LA26_0==120||LA26_0==127||LA26_0==130||LA26_0==134||LA26_0==179||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:216:30: b= expr
					{
					DebugLocation(216, 31);
					PushFollow(Follow._expr_in_type_array895);
					b=expr();
					PopFollow();

					DebugLocation(216, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt26 >= 1)
						goto loop26;

					EarlyExitException eee26 = new EarlyExitException( 26, input );
					DebugRecognitionException(eee26);
					throw eee26;
				}
				cnt26++;
			}
			loop26:
				;

			} finally { DebugExitSubRule(26); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(217, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:222:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(222, 1);
		try
		{
			// SugarWalker.g:223:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:223:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(223, 4);
			DebugLocation(223, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star919); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(223, 17);
			PushFollow(Follow._type_name_in_type_star923);
			a=type_name();
			PopFollow();

			DebugLocation(223, 28);
			Match(input,94,Follow._94_in_type_star925); 
			DebugLocation(223, 32);
			 value = new StarType(a); 
			DebugLocation(223, 62);
			// SugarWalker.g:223:62: ( '*' )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==94))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:223:63: '*'
					{
					DebugLocation(223, 63);
					Match(input,94,Follow._94_in_type_star930); 
					DebugLocation(223, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:227:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(227, 1);
		try
		{
			// SugarWalker.g:228:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:228:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(228, 4);
			DebugLocation(228, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref952); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(228, 16);
			PushFollow(Follow._type_name_in_type_ref956);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(229, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// SugarWalker.g:234:1: type_func returns [SugarType value] : ^( Type_Func (a= type_list )? (b= type_name )? ) ;
	[GrammarRule("type_func")]
	private SugarType type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 19);
		TraceIn("type_func", 19);
		SugarType value = default(SugarType);


		List<SugarType> a = default(List<SugarType>);
		SugarType b = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:235:2: ( ^( Type_Func (a= type_list )? (b= type_name )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:235:4: ^( Type_Func (a= type_list )? (b= type_name )? )
			{
			DebugLocation(235, 4);
			DebugLocation(235, 6);
			Match(input,Type_Func,Follow._Type_Func_in_type_func976); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(235, 16);
				// SugarWalker.g:235:16: (a= type_list )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==Type_List))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:235:17: a= type_list
					{
					DebugLocation(235, 18);
					PushFollow(Follow._type_list_in_type_func981);
					a=type_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(235, 31);
				// SugarWalker.g:235:31: (b= type_name )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Type_Array && LA29_0<=Type_Ident)||(LA29_0>=Type_Ref && LA29_0<=Type_Template)))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:235:32: b= type_name
					{
					DebugLocation(235, 33);
					PushFollow(Follow._type_name_in_type_func988);
					b=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(236, 2);

					value = new FuncType(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_func", 19);
			LeaveRule("type_func", 19);
			LeaveRule_type_func();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return value;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarWalker.g:241:1: type_list returns [List<SugarType> value] : ^( Type_List (a= type_name )* ) ;
	[GrammarRule("type_list")]
	private List<SugarType> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 20);
		TraceIn("type_list", 20);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(241, 1);
		try
		{
			// SugarWalker.g:246:2: ( ^( Type_List (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:246:4: ^( Type_List (a= type_name )* )
			{
			DebugLocation(246, 4);
			DebugLocation(246, 6);
			Match(input,Type_List,Follow._Type_List_in_type_list1014); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(246, 16);
				// SugarWalker.g:246:16: (a= type_name )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if (((LA30_0>=Type_Array && LA30_0<=Type_Ident)||(LA30_0>=Type_Ref && LA30_0<=Type_Template)))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:246:17: a= type_name
						{
						DebugLocation(246, 18);
						PushFollow(Follow._type_name_in_type_list1019);
						a=type_name();
						PopFollow();

						DebugLocation(246, 29);
						 value.Add(a); 

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_list", 20);
			LeaveRule("type_list", 20);
			LeaveRule_type_list();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return value;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:249:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 21);
		TraceIn("type_name", 21);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(249, 1);
		try
		{
			// SugarWalker.g:250:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func )
			int alt31=6;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt31 = 1;
				}
				break;
			case Type_Ref:
				{
				alt31 = 2;
				}
				break;
			case Type_Star:
				{
				alt31 = 3;
				}
				break;
			case Type_Template:
				{
				alt31 = 4;
				}
				break;
			case Type_Ident:
				{
				alt31 = 5;
				}
				break;
			case Type_Func:
				{
				alt31 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:250:4: a= type_array
				{
				DebugLocation(250, 5);
				PushFollow(Follow._type_array_in_type_name1042);
				a=type_array();
				PopFollow();

				DebugLocation(250, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:251:4: a= type_ref
				{
				DebugLocation(251, 5);
				PushFollow(Follow._type_ref_in_type_name1051);
				a=type_ref();
				PopFollow();

				DebugLocation(251, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:252:4: a= type_star
				{
				DebugLocation(252, 5);
				PushFollow(Follow._type_star_in_type_name1060);
				a=type_star();
				PopFollow();

				DebugLocation(252, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:253:4: a= type_template
				{
				DebugLocation(253, 5);
				PushFollow(Follow._type_template_in_type_name1069);
				a=type_template();
				PopFollow();

				DebugLocation(253, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:254:4: a= type_ident
				{
				DebugLocation(254, 5);
				PushFollow(Follow._type_ident_in_type_name1078);
				a=type_ident();
				PopFollow();

				DebugLocation(254, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:255:4: a= type_func
				{
				DebugLocation(255, 5);
				PushFollow(Follow._type_func_in_type_name1087);
				a=type_func();
				PopFollow();

				DebugLocation(255, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 21);
			LeaveRule("type_name", 21);
			LeaveRule_type_name();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:258:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(258, 1);
		try
		{
			// SugarWalker.g:263:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:263:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(263, 4);
			DebugLocation(263, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args1110); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(263, 16);
				// SugarWalker.g:263:16: (a= alloc_expr )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if (((LA32_0>=Expr_Alloc_Bracket && LA32_0<=Expr_Alloc_Equal)))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:263:17: a= alloc_expr
						{
						DebugLocation(263, 18);
						PushFollow(Follow._alloc_expr_in_func_args1115);
						a=alloc_expr();
						PopFollow();

						DebugLocation(264, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:269:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(269, 1);
		try
		{
			// SugarWalker.g:274:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:274:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(274, 4);
			DebugLocation(274, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter1142); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(274, 25);
				// SugarWalker.g:274:25: (a= ident )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==IDENT))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:274:26: a= ident
						{
						DebugLocation(274, 27);
						PushFollow(Follow._ident_in_generic_parameter1147);
						a=ident();
						PopFollow();

						DebugLocation(274, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:277:1: func_def returns [FuncDef value] : ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		FuncDef value = default(FuncDef);


		CommonTree pub = default(CommonTree);
		CommonTree vir = default(CommonTree);
		CommonTree deconstructor = default(CommonTree);
		CommonTree op = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(277, 1);
		try
		{
			// SugarWalker.g:282:2: ( ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:282:4: ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(282, 4);
			DebugLocation(282, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1173); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(282, 15);
			// SugarWalker.g:282:15: (pub= 'public' )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==160))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:16: pub= 'public'
				{
				DebugLocation(282, 19);
				pub=(CommonTree)Match(input,160,Follow._160_in_func_def1178); 

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(282, 31);
			// SugarWalker.g:282:31: (vir= 'virtual' )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==174))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:32: vir= 'virtual'
				{
				DebugLocation(282, 35);
				vir=(CommonTree)Match(input,174,Follow._174_in_func_def1185); 

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(282, 48);
			// SugarWalker.g:282:48: (attr= attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==Attribute))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:49: attr= attribute
				{
				DebugLocation(282, 53);
				PushFollow(Follow._attribute_in_func_def1192);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(282, 65);
			// SugarWalker.g:282:65: (a= type_name )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if (((LA37_0>=Type_Array && LA37_0<=Type_Ident)||(LA37_0>=Type_Ref && LA37_0<=Type_Template)))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:66: a= type_name
				{
				DebugLocation(282, 67);
				PushFollow(Follow._type_name_in_func_def1198);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(282, 80);
			// SugarWalker.g:282:80: (deconstructor= '~' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==182))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:81: deconstructor= '~'
				{
				DebugLocation(282, 94);
				deconstructor=(CommonTree)Match(input,182,Follow._182_in_func_def1205); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(282, 101);
			// SugarWalker.g:282:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?
			int alt39=3;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			try
			{
				alt39 = dfa39.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:102: b= ident
				{
				DebugLocation(282, 103);
				PushFollow(Follow._ident_in_func_def1212);
				b=ident();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:282:112: op= ( '+' | '-' | '*' | '/' )
				{
				DebugLocation(282, 114);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==94||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(282, 135);
			// SugarWalker.g:282:135: (x= generic_parameter )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Generic_Patameters))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:136: x= generic_parameter
				{
				DebugLocation(282, 137);
				PushFollow(Follow._generic_parameter_in_func_def1233);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(282, 159);
			// SugarWalker.g:282:159: (args= func_args )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==Func_Args))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:282:160: args= func_args
				{
				DebugLocation(282, 164);
				PushFollow(Follow._func_args_in_func_def1241);
				args=func_args();
				PopFollow();

				DebugLocation(282, 175);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(283, 2);
			// SugarWalker.g:283:2: (e= stmt_block |f= expr )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==Stmt_Block))
			{
				alt42 = 1;
			}
			else if (((LA42_0>=Expr_Access && LA42_0<=Expr_Alloc_Equal)||(LA42_0>=Expr_Bin && LA42_0<=Expr_Where)||LA42_0==IDENT||LA42_0==Match_Expr||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==88||LA42_0==91||LA42_0==95||LA42_0==98||LA42_0==103||LA42_0==109||LA42_0==112||LA42_0==117||LA42_0==120||LA42_0==127||LA42_0==130||LA42_0==134||LA42_0==179||LA42_0==DOUBLE))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:283:4: e= stmt_block
				{
				DebugLocation(283, 5);
				PushFollow(Follow._stmt_block_in_func_def1252);
				e=stmt_block();
				PopFollow();

				DebugLocation(284, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:300:4: f= expr
				{
				DebugLocation(300, 5);
				PushFollow(Follow._expr_in_func_def1262);
				f=expr();
				PopFollow();

				DebugLocation(301, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:329:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(329, 4);
		try
		{
			// SugarWalker.g:334:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:334:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(334, 4);
			DebugLocation(334, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1290); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(334, 17);
				// SugarWalker.g:334:17: (a= stmt )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if (((LA43_0>=Expr_Access && LA43_0<=Expr_Alloc_Equal)||(LA43_0>=Expr_Bin && LA43_0<=Expr_Where)||LA43_0==IDENT||LA43_0==Match_Expr||LA43_0==Match_Tuple||LA43_0==NUMBER||LA43_0==STRING||(LA43_0>=Stmt_Defer && LA43_0<=Stmt_While)||LA43_0==88||LA43_0==91||LA43_0==95||LA43_0==98||LA43_0==103||LA43_0==109||LA43_0==112||(LA43_0>=116 && LA43_0<=117)||LA43_0==120||LA43_0==127||(LA43_0>=129 && LA43_0<=130)||LA43_0==134||LA43_0==179||LA43_0==DOUBLE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:334:18: a= stmt
						{
						DebugLocation(334, 19);
						PushFollow(Follow._stmt_in_stmt_block1295);
						a=stmt();
						PopFollow();

						DebugLocation(334, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(335, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:337:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(337, 1);
		try
		{
			// SugarWalker.g:342:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt44=9;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 117:
			case 120:
			case 127:
			case 130:
			case 134:
			case 179:
			case DOUBLE:
				{
				alt44 = 1;
				}
				break;
			case 112:
				{
				int LA44_2 = input.LA(2);

				if ((LA44_2==DOWN))
				{
					int LA44_11 = input.LA(3);

					if (((LA44_11>=Expr_Access && LA44_11<=Expr_Alloc_Equal)||(LA44_11>=Expr_Bin && LA44_11<=Expr_Where)||LA44_11==IDENT||LA44_11==Match_Expr||LA44_11==Match_Tuple||LA44_11==NUMBER||LA44_11==STRING||LA44_11==88||LA44_11==91||LA44_11==95||LA44_11==98||LA44_11==103||LA44_11==109||LA44_11==112||LA44_11==117||LA44_11==120||LA44_11==127||LA44_11==130||LA44_11==134||LA44_11==179||LA44_11==DOUBLE))
					{
						alt44 = 1;
					}
					else if ((LA44_11==Ident_List))
					{
						alt44 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 44, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt44 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt44 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt44 = 4;
				}
				break;
			case Stmt_For:
				{
				alt44 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt44 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt44 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt44 = 8;
				}
				break;
			case 116:
			case 129:
				{
				alt44 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:342:4: a= stmt_expr
				{
				DebugLocation(342, 5);
				PushFollow(Follow._stmt_expr_in_stmt1326);
				a=stmt_expr();
				PopFollow();

				DebugLocation(342, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:343:4: a= stmt_return
				{
				DebugLocation(343, 5);
				PushFollow(Follow._stmt_return_in_stmt1335);
				a=stmt_return();
				PopFollow();

				DebugLocation(343, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:344:4: a= stmt_if
				{
				DebugLocation(344, 5);
				PushFollow(Follow._stmt_if_in_stmt1344);
				a=stmt_if();
				PopFollow();

				DebugLocation(344, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:345:4: a= stmt_while
				{
				DebugLocation(345, 5);
				PushFollow(Follow._stmt_while_in_stmt1353);
				a=stmt_while();
				PopFollow();

				DebugLocation(345, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:346:4: a= stmt_for
				{
				DebugLocation(346, 5);
				PushFollow(Follow._stmt_for_in_stmt1362);
				a=stmt_for();
				PopFollow();

				DebugLocation(346, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:347:4: a= stmt_try
				{
				DebugLocation(347, 5);
				PushFollow(Follow._stmt_try_in_stmt1371);
				a=stmt_try();
				PopFollow();

				DebugLocation(347, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:348:4: a= stmt_switch
				{
				DebugLocation(348, 5);
				PushFollow(Follow._stmt_switch_in_stmt1380);
				a=stmt_switch();
				PopFollow();

				DebugLocation(348, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:349:4: a= stmt_defer
				{
				DebugLocation(349, 5);
				PushFollow(Follow._stmt_defer_in_stmt1389);
				a=stmt_defer();
				PopFollow();

				DebugLocation(349, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:350:4: b= stmt_translate
				{
				DebugLocation(350, 5);
				PushFollow(Follow._stmt_translate_in_stmt1398);
				b=stmt_translate();
				PopFollow();

				DebugLocation(350, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:353:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 27);
		TraceIn("stmt_translate", 27);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(353, 1);
		try
		{
			// SugarWalker.g:358:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case 129:
				{
				alt45 = 1;
				}
				break;
			case 112:
				{
				alt45 = 2;
				}
				break;
			case 116:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:358:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(358, 4);
				DebugLocation(358, 6);
				Match(input,129,Follow._129_in_stmt_translate1421); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(358, 12);
				PushFollow(Follow._expr_in_stmt_translate1425);
				a=expr();
				PopFollow();

				DebugLocation(358, 19);
				PushFollow(Follow._expr_in_stmt_translate1429);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(359, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:365:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(365, 4);
				DebugLocation(365, 6);
				Match(input,112,Follow._112_in_stmt_translate1439); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(365, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1443);
				d=ident_list();
				PopFollow();

				DebugLocation(365, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1447);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(366, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:374:4: ^( '<<' a= expr b= expr )
				{
				DebugLocation(374, 4);
				DebugLocation(374, 6);
				Match(input,116,Follow._116_in_stmt_translate1457); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(374, 12);
				PushFollow(Follow._expr_in_stmt_translate1461);
				a=expr();
				PopFollow();

				DebugLocation(374, 19);
				PushFollow(Follow._expr_in_stmt_translate1465);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 27);
			LeaveRule("stmt_translate", 27);
			LeaveRule_stmt_translate();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:377:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 28);
		TraceIn("stmt_switch_item_list", 28);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(377, 1);
		try
		{
			// SugarWalker.g:382:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:382:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(382, 4);
			// SugarWalker.g:382:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==Switch_Item))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:383:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(383, 3);
					DebugLocation(383, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1490); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(383, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1494);
					a=expr_list();
					PopFollow();

					DebugLocation(383, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1498);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(384, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 28);
			LeaveRule("stmt_switch_item_list", 28);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:390:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 29);
		TraceIn("stmt_switch", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(390, 1);
		try
		{
			// SugarWalker.g:391:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:391:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(391, 4);
			DebugLocation(391, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1525); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(391, 18);
				// SugarWalker.g:391:18: (a= expr )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if (((LA47_0>=Expr_Access && LA47_0<=Expr_Alloc_Equal)||(LA47_0>=Expr_Bin && LA47_0<=Expr_Where)||LA47_0==IDENT||LA47_0==Match_Expr||LA47_0==Match_Tuple||LA47_0==NUMBER||LA47_0==STRING||LA47_0==88||LA47_0==91||LA47_0==95||LA47_0==98||LA47_0==103||LA47_0==109||LA47_0==112||LA47_0==117||LA47_0==120||LA47_0==127||LA47_0==130||LA47_0==134||LA47_0==179||LA47_0==DOUBLE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:391:19: a= expr
					{
					DebugLocation(391, 20);
					PushFollow(Follow._expr_in_stmt_switch1530);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(391, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1536);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(391, 52);
				// SugarWalker.g:391:52: (c= stmt_block )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==Stmt_Block))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:391:53: c= stmt_block
					{
					DebugLocation(391, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1541);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(392, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 29);
			LeaveRule("stmt_switch", 29);
			LeaveRule_stmt_switch();
		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:397:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(397, 1);
		try
		{
			// SugarWalker.g:398:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==Stmt_Defer))
			{
				alt49 = 1;
			}
			else if ((LA49_0==Stmt_Finally))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:398:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(398, 4);
				DebugLocation(398, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1563); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(398, 18);
				PushFollow(Follow._stmt_in_stmt_defer1567);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(399, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:402:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(402, 4);
				DebugLocation(402, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1577); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(402, 20);
				PushFollow(Follow._stmt_in_stmt_defer1581);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(403, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:408:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 31);
		TraceIn("stmt_expr", 31);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(408, 1);
		try
		{
			// SugarWalker.g:409:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt50 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 112:
			case 117:
			case 120:
			case 127:
			case 130:
			case 134:
			case 179:
			case DOUBLE:
				{
				alt50 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:409:4: a= stmt_using
				{
				DebugLocation(409, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1602);
				a=stmt_using();
				PopFollow();

				DebugLocation(409, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:410:4: b= expr
				{
				DebugLocation(410, 5);
				PushFollow(Follow._expr_in_stmt_expr1611);
				b=expr();
				PopFollow();

				DebugLocation(410, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:411:4: c= stmt_typedef
				{
				DebugLocation(411, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1620);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(411, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 31);
			LeaveRule("stmt_expr", 31);
			LeaveRule_stmt_expr();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:414:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 32);
		TraceIn("stmt_using", 32);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(414, 1);
		try
		{
			// SugarWalker.g:419:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:419:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(419, 4);
			DebugLocation(419, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1643); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(419, 17);
				// SugarWalker.g:419:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=3;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==IDENT))
					{
						alt51 = 1;
					}
					else if ((LA51_0==156))
					{
						alt51 = 2;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:419:19: a= ident
						{
						DebugLocation(419, 20);
						PushFollow(Follow._ident_in_stmt_using1649);
						a=ident();
						PopFollow();

						DebugLocation(419, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:420:10: b= 'namespace'
						{
						DebugLocation(420, 11);
						b=(CommonTree)Match(input,156,Follow._156_in_stmt_using1664); 
						DebugLocation(420, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 32);
			LeaveRule("stmt_using", 32);
			LeaveRule_stmt_using();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:423:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(423, 1);
		try
		{
			// SugarWalker.g:424:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:424:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(424, 4);
			DebugLocation(424, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1685); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(424, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1689);
			a=type_name();
			PopFollow();

			DebugLocation(424, 32);
			PushFollow(Follow._ident_in_stmt_typedef1693);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(425, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:430:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(430, 1);
		try
		{
			// SugarWalker.g:431:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:431:4: a= expr
			{
			DebugLocation(431, 5);
			PushFollow(Follow._expr_in_stmt_alloc1714);
			a=expr();
			PopFollow();

			DebugLocation(431, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:434:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 35);
		TraceIn("stmt_if", 35);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(434, 1);
		try
		{
			// SugarWalker.g:435:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==Stmt_If))
			{
				alt54 = 1;
			}
			else if ((LA54_0==Stmt_Unless))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:435:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(435, 4);
				DebugLocation(435, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1732); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(435, 15);
				PushFollow(Follow._expr_in_stmt_if1736);
				a=expr();
				PopFollow();

				DebugLocation(435, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1740);
				b=stmt_block();
				PopFollow();

				DebugLocation(435, 34);
				// SugarWalker.g:435:34: (c= stmt_block )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==Stmt_Block))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:435:35: c= stmt_block
					{
					DebugLocation(435, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1745);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(436, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:439:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(439, 4);
				DebugLocation(439, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1757); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(439, 19);
				PushFollow(Follow._expr_in_stmt_if1761);
				a=expr();
				PopFollow();

				DebugLocation(439, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1765);
				b=stmt_block();
				PopFollow();

				DebugLocation(439, 38);
				// SugarWalker.g:439:38: (c= stmt_block )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==Stmt_Block))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:439:39: c= stmt_block
					{
					DebugLocation(439, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1770);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(440, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 35);
			LeaveRule("stmt_if", 35);
			LeaveRule_stmt_if();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:445:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 36);
		TraceIn("stmt_while", 36);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(445, 1);
		try
		{
			// SugarWalker.g:446:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt56=3;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt56 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt56 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt56 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:446:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(446, 4);
				DebugLocation(446, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1792); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(446, 18);
				PushFollow(Follow._expr_in_stmt_while1796);
				a=expr();
				PopFollow();

				DebugLocation(446, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1800);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(447, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:450:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(450, 4);
				DebugLocation(450, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1810); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(450, 18);
				PushFollow(Follow._expr_in_stmt_while1814);
				a=expr();
				PopFollow();

				DebugLocation(450, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1818);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(451, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:454:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(454, 4);
				DebugLocation(454, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1828); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(454, 16);
				// SugarWalker.g:454:16: (a= expr )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=Expr_Access && LA55_0<=Expr_Alloc_Equal)||(LA55_0>=Expr_Bin && LA55_0<=Expr_Where)||LA55_0==IDENT||LA55_0==Match_Expr||LA55_0==Match_Tuple||LA55_0==NUMBER||LA55_0==STRING||LA55_0==88||LA55_0==91||LA55_0==95||LA55_0==98||LA55_0==103||LA55_0==109||LA55_0==112||LA55_0==117||LA55_0==120||LA55_0==127||LA55_0==130||LA55_0==134||LA55_0==179||LA55_0==DOUBLE))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:454:17: a= expr
					{
					DebugLocation(454, 18);
					PushFollow(Follow._expr_in_stmt_while1833);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(454, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1839);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(455, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 36);
			LeaveRule("stmt_while", 36);
			LeaveRule_stmt_while();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:472:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 37);
		TraceIn("for_item", 37);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(472, 1);
		try
		{
			// SugarWalker.g:473:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt60=6;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt60 = 1;
				}
				break;
			case For_Item_Til:
				{
				alt60 = 2;
				}
				break;
			case For_Item_Down_To:
				{
				alt60 = 3;
				}
				break;
			case For_Item_Each:
				{
				alt60 = 4;
				}
				break;
			case For_Item_Map:
				{
				alt60 = 5;
				}
				break;
			case For_Item_When:
				{
				alt60 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:473:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(473, 4);
				DebugLocation(473, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1859); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(473, 19);
				PushFollow(Follow._ident_in_for_item1863);
				a=ident();
				PopFollow();

				DebugLocation(473, 27);
				PushFollow(Follow._expr_in_for_item1867);
				b=expr();
				PopFollow();

				DebugLocation(473, 34);
				PushFollow(Follow._expr_in_for_item1871);
				c=expr();
				PopFollow();

				DebugLocation(473, 40);
				// SugarWalker.g:473:40: (d= expr )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if (((LA57_0>=Expr_Access && LA57_0<=Expr_Alloc_Equal)||(LA57_0>=Expr_Bin && LA57_0<=Expr_Where)||LA57_0==IDENT||LA57_0==Match_Expr||LA57_0==Match_Tuple||LA57_0==NUMBER||LA57_0==STRING||LA57_0==88||LA57_0==91||LA57_0==95||LA57_0==98||LA57_0==103||LA57_0==109||LA57_0==112||LA57_0==117||LA57_0==120||LA57_0==127||LA57_0==130||LA57_0==134||LA57_0==179||LA57_0==DOUBLE))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:473:41: d= expr
					{
					DebugLocation(473, 42);
					PushFollow(Follow._expr_in_for_item1876);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(474, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.To);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:477:4: ^( For_Item_Til a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(477, 4);
				DebugLocation(477, 6);
				Match(input,For_Item_Til,Follow._For_Item_Til_in_for_item1888); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(477, 20);
				PushFollow(Follow._ident_in_for_item1892);
				a=ident();
				PopFollow();

				DebugLocation(477, 28);
				PushFollow(Follow._expr_in_for_item1896);
				b=expr();
				PopFollow();

				DebugLocation(477, 35);
				PushFollow(Follow._expr_in_for_item1900);
				c=expr();
				PopFollow();

				DebugLocation(477, 41);
				// SugarWalker.g:477:41: (d= expr )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=Expr_Access && LA58_0<=Expr_Alloc_Equal)||(LA58_0>=Expr_Bin && LA58_0<=Expr_Where)||LA58_0==IDENT||LA58_0==Match_Expr||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==88||LA58_0==91||LA58_0==95||LA58_0==98||LA58_0==103||LA58_0==109||LA58_0==112||LA58_0==117||LA58_0==120||LA58_0==127||LA58_0==130||LA58_0==134||LA58_0==179||LA58_0==DOUBLE))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:477:42: d= expr
					{
					DebugLocation(477, 43);
					PushFollow(Follow._expr_in_for_item1905);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(478, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.Til);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:481:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(481, 4);
				DebugLocation(481, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1917); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(481, 24);
				PushFollow(Follow._ident_in_for_item1921);
				a=ident();
				PopFollow();

				DebugLocation(481, 32);
				PushFollow(Follow._expr_in_for_item1925);
				b=expr();
				PopFollow();

				DebugLocation(481, 39);
				PushFollow(Follow._expr_in_for_item1929);
				c=expr();
				PopFollow();

				DebugLocation(481, 45);
				// SugarWalker.g:481:45: (d= expr )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if (((LA59_0>=Expr_Access && LA59_0<=Expr_Alloc_Equal)||(LA59_0>=Expr_Bin && LA59_0<=Expr_Where)||LA59_0==IDENT||LA59_0==Match_Expr||LA59_0==Match_Tuple||LA59_0==NUMBER||LA59_0==STRING||LA59_0==88||LA59_0==91||LA59_0==95||LA59_0==98||LA59_0==103||LA59_0==109||LA59_0==112||LA59_0==117||LA59_0==120||LA59_0==127||LA59_0==130||LA59_0==134||LA59_0==179||LA59_0==DOUBLE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:481:46: d= expr
					{
					DebugLocation(481, 47);
					PushFollow(Follow._expr_in_for_item1934);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(482, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.DownTo);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:485:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(485, 4);
				DebugLocation(485, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1946); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(485, 21);
				PushFollow(Follow._ident_in_for_item1950);
				a=ident();
				PopFollow();

				DebugLocation(485, 29);
				PushFollow(Follow._expr_in_for_item1954);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(486, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:489:4: ^( For_Item_Map a= ident b= expr )
				{
				DebugLocation(489, 4);
				DebugLocation(489, 6);
				Match(input,For_Item_Map,Follow._For_Item_Map_in_for_item1964); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(489, 20);
				PushFollow(Follow._ident_in_for_item1968);
				a=ident();
				PopFollow();

				DebugLocation(489, 28);
				PushFollow(Follow._expr_in_for_item1972);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(490, 2);

						value = new ForItemMap(a, b);
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:493:4: ^( For_Item_When b= expr )
				{
				DebugLocation(493, 4);
				DebugLocation(493, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1982); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(493, 21);
				PushFollow(Follow._expr_in_for_item1986);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(494, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 37);
			LeaveRule("for_item", 37);
			LeaveRule_for_item();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:499:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 38);
		TraceIn("for_item_list", 38);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(499, 1);
		try
		{
			// SugarWalker.g:504:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:504:4: (a= for_item )+
			{
			DebugLocation(504, 4);
			// SugarWalker.g:504:4: (a= for_item )+
			int cnt61=0;
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if (((LA61_0>=For_Item_Down_To && LA61_0<=For_Item_When)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:504:5: a= for_item
					{
					DebugLocation(504, 6);
					PushFollow(Follow._for_item_in_for_item_list2013);
					a=for_item();
					PopFollow();

					DebugLocation(504, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt61 >= 1)
						goto loop61;

					EarlyExitException eee61 = new EarlyExitException( 61, input );
					DebugRecognitionException(eee61);
					throw eee61;
				}
				cnt61++;
			}
			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 38);
			LeaveRule("for_item_list", 38);
			LeaveRule_for_item_list();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:507:1: stmt_for returns [StmtFor value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 39);
		TraceIn("stmt_for", 39);
		StmtFor value = default(StmtFor);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(507, 1);
		try
		{
			// SugarWalker.g:508:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:508:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(508, 4);
			DebugLocation(508, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for2034); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(508, 16);
			PushFollow(Follow._for_item_list_in_stmt_for2038);
			a=for_item_list();
			PopFollow();

			DebugLocation(508, 32);
			PushFollow(Follow._stmt_block_in_stmt_for2042);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(509, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 39);
			LeaveRule("stmt_for", 39);
			LeaveRule_stmt_for();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:514:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 40);
		TraceIn("stmt_try", 40);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(514, 1);
		try
		{
			// SugarWalker.g:515:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:515:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(515, 4);
			DebugLocation(515, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try2062); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(515, 16);
			PushFollow(Follow._stmt_block_in_stmt_try2066);
			a=stmt_block();
			PopFollow();

			DebugLocation(515, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2070);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(515, 42);
			PushFollow(Follow._stmt_block_in_stmt_try2074);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(516, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 40);
			LeaveRule("stmt_try", 40);
			LeaveRule_stmt_try();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:521:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(521, 1);
		try
		{
			// SugarWalker.g:522:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:522:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(522, 4);
			DebugLocation(522, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return2094); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(522, 18);
				// SugarWalker.g:522:18: (a= expr )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if (((LA62_0>=Expr_Access && LA62_0<=Expr_Alloc_Equal)||(LA62_0>=Expr_Bin && LA62_0<=Expr_Where)||LA62_0==IDENT||LA62_0==Match_Expr||LA62_0==Match_Tuple||LA62_0==NUMBER||LA62_0==STRING||LA62_0==88||LA62_0==91||LA62_0==95||LA62_0==98||LA62_0==103||LA62_0==109||LA62_0==112||LA62_0==117||LA62_0==120||LA62_0==127||LA62_0==130||LA62_0==134||LA62_0==179||LA62_0==DOUBLE))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:522:19: a= expr
					{
					DebugLocation(522, 20);
					PushFollow(Follow._expr_in_stmt_return2099);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(523, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(526, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:528:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 42);
		TraceIn("ident", 42);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(528, 1);
		try
		{
			// SugarWalker.g:533:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:533:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(533, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2127); 
			DebugLocation(533, 12);
			 value += a.Text; 
			DebugLocation(533, 34);
			// SugarWalker.g:533:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==111))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:533:35: '::' a= IDENT
					{
					DebugLocation(533, 35);
					Match(input,111,Follow._111_in_ident2132); 
					DebugLocation(533, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2136); 
					DebugLocation(533, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(534, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 42);
			LeaveRule("ident", 42);
			LeaveRule_ident();
		}
		DebugLocation(537, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:539:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 43);
		TraceIn("ident_list", 43);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(539, 1);
		try
		{
			// SugarWalker.g:544:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:544:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(544, 4);
			DebugLocation(544, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list2164); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(544, 17);
				// SugarWalker.g:544:17: (a= ident )*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==IDENT))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:544:18: a= ident
						{
						DebugLocation(544, 19);
						PushFollow(Follow._ident_in_ident_list2169);
						a=ident();
						PopFollow();

						DebugLocation(544, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 43);
			LeaveRule("ident_list", 43);
			LeaveRule_ident_list();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:547:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 44);
		TraceIn("alloc_expr", 44);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(547, 1);
		try
		{
			// SugarWalker.g:548:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==Expr_Alloc_Equal))
			{
				alt65 = 1;
			}
			else if ((LA65_0==Expr_Alloc_Bracket))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:548:4: ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(548, 4);
				DebugLocation(548, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr2191); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(548, 24);
				PushFollow(Follow._type_name_in_alloc_expr2195);
				a=type_name();
				PopFollow();

				DebugLocation(548, 36);
				PushFollow(Follow._ident_list_in_alloc_expr2199);
				b=ident_list();
				PopFollow();

				DebugLocation(548, 49);
				PushFollow(Follow._expr_list_in_alloc_expr2203);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(549, 2);

						if (c != null && c.Count > 0)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:559:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(559, 4);
				DebugLocation(559, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr2213); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(559, 26);
				PushFollow(Follow._type_name_in_alloc_expr2217);
				a=type_name();
				PopFollow();

				DebugLocation(559, 38);
				PushFollow(Follow._ident_list_in_alloc_expr2221);
				b=ident_list();
				PopFollow();

				DebugLocation(559, 51);
				PushFollow(Follow._expr_list_in_alloc_expr2225);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(560, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 44);
			LeaveRule("alloc_expr", 44);
			LeaveRule_alloc_expr();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:565:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 45);
		TraceIn("expr_tuple", 45);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(565, 1);
		try
		{
			// SugarWalker.g:570:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:570:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(570, 4);
			DebugLocation(570, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2250); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(570, 17);
			// SugarWalker.g:570:17: (a= expr )+
			int cnt66=0;
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if (((LA66_0>=Expr_Access && LA66_0<=Expr_Alloc_Equal)||(LA66_0>=Expr_Bin && LA66_0<=Expr_Where)||LA66_0==IDENT||LA66_0==Match_Expr||LA66_0==Match_Tuple||LA66_0==NUMBER||LA66_0==STRING||LA66_0==88||LA66_0==91||LA66_0==95||LA66_0==98||LA66_0==103||LA66_0==109||LA66_0==112||LA66_0==117||LA66_0==120||LA66_0==127||LA66_0==130||LA66_0==134||LA66_0==179||LA66_0==DOUBLE))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:570:18: a= expr
					{
					DebugLocation(570, 19);
					PushFollow(Follow._expr_in_expr_tuple2255);
					a=expr();
					PopFollow();

					DebugLocation(570, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt66 >= 1)
						goto loop66;

					EarlyExitException eee66 = new EarlyExitException( 66, input );
					DebugRecognitionException(eee66);
					throw eee66;
				}
				cnt66++;
			}
			loop66:
				;

			} finally { DebugExitSubRule(66); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 45);
			LeaveRule("expr_tuple", 45);
			LeaveRule_expr_tuple();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:573:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 46);
		TraceIn("match_tuple", 46);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(573, 1);
		try
		{
			// SugarWalker.g:578:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:578:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(578, 4);
			DebugLocation(578, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2282); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(578, 18);
				// SugarWalker.g:578:18: (a= expr )*
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if (((LA67_0>=Expr_Access && LA67_0<=Expr_Alloc_Equal)||(LA67_0>=Expr_Bin && LA67_0<=Expr_Where)||LA67_0==IDENT||LA67_0==Match_Expr||LA67_0==Match_Tuple||LA67_0==NUMBER||LA67_0==STRING||LA67_0==88||LA67_0==91||LA67_0==95||LA67_0==98||LA67_0==103||LA67_0==109||LA67_0==112||LA67_0==117||LA67_0==120||LA67_0==127||LA67_0==130||LA67_0==134||LA67_0==179||LA67_0==DOUBLE))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch ( alt67 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:578:19: a= expr
						{
						DebugLocation(578, 20);
						PushFollow(Follow._expr_in_match_tuple2287);
						a=expr();
						PopFollow();

						DebugLocation(578, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop67;
					}
				}

				loop67:
					;

				} finally { DebugExitSubRule(67); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 46);
			LeaveRule("match_tuple", 46);
			LeaveRule_match_tuple();
		}
		DebugLocation(579, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:581:1: expr_list returns [List<Expr> value] : ^( Expr_Args (a= expr )* ) ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 47);
		TraceIn("expr_list", 47);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(581, 1);
		try
		{
			// SugarWalker.g:586:2: ( ^( Expr_Args (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:586:4: ^( Expr_Args (a= expr )* )
			{
			DebugLocation(586, 4);
			DebugLocation(586, 6);
			Match(input,Expr_Args,Follow._Expr_Args_in_expr_list2313); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(586, 16);
				// SugarWalker.g:586:16: (a= expr )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if (((LA68_0>=Expr_Access && LA68_0<=Expr_Alloc_Equal)||(LA68_0>=Expr_Bin && LA68_0<=Expr_Where)||LA68_0==IDENT||LA68_0==Match_Expr||LA68_0==Match_Tuple||LA68_0==NUMBER||LA68_0==STRING||LA68_0==88||LA68_0==91||LA68_0==95||LA68_0==98||LA68_0==103||LA68_0==109||LA68_0==112||LA68_0==117||LA68_0==120||LA68_0==127||LA68_0==130||LA68_0==134||LA68_0==179||LA68_0==DOUBLE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:586:17: a= expr
						{
						DebugLocation(586, 18);
						PushFollow(Follow._expr_in_expr_list2318);
						a=expr();
						PopFollow();

						DebugLocation(586, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 47);
			LeaveRule("expr_list", 47);
			LeaveRule_expr_list();
		}
		DebugLocation(587, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:589:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 48);
		TraceIn("call_expr", 48);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(589, 1);
		try
		{
			// SugarWalker.g:590:2: ( ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:590:4: ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list )
			{
			DebugLocation(590, 4);
			DebugLocation(590, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2339); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(590, 17);
			PushFollow(Follow._expr_in_call_expr2343);
			a=expr();
			PopFollow();

			DebugLocation(590, 23);
			// SugarWalker.g:590:23: (b= generic_parameter )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==Generic_Patameters))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:590:24: b= generic_parameter
				{
				DebugLocation(590, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2348);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(590, 47);
			PushFollow(Follow._expr_list_in_call_expr2354);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(591, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 48);
			LeaveRule("call_expr", 48);
			LeaveRule_call_expr();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:596:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr_list ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 49);
		TraceIn("dict_expr", 49);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(596, 1);
		try
		{
			// SugarWalker.g:597:2: ( ^( Expr_Dict a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:597:4: ^( Expr_Dict a= expr b= expr_list )
			{
			DebugLocation(597, 4);
			DebugLocation(597, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2374); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(597, 17);
			PushFollow(Follow._expr_in_dict_expr2378);
			a=expr();
			PopFollow();

			DebugLocation(597, 24);
			PushFollow(Follow._expr_list_in_dict_expr2382);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(598, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 49);
			LeaveRule("dict_expr", 49);
			LeaveRule_dict_expr();
		}
		DebugLocation(601, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:603:1: lambda_expr returns [Expr value] : ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) );
	[GrammarRule("lambda_expr")]
	private Expr lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 50);
		TraceIn("lambda_expr", 50);
		Expr value = default(Expr);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		SugarType t = default(SugarType);
		StmtBlock a = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(603, 1);
		try
		{
			// SugarWalker.g:604:2: ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) )
			int alt78=4;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==Expr_Lambda))
			{
				int LA78_1 = input.LA(2);

				if ((LA78_1==DOWN))
				{
					switch (input.LA(3))
					{
					case 104:
						{
						alt78 = 1;
						}
						break;
					case 123:
						{
						alt78 = 2;
						}
						break;
					case 102:
						{
						alt78 = 3;
						}
						break;
					case 122:
						{
						alt78 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 78, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:604:4: ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(604, 4);
				DebugLocation(604, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2402); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(604, 18);
				Match(input,104,Follow._104_in_lambda_expr2404); 
				DebugLocation(604, 23);
				// SugarWalker.g:604:23: (b= func_args )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==Func_Args))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:604:24: b= func_args
					{
					DebugLocation(604, 25);
					PushFollow(Follow._func_args_in_lambda_expr2409);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(604, 38);
				// SugarWalker.g:604:38: (t= type_name )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if (((LA71_0>=Type_Array && LA71_0<=Type_Ident)||(LA71_0>=Type_Ref && LA71_0<=Type_Template)))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:604:39: t= type_name
					{
					DebugLocation(604, 40);
					PushFollow(Follow._type_name_in_lambda_expr2416);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(604, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2422);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(605, 2);

						value = new ExprLambda(a, b, true, t);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:608:4: ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(608, 4);
				DebugLocation(608, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2432); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(608, 18);
				Match(input,123,Follow._123_in_lambda_expr2434); 
				DebugLocation(608, 23);
				// SugarWalker.g:608:23: (b= func_args )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==Func_Args))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:608:24: b= func_args
					{
					DebugLocation(608, 25);
					PushFollow(Follow._func_args_in_lambda_expr2439);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(608, 38);
				// SugarWalker.g:608:38: (t= type_name )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if (((LA73_0>=Type_Array && LA73_0<=Type_Ident)||(LA73_0>=Type_Ref && LA73_0<=Type_Template)))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:608:39: t= type_name
					{
					DebugLocation(608, 40);
					PushFollow(Follow._type_name_in_lambda_expr2446);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(608, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2452);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(609, 2);

						value = new ExprLambda(a, b, false, t);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:612:4: ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(612, 4);
				DebugLocation(612, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2462); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(612, 18);
				Match(input,102,Follow._102_in_lambda_expr2464); 
				DebugLocation(612, 24);
				// SugarWalker.g:612:24: (b= func_args )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==Func_Args))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:612:25: b= func_args
					{
					DebugLocation(612, 26);
					PushFollow(Follow._func_args_in_lambda_expr2469);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(612, 39);
				// SugarWalker.g:612:39: (t= type_name )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if (((LA75_0>=Type_Array && LA75_0<=Type_Ident)||(LA75_0>=Type_Ref && LA75_0<=Type_Template)))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:612:40: t= type_name
					{
					DebugLocation(612, 41);
					PushFollow(Follow._type_name_in_lambda_expr2476);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(612, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2482);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(613, 2);

						value = new ExprCurryLambda(a, b, true, t);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:616:4: ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(616, 4);
				DebugLocation(616, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2492); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(616, 18);
				Match(input,122,Follow._122_in_lambda_expr2494); 
				DebugLocation(616, 24);
				// SugarWalker.g:616:24: (b= func_args )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==Func_Args))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:616:25: b= func_args
					{
					DebugLocation(616, 26);
					PushFollow(Follow._func_args_in_lambda_expr2499);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(616, 39);
				// SugarWalker.g:616:39: (t= type_name )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if (((LA77_0>=Type_Array && LA77_0<=Type_Ident)||(LA77_0>=Type_Ref && LA77_0<=Type_Template)))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:616:40: t= type_name
					{
					DebugLocation(616, 41);
					PushFollow(Follow._type_name_in_lambda_expr2506);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(616, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2512);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(617, 2);

						value = new ExprCurryLambda(a, b, false, t);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 50);
			LeaveRule("lambda_expr", 50);
			LeaveRule_lambda_expr();
		}
		DebugLocation(620, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:622:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 51);
		TraceIn("new_expr", 51);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(622, 1);
		try
		{
			// SugarWalker.g:623:2: ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==Expr_New_Type))
			{
				alt79 = 1;
			}
			else if ((LA79_0==Expr_New_Array))
			{
				alt79 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:623:4: ^( Expr_New_Type a= type_name b= expr_list )
				{
				DebugLocation(623, 4);
				DebugLocation(623, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2532); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(623, 21);
				PushFollow(Follow._type_name_in_new_expr2536);
				a=type_name();
				PopFollow();

				DebugLocation(623, 33);
				PushFollow(Follow._expr_list_in_new_expr2540);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(624, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:627:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(627, 4);
				DebugLocation(627, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2550); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(627, 22);
				PushFollow(Follow._type_name_in_new_expr2554);
				a=type_name();
				PopFollow();

				DebugLocation(627, 34);
				PushFollow(Follow._expr_list_in_new_expr2558);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(628, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 51);
			LeaveRule("new_expr", 51);
			LeaveRule_new_expr();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:633:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident c= expr_list ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 52);
		TraceIn("call_with_expr", 52);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(633, 1);
		try
		{
			// SugarWalker.g:634:2: ( ^( Expr_Call_With a= expr b= ident c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:634:4: ^( Expr_Call_With a= expr b= ident c= expr_list )
			{
			DebugLocation(634, 4);
			DebugLocation(634, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2578); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(634, 22);
			PushFollow(Follow._expr_in_call_with_expr2582);
			a=expr();
			PopFollow();

			DebugLocation(634, 29);
			PushFollow(Follow._ident_in_call_with_expr2586);
			b=ident();
			PopFollow();

			DebugLocation(634, 37);
			PushFollow(Follow._expr_list_in_call_with_expr2590);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(635, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 52);
			LeaveRule("call_with_expr", 52);
			LeaveRule_call_with_expr();
		}
		DebugLocation(647, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:649:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 53);
		TraceIn("cast_expr", 53);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(649, 1);
		try
		{
			// SugarWalker.g:650:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:650:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(650, 4);
			DebugLocation(650, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2610); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(650, 17);
			PushFollow(Follow._type_name_in_cast_expr2614);
			a=type_name();
			PopFollow();

			DebugLocation(650, 29);
			PushFollow(Follow._expr_in_cast_expr2618);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(651, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 53);
			LeaveRule("cast_expr", 53);
			LeaveRule_cast_expr();
		}
		DebugLocation(654, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:656:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr )* ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 54);
		TraceIn("list_expr", 54);
		ExprList value = default(ExprList);


		Expr a = default(Expr);


			var list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(656, 1);
		try
		{
			// SugarWalker.g:661:2: ( ^( Expr_List (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:661:4: ^( Expr_List (a= expr )* )
			{
			DebugLocation(661, 4);
			DebugLocation(661, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2643); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(661, 16);
				// SugarWalker.g:661:16: (a= expr )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if (((LA80_0>=Expr_Access && LA80_0<=Expr_Alloc_Equal)||(LA80_0>=Expr_Bin && LA80_0<=Expr_Where)||LA80_0==IDENT||LA80_0==Match_Expr||LA80_0==Match_Tuple||LA80_0==NUMBER||LA80_0==STRING||LA80_0==88||LA80_0==91||LA80_0==95||LA80_0==98||LA80_0==103||LA80_0==109||LA80_0==112||LA80_0==117||LA80_0==120||LA80_0==127||LA80_0==130||LA80_0==134||LA80_0==179||LA80_0==DOUBLE))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:661:17: a= expr
						{
						DebugLocation(661, 18);
						PushFollow(Follow._expr_in_list_expr2648);
						a=expr();
						PopFollow();

						DebugLocation(661, 24);
						 list.Add(a); 

						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(662, 2);

					value = new ExprList(list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 54);
			LeaveRule("list_expr", 54);
			LeaveRule_list_expr();
		}
		DebugLocation(665, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_list_generation_expr();
	partial void LeaveRule_list_generation_expr();

	// $ANTLR start "list_generation_expr"
	// SugarWalker.g:667:1: list_generation_expr returns [ExprListGeneration value] : ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) ;
	[GrammarRule("list_generation_expr")]
	private ExprListGeneration list_generation_expr()
	{
		EnterRule_list_generation_expr();
		EnterRule("list_generation_expr", 55);
		TraceIn("list_generation_expr", 55);
		ExprListGeneration value = default(ExprListGeneration);


		SugarType a = default(SugarType);
		StmtFor b = default(StmtFor);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "list_generation_expr");
		DebugLocation(667, 1);
		try
		{
			// SugarWalker.g:668:2: ( ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:668:4: ^( Expr_List_Generation a= type_name b= stmt_for c= expr )
			{
			DebugLocation(668, 4);
			DebugLocation(668, 6);
			Match(input,Expr_List_Generation,Follow._Expr_List_Generation_in_list_generation_expr2672); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(668, 28);
			PushFollow(Follow._type_name_in_list_generation_expr2676);
			a=type_name();
			PopFollow();

			DebugLocation(668, 40);
			PushFollow(Follow._stmt_for_in_list_generation_expr2680);
			b=stmt_for();
			PopFollow();

			DebugLocation(668, 51);
			PushFollow(Follow._expr_in_list_generation_expr2684);
			c=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(669, 2);

					value = new ExprListGeneration(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_generation_expr", 55);
			LeaveRule("list_generation_expr", 55);
			LeaveRule_list_generation_expr();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "list_generation_expr"); }
		return value;

	}
	// $ANTLR end "list_generation_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:674:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 56);
		TraceIn("chain_expr", 56);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(674, 1);
		try
		{
			// SugarWalker.g:679:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:679:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(679, 4);
			DebugLocation(679, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2709); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(680, 5);
			PushFollow(Follow._expr_in_chain_expr2716);
			a=expr();
			PopFollow();

			DebugLocation(681, 4);

							last=a;
						
			DebugLocation(684, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==114||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(684, 64);
			PushFollow(Follow._expr_in_chain_expr2762);
			a=expr();
			PopFollow();

			DebugLocation(685, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(689, 4);
			// SugarWalker.g:689:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==86||LA81_0==114||LA81_0==118||LA81_0==121||(LA81_0>=124 && LA81_0<=125)||(LA81_0>=150 && LA81_0<=151)))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:690:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(690, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==86||input.LA(1)==114||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=150 && input.LA(1)<=151))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(690, 65);
					PushFollow(Follow._expr_in_chain_expr2814);
					a=expr();
					PopFollow();

					DebugLocation(691, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 56);
			LeaveRule("chain_expr", 56);
			LeaveRule_chain_expr();
		}
		DebugLocation(696, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:698:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(698, 1);
		try
		{
			// SugarWalker.g:703:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:703:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(703, 4);
			DebugLocation(703, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2848); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(703, 18);
			PushFollow(Follow._expr_in_where_expr2852);
			a=expr();
			PopFollow();

			DebugLocation(703, 24);
			// SugarWalker.g:703:24: (b= stmt )+
			int cnt82=0;
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if (((LA82_0>=Expr_Access && LA82_0<=Expr_Alloc_Equal)||(LA82_0>=Expr_Bin && LA82_0<=Expr_Where)||LA82_0==IDENT||LA82_0==Match_Expr||LA82_0==Match_Tuple||LA82_0==NUMBER||LA82_0==STRING||(LA82_0>=Stmt_Defer && LA82_0<=Stmt_While)||LA82_0==88||LA82_0==91||LA82_0==95||LA82_0==98||LA82_0==103||LA82_0==109||LA82_0==112||(LA82_0>=116 && LA82_0<=117)||LA82_0==120||LA82_0==127||(LA82_0>=129 && LA82_0<=130)||LA82_0==134||LA82_0==179||LA82_0==DOUBLE))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:703:25: b= stmt
					{
					DebugLocation(703, 26);
					PushFollow(Follow._stmt_in_where_expr2857);
					b=stmt();
					PopFollow();

					DebugLocation(703, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt82 >= 1)
						goto loop82;

					EarlyExitException eee82 = new EarlyExitException( 82, input );
					DebugRecognitionException(eee82);
					throw eee82;
				}
				cnt82++;
			}
			loop82:
				;

			} finally { DebugExitSubRule(82); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(704, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(707, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarWalker.g:709:1: match_item returns [ExprMatchItem value] : ^( Match_Expr_Item a= expr b= expr ) ;
	[GrammarRule("match_item")]
	private ExprMatchItem match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		ExprMatchItem value = default(ExprMatchItem);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(709, 1);
		try
		{
			// SugarWalker.g:710:2: ( ^( Match_Expr_Item a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:710:4: ^( Match_Expr_Item a= expr b= expr )
			{
			DebugLocation(710, 4);
			DebugLocation(710, 6);
			Match(input,Match_Expr_Item,Follow._Match_Expr_Item_in_match_item2882); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(710, 23);
			PushFollow(Follow._expr_in_match_item2886);
			a=expr();
			PopFollow();

			DebugLocation(710, 30);
			PushFollow(Follow._expr_in_match_item2890);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(711, 2);

					value = new ExprMatchItem(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(714, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return value;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarWalker.g:716:1: match_expr returns [Expr value] : ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) ;
	[GrammarRule("match_expr")]
	private Expr match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		Expr value = default(Expr);


		Expr a = default(Expr);
		SugarType tp = default(SugarType);
		ExprMatchItem b = default(ExprMatchItem);


			List<ExprMatchItem> list = new List<ExprMatchItem>();

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(716, 1);
		try
		{
			// SugarWalker.g:721:2: ( ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:721:5: ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ )
			{
			DebugLocation(721, 5);
			DebugLocation(721, 7);
			Match(input,Match_Expr,Follow._Match_Expr_in_match_expr2916); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(721, 18);
			// SugarWalker.g:721:18: (a= expr )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if (((LA83_0>=Expr_Access && LA83_0<=Expr_Alloc_Equal)||(LA83_0>=Expr_Bin && LA83_0<=Expr_Where)||LA83_0==IDENT||LA83_0==Match_Expr||LA83_0==Match_Tuple||LA83_0==NUMBER||LA83_0==STRING||LA83_0==88||LA83_0==91||LA83_0==95||LA83_0==98||LA83_0==103||LA83_0==109||LA83_0==112||LA83_0==117||LA83_0==120||LA83_0==127||LA83_0==130||LA83_0==134||LA83_0==179||LA83_0==DOUBLE))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:721:19: a= expr
				{
				DebugLocation(721, 20);
				PushFollow(Follow._expr_in_match_expr2921);
				a=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(721, 28);
			// SugarWalker.g:721:28: (tp= type_name )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if (((LA84_0>=Type_Array && LA84_0<=Type_Ident)||(LA84_0>=Type_Ref && LA84_0<=Type_Template)))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:721:29: tp= type_name
				{
				DebugLocation(721, 31);
				PushFollow(Follow._type_name_in_match_expr2928);
				tp=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(721, 44);
			// SugarWalker.g:721:44: (b= match_item )+
			int cnt85=0;
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==Match_Expr_Item))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:721:45: b= match_item
					{
					DebugLocation(721, 46);
					PushFollow(Follow._match_item_in_match_expr2935);
					b=match_item();
					PopFollow();

					DebugLocation(721, 58);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt85 >= 1)
						goto loop85;

					EarlyExitException eee85 = new EarlyExitException( 85, input );
					DebugRecognitionException(eee85);
					throw eee85;
				}
				cnt85++;
			}
			loop85:
				;

			} finally { DebugExitSubRule(85); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(722, 2);

					value = new ExprMatch(a, tp, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(725, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return value;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:727:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		Expr lambda = default(Expr);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		ExprListGeneration list_generation = default(ExprListGeneration);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		Expr expr_match = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(727, 1);
		try
		{
			// SugarWalker.g:728:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt86=29;
			try { DebugEnterDecision(86, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt86 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt86 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt86 = 3;
				}
				break;
			case Expr_Call:
				{
				alt86 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt86 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt86 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt86 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt86 = 8;
				}
				break;
			case Expr_List:
				{
				alt86 = 9;
				}
				break;
			case Expr_List_Generation:
				{
				alt86 = 10;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt86 = 11;
				}
				break;
			case Expr_Where:
				{
				alt86 = 12;
				}
				break;
			case Match_Expr:
				{
				alt86 = 13;
				}
				break;
			case Expr_Infix:
				{
				alt86 = 14;
				}
				break;
			case Expr_Cond:
				{
				alt86 = 15;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt86 = 16;
				}
				break;
			case Expr_Not_Null:
				{
				alt86 = 17;
				}
				break;
			case Expr_Access:
				{
				alt86 = 18;
				}
				break;
			case Expr_Chain:
				{
				alt86 = 19;
				}
				break;
			case Expr_Bin:
				{
				alt86 = 20;
				}
				break;
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 117:
			case 120:
			case 127:
			case 134:
			case 179:
				{
				alt86 = 21;
				}
				break;
			case 130:
				{
				alt86 = 22;
				}
				break;
			case Expr_Bracket:
				{
				alt86 = 23;
				}
				break;
			case Expr_Suffix:
				{
				alt86 = 24;
				}
				break;
			case Expr_Prefix:
				{
				alt86 = 25;
				}
				break;
			case 112:
				{
				alt86 = 26;
				}
				break;
			case IDENT:
				{
				alt86 = 27;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt86 = 28;
				}
				break;
			case STRING:
				{
				alt86 = 29;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:728:7: tuple= expr_tuple
				{
				DebugLocation(728, 12);
				PushFollow(Follow._expr_tuple_in_expr2964);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(729, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:732:4: alloc= alloc_expr
				{
				DebugLocation(732, 9);
				PushFollow(Follow._alloc_expr_in_expr2974);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(733, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:736:4: match= match_tuple
				{
				DebugLocation(736, 9);
				PushFollow(Follow._match_tuple_in_expr2984);
				match=match_tuple();
				PopFollow();

				DebugLocation(737, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:740:4: call= call_expr
				{
				DebugLocation(740, 8);
				PushFollow(Follow._call_expr_in_expr2994);
				call=call_expr();
				PopFollow();

				DebugLocation(741, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:744:4: call_with= call_with_expr
				{
				DebugLocation(744, 13);
				PushFollow(Follow._call_with_expr_in_expr3004);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(745, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:748:4: dict= dict_expr
				{
				DebugLocation(748, 8);
				PushFollow(Follow._dict_expr_in_expr3014);
				dict=dict_expr();
				PopFollow();

				DebugLocation(749, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:752:4: lambda= lambda_expr
				{
				DebugLocation(752, 10);
				PushFollow(Follow._lambda_expr_in_expr3024);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(753, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:756:4: cast= cast_expr
				{
				DebugLocation(756, 8);
				PushFollow(Follow._cast_expr_in_expr3034);
				cast=cast_expr();
				PopFollow();

				DebugLocation(757, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:760:4: list= list_expr
				{
				DebugLocation(760, 8);
				PushFollow(Follow._list_expr_in_expr3044);
				list=list_expr();
				PopFollow();

				DebugLocation(761, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:764:4: list_generation= list_generation_expr
				{
				DebugLocation(764, 19);
				PushFollow(Follow._list_generation_expr_in_expr3054);
				list_generation=list_generation_expr();
				PopFollow();

				DebugLocation(765, 2);

						value = list_generation;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:768:4: expr_new= new_expr
				{
				DebugLocation(768, 12);
				PushFollow(Follow._new_expr_in_expr3064);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(769, 2);

						value = expr_new;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:772:4: where= where_expr
				{
				DebugLocation(772, 9);
				PushFollow(Follow._where_expr_in_expr3074);
				where=where_expr();
				PopFollow();

				DebugLocation(773, 2);

						value = where;
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:776:4: expr_match= match_expr
				{
				DebugLocation(776, 14);
				PushFollow(Follow._match_expr_in_expr3084);
				expr_match=match_expr();
				PopFollow();

				DebugLocation(777, 2);

						value = expr_match;
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:780:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(780, 4);
				DebugLocation(780, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr3093); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(780, 27);
				PushFollow(Follow._ident_in_expr3097);
				ident_text=ident();
				PopFollow();

				DebugLocation(780, 35);
				PushFollow(Follow._expr_in_expr3101);
				a=expr();
				PopFollow();

				DebugLocation(780, 42);
				PushFollow(Follow._expr_in_expr3105);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(781, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:784:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(784, 4);
				DebugLocation(784, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr3115); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(784, 17);
				PushFollow(Follow._expr_in_expr3119);
				a=expr();
				PopFollow();

				DebugLocation(784, 24);
				PushFollow(Follow._expr_in_expr3123);
				b=expr();
				PopFollow();

				DebugLocation(784, 31);
				PushFollow(Follow._expr_in_expr3127);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(785, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:788:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(788, 4);
				DebugLocation(788, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr3137); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(788, 26);
				PushFollow(Follow._expr_in_expr3141);
				a=expr();
				PopFollow();

				DebugLocation(788, 33);
				PushFollow(Follow._expr_in_expr3145);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(789, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:792:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(792, 4);
				DebugLocation(792, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr3155); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(792, 21);
				PushFollow(Follow._expr_in_expr3159);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(793, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:796:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(796, 4);
				DebugLocation(796, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr3169); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(796, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=104 && input.LA(1)<=107)||input.LA(1)==111)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(796, 57);
				PushFollow(Follow._expr_in_expr3195);
				a=expr();
				PopFollow();

				DebugLocation(796, 73);
				PushFollow(Follow._ident_in_expr3199);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(797, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:800:4: chain= chain_expr
				{
				DebugLocation(800, 10);
				PushFollow(Follow._chain_expr_in_expr3212);
				chain=chain_expr();
				PopFollow();

				DebugLocation(801, 2);

						value = chain;
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:804:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(804, 4);
				DebugLocation(804, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr3221); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(804, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=86 && input.LA(1)<=87)||(input.LA(1)>=89 && input.LA(1)<=90)||input.LA(1)==94||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108||input.LA(1)==114||input.LA(1)==116||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=126)||input.LA(1)==133||input.LA(1)==136||(input.LA(1)>=150 && input.LA(1)<=151)||input.LA(1)==159||input.LA(1)==178||input.LA(1)==181)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(811, 9);
				PushFollow(Follow._expr_in_expr3352);
				a=expr();
				PopFollow();

				DebugLocation(811, 16);
				PushFollow(Follow._expr_in_expr3356);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(812, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:815:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(815, 4);
				DebugLocation(815, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==117||input.LA(1)==120||input.LA(1)==127||input.LA(1)==134||input.LA(1)==179)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(815, 88);
				PushFollow(Follow._expr_in_expr3414);
				a=expr();
				PopFollow();

				DebugLocation(815, 95);
				PushFollow(Follow._expr_in_expr3418);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(816, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:819:4: ^( '@' text_ident= ident )
				{
				DebugLocation(819, 4);
				DebugLocation(819, 6);
				Match(input,130,Follow._130_in_expr3428); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(819, 20);
				PushFollow(Follow._ident_in_expr3432);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(820, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:823:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(823, 4);
				DebugLocation(823, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3442); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(823, 20);
				PushFollow(Follow._expr_in_expr3446);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(824, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:827:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(827, 4);
				DebugLocation(827, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3456); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(827, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==97||input.LA(1)==101)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(827, 36);
				PushFollow(Follow._expr_in_expr3470);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(828, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:831:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(831, 4);
				DebugLocation(831, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3480); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(831, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==85||input.LA(1)==90||input.LA(1)==94||(input.LA(1)>=96 && input.LA(1)<=97)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==158||input.LA(1)==182)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(831, 80);
				PushFollow(Follow._expr_in_expr3522);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(832, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:835:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(835, 4);
				DebugLocation(835, 6);
				Match(input,112,Follow._112_in_expr3532); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(835, 12);
				PushFollow(Follow._expr_in_expr3536);
				a=expr();
				PopFollow();

				DebugLocation(835, 19);
				PushFollow(Follow._expr_in_expr3540);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(836, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:843:4: text_ident= ident
				{
				DebugLocation(843, 15);
				PushFollow(Follow._ident_in_expr3553);
				text_ident=ident();
				PopFollow();

				DebugLocation(844, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// SugarWalker.g:848:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(848, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(849, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// SugarWalker.g:852:4: text= STRING
				{
				DebugLocation(852, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3584); 
				DebugLocation(853, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(856, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA39 dfa39;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa39 = new DFA39( this );
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x7\xFFFF";
		private const string DFA39_eofS =
			"\x7\xFFFF";
		private const string DFA39_minS =
			"\x1\xC\x1\x3\x2\xFFFF\x1\x2E\x1\xFFFF\x1\x3";
		private const string DFA39_maxS =
			"\x2\xB7\x2\xFFFF\x1\x2E\x1\xFFFF\x1\xB7";
		private const string DFA39_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA39_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x3\x3\x1\xFFFF\x14\x3\x6\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1"+
				"\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x3\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2C"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2C\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6",
				"",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2C\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "282:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x202080000006848UL,0x1000000000480UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_global_using281 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0xEE000UL});
		public static readonly BitSet _type_name_in_global_alloc318 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc322 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc326 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc336 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc341 = new BitSet(new ulong[]{0x0UL,0xEE000UL});
		public static readonly BitSet _type_name_in_global_alloc347 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc351 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc355 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _112_in_global_alloc365 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc370 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc376 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc380 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef400 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef405 = new BitSet(new ulong[]{0x0UL,0xEE000UL});
		public static readonly BitSet _type_name_in_global_typedef411 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_global_typedef415 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item480 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item485 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _140_in_attribute_item493 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _163_in_attribute_item501 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _160_in_attribute_item509 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _174_in_attribute_item517 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item525 = new BitSet(new ulong[]{0x2100400000000008UL});
		public static readonly BitSet _attribute_item_in_attribute553 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def574 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def578 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _global_block_in_namespace_def583 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def610 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def615 = new BitSet(new ulong[]{0x2000000000000008UL});
		public static readonly BitSet _STRING_in_import_def625 = new BitSet(new ulong[]{0x2000000000000008UL});
		public static readonly BitSet _Enum_in_enum_def646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def651 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def657 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_enum_def661 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def681 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _160_in_class_def686 = new BitSet(new ulong[]{0x400000000010UL});
		public static readonly BitSet _attribute_in_class_def693 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def699 = new BitSet(new ulong[]{0x1340000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def704 = new BitSet(new ulong[]{0x1240000000008UL});
		public static readonly BitSet _func_args_in_class_def711 = new BitSet(new ulong[]{0x1200000000008UL});
		public static readonly BitSet _ident_list_in_class_def718 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _global_block_in_class_def725 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident752 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _140_in_type_ident756 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x1802001000UL});
		public static readonly BitSet _163_in_type_ident769 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x1802001000UL});
		public static readonly BitSet _153_in_type_ident782 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x1802001000UL});
		public static readonly BitSet _164_in_type_ident796 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x1802001000UL});
		public static readonly BitSet _ident_in_type_ident811 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x1802001000UL});
		public static readonly BitSet _Type_Template_in_type_template848 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template852 = new BitSet(new ulong[]{0x8UL,0xEE000UL});
		public static readonly BitSet _type_name_in_type_template857 = new BitSet(new ulong[]{0x8UL,0xEE000UL});
		public static readonly BitSet _Type_Array_in_type_array886 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array890 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_type_array895 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _Type_Star_in_type_star919 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star923 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_star925 = new BitSet(new ulong[]{0x8UL,0x40000000UL});
		public static readonly BitSet _94_in_type_star930 = new BitSet(new ulong[]{0x8UL,0x40000000UL});
		public static readonly BitSet _Type_Ref_in_type_ref952 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref956 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Func_in_type_func976 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_list_in_type_func981 = new BitSet(new ulong[]{0x8UL,0xEE000UL});
		public static readonly BitSet _type_name_in_type_func988 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_List_in_type_list1014 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_list1019 = new BitSet(new ulong[]{0x8UL,0xEE000UL});
		public static readonly BitSet _type_array_in_type_name1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name1051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name1078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type_name1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args1110 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args1115 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter1142 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter1147 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _Func_Def_in_func_def1173 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _160_in_func_def1178 = new BitSet(new ulong[]{0x6150540FFFFF7010UL,0x81213095C90EE000UL,0xC8400000000044UL});
		public static readonly BitSet _174_in_func_def1185 = new BitSet(new ulong[]{0x6150540FFFFF7010UL,0x81213095C90EE000UL,0xC8000000000044UL});
		public static readonly BitSet _attribute_in_func_def1192 = new BitSet(new ulong[]{0x6150540FFFFF7000UL,0x81213095C90EE000UL,0xC8000000000044UL});
		public static readonly BitSet _type_name_in_func_def1198 = new BitSet(new ulong[]{0x6150540FFFFF7000UL,0x81213095C9000000UL,0xC8000000000044UL});
		public static readonly BitSet _182_in_func_def1205 = new BitSet(new ulong[]{0x6150540FFFFF7000UL,0x81213095C9000000UL,0x88000000000044UL});
		public static readonly BitSet _ident_in_func_def1212 = new BitSet(new ulong[]{0x6150540FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _set_in_func_def1218 = new BitSet(new ulong[]{0x6150540FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _generic_parameter_in_func_def1233 = new BitSet(new ulong[]{0x6150440FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _func_args_in_func_def1241 = new BitSet(new ulong[]{0x6150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _stmt_block_in_func_def1252 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1262 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1290 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1295 = new BitSet(new ulong[]{0xA150400FFFFF7008UL,0x8131208489000FFFUL,0x88000000000046UL});
		public static readonly BitSet _stmt_expr_in_stmt1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_translate1421 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1425 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_stmt_translate1429 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _112_in_stmt_translate1439 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1443 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1447 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _116_in_stmt_translate1457 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1461 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_stmt_translate1465 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1490 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1494 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1498 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1525 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1530 = new BitSet(new ulong[]{0x4000000000000008UL,0x1000UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1536 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1541 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1563 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1567 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1577 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1581 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1649 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_stmt_using1664 = new BitSet(new ulong[]{0x400000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1685 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1689 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1693 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1732 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1736 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1740 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1745 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1757 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1761 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1765 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1770 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1792 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1796 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1800 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1810 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1814 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1818 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1828 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1833 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1839 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1859 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1863 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1867 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1871 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1876 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Til_in_for_item1888 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1892 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1896 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1900 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1905 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1917 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1921 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1925 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1929 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1934 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1946 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1950 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1954 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Map_in_for_item1964 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1968 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_for_item1972 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1982 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1986 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list2013 = new BitSet(new ulong[]{0x3F000000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for2034 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for2038 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2042 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try2062 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try2066 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2070 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2074 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return2094 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return2099 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident2127 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_ident2132 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _IDENT_in_ident2136 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list2164 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list2169 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr2191 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2195 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2199 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2203 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr2213 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2217 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2221 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2225 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2250 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2255 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2287 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _Expr_Args_in_expr_list2313 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_list2318 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _Expr_Call_in_call_expr2339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2343 = new BitSet(new ulong[]{0x100000008000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2348 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_expr2354 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2374 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2378 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_dict_expr2382 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2402 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _104_in_lambda_expr2404 = new BitSet(new ulong[]{0x4000040000000000UL,0xEE000UL});
		public static readonly BitSet _func_args_in_lambda_expr2409 = new BitSet(new ulong[]{0x4000000000000000UL,0xEE000UL});
		public static readonly BitSet _type_name_in_lambda_expr2416 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2422 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2432 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _123_in_lambda_expr2434 = new BitSet(new ulong[]{0x4000040000000000UL,0xEE000UL});
		public static readonly BitSet _func_args_in_lambda_expr2439 = new BitSet(new ulong[]{0x4000000000000000UL,0xEE000UL});
		public static readonly BitSet _type_name_in_lambda_expr2446 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2452 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2462 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _102_in_lambda_expr2464 = new BitSet(new ulong[]{0x4000040000000000UL,0xEE000UL});
		public static readonly BitSet _func_args_in_lambda_expr2469 = new BitSet(new ulong[]{0x4000000000000000UL,0xEE000UL});
		public static readonly BitSet _type_name_in_lambda_expr2476 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2482 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2492 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _122_in_lambda_expr2494 = new BitSet(new ulong[]{0x4000040000000000UL,0xEE000UL});
		public static readonly BitSet _func_args_in_lambda_expr2499 = new BitSet(new ulong[]{0x4000000000000000UL,0xEE000UL});
		public static readonly BitSet _type_name_in_lambda_expr2506 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2512 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2532 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2536 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2540 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2550 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2554 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2558 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2582 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2586 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2590 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2610 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2614 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_cast_expr2618 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_list_expr2648 = new BitSet(new ulong[]{0x2150400FFFFF7008UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _Expr_List_Generation_in_list_generation_expr2672 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_list_generation_expr2676 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _stmt_for_in_list_generation_expr2680 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_list_generation_expr2684 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2709 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2716 = new BitSet(new ulong[]{0x0UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _set_in_chain_expr2728 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_chain_expr2762 = new BitSet(new ulong[]{0x8UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _set_in_chain_expr2780 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_chain_expr2814 = new BitSet(new ulong[]{0x8UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _Expr_Where_in_where_expr2848 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2852 = new BitSet(new ulong[]{0xA150400FFFFF7000UL,0x8131208489000FFFUL,0x88000000000046UL});
		public static readonly BitSet _stmt_in_where_expr2857 = new BitSet(new ulong[]{0xA150400FFFFF7008UL,0x8131208489000FFFUL,0x88000000000046UL});
		public static readonly BitSet _Match_Expr_Item_in_match_item2882 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_item2886 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_match_item2890 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Match_Expr_in_match_expr2916 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_expr2921 = new BitSet(new ulong[]{0x20000000000000UL,0xEE000UL});
		public static readonly BitSet _type_name_in_match_expr2928 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _match_item_in_match_expr2935 = new BitSet(new ulong[]{0x20000000000008UL});
		public static readonly BitSet _expr_tuple_in_expr2964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr3004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr3014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr3024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr3034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_generation_expr_in_expr3054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr3064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr3074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr3084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr3093 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3097 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3101 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3105 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr3115 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3119 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3123 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3127 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr3137 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3141 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3145 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr3155 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3159 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr3169 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3173 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3195 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_expr3199 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr3212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr3221 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3225 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3352 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3356 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr3368 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3414 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3418 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _130_in_expr3428 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3432 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3446 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3456 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3460 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3470 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3480 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3484 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3522 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _112_in_expr3532 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3536 = new BitSet(new ulong[]{0x2150400FFFFF7000UL,0x8121208489000000UL,0x88000000000044UL});
		public static readonly BitSet _expr_in_expr3540 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3584 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
