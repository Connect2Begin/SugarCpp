//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-29 12:49:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_To=39;
	public const int For_Item_When=40;
	public const int Func_Args=41;
	public const int Func_Def=42;
	public const int Generic_Patameters=43;
	public const int Global_Block=44;
	public const int IDENT=45;
	public const int INDENT=46;
	public const int Ident_List=47;
	public const int Import=48;
	public const int Left_Bracket=49;
	public const int LineComment=50;
	public const int Match_Expr=51;
	public const int Match_Expr_Item=52;
	public const int Match_Tuple=53;
	public const int NEWLINE=54;
	public const int NUMBER=55;
	public const int Namespace=56;
	public const int Right_Bracket=57;
	public const int Root=58;
	public const int SP=59;
	public const int STRING=60;
	public const int Stmt_Block=61;
	public const int Stmt_Defer=62;
	public const int Stmt_Finally=63;
	public const int Stmt_For=64;
	public const int Stmt_If=65;
	public const int Stmt_Loop=66;
	public const int Stmt_Return=67;
	public const int Stmt_Switch=68;
	public const int Stmt_Try=69;
	public const int Stmt_Typedef=70;
	public const int Stmt_Unless=71;
	public const int Stmt_Until=72;
	public const int Stmt_Using=73;
	public const int Stmt_While=74;
	public const int Switch_Item=75;
	public const int Type_Array=76;
	public const int Type_Func=77;
	public const int Type_Ident=78;
	public const int Type_List=79;
	public const int Type_Ref=80;
	public const int Type_Star=81;
	public const int Type_Template=82;
	public const int White_Space=83;
	public const int DOUBLE=178;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			if (op == "uint") return "unsigned int";
			if (op == "uchar") return "unsigned char";
			if (op == "schar") return "signed char";
			if (op == "int8") return "int8_t";
			if (op == "int16") return "int16_t";
			if (op == "int32") return "int32_t";
			if (op == "int64") return "int64_t";
			if (op == "uint8") return "uint8_t";
			if (op == "uint16") return "uint16_t";
			if (op == "uint32") return "uint32_t";
			if (op == "uint64") return "uint64_t";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:44:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(44, 1);
		try
		{
			// SugarWalker.g:45:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: ^( Root a= global_block )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(45, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(46, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:51:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(51, 1);
		try
		{
			// SugarWalker.g:56:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:56:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(56, 4);
			DebugLocation(56, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(56, 19);
				// SugarWalker.g:56:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==111))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:56:20: a= node
						{
						DebugLocation(56, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(56, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:59:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(59, 1);
		try
		{
			// SugarWalker.g:64:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 111:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:64:4: a= func_def
				{
				DebugLocation(64, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(64, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:65:4: b= import_def
				{
				DebugLocation(65, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(65, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:66:4: c= enum_def
				{
				DebugLocation(66, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(66, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:67:4: d= class_def
				{
				DebugLocation(67, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(67, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:68:4: e= global_alloc
				{
				DebugLocation(68, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(68, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:69:4: f= global_using
				{
				DebugLocation(69, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(69, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:70:4: g= global_typedef
				{
				DebugLocation(70, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(70, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:71:4: h= namespace_def
				{
				DebugLocation(71, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(71, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:74:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:79:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:79:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(79, 4);
			DebugLocation(79, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 17);
				// SugarWalker.g:79:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:79:18: attr= attribute
					{
					DebugLocation(79, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(79, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(79, 65);
				// SugarWalker.g:79:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==156))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:79:67: a= ident
						{
						DebugLocation(79, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(79, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:80:22: b= 'namespace'
						{
						DebugLocation(80, 23);
						b=(CommonTree)Match(input,156,Follow._156_in_global_using281); 
						DebugLocation(80, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:83:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(83, 1);
		try
		{
			// SugarWalker.g:88:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 111:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:88:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(88, 4);
				DebugLocation(88, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(88, 23);
				// SugarWalker.g:88:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:88:24: attr= attribute
					{
					DebugLocation(88, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(88, 42);
				PushFollow(Follow._type_name_in_global_alloc318);
				a=type_name();
				PopFollow();

				DebugLocation(88, 54);
				PushFollow(Follow._ident_list_in_global_alloc322);
				b=ident_list();
				PopFollow();

				DebugLocation(88, 67);
				PushFollow(Follow._expr_list_in_global_alloc326);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(89, 2);

						if (c != null && c.Count > 0)
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Equal));
						}
						else
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Declare));
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:99:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(99, 4);
				DebugLocation(99, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc336); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(99, 25);
				// SugarWalker.g:99:25: (attr= attribute )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==Attribute))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:99:26: attr= attribute
					{
					DebugLocation(99, 30);
					PushFollow(Follow._attribute_in_global_alloc341);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(99, 44);
				PushFollow(Follow._type_name_in_global_alloc347);
				a=type_name();
				PopFollow();

				DebugLocation(99, 56);
				PushFollow(Follow._ident_list_in_global_alloc351);
				b=ident_list();
				PopFollow();

				DebugLocation(99, 69);
				PushFollow(Follow._expr_list_in_global_alloc355);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(100, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Bracket));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:103:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(103, 4);
				DebugLocation(103, 6);
				Match(input,111,Follow._111_in_global_alloc365); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(103, 11);
				// SugarWalker.g:103:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:103:12: attr= attribute
					{
					DebugLocation(103, 16);
					PushFollow(Follow._attribute_in_global_alloc370);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(103, 30);
				PushFollow(Follow._ident_list_in_global_alloc376);
				d=ident_list();
				PopFollow();

				DebugLocation(103, 43);
				PushFollow(Follow._expr_list_in_global_alloc380);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(104, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:114:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(114, 1);
		try
		{
			// SugarWalker.g:115:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:115:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(115, 4);
			DebugLocation(115, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef400); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(115, 19);
			// SugarWalker.g:115:19: (attr= attribute )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==Attribute))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:115:20: attr= attribute
				{
				DebugLocation(115, 24);
				PushFollow(Follow._attribute_in_global_typedef405);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(115, 38);
			PushFollow(Follow._type_name_in_global_typedef411);
			a=type_name();
			PopFollow();

			DebugLocation(115, 50);
			PushFollow(Follow._ident_in_global_typedef415);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(116, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:122:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(122, 1);
		try
		{
			// SugarWalker.g:123:2: (a= NUMBER |a= STRING |b= ident )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt10 = 1;
				}
				break;
			case STRING:
				{
				alt10 = 2;
				}
				break;
			case IDENT:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:123:4: a= NUMBER
				{
				DebugLocation(123, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args436); 
				DebugLocation(124, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:127:4: a= STRING
				{
				DebugLocation(127, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args446); 
				DebugLocation(128, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:131:4: b= ident
				{
				DebugLocation(131, 5);
				PushFollow(Follow._ident_in_attribute_args456);
				b=ident();
				PopFollow();

				DebugLocation(132, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:137:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(137, 1);
		try
		{
			// SugarWalker.g:142:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:142:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(142, 4);
			DebugLocation(142, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item480); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(142, 16);
			// SugarWalker.g:142:16: (a= ident |c= 'const' )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==IDENT))
			{
				alt11 = 1;
			}
			else if ((LA11_0==140))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:142:17: a= ident
				{
				DebugLocation(142, 18);
				PushFollow(Follow._ident_in_attribute_item485);
				a=ident();
				PopFollow();

				DebugLocation(142, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:142:48: c= 'const'
				{
				DebugLocation(142, 49);
				c=(CommonTree)Match(input,140,Follow._140_in_attribute_item493); 
				DebugLocation(142, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(142, 86);
			// SugarWalker.g:142:86: (b= attribute_args )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==IDENT||LA12_0==NUMBER||LA12_0==STRING))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:142:87: b= attribute_args
					{
					DebugLocation(142, 88);
					PushFollow(Follow._attribute_args_in_attribute_item501);
					b=attribute_args();
					PopFollow();

					DebugLocation(142, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:145:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(145, 1);
		try
		{
			// SugarWalker.g:150:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:150:4: (a= attribute_item )+
			{
			DebugLocation(150, 4);
			// SugarWalker.g:150:4: (a= attribute_item )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==Attribute))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:150:5: a= attribute_item
					{
					DebugLocation(150, 6);
					PushFollow(Follow._attribute_item_in_attribute529);
					a=attribute_item();
					PopFollow();

					DebugLocation(150, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:153:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:154:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:154:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(154, 4);
			DebugLocation(154, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def550); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(154, 17);
			PushFollow(Follow._ident_in_namespace_def554);
			a=ident();
			PopFollow();

			DebugLocation(154, 24);
			// SugarWalker.g:154:24: (b= global_block )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Global_Block))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:25: b= global_block
				{
				DebugLocation(154, 26);
				PushFollow(Follow._global_block_in_namespace_def559);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(155, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:160:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(160, 1);
		try
		{
			// SugarWalker.g:165:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 6);
			Match(input,Import,Follow._Import_in_import_def586); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(165, 13);
				// SugarWalker.g:165:13: (attr= attribute )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Attribute))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:165:14: attr= attribute
					{
					DebugLocation(165, 18);
					PushFollow(Follow._attribute_in_import_def591);
					attr=attribute();
					PopFollow();

					DebugLocation(165, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(165, 61);
				// SugarWalker.g:165:61: (a= STRING )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==STRING))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:165:62: a= STRING
						{
						DebugLocation(165, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def601); 
						DebugLocation(165, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:168:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(168, 1);
		try
		{
			// SugarWalker.g:169:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:169:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(169, 4);
			DebugLocation(169, 6);
			Match(input,Enum,Follow._Enum_in_enum_def622); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(169, 11);
			// SugarWalker.g:169:11: (attr= attribute )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Attribute))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:169:12: attr= attribute
				{
				DebugLocation(169, 16);
				PushFollow(Follow._attribute_in_enum_def627);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(169, 30);
			PushFollow(Follow._ident_in_enum_def633);
			a=ident();
			PopFollow();

			DebugLocation(169, 38);
			PushFollow(Follow._ident_list_in_enum_def637);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(170, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:175:1: class_def returns [Class value] : ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		CommonTree is_case = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(175, 1);
		try
		{
			// SugarWalker.g:176:2: ( ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:176:4: ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(176, 4);
			DebugLocation(176, 6);
			Match(input,Class,Follow._Class_in_class_def657); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(176, 12);
			// SugarWalker.g:176:12: (is_case= 'case' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==137))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:13: is_case= 'case'
				{
				DebugLocation(176, 20);
				is_case=(CommonTree)Match(input,137,Follow._137_in_class_def662); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(176, 30);
			// SugarWalker.g:176:30: (attr= attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Attribute))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:31: attr= attribute
				{
				DebugLocation(176, 35);
				PushFollow(Follow._attribute_in_class_def669);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(176, 49);
			PushFollow(Follow._ident_in_class_def675);
			a=ident();
			PopFollow();

			DebugLocation(176, 56);
			// SugarWalker.g:176:56: (b= generic_parameter )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Generic_Patameters))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:57: b= generic_parameter
				{
				DebugLocation(176, 58);
				PushFollow(Follow._generic_parameter_in_class_def680);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(176, 79);
			// SugarWalker.g:176:79: (c= func_args )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Func_Args))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:80: c= func_args
				{
				DebugLocation(176, 81);
				PushFollow(Follow._func_args_in_class_def687);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(176, 94);
			// SugarWalker.g:176:94: (d= ident_list )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Ident_List))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:95: d= ident_list
				{
				DebugLocation(176, 96);
				PushFollow(Follow._ident_list_in_class_def694);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(176, 110);
			// SugarWalker.g:176:110: (e= global_block )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Global_Block))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:111: e= global_block
				{
				DebugLocation(176, 112);
				PushFollow(Follow._global_block_in_class_def701);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(177, 2);

					value = new Class(a, b, c, d, e, attr);
					if (is_case != null) value.Attribute.Add(new Attr { Name = "case" });
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:183:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' | 'long' | 'struct' |a= ident )* ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(183, 1);
		try
		{
			// SugarWalker.g:188:2: ( ^( Type_Ident ( 'const' | 'long' | 'struct' |a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:188:4: ^( Type_Ident ( 'const' | 'long' | 'struct' |a= ident )* )
			{
			DebugLocation(188, 4);
			DebugLocation(188, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident728); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(188, 17);
				// SugarWalker.g:188:17: ( 'const' | 'long' | 'struct' |a= ident )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=5;
					try { DebugEnterDecision(24, false);
					switch (input.LA(1))
					{
					case 140:
						{
						alt24 = 1;
						}
						break;
					case 153:
						{
						alt24 = 2;
						}
						break;
					case 161:
						{
						alt24 = 3;
						}
						break;
					case IDENT:
						{
						alt24 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:188:19: 'const'
						{
						DebugLocation(188, 19);
						Match(input,140,Follow._140_in_type_ident732); 
						DebugLocation(188, 27);
						 type+="const "; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:189:10: 'long'
						{
						DebugLocation(189, 10);
						Match(input,153,Follow._153_in_type_ident745); 
						DebugLocation(189, 18);
						 type+="long "; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarWalker.g:190:10: 'struct'
						{
						DebugLocation(190, 10);
						Match(input,161,Follow._161_in_type_ident759); 
						DebugLocation(190, 19);
						 type+="struct "; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarWalker.g:191:10: a= ident
						{
						DebugLocation(191, 11);
						PushFollow(Follow._ident_in_type_ident774);
						a=ident();
						PopFollow();

						DebugLocation(191, 18);
						 type+=Alias(a); 

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(193, 2);

					value = new IdentType(type.Trim());
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:198:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(198, 1);
		try
		{
			// SugarWalker.g:203:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:203:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(203, 4);
			DebugLocation(203, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template811); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(203, 21);
			PushFollow(Follow._type_name_in_type_template815);
			a=type_name();
			PopFollow();

			DebugLocation(203, 32);
			// SugarWalker.g:203:32: (b= type_name )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if (((LA25_0>=Type_Array && LA25_0<=Type_Ident)||(LA25_0>=Type_Ref && LA25_0<=Type_Template)))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:203:33: b= type_name
					{
					DebugLocation(203, 34);
					PushFollow(Follow._type_name_in_type_template820);
					b=type_name();
					PopFollow();

					DebugLocation(203, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(204, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:209:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(209, 1);
		try
		{
			// SugarWalker.g:214:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:214:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(214, 4);
			DebugLocation(214, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array849); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(214, 18);
			PushFollow(Follow._type_name_in_type_array853);
			a=type_name();
			PopFollow();

			DebugLocation(214, 29);
			// SugarWalker.g:214:29: (b= expr )+
			int cnt26=0;
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if (((LA26_0>=Expr_Access && LA26_0<=Expr_Alloc_Equal)||(LA26_0>=Expr_Bin && LA26_0<=Expr_Where)||LA26_0==IDENT||LA26_0==Match_Expr||LA26_0==Match_Tuple||LA26_0==NUMBER||LA26_0==STRING||LA26_0==87||LA26_0==90||LA26_0==94||LA26_0==97||LA26_0==102||LA26_0==108||LA26_0==111||LA26_0==116||LA26_0==119||LA26_0==126||LA26_0==129||LA26_0==133||LA26_0==174||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:214:30: b= expr
					{
					DebugLocation(214, 31);
					PushFollow(Follow._expr_in_type_array858);
					b=expr();
					PopFollow();

					DebugLocation(214, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt26 >= 1)
						goto loop26;

					EarlyExitException eee26 = new EarlyExitException( 26, input );
					DebugRecognitionException(eee26);
					throw eee26;
				}
				cnt26++;
			}
			loop26:
				;

			} finally { DebugExitSubRule(26); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(215, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:220:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(220, 1);
		try
		{
			// SugarWalker.g:221:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:221:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(221, 4);
			DebugLocation(221, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star882); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(221, 17);
			PushFollow(Follow._type_name_in_type_star886);
			a=type_name();
			PopFollow();

			DebugLocation(221, 28);
			Match(input,93,Follow._93_in_type_star888); 
			DebugLocation(221, 32);
			 value = new StarType(a); 
			DebugLocation(221, 62);
			// SugarWalker.g:221:62: ( '*' )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==93))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:221:63: '*'
					{
					DebugLocation(221, 63);
					Match(input,93,Follow._93_in_type_star893); 
					DebugLocation(221, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:225:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(225, 1);
		try
		{
			// SugarWalker.g:226:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:226:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(226, 4);
			DebugLocation(226, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref915); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(226, 16);
			PushFollow(Follow._type_name_in_type_ref919);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(227, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// SugarWalker.g:232:1: type_func returns [SugarType value] : ^( Type_Func (a= type_list )? (b= type_name )? ) ;
	[GrammarRule("type_func")]
	private SugarType type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 19);
		TraceIn("type_func", 19);
		SugarType value = default(SugarType);


		List<SugarType> a = default(List<SugarType>);
		SugarType b = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(232, 1);
		try
		{
			// SugarWalker.g:233:2: ( ^( Type_Func (a= type_list )? (b= type_name )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:233:4: ^( Type_Func (a= type_list )? (b= type_name )? )
			{
			DebugLocation(233, 4);
			DebugLocation(233, 6);
			Match(input,Type_Func,Follow._Type_Func_in_type_func939); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(233, 16);
				// SugarWalker.g:233:16: (a= type_list )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==Type_List))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:233:17: a= type_list
					{
					DebugLocation(233, 18);
					PushFollow(Follow._type_list_in_type_func944);
					a=type_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(233, 31);
				// SugarWalker.g:233:31: (b= type_name )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Type_Array && LA29_0<=Type_Ident)||(LA29_0>=Type_Ref && LA29_0<=Type_Template)))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:233:32: b= type_name
					{
					DebugLocation(233, 33);
					PushFollow(Follow._type_name_in_type_func951);
					b=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(234, 2);

					value = new FuncType(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_func", 19);
			LeaveRule("type_func", 19);
			LeaveRule_type_func();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return value;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarWalker.g:239:1: type_list returns [List<SugarType> value] : ^( Type_List (a= type_name )* ) ;
	[GrammarRule("type_list")]
	private List<SugarType> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 20);
		TraceIn("type_list", 20);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(239, 1);
		try
		{
			// SugarWalker.g:244:2: ( ^( Type_List (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:244:4: ^( Type_List (a= type_name )* )
			{
			DebugLocation(244, 4);
			DebugLocation(244, 6);
			Match(input,Type_List,Follow._Type_List_in_type_list977); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(244, 16);
				// SugarWalker.g:244:16: (a= type_name )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if (((LA30_0>=Type_Array && LA30_0<=Type_Ident)||(LA30_0>=Type_Ref && LA30_0<=Type_Template)))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:244:17: a= type_name
						{
						DebugLocation(244, 18);
						PushFollow(Follow._type_name_in_type_list982);
						a=type_name();
						PopFollow();

						DebugLocation(244, 29);
						 value.Add(a); 

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_list", 20);
			LeaveRule("type_list", 20);
			LeaveRule_type_list();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return value;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:247:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 21);
		TraceIn("type_name", 21);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(247, 1);
		try
		{
			// SugarWalker.g:248:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func )
			int alt31=6;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt31 = 1;
				}
				break;
			case Type_Ref:
				{
				alt31 = 2;
				}
				break;
			case Type_Star:
				{
				alt31 = 3;
				}
				break;
			case Type_Template:
				{
				alt31 = 4;
				}
				break;
			case Type_Ident:
				{
				alt31 = 5;
				}
				break;
			case Type_Func:
				{
				alt31 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:4: a= type_array
				{
				DebugLocation(248, 5);
				PushFollow(Follow._type_array_in_type_name1005);
				a=type_array();
				PopFollow();

				DebugLocation(248, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:249:4: a= type_ref
				{
				DebugLocation(249, 5);
				PushFollow(Follow._type_ref_in_type_name1014);
				a=type_ref();
				PopFollow();

				DebugLocation(249, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:250:4: a= type_star
				{
				DebugLocation(250, 5);
				PushFollow(Follow._type_star_in_type_name1023);
				a=type_star();
				PopFollow();

				DebugLocation(250, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:251:4: a= type_template
				{
				DebugLocation(251, 5);
				PushFollow(Follow._type_template_in_type_name1032);
				a=type_template();
				PopFollow();

				DebugLocation(251, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:252:4: a= type_ident
				{
				DebugLocation(252, 5);
				PushFollow(Follow._type_ident_in_type_name1041);
				a=type_ident();
				PopFollow();

				DebugLocation(252, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:253:4: a= type_func
				{
				DebugLocation(253, 5);
				PushFollow(Follow._type_func_in_type_name1050);
				a=type_func();
				PopFollow();

				DebugLocation(253, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 21);
			LeaveRule("type_name", 21);
			LeaveRule_type_name();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:256:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(256, 1);
		try
		{
			// SugarWalker.g:261:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:261:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(261, 4);
			DebugLocation(261, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args1073); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(261, 16);
				// SugarWalker.g:261:16: (a= alloc_expr )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if (((LA32_0>=Expr_Alloc_Bracket && LA32_0<=Expr_Alloc_Equal)))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:261:17: a= alloc_expr
						{
						DebugLocation(261, 18);
						PushFollow(Follow._alloc_expr_in_func_args1078);
						a=alloc_expr();
						PopFollow();

						DebugLocation(262, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:267:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(267, 1);
		try
		{
			// SugarWalker.g:272:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:272:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(272, 4);
			DebugLocation(272, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter1105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(272, 25);
				// SugarWalker.g:272:25: (a= ident )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==IDENT))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:272:26: a= ident
						{
						DebugLocation(272, 27);
						PushFollow(Follow._ident_in_generic_parameter1110);
						a=ident();
						PopFollow();

						DebugLocation(272, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:275:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		CommonTree op = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(275, 1);
		try
		{
			// SugarWalker.g:280:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:280:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(280, 4);
			DebugLocation(280, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1136); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(280, 15);
			// SugarWalker.g:280:15: (attr= attribute )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==Attribute))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:16: attr= attribute
				{
				DebugLocation(280, 20);
				PushFollow(Follow._attribute_in_func_def1141);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(280, 33);
			// SugarWalker.g:280:33: (a= type_name )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if (((LA35_0>=Type_Array && LA35_0<=Type_Ident)||(LA35_0>=Type_Ref && LA35_0<=Type_Template)))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:34: a= type_name
				{
				DebugLocation(280, 35);
				PushFollow(Follow._type_name_in_func_def1148);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(280, 48);
			// SugarWalker.g:280:48: (deconstructor= '~' )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==177))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:49: deconstructor= '~'
				{
				DebugLocation(280, 62);
				deconstructor=(CommonTree)Match(input,177,Follow._177_in_func_def1155); 

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(280, 69);
			// SugarWalker.g:280:69: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?
			int alt37=3;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:70: b= ident
				{
				DebugLocation(280, 71);
				PushFollow(Follow._ident_in_func_def1162);
				b=ident();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:280:80: op= ( '+' | '-' | '*' | '/' )
				{
				DebugLocation(280, 82);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==93||input.LA(1)==95||input.LA(1)==99||input.LA(1)==107)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(280, 103);
			// SugarWalker.g:280:103: (x= generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Generic_Patameters))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:104: x= generic_parameter
				{
				DebugLocation(280, 105);
				PushFollow(Follow._generic_parameter_in_func_def1183);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(280, 127);
			// SugarWalker.g:280:127: (args= func_args )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Func_Args))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:280:128: args= func_args
				{
				DebugLocation(280, 132);
				PushFollow(Follow._func_args_in_func_def1191);
				args=func_args();
				PopFollow();

				DebugLocation(280, 143);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(281, 2);
			// SugarWalker.g:281:2: (e= stmt_block |f= expr )
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Stmt_Block))
			{
				alt40 = 1;
			}
			else if (((LA40_0>=Expr_Access && LA40_0<=Expr_Alloc_Equal)||(LA40_0>=Expr_Bin && LA40_0<=Expr_Where)||LA40_0==IDENT||LA40_0==Match_Expr||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||LA40_0==87||LA40_0==90||LA40_0==94||LA40_0==97||LA40_0==102||LA40_0==108||LA40_0==111||LA40_0==116||LA40_0==119||LA40_0==126||LA40_0==129||LA40_0==133||LA40_0==174||LA40_0==DOUBLE))
			{
				alt40 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:281:4: e= stmt_block
				{
				DebugLocation(281, 5);
				PushFollow(Follow._stmt_block_in_func_def1202);
				e=stmt_block();
				PopFollow();

				DebugLocation(282, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:296:4: f= expr
				{
				DebugLocation(296, 5);
				PushFollow(Follow._expr_in_func_def1212);
				f=expr();
				PopFollow();

				DebugLocation(297, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:323:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(323, 4);
		try
		{
			// SugarWalker.g:328:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:328:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(328, 4);
			DebugLocation(328, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1240); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(328, 17);
				// SugarWalker.g:328:17: (a= stmt )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if (((LA41_0>=Expr_Access && LA41_0<=Expr_Alloc_Equal)||(LA41_0>=Expr_Bin && LA41_0<=Expr_Where)||LA41_0==IDENT||LA41_0==Match_Expr||LA41_0==Match_Tuple||LA41_0==NUMBER||LA41_0==STRING||(LA41_0>=Stmt_Defer && LA41_0<=Stmt_While)||LA41_0==87||LA41_0==90||LA41_0==94||LA41_0==97||LA41_0==102||LA41_0==108||LA41_0==111||(LA41_0>=115 && LA41_0<=116)||LA41_0==119||LA41_0==126||(LA41_0>=128 && LA41_0<=129)||LA41_0==133||LA41_0==174||LA41_0==DOUBLE))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:328:18: a= stmt
						{
						DebugLocation(328, 19);
						PushFollow(Follow._stmt_in_stmt_block1245);
						a=stmt();
						PopFollow();

						DebugLocation(328, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(329, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:331:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(331, 1);
		try
		{
			// SugarWalker.g:336:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt42=9;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 87:
			case 90:
			case 94:
			case 97:
			case 102:
			case 108:
			case 116:
			case 119:
			case 126:
			case 129:
			case 133:
			case 174:
			case DOUBLE:
				{
				alt42 = 1;
				}
				break;
			case 111:
				{
				int LA42_2 = input.LA(2);

				if ((LA42_2==DOWN))
				{
					int LA42_11 = input.LA(3);

					if (((LA42_11>=Expr_Access && LA42_11<=Expr_Alloc_Equal)||(LA42_11>=Expr_Bin && LA42_11<=Expr_Where)||LA42_11==IDENT||LA42_11==Match_Expr||LA42_11==Match_Tuple||LA42_11==NUMBER||LA42_11==STRING||LA42_11==87||LA42_11==90||LA42_11==94||LA42_11==97||LA42_11==102||LA42_11==108||LA42_11==111||LA42_11==116||LA42_11==119||LA42_11==126||LA42_11==129||LA42_11==133||LA42_11==174||LA42_11==DOUBLE))
					{
						alt42 = 1;
					}
					else if ((LA42_11==Ident_List))
					{
						alt42 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 42, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt42 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt42 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt42 = 4;
				}
				break;
			case Stmt_For:
				{
				alt42 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt42 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt42 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt42 = 8;
				}
				break;
			case 115:
			case 128:
				{
				alt42 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:336:4: a= stmt_expr
				{
				DebugLocation(336, 5);
				PushFollow(Follow._stmt_expr_in_stmt1276);
				a=stmt_expr();
				PopFollow();

				DebugLocation(336, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:337:4: a= stmt_return
				{
				DebugLocation(337, 5);
				PushFollow(Follow._stmt_return_in_stmt1285);
				a=stmt_return();
				PopFollow();

				DebugLocation(337, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:338:4: a= stmt_if
				{
				DebugLocation(338, 5);
				PushFollow(Follow._stmt_if_in_stmt1294);
				a=stmt_if();
				PopFollow();

				DebugLocation(338, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:339:4: a= stmt_while
				{
				DebugLocation(339, 5);
				PushFollow(Follow._stmt_while_in_stmt1303);
				a=stmt_while();
				PopFollow();

				DebugLocation(339, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:340:4: a= stmt_for
				{
				DebugLocation(340, 5);
				PushFollow(Follow._stmt_for_in_stmt1312);
				a=stmt_for();
				PopFollow();

				DebugLocation(340, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:341:4: a= stmt_try
				{
				DebugLocation(341, 5);
				PushFollow(Follow._stmt_try_in_stmt1321);
				a=stmt_try();
				PopFollow();

				DebugLocation(341, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:342:4: a= stmt_switch
				{
				DebugLocation(342, 5);
				PushFollow(Follow._stmt_switch_in_stmt1330);
				a=stmt_switch();
				PopFollow();

				DebugLocation(342, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:343:4: a= stmt_defer
				{
				DebugLocation(343, 5);
				PushFollow(Follow._stmt_defer_in_stmt1339);
				a=stmt_defer();
				PopFollow();

				DebugLocation(343, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:344:4: b= stmt_translate
				{
				DebugLocation(344, 5);
				PushFollow(Follow._stmt_translate_in_stmt1348);
				b=stmt_translate();
				PopFollow();

				DebugLocation(344, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:347:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 27);
		TraceIn("stmt_translate", 27);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(347, 1);
		try
		{
			// SugarWalker.g:352:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) )
			int alt43=3;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case 128:
				{
				alt43 = 1;
				}
				break;
			case 111:
				{
				alt43 = 2;
				}
				break;
			case 115:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:352:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(352, 4);
				DebugLocation(352, 6);
				Match(input,128,Follow._128_in_stmt_translate1371); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(352, 12);
				PushFollow(Follow._expr_in_stmt_translate1375);
				a=expr();
				PopFollow();

				DebugLocation(352, 19);
				PushFollow(Follow._expr_in_stmt_translate1379);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(353, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:359:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(359, 4);
				DebugLocation(359, 6);
				Match(input,111,Follow._111_in_stmt_translate1389); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(359, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1393);
				d=ident_list();
				PopFollow();

				DebugLocation(359, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1397);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(360, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:368:4: ^( '<<' a= expr b= expr )
				{
				DebugLocation(368, 4);
				DebugLocation(368, 6);
				Match(input,115,Follow._115_in_stmt_translate1407); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(368, 12);
				PushFollow(Follow._expr_in_stmt_translate1411);
				a=expr();
				PopFollow();

				DebugLocation(368, 19);
				PushFollow(Follow._expr_in_stmt_translate1415);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 27);
			LeaveRule("stmt_translate", 27);
			LeaveRule_stmt_translate();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:371:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 28);
		TraceIn("stmt_switch_item_list", 28);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(371, 1);
		try
		{
			// SugarWalker.g:376:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:376:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(376, 4);
			// SugarWalker.g:376:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==Switch_Item))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:377:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(377, 3);
					DebugLocation(377, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1440); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(377, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1444);
					a=expr_list();
					PopFollow();

					DebugLocation(377, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1448);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(378, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 28);
			LeaveRule("stmt_switch_item_list", 28);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:384:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 29);
		TraceIn("stmt_switch", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(384, 1);
		try
		{
			// SugarWalker.g:385:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:385:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(385, 4);
			DebugLocation(385, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1475); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(385, 18);
				// SugarWalker.g:385:18: (a= expr )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if (((LA45_0>=Expr_Access && LA45_0<=Expr_Alloc_Equal)||(LA45_0>=Expr_Bin && LA45_0<=Expr_Where)||LA45_0==IDENT||LA45_0==Match_Expr||LA45_0==Match_Tuple||LA45_0==NUMBER||LA45_0==STRING||LA45_0==87||LA45_0==90||LA45_0==94||LA45_0==97||LA45_0==102||LA45_0==108||LA45_0==111||LA45_0==116||LA45_0==119||LA45_0==126||LA45_0==129||LA45_0==133||LA45_0==174||LA45_0==DOUBLE))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:385:19: a= expr
					{
					DebugLocation(385, 20);
					PushFollow(Follow._expr_in_stmt_switch1480);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(385, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1486);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(385, 52);
				// SugarWalker.g:385:52: (c= stmt_block )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==Stmt_Block))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:385:53: c= stmt_block
					{
					DebugLocation(385, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1491);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(386, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 29);
			LeaveRule("stmt_switch", 29);
			LeaveRule_stmt_switch();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:391:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(391, 1);
		try
		{
			// SugarWalker.g:392:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==Stmt_Defer))
			{
				alt47 = 1;
			}
			else if ((LA47_0==Stmt_Finally))
			{
				alt47 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:392:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(392, 4);
				DebugLocation(392, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1513); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(392, 18);
				PushFollow(Follow._stmt_in_stmt_defer1517);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(393, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:396:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(396, 4);
				DebugLocation(396, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1527); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(396, 20);
				PushFollow(Follow._stmt_in_stmt_defer1531);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(397, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:402:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 31);
		TraceIn("stmt_expr", 31);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(402, 1);
		try
		{
			// SugarWalker.g:403:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt48=3;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt48 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 87:
			case 90:
			case 94:
			case 97:
			case 102:
			case 108:
			case 111:
			case 116:
			case 119:
			case 126:
			case 129:
			case 133:
			case 174:
			case DOUBLE:
				{
				alt48 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:403:4: a= stmt_using
				{
				DebugLocation(403, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1552);
				a=stmt_using();
				PopFollow();

				DebugLocation(403, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:404:4: b= expr
				{
				DebugLocation(404, 5);
				PushFollow(Follow._expr_in_stmt_expr1561);
				b=expr();
				PopFollow();

				DebugLocation(404, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:405:4: c= stmt_typedef
				{
				DebugLocation(405, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1570);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(405, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 31);
			LeaveRule("stmt_expr", 31);
			LeaveRule_stmt_expr();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:408:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 32);
		TraceIn("stmt_using", 32);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(408, 1);
		try
		{
			// SugarWalker.g:413:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:413:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(413, 4);
			DebugLocation(413, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1593); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 17);
				// SugarWalker.g:413:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=3;
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT))
					{
						alt49 = 1;
					}
					else if ((LA49_0==156))
					{
						alt49 = 2;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:413:19: a= ident
						{
						DebugLocation(413, 20);
						PushFollow(Follow._ident_in_stmt_using1599);
						a=ident();
						PopFollow();

						DebugLocation(413, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:414:10: b= 'namespace'
						{
						DebugLocation(414, 11);
						b=(CommonTree)Match(input,156,Follow._156_in_stmt_using1614); 
						DebugLocation(414, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 32);
			LeaveRule("stmt_using", 32);
			LeaveRule_stmt_using();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:417:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(417, 1);
		try
		{
			// SugarWalker.g:418:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:418:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(418, 4);
			DebugLocation(418, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1635); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(418, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1639);
			a=type_name();
			PopFollow();

			DebugLocation(418, 32);
			PushFollow(Follow._ident_in_stmt_typedef1643);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(419, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:424:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(424, 1);
		try
		{
			// SugarWalker.g:425:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:425:4: a= expr
			{
			DebugLocation(425, 5);
			PushFollow(Follow._expr_in_stmt_alloc1664);
			a=expr();
			PopFollow();

			DebugLocation(425, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:428:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 35);
		TraceIn("stmt_if", 35);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(428, 1);
		try
		{
			// SugarWalker.g:429:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==Stmt_If))
			{
				alt52 = 1;
			}
			else if ((LA52_0==Stmt_Unless))
			{
				alt52 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:429:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(429, 4);
				DebugLocation(429, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1682); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(429, 15);
				PushFollow(Follow._expr_in_stmt_if1686);
				a=expr();
				PopFollow();

				DebugLocation(429, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1690);
				b=stmt_block();
				PopFollow();

				DebugLocation(429, 34);
				// SugarWalker.g:429:34: (c= stmt_block )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==Stmt_Block))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:429:35: c= stmt_block
					{
					DebugLocation(429, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1695);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(430, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:433:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(433, 4);
				DebugLocation(433, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1707); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(433, 19);
				PushFollow(Follow._expr_in_stmt_if1711);
				a=expr();
				PopFollow();

				DebugLocation(433, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1715);
				b=stmt_block();
				PopFollow();

				DebugLocation(433, 38);
				// SugarWalker.g:433:38: (c= stmt_block )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==Stmt_Block))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:433:39: c= stmt_block
					{
					DebugLocation(433, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1720);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(434, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 35);
			LeaveRule("stmt_if", 35);
			LeaveRule_stmt_if();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:439:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 36);
		TraceIn("stmt_while", 36);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(439, 1);
		try
		{
			// SugarWalker.g:440:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt54 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt54 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:440:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(440, 4);
				DebugLocation(440, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1742); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(440, 18);
				PushFollow(Follow._expr_in_stmt_while1746);
				a=expr();
				PopFollow();

				DebugLocation(440, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1750);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(441, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:444:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(444, 4);
				DebugLocation(444, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1760); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(444, 18);
				PushFollow(Follow._expr_in_stmt_while1764);
				a=expr();
				PopFollow();

				DebugLocation(444, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1768);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(445, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:448:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(448, 4);
				DebugLocation(448, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1778); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(448, 16);
				// SugarWalker.g:448:16: (a= expr )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if (((LA53_0>=Expr_Access && LA53_0<=Expr_Alloc_Equal)||(LA53_0>=Expr_Bin && LA53_0<=Expr_Where)||LA53_0==IDENT||LA53_0==Match_Expr||LA53_0==Match_Tuple||LA53_0==NUMBER||LA53_0==STRING||LA53_0==87||LA53_0==90||LA53_0==94||LA53_0==97||LA53_0==102||LA53_0==108||LA53_0==111||LA53_0==116||LA53_0==119||LA53_0==126||LA53_0==129||LA53_0==133||LA53_0==174||LA53_0==DOUBLE))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:448:17: a= expr
					{
					DebugLocation(448, 18);
					PushFollow(Follow._expr_in_stmt_while1783);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(448, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1789);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(449, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 36);
			LeaveRule("stmt_while", 36);
			LeaveRule_stmt_while();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:466:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 37);
		TraceIn("for_item", 37);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(466, 1);
		try
		{
			// SugarWalker.g:467:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt57=5;
			try { DebugEnterDecision(57, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt57 = 1;
				}
				break;
			case For_Item_Down_To:
				{
				alt57 = 2;
				}
				break;
			case For_Item_Each:
				{
				alt57 = 3;
				}
				break;
			case For_Item_Map:
				{
				alt57 = 4;
				}
				break;
			case For_Item_When:
				{
				alt57 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:467:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(467, 4);
				DebugLocation(467, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1809); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(467, 19);
				PushFollow(Follow._ident_in_for_item1813);
				a=ident();
				PopFollow();

				DebugLocation(467, 27);
				PushFollow(Follow._expr_in_for_item1817);
				b=expr();
				PopFollow();

				DebugLocation(467, 34);
				PushFollow(Follow._expr_in_for_item1821);
				c=expr();
				PopFollow();

				DebugLocation(467, 40);
				// SugarWalker.g:467:40: (d= expr )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=Expr_Access && LA55_0<=Expr_Alloc_Equal)||(LA55_0>=Expr_Bin && LA55_0<=Expr_Where)||LA55_0==IDENT||LA55_0==Match_Expr||LA55_0==Match_Tuple||LA55_0==NUMBER||LA55_0==STRING||LA55_0==87||LA55_0==90||LA55_0==94||LA55_0==97||LA55_0==102||LA55_0==108||LA55_0==111||LA55_0==116||LA55_0==119||LA55_0==126||LA55_0==129||LA55_0==133||LA55_0==174||LA55_0==DOUBLE))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:467:41: d= expr
					{
					DebugLocation(467, 42);
					PushFollow(Follow._expr_in_for_item1826);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(468, 2);

						value = new ForItemTo(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:471:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(471, 4);
				DebugLocation(471, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1838); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(471, 24);
				PushFollow(Follow._ident_in_for_item1842);
				a=ident();
				PopFollow();

				DebugLocation(471, 32);
				PushFollow(Follow._expr_in_for_item1846);
				b=expr();
				PopFollow();

				DebugLocation(471, 39);
				PushFollow(Follow._expr_in_for_item1850);
				c=expr();
				PopFollow();

				DebugLocation(471, 45);
				// SugarWalker.g:471:45: (d= expr )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=Expr_Access && LA56_0<=Expr_Alloc_Equal)||(LA56_0>=Expr_Bin && LA56_0<=Expr_Where)||LA56_0==IDENT||LA56_0==Match_Expr||LA56_0==Match_Tuple||LA56_0==NUMBER||LA56_0==STRING||LA56_0==87||LA56_0==90||LA56_0==94||LA56_0==97||LA56_0==102||LA56_0==108||LA56_0==111||LA56_0==116||LA56_0==119||LA56_0==126||LA56_0==129||LA56_0==133||LA56_0==174||LA56_0==DOUBLE))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:471:46: d= expr
					{
					DebugLocation(471, 47);
					PushFollow(Follow._expr_in_for_item1855);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(472, 2);

						value = new ForItemDownTo(a, b, c, d);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:475:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(475, 4);
				DebugLocation(475, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1867); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(475, 21);
				PushFollow(Follow._ident_in_for_item1871);
				a=ident();
				PopFollow();

				DebugLocation(475, 29);
				PushFollow(Follow._expr_in_for_item1875);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(476, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:479:4: ^( For_Item_Map a= ident b= expr )
				{
				DebugLocation(479, 4);
				DebugLocation(479, 6);
				Match(input,For_Item_Map,Follow._For_Item_Map_in_for_item1885); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(479, 20);
				PushFollow(Follow._ident_in_for_item1889);
				a=ident();
				PopFollow();

				DebugLocation(479, 28);
				PushFollow(Follow._expr_in_for_item1893);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(480, 2);

						value = new ForItemMap(a, b);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:483:4: ^( For_Item_When b= expr )
				{
				DebugLocation(483, 4);
				DebugLocation(483, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1903); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(483, 21);
				PushFollow(Follow._expr_in_for_item1907);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(484, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 37);
			LeaveRule("for_item", 37);
			LeaveRule_for_item();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:489:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 38);
		TraceIn("for_item_list", 38);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(489, 1);
		try
		{
			// SugarWalker.g:494:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:494:4: (a= for_item )+
			{
			DebugLocation(494, 4);
			// SugarWalker.g:494:4: (a= for_item )+
			int cnt58=0;
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=For_Item_Down_To && LA58_0<=For_Item_When)))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:494:5: a= for_item
					{
					DebugLocation(494, 6);
					PushFollow(Follow._for_item_in_for_item_list1934);
					a=for_item();
					PopFollow();

					DebugLocation(494, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt58 >= 1)
						goto loop58;

					EarlyExitException eee58 = new EarlyExitException( 58, input );
					DebugRecognitionException(eee58);
					throw eee58;
				}
				cnt58++;
			}
			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 38);
			LeaveRule("for_item_list", 38);
			LeaveRule_for_item_list();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:497:1: stmt_for returns [StmtFor value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 39);
		TraceIn("stmt_for", 39);
		StmtFor value = default(StmtFor);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(497, 1);
		try
		{
			// SugarWalker.g:498:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:498:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(498, 4);
			DebugLocation(498, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1955); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(498, 16);
			PushFollow(Follow._for_item_list_in_stmt_for1959);
			a=for_item_list();
			PopFollow();

			DebugLocation(498, 32);
			PushFollow(Follow._stmt_block_in_stmt_for1963);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(499, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 39);
			LeaveRule("stmt_for", 39);
			LeaveRule_stmt_for();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:504:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 40);
		TraceIn("stmt_try", 40);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(504, 1);
		try
		{
			// SugarWalker.g:505:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:505:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(505, 4);
			DebugLocation(505, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1983); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(505, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1987);
			a=stmt_block();
			PopFollow();

			DebugLocation(505, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try1991);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(505, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1995);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(506, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 40);
			LeaveRule("stmt_try", 40);
			LeaveRule_stmt_try();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:511:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(511, 1);
		try
		{
			// SugarWalker.g:512:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:512:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(512, 4);
			DebugLocation(512, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return2015); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(512, 18);
				// SugarWalker.g:512:18: (a= expr )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if (((LA59_0>=Expr_Access && LA59_0<=Expr_Alloc_Equal)||(LA59_0>=Expr_Bin && LA59_0<=Expr_Where)||LA59_0==IDENT||LA59_0==Match_Expr||LA59_0==Match_Tuple||LA59_0==NUMBER||LA59_0==STRING||LA59_0==87||LA59_0==90||LA59_0==94||LA59_0==97||LA59_0==102||LA59_0==108||LA59_0==111||LA59_0==116||LA59_0==119||LA59_0==126||LA59_0==129||LA59_0==133||LA59_0==174||LA59_0==DOUBLE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:512:19: a= expr
					{
					DebugLocation(512, 20);
					PushFollow(Follow._expr_in_stmt_return2020);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(513, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:518:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 42);
		TraceIn("ident", 42);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(518, 1);
		try
		{
			// SugarWalker.g:523:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:523:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(523, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2048); 
			DebugLocation(523, 12);
			 value += a.Text; 
			DebugLocation(523, 34);
			// SugarWalker.g:523:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==110))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:523:35: '::' a= IDENT
					{
					DebugLocation(523, 35);
					Match(input,110,Follow._110_in_ident2053); 
					DebugLocation(523, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2057); 
					DebugLocation(523, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(524, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 42);
			LeaveRule("ident", 42);
			LeaveRule_ident();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:529:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 43);
		TraceIn("ident_list", 43);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(529, 1);
		try
		{
			// SugarWalker.g:534:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:534:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(534, 4);
			DebugLocation(534, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list2085); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(534, 17);
				// SugarWalker.g:534:17: (a= ident )*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==IDENT))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:534:18: a= ident
						{
						DebugLocation(534, 19);
						PushFollow(Follow._ident_in_ident_list2090);
						a=ident();
						PopFollow();

						DebugLocation(534, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 43);
			LeaveRule("ident_list", 43);
			LeaveRule_ident_list();
		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:537:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 44);
		TraceIn("alloc_expr", 44);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(537, 1);
		try
		{
			// SugarWalker.g:538:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==Expr_Alloc_Equal))
			{
				alt62 = 1;
			}
			else if ((LA62_0==Expr_Alloc_Bracket))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:538:4: ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(538, 4);
				DebugLocation(538, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr2112); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(538, 24);
				PushFollow(Follow._type_name_in_alloc_expr2116);
				a=type_name();
				PopFollow();

				DebugLocation(538, 36);
				PushFollow(Follow._ident_list_in_alloc_expr2120);
				b=ident_list();
				PopFollow();

				DebugLocation(538, 49);
				PushFollow(Follow._expr_list_in_alloc_expr2124);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(539, 2);

						if (c != null && c.Count > 0)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:549:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(549, 4);
				DebugLocation(549, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr2134); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(549, 26);
				PushFollow(Follow._type_name_in_alloc_expr2138);
				a=type_name();
				PopFollow();

				DebugLocation(549, 38);
				PushFollow(Follow._ident_list_in_alloc_expr2142);
				b=ident_list();
				PopFollow();

				DebugLocation(549, 51);
				PushFollow(Follow._expr_list_in_alloc_expr2146);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(550, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 44);
			LeaveRule("alloc_expr", 44);
			LeaveRule_alloc_expr();
		}
		DebugLocation(553, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:555:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 45);
		TraceIn("expr_tuple", 45);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(555, 1);
		try
		{
			// SugarWalker.g:560:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:560:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(560, 4);
			DebugLocation(560, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2171); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(560, 17);
			// SugarWalker.g:560:17: (a= expr )+
			int cnt63=0;
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if (((LA63_0>=Expr_Access && LA63_0<=Expr_Alloc_Equal)||(LA63_0>=Expr_Bin && LA63_0<=Expr_Where)||LA63_0==IDENT||LA63_0==Match_Expr||LA63_0==Match_Tuple||LA63_0==NUMBER||LA63_0==STRING||LA63_0==87||LA63_0==90||LA63_0==94||LA63_0==97||LA63_0==102||LA63_0==108||LA63_0==111||LA63_0==116||LA63_0==119||LA63_0==126||LA63_0==129||LA63_0==133||LA63_0==174||LA63_0==DOUBLE))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:560:18: a= expr
					{
					DebugLocation(560, 19);
					PushFollow(Follow._expr_in_expr_tuple2176);
					a=expr();
					PopFollow();

					DebugLocation(560, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt63 >= 1)
						goto loop63;

					EarlyExitException eee63 = new EarlyExitException( 63, input );
					DebugRecognitionException(eee63);
					throw eee63;
				}
				cnt63++;
			}
			loop63:
				;

			} finally { DebugExitSubRule(63); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 45);
			LeaveRule("expr_tuple", 45);
			LeaveRule_expr_tuple();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:563:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 46);
		TraceIn("match_tuple", 46);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(563, 1);
		try
		{
			// SugarWalker.g:568:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:568:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(568, 4);
			DebugLocation(568, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2203); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(568, 18);
				// SugarWalker.g:568:18: (a= expr )*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if (((LA64_0>=Expr_Access && LA64_0<=Expr_Alloc_Equal)||(LA64_0>=Expr_Bin && LA64_0<=Expr_Where)||LA64_0==IDENT||LA64_0==Match_Expr||LA64_0==Match_Tuple||LA64_0==NUMBER||LA64_0==STRING||LA64_0==87||LA64_0==90||LA64_0==94||LA64_0==97||LA64_0==102||LA64_0==108||LA64_0==111||LA64_0==116||LA64_0==119||LA64_0==126||LA64_0==129||LA64_0==133||LA64_0==174||LA64_0==DOUBLE))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:568:19: a= expr
						{
						DebugLocation(568, 20);
						PushFollow(Follow._expr_in_match_tuple2208);
						a=expr();
						PopFollow();

						DebugLocation(568, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 46);
			LeaveRule("match_tuple", 46);
			LeaveRule_match_tuple();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:571:1: expr_list returns [List<Expr> value] : ^( Expr_Args (a= expr )* ) ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 47);
		TraceIn("expr_list", 47);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(571, 1);
		try
		{
			// SugarWalker.g:576:2: ( ^( Expr_Args (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:576:4: ^( Expr_Args (a= expr )* )
			{
			DebugLocation(576, 4);
			DebugLocation(576, 6);
			Match(input,Expr_Args,Follow._Expr_Args_in_expr_list2234); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(576, 16);
				// SugarWalker.g:576:16: (a= expr )*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if (((LA65_0>=Expr_Access && LA65_0<=Expr_Alloc_Equal)||(LA65_0>=Expr_Bin && LA65_0<=Expr_Where)||LA65_0==IDENT||LA65_0==Match_Expr||LA65_0==Match_Tuple||LA65_0==NUMBER||LA65_0==STRING||LA65_0==87||LA65_0==90||LA65_0==94||LA65_0==97||LA65_0==102||LA65_0==108||LA65_0==111||LA65_0==116||LA65_0==119||LA65_0==126||LA65_0==129||LA65_0==133||LA65_0==174||LA65_0==DOUBLE))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:576:17: a= expr
						{
						DebugLocation(576, 18);
						PushFollow(Follow._expr_in_expr_list2239);
						a=expr();
						PopFollow();

						DebugLocation(576, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 47);
			LeaveRule("expr_list", 47);
			LeaveRule_expr_list();
		}
		DebugLocation(577, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:579:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 48);
		TraceIn("call_expr", 48);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(579, 1);
		try
		{
			// SugarWalker.g:580:2: ( ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:580:4: ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list )
			{
			DebugLocation(580, 4);
			DebugLocation(580, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2260); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(580, 17);
			PushFollow(Follow._expr_in_call_expr2264);
			a=expr();
			PopFollow();

			DebugLocation(580, 23);
			// SugarWalker.g:580:23: (b= generic_parameter )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==Generic_Patameters))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:580:24: b= generic_parameter
				{
				DebugLocation(580, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2269);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(580, 47);
			PushFollow(Follow._expr_list_in_call_expr2275);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(581, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 48);
			LeaveRule("call_expr", 48);
			LeaveRule_call_expr();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:586:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr_list ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 49);
		TraceIn("dict_expr", 49);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(586, 1);
		try
		{
			// SugarWalker.g:587:2: ( ^( Expr_Dict a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:587:4: ^( Expr_Dict a= expr b= expr_list )
			{
			DebugLocation(587, 4);
			DebugLocation(587, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2295); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(587, 17);
			PushFollow(Follow._expr_in_dict_expr2299);
			a=expr();
			PopFollow();

			DebugLocation(587, 24);
			PushFollow(Follow._expr_list_in_dict_expr2303);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(588, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 49);
			LeaveRule("dict_expr", 49);
			LeaveRule_dict_expr();
		}
		DebugLocation(591, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:593:1: lambda_expr returns [Expr value] : ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) );
	[GrammarRule("lambda_expr")]
	private Expr lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 50);
		TraceIn("lambda_expr", 50);
		Expr value = default(Expr);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		SugarType t = default(SugarType);
		StmtBlock a = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(593, 1);
		try
		{
			// SugarWalker.g:594:2: ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) )
			int alt75=4;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==Expr_Lambda))
			{
				int LA75_1 = input.LA(2);

				if ((LA75_1==DOWN))
				{
					switch (input.LA(3))
					{
					case 103:
						{
						alt75 = 1;
						}
						break;
					case 122:
						{
						alt75 = 2;
						}
						break;
					case 101:
						{
						alt75 = 3;
						}
						break;
					case 121:
						{
						alt75 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 75, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:594:4: ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(594, 4);
				DebugLocation(594, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2323); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(594, 18);
				Match(input,103,Follow._103_in_lambda_expr2325); 
				DebugLocation(594, 23);
				// SugarWalker.g:594:23: (b= func_args )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==Func_Args))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:594:24: b= func_args
					{
					DebugLocation(594, 25);
					PushFollow(Follow._func_args_in_lambda_expr2330);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(594, 38);
				// SugarWalker.g:594:38: (t= type_name )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if (((LA68_0>=Type_Array && LA68_0<=Type_Ident)||(LA68_0>=Type_Ref && LA68_0<=Type_Template)))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:594:39: t= type_name
					{
					DebugLocation(594, 40);
					PushFollow(Follow._type_name_in_lambda_expr2337);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(594, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2343);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(595, 2);

						value = new ExprLambda(a, b, true, t);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:598:4: ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(598, 4);
				DebugLocation(598, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2353); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(598, 18);
				Match(input,122,Follow._122_in_lambda_expr2355); 
				DebugLocation(598, 23);
				// SugarWalker.g:598:23: (b= func_args )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==Func_Args))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:598:24: b= func_args
					{
					DebugLocation(598, 25);
					PushFollow(Follow._func_args_in_lambda_expr2360);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(598, 38);
				// SugarWalker.g:598:38: (t= type_name )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if (((LA70_0>=Type_Array && LA70_0<=Type_Ident)||(LA70_0>=Type_Ref && LA70_0<=Type_Template)))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:598:39: t= type_name
					{
					DebugLocation(598, 40);
					PushFollow(Follow._type_name_in_lambda_expr2367);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(598, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2373);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(599, 2);

						value = new ExprLambda(a, b, false, t);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:602:4: ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(602, 4);
				DebugLocation(602, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2383); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(602, 18);
				Match(input,101,Follow._101_in_lambda_expr2385); 
				DebugLocation(602, 24);
				// SugarWalker.g:602:24: (b= func_args )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==Func_Args))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:602:25: b= func_args
					{
					DebugLocation(602, 26);
					PushFollow(Follow._func_args_in_lambda_expr2390);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(602, 39);
				// SugarWalker.g:602:39: (t= type_name )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if (((LA72_0>=Type_Array && LA72_0<=Type_Ident)||(LA72_0>=Type_Ref && LA72_0<=Type_Template)))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:602:40: t= type_name
					{
					DebugLocation(602, 41);
					PushFollow(Follow._type_name_in_lambda_expr2397);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(602, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2403);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(603, 2);

						value = new ExprCurryLambda(a, b, true, t);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:606:4: ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(606, 4);
				DebugLocation(606, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2413); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(606, 18);
				Match(input,121,Follow._121_in_lambda_expr2415); 
				DebugLocation(606, 24);
				// SugarWalker.g:606:24: (b= func_args )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==Func_Args))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:606:25: b= func_args
					{
					DebugLocation(606, 26);
					PushFollow(Follow._func_args_in_lambda_expr2420);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(606, 39);
				// SugarWalker.g:606:39: (t= type_name )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if (((LA74_0>=Type_Array && LA74_0<=Type_Ident)||(LA74_0>=Type_Ref && LA74_0<=Type_Template)))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:606:40: t= type_name
					{
					DebugLocation(606, 41);
					PushFollow(Follow._type_name_in_lambda_expr2427);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(606, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2433);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(607, 2);

						value = new ExprCurryLambda(a, b, false, t);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 50);
			LeaveRule("lambda_expr", 50);
			LeaveRule_lambda_expr();
		}
		DebugLocation(610, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:612:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 51);
		TraceIn("new_expr", 51);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(612, 1);
		try
		{
			// SugarWalker.g:613:2: ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==Expr_New_Type))
			{
				alt76 = 1;
			}
			else if ((LA76_0==Expr_New_Array))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:613:4: ^( Expr_New_Type a= type_name b= expr_list )
				{
				DebugLocation(613, 4);
				DebugLocation(613, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2453); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(613, 21);
				PushFollow(Follow._type_name_in_new_expr2457);
				a=type_name();
				PopFollow();

				DebugLocation(613, 33);
				PushFollow(Follow._expr_list_in_new_expr2461);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(614, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:617:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(617, 4);
				DebugLocation(617, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2471); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(617, 22);
				PushFollow(Follow._type_name_in_new_expr2475);
				a=type_name();
				PopFollow();

				DebugLocation(617, 34);
				PushFollow(Follow._expr_list_in_new_expr2479);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(618, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 51);
			LeaveRule("new_expr", 51);
			LeaveRule_new_expr();
		}
		DebugLocation(621, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:623:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident c= expr_list ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 52);
		TraceIn("call_with_expr", 52);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(623, 1);
		try
		{
			// SugarWalker.g:624:2: ( ^( Expr_Call_With a= expr b= ident c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:624:4: ^( Expr_Call_With a= expr b= ident c= expr_list )
			{
			DebugLocation(624, 4);
			DebugLocation(624, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2499); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(624, 22);
			PushFollow(Follow._expr_in_call_with_expr2503);
			a=expr();
			PopFollow();

			DebugLocation(624, 29);
			PushFollow(Follow._ident_in_call_with_expr2507);
			b=ident();
			PopFollow();

			DebugLocation(624, 37);
			PushFollow(Follow._expr_list_in_call_with_expr2511);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(625, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 52);
			LeaveRule("call_with_expr", 52);
			LeaveRule_call_with_expr();
		}
		DebugLocation(637, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:639:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 53);
		TraceIn("cast_expr", 53);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(639, 1);
		try
		{
			// SugarWalker.g:640:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:640:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(640, 4);
			DebugLocation(640, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2531); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(640, 17);
			PushFollow(Follow._type_name_in_cast_expr2535);
			a=type_name();
			PopFollow();

			DebugLocation(640, 29);
			PushFollow(Follow._expr_in_cast_expr2539);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(641, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 53);
			LeaveRule("cast_expr", 53);
			LeaveRule_cast_expr();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:646:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr )* ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 54);
		TraceIn("list_expr", 54);
		ExprList value = default(ExprList);


		Expr a = default(Expr);


			var list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(646, 1);
		try
		{
			// SugarWalker.g:651:2: ( ^( Expr_List (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:651:4: ^( Expr_List (a= expr )* )
			{
			DebugLocation(651, 4);
			DebugLocation(651, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2564); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(651, 16);
				// SugarWalker.g:651:16: (a= expr )*
				try { DebugEnterSubRule(77);
				while (true)
				{
					int alt77=2;
					try { DebugEnterDecision(77, false);
					int LA77_0 = input.LA(1);

					if (((LA77_0>=Expr_Access && LA77_0<=Expr_Alloc_Equal)||(LA77_0>=Expr_Bin && LA77_0<=Expr_Where)||LA77_0==IDENT||LA77_0==Match_Expr||LA77_0==Match_Tuple||LA77_0==NUMBER||LA77_0==STRING||LA77_0==87||LA77_0==90||LA77_0==94||LA77_0==97||LA77_0==102||LA77_0==108||LA77_0==111||LA77_0==116||LA77_0==119||LA77_0==126||LA77_0==129||LA77_0==133||LA77_0==174||LA77_0==DOUBLE))
					{
						alt77 = 1;
					}


					} finally { DebugExitDecision(77); }
					switch ( alt77 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:651:17: a= expr
						{
						DebugLocation(651, 18);
						PushFollow(Follow._expr_in_list_expr2569);
						a=expr();
						PopFollow();

						DebugLocation(651, 24);
						 list.Add(a); 

						}
						break;

					default:
						goto loop77;
					}
				}

				loop77:
					;

				} finally { DebugExitSubRule(77); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(652, 2);

					value = new ExprList(list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 54);
			LeaveRule("list_expr", 54);
			LeaveRule_list_expr();
		}
		DebugLocation(655, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_list_generation_expr();
	partial void LeaveRule_list_generation_expr();

	// $ANTLR start "list_generation_expr"
	// SugarWalker.g:657:1: list_generation_expr returns [ExprListGeneration value] : ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) ;
	[GrammarRule("list_generation_expr")]
	private ExprListGeneration list_generation_expr()
	{
		EnterRule_list_generation_expr();
		EnterRule("list_generation_expr", 55);
		TraceIn("list_generation_expr", 55);
		ExprListGeneration value = default(ExprListGeneration);


		SugarType a = default(SugarType);
		StmtFor b = default(StmtFor);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "list_generation_expr");
		DebugLocation(657, 1);
		try
		{
			// SugarWalker.g:658:2: ( ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:658:4: ^( Expr_List_Generation a= type_name b= stmt_for c= expr )
			{
			DebugLocation(658, 4);
			DebugLocation(658, 6);
			Match(input,Expr_List_Generation,Follow._Expr_List_Generation_in_list_generation_expr2593); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(658, 28);
			PushFollow(Follow._type_name_in_list_generation_expr2597);
			a=type_name();
			PopFollow();

			DebugLocation(658, 40);
			PushFollow(Follow._stmt_for_in_list_generation_expr2601);
			b=stmt_for();
			PopFollow();

			DebugLocation(658, 51);
			PushFollow(Follow._expr_in_list_generation_expr2605);
			c=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(659, 2);

					value = new ExprListGeneration(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_generation_expr", 55);
			LeaveRule("list_generation_expr", 55);
			LeaveRule_list_generation_expr();
		}
		DebugLocation(662, 1);
		} finally { DebugExitRule(GrammarFileName, "list_generation_expr"); }
		return value;

	}
	// $ANTLR end "list_generation_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:664:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 56);
		TraceIn("chain_expr", 56);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(664, 1);
		try
		{
			// SugarWalker.g:669:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:669:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(669, 4);
			DebugLocation(669, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2630); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(670, 5);
			PushFollow(Follow._expr_in_chain_expr2637);
			a=expr();
			PopFollow();

			DebugLocation(671, 4);

							last=a;
						
			DebugLocation(674, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==113||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(674, 64);
			PushFollow(Follow._expr_in_chain_expr2683);
			a=expr();
			PopFollow();

			DebugLocation(675, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(679, 4);
			// SugarWalker.g:679:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==85||LA78_0==113||LA78_0==117||LA78_0==120||(LA78_0>=123 && LA78_0<=124)||(LA78_0>=150 && LA78_0<=151)))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:680:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(680, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==85||input.LA(1)==113||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(680, 65);
					PushFollow(Follow._expr_in_chain_expr2735);
					a=expr();
					PopFollow();

					DebugLocation(681, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 56);
			LeaveRule("chain_expr", 56);
			LeaveRule_chain_expr();
		}
		DebugLocation(686, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:688:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(688, 1);
		try
		{
			// SugarWalker.g:693:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:693:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(693, 4);
			DebugLocation(693, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2769); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(693, 18);
			PushFollow(Follow._expr_in_where_expr2773);
			a=expr();
			PopFollow();

			DebugLocation(693, 24);
			// SugarWalker.g:693:24: (b= stmt )+
			int cnt79=0;
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if (((LA79_0>=Expr_Access && LA79_0<=Expr_Alloc_Equal)||(LA79_0>=Expr_Bin && LA79_0<=Expr_Where)||LA79_0==IDENT||LA79_0==Match_Expr||LA79_0==Match_Tuple||LA79_0==NUMBER||LA79_0==STRING||(LA79_0>=Stmt_Defer && LA79_0<=Stmt_While)||LA79_0==87||LA79_0==90||LA79_0==94||LA79_0==97||LA79_0==102||LA79_0==108||LA79_0==111||(LA79_0>=115 && LA79_0<=116)||LA79_0==119||LA79_0==126||(LA79_0>=128 && LA79_0<=129)||LA79_0==133||LA79_0==174||LA79_0==DOUBLE))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:693:25: b= stmt
					{
					DebugLocation(693, 26);
					PushFollow(Follow._stmt_in_where_expr2778);
					b=stmt();
					PopFollow();

					DebugLocation(693, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt79 >= 1)
						goto loop79;

					EarlyExitException eee79 = new EarlyExitException( 79, input );
					DebugRecognitionException(eee79);
					throw eee79;
				}
				cnt79++;
			}
			loop79:
				;

			} finally { DebugExitSubRule(79); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(694, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(697, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarWalker.g:699:1: match_item returns [ExprMatchItem value] : ^( Match_Expr_Item a= expr b= expr ) ;
	[GrammarRule("match_item")]
	private ExprMatchItem match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		ExprMatchItem value = default(ExprMatchItem);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(699, 1);
		try
		{
			// SugarWalker.g:700:2: ( ^( Match_Expr_Item a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:700:4: ^( Match_Expr_Item a= expr b= expr )
			{
			DebugLocation(700, 4);
			DebugLocation(700, 6);
			Match(input,Match_Expr_Item,Follow._Match_Expr_Item_in_match_item2803); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(700, 23);
			PushFollow(Follow._expr_in_match_item2807);
			a=expr();
			PopFollow();

			DebugLocation(700, 30);
			PushFollow(Follow._expr_in_match_item2811);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(701, 2);

					value = new ExprMatchItem(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(704, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return value;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarWalker.g:706:1: match_expr returns [Expr value] : ^( Match_Expr (a= expr )? (b= match_item )+ ) ;
	[GrammarRule("match_expr")]
	private Expr match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		Expr value = default(Expr);


		Expr a = default(Expr);
		ExprMatchItem b = default(ExprMatchItem);


			List<ExprMatchItem> list = new List<ExprMatchItem>();

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(706, 1);
		try
		{
			// SugarWalker.g:711:2: ( ^( Match_Expr (a= expr )? (b= match_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:711:5: ^( Match_Expr (a= expr )? (b= match_item )+ )
			{
			DebugLocation(711, 5);
			DebugLocation(711, 7);
			Match(input,Match_Expr,Follow._Match_Expr_in_match_expr2837); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(711, 18);
			// SugarWalker.g:711:18: (a= expr )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if (((LA80_0>=Expr_Access && LA80_0<=Expr_Alloc_Equal)||(LA80_0>=Expr_Bin && LA80_0<=Expr_Where)||LA80_0==IDENT||LA80_0==Match_Expr||LA80_0==Match_Tuple||LA80_0==NUMBER||LA80_0==STRING||LA80_0==87||LA80_0==90||LA80_0==94||LA80_0==97||LA80_0==102||LA80_0==108||LA80_0==111||LA80_0==116||LA80_0==119||LA80_0==126||LA80_0==129||LA80_0==133||LA80_0==174||LA80_0==DOUBLE))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:711:19: a= expr
				{
				DebugLocation(711, 20);
				PushFollow(Follow._expr_in_match_expr2842);
				a=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(711, 28);
			// SugarWalker.g:711:28: (b= match_item )+
			int cnt81=0;
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==Match_Expr_Item))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:711:29: b= match_item
					{
					DebugLocation(711, 30);
					PushFollow(Follow._match_item_in_match_expr2849);
					b=match_item();
					PopFollow();

					DebugLocation(711, 42);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt81 >= 1)
						goto loop81;

					EarlyExitException eee81 = new EarlyExitException( 81, input );
					DebugRecognitionException(eee81);
					throw eee81;
				}
				cnt81++;
			}
			loop81:
				;

			} finally { DebugExitSubRule(81); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(712, 2);

					value = new ExprMatch(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(715, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return value;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:717:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		Expr lambda = default(Expr);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		ExprListGeneration list_generation = default(ExprListGeneration);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		Expr expr_match = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(717, 1);
		try
		{
			// SugarWalker.g:718:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt82=29;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt82 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt82 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt82 = 3;
				}
				break;
			case Expr_Call:
				{
				alt82 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt82 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt82 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt82 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt82 = 8;
				}
				break;
			case Expr_List:
				{
				alt82 = 9;
				}
				break;
			case Expr_List_Generation:
				{
				alt82 = 10;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt82 = 11;
				}
				break;
			case Expr_Where:
				{
				alt82 = 12;
				}
				break;
			case Match_Expr:
				{
				alt82 = 13;
				}
				break;
			case Expr_Infix:
				{
				alt82 = 14;
				}
				break;
			case Expr_Cond:
				{
				alt82 = 15;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt82 = 16;
				}
				break;
			case Expr_Not_Null:
				{
				alt82 = 17;
				}
				break;
			case Expr_Access:
				{
				alt82 = 18;
				}
				break;
			case Expr_Chain:
				{
				alt82 = 19;
				}
				break;
			case Expr_Bin:
				{
				alt82 = 20;
				}
				break;
			case 87:
			case 90:
			case 94:
			case 97:
			case 102:
			case 108:
			case 116:
			case 119:
			case 126:
			case 133:
			case 174:
				{
				alt82 = 21;
				}
				break;
			case 129:
				{
				alt82 = 22;
				}
				break;
			case Expr_Bracket:
				{
				alt82 = 23;
				}
				break;
			case Expr_Suffix:
				{
				alt82 = 24;
				}
				break;
			case Expr_Prefix:
				{
				alt82 = 25;
				}
				break;
			case 111:
				{
				alt82 = 26;
				}
				break;
			case IDENT:
				{
				alt82 = 27;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt82 = 28;
				}
				break;
			case STRING:
				{
				alt82 = 29;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:718:7: tuple= expr_tuple
				{
				DebugLocation(718, 12);
				PushFollow(Follow._expr_tuple_in_expr2878);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(719, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:722:4: alloc= alloc_expr
				{
				DebugLocation(722, 9);
				PushFollow(Follow._alloc_expr_in_expr2888);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(723, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:726:4: match= match_tuple
				{
				DebugLocation(726, 9);
				PushFollow(Follow._match_tuple_in_expr2898);
				match=match_tuple();
				PopFollow();

				DebugLocation(727, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:730:4: call= call_expr
				{
				DebugLocation(730, 8);
				PushFollow(Follow._call_expr_in_expr2908);
				call=call_expr();
				PopFollow();

				DebugLocation(731, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:734:4: call_with= call_with_expr
				{
				DebugLocation(734, 13);
				PushFollow(Follow._call_with_expr_in_expr2918);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(735, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:738:4: dict= dict_expr
				{
				DebugLocation(738, 8);
				PushFollow(Follow._dict_expr_in_expr2928);
				dict=dict_expr();
				PopFollow();

				DebugLocation(739, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:742:4: lambda= lambda_expr
				{
				DebugLocation(742, 10);
				PushFollow(Follow._lambda_expr_in_expr2938);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(743, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:746:4: cast= cast_expr
				{
				DebugLocation(746, 8);
				PushFollow(Follow._cast_expr_in_expr2948);
				cast=cast_expr();
				PopFollow();

				DebugLocation(747, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:750:4: list= list_expr
				{
				DebugLocation(750, 8);
				PushFollow(Follow._list_expr_in_expr2958);
				list=list_expr();
				PopFollow();

				DebugLocation(751, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:754:4: list_generation= list_generation_expr
				{
				DebugLocation(754, 19);
				PushFollow(Follow._list_generation_expr_in_expr2968);
				list_generation=list_generation_expr();
				PopFollow();

				DebugLocation(755, 2);

						value = list_generation;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:758:4: expr_new= new_expr
				{
				DebugLocation(758, 12);
				PushFollow(Follow._new_expr_in_expr2978);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(759, 2);

						value = expr_new;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:762:4: where= where_expr
				{
				DebugLocation(762, 9);
				PushFollow(Follow._where_expr_in_expr2988);
				where=where_expr();
				PopFollow();

				DebugLocation(763, 2);

						value = where;
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:766:4: expr_match= match_expr
				{
				DebugLocation(766, 14);
				PushFollow(Follow._match_expr_in_expr2998);
				expr_match=match_expr();
				PopFollow();

				DebugLocation(767, 2);

						value = expr_match;
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:770:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(770, 4);
				DebugLocation(770, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr3007); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(770, 27);
				PushFollow(Follow._ident_in_expr3011);
				ident_text=ident();
				PopFollow();

				DebugLocation(770, 35);
				PushFollow(Follow._expr_in_expr3015);
				a=expr();
				PopFollow();

				DebugLocation(770, 42);
				PushFollow(Follow._expr_in_expr3019);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(771, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:774:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(774, 4);
				DebugLocation(774, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr3029); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(774, 17);
				PushFollow(Follow._expr_in_expr3033);
				a=expr();
				PopFollow();

				DebugLocation(774, 24);
				PushFollow(Follow._expr_in_expr3037);
				b=expr();
				PopFollow();

				DebugLocation(774, 31);
				PushFollow(Follow._expr_in_expr3041);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(775, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:778:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(778, 4);
				DebugLocation(778, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr3051); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(778, 26);
				PushFollow(Follow._expr_in_expr3055);
				a=expr();
				PopFollow();

				DebugLocation(778, 33);
				PushFollow(Follow._expr_in_expr3059);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(779, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:782:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(782, 4);
				DebugLocation(782, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr3069); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(782, 21);
				PushFollow(Follow._expr_in_expr3073);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(783, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:786:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(786, 4);
				DebugLocation(786, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr3083); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(786, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=103 && input.LA(1)<=106)||input.LA(1)==110)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(786, 57);
				PushFollow(Follow._expr_in_expr3109);
				a=expr();
				PopFollow();

				DebugLocation(786, 73);
				PushFollow(Follow._ident_in_expr3113);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(787, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:790:4: chain= chain_expr
				{
				DebugLocation(790, 10);
				PushFollow(Follow._chain_expr_in_expr3126);
				chain=chain_expr();
				PopFollow();

				DebugLocation(791, 2);

						value = chain;
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:794:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(794, 4);
				DebugLocation(794, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr3135); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(794, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=85 && input.LA(1)<=86)||(input.LA(1)>=88 && input.LA(1)<=89)||input.LA(1)==93||input.LA(1)==95||input.LA(1)==99||input.LA(1)==107||input.LA(1)==113||input.LA(1)==115||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=125)||input.LA(1)==132||input.LA(1)==135||(input.LA(1)>=150 && input.LA(1)<=151)||input.LA(1)==159||input.LA(1)==173||input.LA(1)==176)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(801, 9);
				PushFollow(Follow._expr_in_expr3266);
				a=expr();
				PopFollow();

				DebugLocation(801, 16);
				PushFollow(Follow._expr_in_expr3270);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(802, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:805:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(805, 4);
				DebugLocation(805, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==108||input.LA(1)==116||input.LA(1)==119||input.LA(1)==126||input.LA(1)==133||input.LA(1)==174)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(805, 88);
				PushFollow(Follow._expr_in_expr3328);
				a=expr();
				PopFollow();

				DebugLocation(805, 95);
				PushFollow(Follow._expr_in_expr3332);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(806, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:809:4: ^( '@' text_ident= ident )
				{
				DebugLocation(809, 4);
				DebugLocation(809, 6);
				Match(input,129,Follow._129_in_expr3342); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(809, 20);
				PushFollow(Follow._ident_in_expr3346);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(810, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:813:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(813, 4);
				DebugLocation(813, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3356); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(813, 20);
				PushFollow(Follow._expr_in_expr3360);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(814, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:817:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(817, 4);
				DebugLocation(817, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3370); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(817, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==96||input.LA(1)==100)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(817, 36);
				PushFollow(Follow._expr_in_expr3384);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(818, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:821:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(821, 4);
				DebugLocation(821, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3394); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(821, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==89||input.LA(1)==93||(input.LA(1)>=95 && input.LA(1)<=96)||(input.LA(1)>=99 && input.LA(1)<=100)||input.LA(1)==158||input.LA(1)==177)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(821, 80);
				PushFollow(Follow._expr_in_expr3436);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(822, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:825:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(825, 4);
				DebugLocation(825, 6);
				Match(input,111,Follow._111_in_expr3446); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(825, 12);
				PushFollow(Follow._expr_in_expr3450);
				a=expr();
				PopFollow();

				DebugLocation(825, 19);
				PushFollow(Follow._expr_in_expr3454);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(826, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:833:4: text_ident= ident
				{
				DebugLocation(833, 15);
				PushFollow(Follow._ident_in_expr3467);
				text_ident=ident();
				PopFollow();

				DebugLocation(834, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// SugarWalker.g:838:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(838, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(839, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// SugarWalker.g:842:4: text= STRING
				{
				DebugLocation(842, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3498); 
				DebugLocation(843, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(846, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA37 dfa37;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa37 = new DFA37( this );
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x7\xFFFF";
		private const string DFA37_eofS =
			"\x7\xFFFF";
		private const string DFA37_minS =
			"\x1\xC\x1\x3\x2\xFFFF\x1\x2D\x1\xFFFF\x1\x3";
		private const string DFA37_maxS =
			"\x2\xB2\x2\xFFFF\x1\x2D\x1\xFFFF\x1\xB2";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA37_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x3\x3\x1\xFFFF\x14\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1"+
				"\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x3\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x28"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x28\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6",
				"",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x28\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "280:69: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x101040000006848UL,0x800000000240UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_global_using281 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0x77000UL});
		public static readonly BitSet _type_name_in_global_alloc318 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc322 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc326 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc336 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc341 = new BitSet(new ulong[]{0x0UL,0x77000UL});
		public static readonly BitSet _type_name_in_global_alloc347 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc351 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc355 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _111_in_global_alloc365 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc370 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc376 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc380 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef400 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef405 = new BitSet(new ulong[]{0x0UL,0x77000UL});
		public static readonly BitSet _type_name_in_global_typedef411 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_global_typedef415 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item480 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item485 = new BitSet(new ulong[]{0x1080200000000008UL});
		public static readonly BitSet _140_in_attribute_item493 = new BitSet(new ulong[]{0x1080200000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item501 = new BitSet(new ulong[]{0x1080200000000008UL});
		public static readonly BitSet _attribute_item_in_attribute529 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def550 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def554 = new BitSet(new ulong[]{0x100000000008UL});
		public static readonly BitSet _global_block_in_namespace_def559 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def586 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def591 = new BitSet(new ulong[]{0x1000000000000008UL});
		public static readonly BitSet _STRING_in_import_def601 = new BitSet(new ulong[]{0x1000000000000008UL});
		public static readonly BitSet _Enum_in_enum_def622 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def627 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_enum_def633 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_enum_def637 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def657 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _137_in_class_def662 = new BitSet(new ulong[]{0x200000000010UL});
		public static readonly BitSet _attribute_in_class_def669 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def675 = new BitSet(new ulong[]{0x9A0000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def680 = new BitSet(new ulong[]{0x920000000008UL});
		public static readonly BitSet _func_args_in_class_def687 = new BitSet(new ulong[]{0x900000000008UL});
		public static readonly BitSet _ident_list_in_class_def694 = new BitSet(new ulong[]{0x100000000008UL});
		public static readonly BitSet _global_block_in_class_def701 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident728 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _140_in_type_ident732 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x202001000UL});
		public static readonly BitSet _153_in_type_ident745 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x202001000UL});
		public static readonly BitSet _161_in_type_ident759 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x202001000UL});
		public static readonly BitSet _ident_in_type_ident774 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x202001000UL});
		public static readonly BitSet _Type_Template_in_type_template811 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template815 = new BitSet(new ulong[]{0x8UL,0x77000UL});
		public static readonly BitSet _type_name_in_type_template820 = new BitSet(new ulong[]{0x8UL,0x77000UL});
		public static readonly BitSet _Type_Array_in_type_array849 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array853 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_type_array858 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _Type_Star_in_type_star882 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star886 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_star888 = new BitSet(new ulong[]{0x8UL,0x20000000UL});
		public static readonly BitSet _93_in_type_star893 = new BitSet(new ulong[]{0x8UL,0x20000000UL});
		public static readonly BitSet _Type_Ref_in_type_ref915 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref919 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Func_in_type_func939 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_list_in_type_func944 = new BitSet(new ulong[]{0x8UL,0x77000UL});
		public static readonly BitSet _type_name_in_type_func951 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_List_in_type_list977 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_list982 = new BitSet(new ulong[]{0x8UL,0x77000UL});
		public static readonly BitSet _type_array_in_type_name1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type_name1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args1073 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args1078 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter1105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter1110 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _Func_Def_in_func_def1136 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def1141 = new BitSet(new ulong[]{0x30A82A0FFFFF7000UL,0x4090984AE4877000UL,0x6400000000022UL});
		public static readonly BitSet _type_name_in_func_def1148 = new BitSet(new ulong[]{0x30A82A0FFFFF7000UL,0x4090984AE4800000UL,0x6400000000022UL});
		public static readonly BitSet _177_in_func_def1155 = new BitSet(new ulong[]{0x30A82A0FFFFF7000UL,0x4090984AE4800000UL,0x4400000000022UL});
		public static readonly BitSet _ident_in_func_def1162 = new BitSet(new ulong[]{0x30A82A0FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _set_in_func_def1168 = new BitSet(new ulong[]{0x30A82A0FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _generic_parameter_in_func_def1183 = new BitSet(new ulong[]{0x30A8220FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _func_args_in_func_def1191 = new BitSet(new ulong[]{0x30A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _stmt_block_in_func_def1202 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1212 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1240 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1245 = new BitSet(new ulong[]{0xD0A8200FFFFF7008UL,0x40989042448007FFUL,0x4400000000023UL});
		public static readonly BitSet _stmt_expr_in_stmt1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_translate1371 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1375 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_stmt_translate1379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _111_in_stmt_translate1389 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1393 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1397 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _115_in_stmt_translate1407 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1411 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_stmt_translate1415 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1440 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1444 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1448 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1480 = new BitSet(new ulong[]{0x2000000000000008UL,0x800UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1486 = new BitSet(new ulong[]{0x2000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1491 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1513 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1517 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1527 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1531 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1593 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1599 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_stmt_using1614 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x10000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1635 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1639 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1682 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1686 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1690 = new BitSet(new ulong[]{0x2000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1695 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1707 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1711 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1715 = new BitSet(new ulong[]{0x2000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1720 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1742 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1746 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1750 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1760 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1764 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1768 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1778 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1783 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1789 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1809 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1813 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1817 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1821 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1826 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1838 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1842 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1846 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1850 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1855 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1867 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1871 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1875 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Map_in_for_item1885 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1889 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_for_item1893 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1903 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1907 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list1934 = new BitSet(new ulong[]{0x1F000000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1955 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for1959 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1963 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1983 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1987 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try1991 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1995 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return2015 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return2020 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident2048 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_ident2053 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _IDENT_in_ident2057 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list2085 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list2090 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr2112 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2116 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2120 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2124 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr2134 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2138 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2142 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2146 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2171 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2176 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2203 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2208 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _Expr_Args_in_expr_list2234 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_list2239 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _Expr_Call_in_call_expr2260 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2264 = new BitSet(new ulong[]{0x80000008000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2269 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_expr2275 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2295 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2299 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_dict_expr2303 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2323 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _103_in_lambda_expr2325 = new BitSet(new ulong[]{0x2000020000000000UL,0x77000UL});
		public static readonly BitSet _func_args_in_lambda_expr2330 = new BitSet(new ulong[]{0x2000000000000000UL,0x77000UL});
		public static readonly BitSet _type_name_in_lambda_expr2337 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2343 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2353 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _122_in_lambda_expr2355 = new BitSet(new ulong[]{0x2000020000000000UL,0x77000UL});
		public static readonly BitSet _func_args_in_lambda_expr2360 = new BitSet(new ulong[]{0x2000000000000000UL,0x77000UL});
		public static readonly BitSet _type_name_in_lambda_expr2367 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2373 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2383 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _101_in_lambda_expr2385 = new BitSet(new ulong[]{0x2000020000000000UL,0x77000UL});
		public static readonly BitSet _func_args_in_lambda_expr2390 = new BitSet(new ulong[]{0x2000000000000000UL,0x77000UL});
		public static readonly BitSet _type_name_in_lambda_expr2397 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2403 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2413 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _121_in_lambda_expr2415 = new BitSet(new ulong[]{0x2000020000000000UL,0x77000UL});
		public static readonly BitSet _func_args_in_lambda_expr2420 = new BitSet(new ulong[]{0x2000000000000000UL,0x77000UL});
		public static readonly BitSet _type_name_in_lambda_expr2427 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2433 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2453 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2457 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2461 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2471 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2475 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2479 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2499 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2503 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2507 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2511 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2531 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2535 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_cast_expr2539 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2564 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_list_expr2569 = new BitSet(new ulong[]{0x10A8200FFFFF7008UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _Expr_List_Generation_in_list_generation_expr2593 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_list_generation_expr2597 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _stmt_for_in_list_generation_expr2601 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_list_generation_expr2605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2630 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2637 = new BitSet(new ulong[]{0x0UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _set_in_chain_expr2649 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_chain_expr2683 = new BitSet(new ulong[]{0x8UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _set_in_chain_expr2701 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_chain_expr2735 = new BitSet(new ulong[]{0x8UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _Expr_Where_in_where_expr2769 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2773 = new BitSet(new ulong[]{0xD0A8200FFFFF7000UL,0x40989042448007FFUL,0x4400000000023UL});
		public static readonly BitSet _stmt_in_where_expr2778 = new BitSet(new ulong[]{0xD0A8200FFFFF7008UL,0x40989042448007FFUL,0x4400000000023UL});
		public static readonly BitSet _Match_Expr_Item_in_match_item2803 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_item2807 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_match_item2811 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Match_Expr_in_match_expr2837 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_expr2842 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _match_item_in_match_expr2849 = new BitSet(new ulong[]{0x10000000000008UL});
		public static readonly BitSet _expr_tuple_in_expr2878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr2948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_generation_expr_in_expr2968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr2988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr2998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr3007 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3011 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3015 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3019 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr3029 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3033 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3037 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3041 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr3051 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3055 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3059 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr3069 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3073 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr3083 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3087 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3109 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_expr3113 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr3126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr3135 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3139 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3266 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3270 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr3282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3328 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3332 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _129_in_expr3342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3346 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3356 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3360 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3370 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3374 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3384 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3394 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3398 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3436 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _111_in_expr3446 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3450 = new BitSet(new ulong[]{0x10A8200FFFFF7000UL,0x4090904244800000UL,0x4400000000022UL});
		public static readonly BitSet _expr_in_expr3454 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3498 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
