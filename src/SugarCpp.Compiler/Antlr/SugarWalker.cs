//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-25 14:14:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Func=74;
	public const int Type_Ident=75;
	public const int Type_List=76;
	public const int Type_Ref=77;
	public const int Type_Star=78;
	public const int Type_Template=79;
	public const int White_Space=80;
	public const int DOUBLE=171;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			if (op == "int8") return "int8_t";
			if (op == "int16") return "int16_t";
			if (op == "int32") return "int32_t";
			if (op == "int64") return "int64_t";
			if (op == "uint8") return "uint8_t";
			if (op == "uint16") return "uint16_t";
			if (op == "uint32") return "uint32_t";
			if (op == "uint64") return "uint64_t";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:41:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(41, 1);
		try
		{
			// SugarWalker.g:42:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:42:4: ^( Root a= global_block )
			{
			DebugLocation(42, 4);
			DebugLocation(42, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(42, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(43, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:48:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(48, 1);
		try
		{
			// SugarWalker.g:53:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:53:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(53, 4);
			DebugLocation(53, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(53, 19);
				// SugarWalker.g:53:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==107))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:53:20: a= node
						{
						DebugLocation(53, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(53, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:56:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:61:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 107:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:61:4: a= func_def
				{
				DebugLocation(61, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(61, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:62:4: b= import_def
				{
				DebugLocation(62, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(62, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:63:4: c= enum_def
				{
				DebugLocation(63, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(63, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:64:4: d= class_def
				{
				DebugLocation(64, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(64, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:65:4: e= global_alloc
				{
				DebugLocation(65, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(65, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:66:4: f= global_using
				{
				DebugLocation(66, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(66, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:67:4: g= global_typedef
				{
				DebugLocation(67, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(67, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:68:4: h= namespace_def
				{
				DebugLocation(68, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(68, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:71:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(71, 1);
		try
		{
			// SugarWalker.g:76:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:76:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(76, 4);
			DebugLocation(76, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(76, 17);
				// SugarWalker.g:76:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:76:18: attr= attribute
					{
					DebugLocation(76, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(76, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(76, 65);
				// SugarWalker.g:76:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==150))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:76:67: a= ident
						{
						DebugLocation(76, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(76, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:77:22: b= 'namespace'
						{
						DebugLocation(77, 23);
						b=(CommonTree)Match(input,150,Follow._150_in_global_using281); 
						DebugLocation(77, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:80:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(80, 1);
		try
		{
			// SugarWalker.g:85:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt10 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt10 = 2;
				}
				break;
			case 107:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:85:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(85, 4);
				DebugLocation(85, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(85, 23);
				// SugarWalker.g:85:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:85:24: attr= attribute
					{
					DebugLocation(85, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(85, 42);
				PushFollow(Follow._type_name_in_global_alloc318);
				a=type_name();
				PopFollow();

				DebugLocation(85, 54);
				PushFollow(Follow._ident_list_in_global_alloc322);
				b=ident_list();
				PopFollow();

				DebugLocation(85, 66);
				// SugarWalker.g:85:66: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Where)||LA6_0==IDENT||LA6_0==Match_Expr||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==84||LA6_0==87||LA6_0==91||LA6_0==94||LA6_0==98||LA6_0==104||LA6_0==107||LA6_0==112||LA6_0==114||LA6_0==120||LA6_0==123||LA6_0==127||LA6_0==168||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:85:67: c= expr_list
					{
					DebugLocation(85, 68);
					PushFollow(Follow._expr_list_in_global_alloc327);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(86, 2);

						if (c != null)
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Equal));
						}
						else
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Declare));
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:96:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(96, 4);
				DebugLocation(96, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc339); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(96, 25);
				// SugarWalker.g:96:25: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:96:26: attr= attribute
					{
					DebugLocation(96, 30);
					PushFollow(Follow._attribute_in_global_alloc344);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(96, 44);
				PushFollow(Follow._type_name_in_global_alloc350);
				a=type_name();
				PopFollow();

				DebugLocation(96, 56);
				PushFollow(Follow._ident_list_in_global_alloc354);
				b=ident_list();
				PopFollow();

				DebugLocation(96, 68);
				// SugarWalker.g:96:68: (c= expr_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>=Expr_Access && LA8_0<=Expr_Where)||LA8_0==IDENT||LA8_0==Match_Expr||LA8_0==Match_Tuple||LA8_0==NUMBER||LA8_0==STRING||LA8_0==84||LA8_0==87||LA8_0==91||LA8_0==94||LA8_0==98||LA8_0==104||LA8_0==107||LA8_0==112||LA8_0==114||LA8_0==120||LA8_0==123||LA8_0==127||LA8_0==168||LA8_0==DOUBLE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:96:69: c= expr_list
					{
					DebugLocation(96, 70);
					PushFollow(Follow._expr_list_in_global_alloc359);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(97, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Bracket));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:100:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(100, 4);
				DebugLocation(100, 6);
				Match(input,107,Follow._107_in_global_alloc371); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(100, 11);
				// SugarWalker.g:100:11: (attr= attribute )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:100:12: attr= attribute
					{
					DebugLocation(100, 16);
					PushFollow(Follow._attribute_in_global_alloc376);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(100, 30);
				PushFollow(Follow._ident_list_in_global_alloc382);
				d=ident_list();
				PopFollow();

				DebugLocation(100, 43);
				PushFollow(Follow._expr_list_in_global_alloc386);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(101, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:111:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(111, 1);
		try
		{
			// SugarWalker.g:112:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:112:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(112, 4);
			DebugLocation(112, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef406); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(112, 19);
			// SugarWalker.g:112:19: (attr= attribute )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Attribute))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:112:20: attr= attribute
				{
				DebugLocation(112, 24);
				PushFollow(Follow._attribute_in_global_typedef411);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(112, 38);
			PushFollow(Follow._type_name_in_global_typedef417);
			a=type_name();
			PopFollow();

			DebugLocation(112, 50);
			PushFollow(Follow._ident_in_global_typedef421);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(113, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:119:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(119, 1);
		try
		{
			// SugarWalker.g:120:2: (a= NUMBER |a= STRING |b= ident )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt12 = 1;
				}
				break;
			case STRING:
				{
				alt12 = 2;
				}
				break;
			case IDENT:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:120:4: a= NUMBER
				{
				DebugLocation(120, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args442); 
				DebugLocation(121, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:124:4: a= STRING
				{
				DebugLocation(124, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args452); 
				DebugLocation(125, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:128:4: b= ident
				{
				DebugLocation(128, 5);
				PushFollow(Follow._ident_in_attribute_args462);
				b=ident();
				PopFollow();

				DebugLocation(129, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:134:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(139, 4);
			DebugLocation(139, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item486); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(139, 16);
			// SugarWalker.g:139:16: (a= ident |c= 'const' )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==IDENT))
			{
				alt13 = 1;
			}
			else if ((LA13_0==135))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:139:17: a= ident
				{
				DebugLocation(139, 18);
				PushFollow(Follow._ident_in_attribute_item491);
				a=ident();
				PopFollow();

				DebugLocation(139, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:139:48: c= 'const'
				{
				DebugLocation(139, 49);
				c=(CommonTree)Match(input,135,Follow._135_in_attribute_item499); 
				DebugLocation(139, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(139, 86);
			// SugarWalker.g:139:86: (b= attribute_args )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENT||LA14_0==NUMBER||LA14_0==STRING))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:139:87: b= attribute_args
					{
					DebugLocation(139, 88);
					PushFollow(Follow._attribute_args_in_attribute_item507);
					b=attribute_args();
					PopFollow();

					DebugLocation(139, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:142:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(142, 1);
		try
		{
			// SugarWalker.g:147:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:147:4: (a= attribute_item )+
			{
			DebugLocation(147, 4);
			// SugarWalker.g:147:4: (a= attribute_item )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Attribute))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:147:5: a= attribute_item
					{
					DebugLocation(147, 6);
					PushFollow(Follow._attribute_item_in_attribute535);
					a=attribute_item();
					PopFollow();

					DebugLocation(147, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:150:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(150, 1);
		try
		{
			// SugarWalker.g:151:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:151:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(151, 4);
			DebugLocation(151, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def556); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(151, 17);
			PushFollow(Follow._ident_in_namespace_def560);
			a=ident();
			PopFollow();

			DebugLocation(151, 24);
			// SugarWalker.g:151:24: (b= global_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Global_Block))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:151:25: b= global_block
				{
				DebugLocation(151, 26);
				PushFollow(Follow._global_block_in_namespace_def565);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(152, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:157:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(157, 1);
		try
		{
			// SugarWalker.g:162:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:162:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(162, 4);
			DebugLocation(162, 6);
			Match(input,Import,Follow._Import_in_import_def592); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(162, 13);
				// SugarWalker.g:162:13: (attr= attribute )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==Attribute))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:162:14: attr= attribute
					{
					DebugLocation(162, 18);
					PushFollow(Follow._attribute_in_import_def597);
					attr=attribute();
					PopFollow();

					DebugLocation(162, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(162, 61);
				// SugarWalker.g:162:61: (a= STRING )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==STRING))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:162:62: a= STRING
						{
						DebugLocation(162, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def607); 
						DebugLocation(162, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:165:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(165, 1);
		try
		{
			// SugarWalker.g:166:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:166:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(166, 4);
			DebugLocation(166, 6);
			Match(input,Enum,Follow._Enum_in_enum_def628); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(166, 11);
			// SugarWalker.g:166:11: (attr= attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Attribute))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:166:12: attr= attribute
				{
				DebugLocation(166, 16);
				PushFollow(Follow._attribute_in_enum_def633);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(166, 30);
			PushFollow(Follow._ident_in_enum_def639);
			a=ident();
			PopFollow();

			DebugLocation(166, 38);
			PushFollow(Follow._ident_list_in_enum_def643);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(167, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:172:1: class_def returns [Class value] : ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		CommonTree is_case = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(172, 1);
		try
		{
			// SugarWalker.g:173:2: ( ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:173:4: ^( Class (is_case= 'case' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(173, 4);
			DebugLocation(173, 6);
			Match(input,Class,Follow._Class_in_class_def663); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(173, 12);
			// SugarWalker.g:173:12: (is_case= 'case' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==132))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:13: is_case= 'case'
				{
				DebugLocation(173, 20);
				is_case=(CommonTree)Match(input,132,Follow._132_in_class_def668); 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(173, 30);
			// SugarWalker.g:173:30: (attr= attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Attribute))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:31: attr= attribute
				{
				DebugLocation(173, 35);
				PushFollow(Follow._attribute_in_class_def675);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(173, 49);
			PushFollow(Follow._ident_in_class_def681);
			a=ident();
			PopFollow();

			DebugLocation(173, 56);
			// SugarWalker.g:173:56: (b= generic_parameter )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Generic_Patameters))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:57: b= generic_parameter
				{
				DebugLocation(173, 58);
				PushFollow(Follow._generic_parameter_in_class_def686);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(173, 79);
			// SugarWalker.g:173:79: (c= func_args )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Func_Args))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:80: c= func_args
				{
				DebugLocation(173, 81);
				PushFollow(Follow._func_args_in_class_def693);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(173, 94);
			// SugarWalker.g:173:94: (d= ident_list )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Ident_List))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:95: d= ident_list
				{
				DebugLocation(173, 96);
				PushFollow(Follow._ident_list_in_class_def700);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(173, 110);
			// SugarWalker.g:173:110: (e= global_block )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Global_Block))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:173:111: e= global_block
				{
				DebugLocation(173, 112);
				PushFollow(Follow._global_block_in_class_def707);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(174, 2);

					value = new Class(a, b, c, d, e, attr);
					if (is_case != null) value.Attribute.Add(new Attr { Name = "case" });
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:180:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' | 'struct' |a= ident )* ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(180, 1);
		try
		{
			// SugarWalker.g:185:2: ( ^( Type_Ident ( 'const' | 'struct' |a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:185:4: ^( Type_Ident ( 'const' | 'struct' |a= ident )* )
			{
			DebugLocation(185, 4);
			DebugLocation(185, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident734); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(185, 17);
				// SugarWalker.g:185:17: ( 'const' | 'struct' |a= ident )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=4;
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case 135:
						{
						alt26 = 1;
						}
						break;
					case 155:
						{
						alt26 = 2;
						}
						break;
					case IDENT:
						{
						alt26 = 3;
						}
						break;
					}

					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:185:19: 'const'
						{
						DebugLocation(185, 19);
						Match(input,135,Follow._135_in_type_ident738); 
						DebugLocation(185, 27);
						 type+="const "; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:186:10: 'struct'
						{
						DebugLocation(186, 10);
						Match(input,155,Follow._155_in_type_ident751); 
						DebugLocation(186, 19);
						 type+="struct "; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarWalker.g:187:10: a= ident
						{
						DebugLocation(187, 11);
						PushFollow(Follow._ident_in_type_ident766);
						a=ident();
						PopFollow();

						DebugLocation(187, 18);
						 type+=Alias(a); 

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(189, 2);

					value = new IdentType(type.Trim());
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:194:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(194, 1);
		try
		{
			// SugarWalker.g:199:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:199:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(199, 4);
			DebugLocation(199, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template803); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(199, 21);
			PushFollow(Follow._type_name_in_type_template807);
			a=type_name();
			PopFollow();

			DebugLocation(199, 32);
			// SugarWalker.g:199:32: (b= type_name )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if (((LA27_0>=Type_Array && LA27_0<=Type_Ident)||(LA27_0>=Type_Ref && LA27_0<=Type_Template)))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:199:33: b= type_name
					{
					DebugLocation(199, 34);
					PushFollow(Follow._type_name_in_type_template812);
					b=type_name();
					PopFollow();

					DebugLocation(199, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(200, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:205:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(205, 1);
		try
		{
			// SugarWalker.g:210:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:210:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(210, 4);
			DebugLocation(210, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array841); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(210, 18);
			PushFollow(Follow._type_name_in_type_array845);
			a=type_name();
			PopFollow();

			DebugLocation(210, 29);
			// SugarWalker.g:210:29: (b= expr )+
			int cnt28=0;
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>=Expr_Access && LA28_0<=Expr_Where)||LA28_0==IDENT||LA28_0==Match_Expr||LA28_0==Match_Tuple||LA28_0==NUMBER||LA28_0==STRING||LA28_0==84||LA28_0==87||LA28_0==91||LA28_0==94||LA28_0==98||LA28_0==104||LA28_0==107||LA28_0==112||LA28_0==114||LA28_0==120||LA28_0==123||LA28_0==127||LA28_0==168||LA28_0==DOUBLE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:210:30: b= expr
					{
					DebugLocation(210, 31);
					PushFollow(Follow._expr_in_type_array850);
					b=expr();
					PopFollow();

					DebugLocation(210, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt28 >= 1)
						goto loop28;

					EarlyExitException eee28 = new EarlyExitException( 28, input );
					DebugRecognitionException(eee28);
					throw eee28;
				}
				cnt28++;
			}
			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(211, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:216:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(216, 1);
		try
		{
			// SugarWalker.g:217:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:217:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(217, 4);
			DebugLocation(217, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star874); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(217, 17);
			PushFollow(Follow._type_name_in_type_star878);
			a=type_name();
			PopFollow();

			DebugLocation(217, 28);
			Match(input,90,Follow._90_in_type_star880); 
			DebugLocation(217, 32);
			 value = new StarType(a); 
			DebugLocation(217, 62);
			// SugarWalker.g:217:62: ( '*' )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==90))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:217:63: '*'
					{
					DebugLocation(217, 63);
					Match(input,90,Follow._90_in_type_star885); 
					DebugLocation(217, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:221:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(221, 1);
		try
		{
			// SugarWalker.g:222:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:222:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(222, 4);
			DebugLocation(222, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref907); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(222, 16);
			PushFollow(Follow._type_name_in_type_ref911);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(223, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// SugarWalker.g:228:1: type_func returns [SugarType value] : ^( Type_Func (a= type_list )? (b= type_name )? ) ;
	[GrammarRule("type_func")]
	private SugarType type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 19);
		TraceIn("type_func", 19);
		SugarType value = default(SugarType);


		List<SugarType> a = default(List<SugarType>);
		SugarType b = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(228, 1);
		try
		{
			// SugarWalker.g:229:2: ( ^( Type_Func (a= type_list )? (b= type_name )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:229:4: ^( Type_Func (a= type_list )? (b= type_name )? )
			{
			DebugLocation(229, 4);
			DebugLocation(229, 6);
			Match(input,Type_Func,Follow._Type_Func_in_type_func931); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(229, 16);
				// SugarWalker.g:229:16: (a= type_list )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==Type_List))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:229:17: a= type_list
					{
					DebugLocation(229, 18);
					PushFollow(Follow._type_list_in_type_func936);
					a=type_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(229, 31);
				// SugarWalker.g:229:31: (b= type_name )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if (((LA31_0>=Type_Array && LA31_0<=Type_Ident)||(LA31_0>=Type_Ref && LA31_0<=Type_Template)))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:229:32: b= type_name
					{
					DebugLocation(229, 33);
					PushFollow(Follow._type_name_in_type_func943);
					b=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(230, 2);

					value = new FuncType(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_func", 19);
			LeaveRule("type_func", 19);
			LeaveRule_type_func();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return value;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarWalker.g:235:1: type_list returns [List<SugarType> value] : ^( Type_List (a= type_name )* ) ;
	[GrammarRule("type_list")]
	private List<SugarType> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 20);
		TraceIn("type_list", 20);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(235, 1);
		try
		{
			// SugarWalker.g:240:2: ( ^( Type_List (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:240:4: ^( Type_List (a= type_name )* )
			{
			DebugLocation(240, 4);
			DebugLocation(240, 6);
			Match(input,Type_List,Follow._Type_List_in_type_list969); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(240, 16);
				// SugarWalker.g:240:16: (a= type_name )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if (((LA32_0>=Type_Array && LA32_0<=Type_Ident)||(LA32_0>=Type_Ref && LA32_0<=Type_Template)))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:240:17: a= type_name
						{
						DebugLocation(240, 18);
						PushFollow(Follow._type_name_in_type_list974);
						a=type_name();
						PopFollow();

						DebugLocation(240, 29);
						 value.Add(a); 

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_list", 20);
			LeaveRule("type_list", 20);
			LeaveRule_type_list();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return value;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:243:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 21);
		TraceIn("type_name", 21);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(243, 1);
		try
		{
			// SugarWalker.g:244:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func )
			int alt33=6;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt33 = 1;
				}
				break;
			case Type_Ref:
				{
				alt33 = 2;
				}
				break;
			case Type_Star:
				{
				alt33 = 3;
				}
				break;
			case Type_Template:
				{
				alt33 = 4;
				}
				break;
			case Type_Ident:
				{
				alt33 = 5;
				}
				break;
			case Type_Func:
				{
				alt33 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:244:4: a= type_array
				{
				DebugLocation(244, 5);
				PushFollow(Follow._type_array_in_type_name997);
				a=type_array();
				PopFollow();

				DebugLocation(244, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:245:4: a= type_ref
				{
				DebugLocation(245, 5);
				PushFollow(Follow._type_ref_in_type_name1006);
				a=type_ref();
				PopFollow();

				DebugLocation(245, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:246:4: a= type_star
				{
				DebugLocation(246, 5);
				PushFollow(Follow._type_star_in_type_name1015);
				a=type_star();
				PopFollow();

				DebugLocation(246, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:247:4: a= type_template
				{
				DebugLocation(247, 5);
				PushFollow(Follow._type_template_in_type_name1024);
				a=type_template();
				PopFollow();

				DebugLocation(247, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:248:4: a= type_ident
				{
				DebugLocation(248, 5);
				PushFollow(Follow._type_ident_in_type_name1033);
				a=type_ident();
				PopFollow();

				DebugLocation(248, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:249:4: a= type_func
				{
				DebugLocation(249, 5);
				PushFollow(Follow._type_func_in_type_name1042);
				a=type_func();
				PopFollow();

				DebugLocation(249, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 21);
			LeaveRule("type_name", 21);
			LeaveRule_type_name();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:252:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(252, 1);
		try
		{
			// SugarWalker.g:257:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:257:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(257, 4);
			DebugLocation(257, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args1065); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(257, 16);
				// SugarWalker.g:257:16: (a= alloc_expr )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if (((LA34_0>=Expr_Alloc_Bracket && LA34_0<=Expr_Alloc_Equal)))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:257:17: a= alloc_expr
						{
						DebugLocation(257, 18);
						PushFollow(Follow._alloc_expr_in_func_args1070);
						a=alloc_expr();
						PopFollow();

						DebugLocation(258, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:263:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(263, 1);
		try
		{
			// SugarWalker.g:268:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:268:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(268, 4);
			DebugLocation(268, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter1097); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(268, 25);
				// SugarWalker.g:268:25: (a= ident )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==IDENT))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:268:26: a= ident
						{
						DebugLocation(268, 27);
						PushFollow(Follow._ident_in_generic_parameter1102);
						a=ident();
						PopFollow();

						DebugLocation(268, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:271:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		CommonTree op = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(271, 1);
		try
		{
			// SugarWalker.g:276:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:276:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(276, 4);
			DebugLocation(276, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1128); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(276, 15);
			// SugarWalker.g:276:15: (attr= attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==Attribute))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:16: attr= attribute
				{
				DebugLocation(276, 20);
				PushFollow(Follow._attribute_in_func_def1133);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(276, 33);
			// SugarWalker.g:276:33: (a= type_name )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if (((LA37_0>=Type_Array && LA37_0<=Type_Ident)||(LA37_0>=Type_Ref && LA37_0<=Type_Template)))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:34: a= type_name
				{
				DebugLocation(276, 35);
				PushFollow(Follow._type_name_in_func_def1140);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(276, 48);
			// SugarWalker.g:276:48: (deconstructor= '~' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==170))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:49: deconstructor= '~'
				{
				DebugLocation(276, 62);
				deconstructor=(CommonTree)Match(input,170,Follow._170_in_func_def1147); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(276, 69);
			// SugarWalker.g:276:69: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?
			int alt39=3;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			try
			{
				alt39 = dfa39.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:70: b= ident
				{
				DebugLocation(276, 71);
				PushFollow(Follow._ident_in_func_def1154);
				b=ident();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:276:80: op= ( '+' | '-' | '*' | '/' )
				{
				DebugLocation(276, 82);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(276, 103);
			// SugarWalker.g:276:103: (x= generic_parameter )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Generic_Patameters))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:104: x= generic_parameter
				{
				DebugLocation(276, 105);
				PushFollow(Follow._generic_parameter_in_func_def1175);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(276, 127);
			// SugarWalker.g:276:127: (args= func_args )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==Func_Args))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:276:128: args= func_args
				{
				DebugLocation(276, 132);
				PushFollow(Follow._func_args_in_func_def1183);
				args=func_args();
				PopFollow();

				DebugLocation(276, 143);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(277, 2);
			// SugarWalker.g:277:2: (e= stmt_block |f= expr )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==Stmt_Block))
			{
				alt42 = 1;
			}
			else if (((LA42_0>=Expr_Access && LA42_0<=Expr_Where)||LA42_0==IDENT||LA42_0==Match_Expr||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==84||LA42_0==87||LA42_0==91||LA42_0==94||LA42_0==98||LA42_0==104||LA42_0==107||LA42_0==112||LA42_0==114||LA42_0==120||LA42_0==123||LA42_0==127||LA42_0==168||LA42_0==DOUBLE))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:277:4: e= stmt_block
				{
				DebugLocation(277, 5);
				PushFollow(Follow._stmt_block_in_func_def1194);
				e=stmt_block();
				PopFollow();

				DebugLocation(278, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:292:4: f= expr
				{
				DebugLocation(292, 5);
				PushFollow(Follow._expr_in_func_def1204);
				f=expr();
				PopFollow();

				DebugLocation(293, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:319:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(319, 4);
		try
		{
			// SugarWalker.g:324:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:324:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(324, 4);
			DebugLocation(324, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1232); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(324, 17);
				// SugarWalker.g:324:17: (a= stmt )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if (((LA43_0>=Expr_Access && LA43_0<=Expr_Where)||LA43_0==IDENT||LA43_0==Match_Expr||LA43_0==Match_Tuple||LA43_0==NUMBER||LA43_0==STRING||(LA43_0>=Stmt_Defer && LA43_0<=Stmt_While)||LA43_0==84||LA43_0==87||LA43_0==91||LA43_0==94||LA43_0==98||LA43_0==104||LA43_0==107||(LA43_0>=111 && LA43_0<=112)||LA43_0==114||LA43_0==120||(LA43_0>=122 && LA43_0<=123)||LA43_0==127||LA43_0==168||LA43_0==DOUBLE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:324:18: a= stmt
						{
						DebugLocation(324, 19);
						PushFollow(Follow._stmt_in_stmt_block1237);
						a=stmt();
						PopFollow();

						DebugLocation(324, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(325, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:327:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(327, 1);
		try
		{
			// SugarWalker.g:332:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt44=9;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 123:
			case 127:
			case 168:
			case DOUBLE:
				{
				alt44 = 1;
				}
				break;
			case 107:
				{
				int LA44_2 = input.LA(2);

				if ((LA44_2==DOWN))
				{
					int LA44_11 = input.LA(3);

					if (((LA44_11>=Expr_Access && LA44_11<=Expr_Where)||LA44_11==IDENT||LA44_11==Match_Expr||LA44_11==Match_Tuple||LA44_11==NUMBER||LA44_11==STRING||LA44_11==84||LA44_11==87||LA44_11==91||LA44_11==94||LA44_11==98||LA44_11==104||LA44_11==107||LA44_11==112||LA44_11==114||LA44_11==120||LA44_11==123||LA44_11==127||LA44_11==168||LA44_11==DOUBLE))
					{
						alt44 = 1;
					}
					else if ((LA44_11==Ident_List))
					{
						alt44 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 44, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt44 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt44 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt44 = 4;
				}
				break;
			case Stmt_For:
				{
				alt44 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt44 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt44 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt44 = 8;
				}
				break;
			case 111:
			case 122:
				{
				alt44 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:332:4: a= stmt_expr
				{
				DebugLocation(332, 5);
				PushFollow(Follow._stmt_expr_in_stmt1268);
				a=stmt_expr();
				PopFollow();

				DebugLocation(332, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:333:4: a= stmt_return
				{
				DebugLocation(333, 5);
				PushFollow(Follow._stmt_return_in_stmt1277);
				a=stmt_return();
				PopFollow();

				DebugLocation(333, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:334:4: a= stmt_if
				{
				DebugLocation(334, 5);
				PushFollow(Follow._stmt_if_in_stmt1286);
				a=stmt_if();
				PopFollow();

				DebugLocation(334, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:335:4: a= stmt_while
				{
				DebugLocation(335, 5);
				PushFollow(Follow._stmt_while_in_stmt1295);
				a=stmt_while();
				PopFollow();

				DebugLocation(335, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:336:4: a= stmt_for
				{
				DebugLocation(336, 5);
				PushFollow(Follow._stmt_for_in_stmt1304);
				a=stmt_for();
				PopFollow();

				DebugLocation(336, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:337:4: a= stmt_try
				{
				DebugLocation(337, 5);
				PushFollow(Follow._stmt_try_in_stmt1313);
				a=stmt_try();
				PopFollow();

				DebugLocation(337, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:338:4: a= stmt_switch
				{
				DebugLocation(338, 5);
				PushFollow(Follow._stmt_switch_in_stmt1322);
				a=stmt_switch();
				PopFollow();

				DebugLocation(338, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:339:4: a= stmt_defer
				{
				DebugLocation(339, 5);
				PushFollow(Follow._stmt_defer_in_stmt1331);
				a=stmt_defer();
				PopFollow();

				DebugLocation(339, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:340:4: b= stmt_translate
				{
				DebugLocation(340, 5);
				PushFollow(Follow._stmt_translate_in_stmt1340);
				b=stmt_translate();
				PopFollow();

				DebugLocation(340, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:343:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 27);
		TraceIn("stmt_translate", 27);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(343, 1);
		try
		{
			// SugarWalker.g:348:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case 122:
				{
				alt45 = 1;
				}
				break;
			case 107:
				{
				alt45 = 2;
				}
				break;
			case 111:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:348:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(348, 4);
				DebugLocation(348, 6);
				Match(input,122,Follow._122_in_stmt_translate1363); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(348, 12);
				PushFollow(Follow._expr_in_stmt_translate1367);
				a=expr();
				PopFollow();

				DebugLocation(348, 19);
				PushFollow(Follow._expr_in_stmt_translate1371);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(349, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:355:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(355, 4);
				DebugLocation(355, 6);
				Match(input,107,Follow._107_in_stmt_translate1381); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(355, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1385);
				d=ident_list();
				PopFollow();

				DebugLocation(355, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1389);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(356, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:364:4: ^( '<<' a= expr b= expr )
				{
				DebugLocation(364, 4);
				DebugLocation(364, 6);
				Match(input,111,Follow._111_in_stmt_translate1399); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(364, 12);
				PushFollow(Follow._expr_in_stmt_translate1403);
				a=expr();
				PopFollow();

				DebugLocation(364, 19);
				PushFollow(Follow._expr_in_stmt_translate1407);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 27);
			LeaveRule("stmt_translate", 27);
			LeaveRule_stmt_translate();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:367:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 28);
		TraceIn("stmt_switch_item_list", 28);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(367, 1);
		try
		{
			// SugarWalker.g:372:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:372:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(372, 4);
			// SugarWalker.g:372:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==Switch_Item))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:373:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(373, 3);
					DebugLocation(373, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1432); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(373, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1436);
					a=expr_list();
					PopFollow();

					DebugLocation(373, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1440);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(374, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 28);
			LeaveRule("stmt_switch_item_list", 28);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:380:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 29);
		TraceIn("stmt_switch", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(380, 1);
		try
		{
			// SugarWalker.g:381:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:381:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(381, 4);
			DebugLocation(381, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1467); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(381, 18);
				// SugarWalker.g:381:18: (a= expr )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if (((LA47_0>=Expr_Access && LA47_0<=Expr_Where)||LA47_0==IDENT||LA47_0==Match_Expr||LA47_0==Match_Tuple||LA47_0==NUMBER||LA47_0==STRING||LA47_0==84||LA47_0==87||LA47_0==91||LA47_0==94||LA47_0==98||LA47_0==104||LA47_0==107||LA47_0==112||LA47_0==114||LA47_0==120||LA47_0==123||LA47_0==127||LA47_0==168||LA47_0==DOUBLE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:381:19: a= expr
					{
					DebugLocation(381, 20);
					PushFollow(Follow._expr_in_stmt_switch1472);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(381, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1478);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(381, 52);
				// SugarWalker.g:381:52: (c= stmt_block )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==Stmt_Block))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:381:53: c= stmt_block
					{
					DebugLocation(381, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1483);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(382, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 29);
			LeaveRule("stmt_switch", 29);
			LeaveRule_stmt_switch();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:387:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(387, 1);
		try
		{
			// SugarWalker.g:388:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==Stmt_Defer))
			{
				alt49 = 1;
			}
			else if ((LA49_0==Stmt_Finally))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:388:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(388, 4);
				DebugLocation(388, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1505); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(388, 18);
				PushFollow(Follow._stmt_in_stmt_defer1509);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(389, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:392:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(392, 4);
				DebugLocation(392, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1519); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(392, 20);
				PushFollow(Follow._stmt_in_stmt_defer1523);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(393, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:398:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 31);
		TraceIn("stmt_expr", 31);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(398, 1);
		try
		{
			// SugarWalker.g:399:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt50 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 107:
			case 112:
			case 114:
			case 120:
			case 123:
			case 127:
			case 168:
			case DOUBLE:
				{
				alt50 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:399:4: a= stmt_using
				{
				DebugLocation(399, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1544);
				a=stmt_using();
				PopFollow();

				DebugLocation(399, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:400:4: b= expr
				{
				DebugLocation(400, 5);
				PushFollow(Follow._expr_in_stmt_expr1553);
				b=expr();
				PopFollow();

				DebugLocation(400, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:401:4: c= stmt_typedef
				{
				DebugLocation(401, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1562);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(401, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 31);
			LeaveRule("stmt_expr", 31);
			LeaveRule_stmt_expr();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:404:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 32);
		TraceIn("stmt_using", 32);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(404, 1);
		try
		{
			// SugarWalker.g:409:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:409:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(409, 4);
			DebugLocation(409, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1585); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(409, 17);
				// SugarWalker.g:409:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=3;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==IDENT))
					{
						alt51 = 1;
					}
					else if ((LA51_0==150))
					{
						alt51 = 2;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:409:19: a= ident
						{
						DebugLocation(409, 20);
						PushFollow(Follow._ident_in_stmt_using1591);
						a=ident();
						PopFollow();

						DebugLocation(409, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:410:10: b= 'namespace'
						{
						DebugLocation(410, 11);
						b=(CommonTree)Match(input,150,Follow._150_in_stmt_using1606); 
						DebugLocation(410, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 32);
			LeaveRule("stmt_using", 32);
			LeaveRule_stmt_using();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:413:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(413, 1);
		try
		{
			// SugarWalker.g:414:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:414:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(414, 4);
			DebugLocation(414, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1627); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(414, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1631);
			a=type_name();
			PopFollow();

			DebugLocation(414, 32);
			PushFollow(Follow._ident_in_stmt_typedef1635);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(415, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:420:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(420, 1);
		try
		{
			// SugarWalker.g:421:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:421:4: a= expr
			{
			DebugLocation(421, 5);
			PushFollow(Follow._expr_in_stmt_alloc1656);
			a=expr();
			PopFollow();

			DebugLocation(421, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:424:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 35);
		TraceIn("stmt_if", 35);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(424, 1);
		try
		{
			// SugarWalker.g:425:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==Stmt_If))
			{
				alt54 = 1;
			}
			else if ((LA54_0==Stmt_Unless))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:425:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(425, 4);
				DebugLocation(425, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1674); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(425, 15);
				PushFollow(Follow._expr_in_stmt_if1678);
				a=expr();
				PopFollow();

				DebugLocation(425, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1682);
				b=stmt_block();
				PopFollow();

				DebugLocation(425, 34);
				// SugarWalker.g:425:34: (c= stmt_block )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==Stmt_Block))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:425:35: c= stmt_block
					{
					DebugLocation(425, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1687);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(426, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:429:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(429, 4);
				DebugLocation(429, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1699); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(429, 19);
				PushFollow(Follow._expr_in_stmt_if1703);
				a=expr();
				PopFollow();

				DebugLocation(429, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1707);
				b=stmt_block();
				PopFollow();

				DebugLocation(429, 38);
				// SugarWalker.g:429:38: (c= stmt_block )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==Stmt_Block))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:429:39: c= stmt_block
					{
					DebugLocation(429, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1712);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(430, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 35);
			LeaveRule("stmt_if", 35);
			LeaveRule_stmt_if();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:435:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 36);
		TraceIn("stmt_while", 36);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(435, 1);
		try
		{
			// SugarWalker.g:436:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt56=3;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt56 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt56 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt56 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:436:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(436, 4);
				DebugLocation(436, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1734); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(436, 18);
				PushFollow(Follow._expr_in_stmt_while1738);
				a=expr();
				PopFollow();

				DebugLocation(436, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1742);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(437, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:440:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(440, 4);
				DebugLocation(440, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1752); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(440, 18);
				PushFollow(Follow._expr_in_stmt_while1756);
				a=expr();
				PopFollow();

				DebugLocation(440, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1760);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(441, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:444:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(444, 4);
				DebugLocation(444, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1770); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(444, 16);
				// SugarWalker.g:444:16: (a= expr )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=Expr_Access && LA55_0<=Expr_Where)||LA55_0==IDENT||LA55_0==Match_Expr||LA55_0==Match_Tuple||LA55_0==NUMBER||LA55_0==STRING||LA55_0==84||LA55_0==87||LA55_0==91||LA55_0==94||LA55_0==98||LA55_0==104||LA55_0==107||LA55_0==112||LA55_0==114||LA55_0==120||LA55_0==123||LA55_0==127||LA55_0==168||LA55_0==DOUBLE))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:444:17: a= expr
					{
					DebugLocation(444, 18);
					PushFollow(Follow._expr_in_stmt_while1775);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(444, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1781);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(445, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 36);
			LeaveRule("stmt_while", 36);
			LeaveRule_stmt_while();
		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:462:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 37);
		TraceIn("for_item", 37);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(462, 1);
		try
		{
			// SugarWalker.g:463:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt59=4;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt59 = 1;
				}
				break;
			case For_Item_Down_To:
				{
				alt59 = 2;
				}
				break;
			case For_Item_Each:
				{
				alt59 = 3;
				}
				break;
			case For_Item_When:
				{
				alt59 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:463:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(463, 4);
				DebugLocation(463, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1801); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(463, 19);
				PushFollow(Follow._ident_in_for_item1805);
				a=ident();
				PopFollow();

				DebugLocation(463, 27);
				PushFollow(Follow._expr_in_for_item1809);
				b=expr();
				PopFollow();

				DebugLocation(463, 34);
				PushFollow(Follow._expr_in_for_item1813);
				c=expr();
				PopFollow();

				DebugLocation(463, 40);
				// SugarWalker.g:463:40: (d= expr )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if (((LA57_0>=Expr_Access && LA57_0<=Expr_Where)||LA57_0==IDENT||LA57_0==Match_Expr||LA57_0==Match_Tuple||LA57_0==NUMBER||LA57_0==STRING||LA57_0==84||LA57_0==87||LA57_0==91||LA57_0==94||LA57_0==98||LA57_0==104||LA57_0==107||LA57_0==112||LA57_0==114||LA57_0==120||LA57_0==123||LA57_0==127||LA57_0==168||LA57_0==DOUBLE))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:463:41: d= expr
					{
					DebugLocation(463, 42);
					PushFollow(Follow._expr_in_for_item1818);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(464, 2);

						value = new ForItemTo(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:467:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(467, 4);
				DebugLocation(467, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1830); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(467, 24);
				PushFollow(Follow._ident_in_for_item1834);
				a=ident();
				PopFollow();

				DebugLocation(467, 32);
				PushFollow(Follow._expr_in_for_item1838);
				b=expr();
				PopFollow();

				DebugLocation(467, 39);
				PushFollow(Follow._expr_in_for_item1842);
				c=expr();
				PopFollow();

				DebugLocation(467, 45);
				// SugarWalker.g:467:45: (d= expr )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=Expr_Access && LA58_0<=Expr_Where)||LA58_0==IDENT||LA58_0==Match_Expr||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==84||LA58_0==87||LA58_0==91||LA58_0==94||LA58_0==98||LA58_0==104||LA58_0==107||LA58_0==112||LA58_0==114||LA58_0==120||LA58_0==123||LA58_0==127||LA58_0==168||LA58_0==DOUBLE))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:467:46: d= expr
					{
					DebugLocation(467, 47);
					PushFollow(Follow._expr_in_for_item1847);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(468, 2);

						value = new ForItemDownTo(a, b, c, d);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:471:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(471, 4);
				DebugLocation(471, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1859); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(471, 21);
				PushFollow(Follow._ident_in_for_item1863);
				a=ident();
				PopFollow();

				DebugLocation(471, 29);
				PushFollow(Follow._expr_in_for_item1867);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(472, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:475:4: ^( For_Item_When b= expr )
				{
				DebugLocation(475, 4);
				DebugLocation(475, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1877); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(475, 21);
				PushFollow(Follow._expr_in_for_item1881);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(476, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 37);
			LeaveRule("for_item", 37);
			LeaveRule_for_item();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:481:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 38);
		TraceIn("for_item_list", 38);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(481, 1);
		try
		{
			// SugarWalker.g:486:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:486:4: (a= for_item )+
			{
			DebugLocation(486, 4);
			// SugarWalker.g:486:4: (a= for_item )+
			int cnt60=0;
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if (((LA60_0>=For_Item_Down_To && LA60_0<=For_Item_When)))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:486:5: a= for_item
					{
					DebugLocation(486, 6);
					PushFollow(Follow._for_item_in_for_item_list1908);
					a=for_item();
					PopFollow();

					DebugLocation(486, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt60 >= 1)
						goto loop60;

					EarlyExitException eee60 = new EarlyExitException( 60, input );
					DebugRecognitionException(eee60);
					throw eee60;
				}
				cnt60++;
			}
			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 38);
			LeaveRule("for_item_list", 38);
			LeaveRule_for_item_list();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:489:1: stmt_for returns [Stmt value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 39);
		TraceIn("stmt_for", 39);
		Stmt value = default(Stmt);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(489, 1);
		try
		{
			// SugarWalker.g:490:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:490:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(490, 4);
			DebugLocation(490, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1929); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(490, 16);
			PushFollow(Follow._for_item_list_in_stmt_for1933);
			a=for_item_list();
			PopFollow();

			DebugLocation(490, 32);
			PushFollow(Follow._stmt_block_in_stmt_for1937);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(491, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 39);
			LeaveRule("stmt_for", 39);
			LeaveRule_stmt_for();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:496:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 40);
		TraceIn("stmt_try", 40);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(496, 1);
		try
		{
			// SugarWalker.g:497:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:497:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(497, 4);
			DebugLocation(497, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1957); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(497, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1961);
			a=stmt_block();
			PopFollow();

			DebugLocation(497, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try1965);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(497, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1969);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(498, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 40);
			LeaveRule("stmt_try", 40);
			LeaveRule_stmt_try();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:503:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(503, 1);
		try
		{
			// SugarWalker.g:504:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:504:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(504, 4);
			DebugLocation(504, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1989); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(504, 18);
				// SugarWalker.g:504:18: (a= expr )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if (((LA61_0>=Expr_Access && LA61_0<=Expr_Where)||LA61_0==IDENT||LA61_0==Match_Expr||LA61_0==Match_Tuple||LA61_0==NUMBER||LA61_0==STRING||LA61_0==84||LA61_0==87||LA61_0==91||LA61_0==94||LA61_0==98||LA61_0==104||LA61_0==107||LA61_0==112||LA61_0==114||LA61_0==120||LA61_0==123||LA61_0==127||LA61_0==168||LA61_0==DOUBLE))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:504:19: a= expr
					{
					DebugLocation(504, 20);
					PushFollow(Follow._expr_in_stmt_return1994);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(505, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:510:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 42);
		TraceIn("ident", 42);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(510, 1);
		try
		{
			// SugarWalker.g:515:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:515:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(515, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2022); 
			DebugLocation(515, 12);
			 value += a.Text; 
			DebugLocation(515, 34);
			// SugarWalker.g:515:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==106))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:515:35: '::' a= IDENT
					{
					DebugLocation(515, 35);
					Match(input,106,Follow._106_in_ident2027); 
					DebugLocation(515, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2031); 
					DebugLocation(515, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(516, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 42);
			LeaveRule("ident", 42);
			LeaveRule_ident();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:521:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 43);
		TraceIn("ident_list", 43);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(521, 1);
		try
		{
			// SugarWalker.g:526:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:526:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(526, 4);
			DebugLocation(526, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list2059); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(526, 17);
				// SugarWalker.g:526:17: (a= ident )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==IDENT))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:526:18: a= ident
						{
						DebugLocation(526, 19);
						PushFollow(Follow._ident_in_ident_list2064);
						a=ident();
						PopFollow();

						DebugLocation(526, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 43);
			LeaveRule("ident_list", 43);
			LeaveRule_ident_list();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:529:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 44);
		TraceIn("alloc_expr", 44);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(529, 1);
		try
		{
			// SugarWalker.g:530:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==Expr_Alloc_Equal))
			{
				alt66 = 1;
			}
			else if ((LA66_0==Expr_Alloc_Bracket))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:530:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(530, 4);
				DebugLocation(530, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr2086); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(530, 24);
				PushFollow(Follow._type_name_in_alloc_expr2090);
				a=type_name();
				PopFollow();

				DebugLocation(530, 36);
				PushFollow(Follow._ident_list_in_alloc_expr2094);
				b=ident_list();
				PopFollow();

				DebugLocation(530, 48);
				// SugarWalker.g:530:48: (c= expr_list )?
				int alt64=2;
				try { DebugEnterSubRule(64);
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if (((LA64_0>=Expr_Access && LA64_0<=Expr_Where)||LA64_0==IDENT||LA64_0==Match_Expr||LA64_0==Match_Tuple||LA64_0==NUMBER||LA64_0==STRING||LA64_0==84||LA64_0==87||LA64_0==91||LA64_0==94||LA64_0==98||LA64_0==104||LA64_0==107||LA64_0==112||LA64_0==114||LA64_0==120||LA64_0==123||LA64_0==127||LA64_0==168||LA64_0==DOUBLE))
				{
					alt64 = 1;
				}
				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:530:49: c= expr_list
					{
					DebugLocation(530, 50);
					PushFollow(Follow._expr_list_in_alloc_expr2099);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(64); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(531, 2);

						if (c != null)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:541:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(541, 4);
				DebugLocation(541, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr2111); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(541, 26);
				PushFollow(Follow._type_name_in_alloc_expr2115);
				a=type_name();
				PopFollow();

				DebugLocation(541, 38);
				PushFollow(Follow._ident_list_in_alloc_expr2119);
				b=ident_list();
				PopFollow();

				DebugLocation(541, 50);
				// SugarWalker.g:541:50: (c= expr_list )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if (((LA65_0>=Expr_Access && LA65_0<=Expr_Where)||LA65_0==IDENT||LA65_0==Match_Expr||LA65_0==Match_Tuple||LA65_0==NUMBER||LA65_0==STRING||LA65_0==84||LA65_0==87||LA65_0==91||LA65_0==94||LA65_0==98||LA65_0==104||LA65_0==107||LA65_0==112||LA65_0==114||LA65_0==120||LA65_0==123||LA65_0==127||LA65_0==168||LA65_0==DOUBLE))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:541:51: c= expr_list
					{
					DebugLocation(541, 52);
					PushFollow(Follow._expr_list_in_alloc_expr2124);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(542, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 44);
			LeaveRule("alloc_expr", 44);
			LeaveRule_alloc_expr();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:547:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 45);
		TraceIn("expr_tuple", 45);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(547, 1);
		try
		{
			// SugarWalker.g:552:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:552:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(552, 4);
			DebugLocation(552, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2151); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(552, 17);
			// SugarWalker.g:552:17: (a= expr )+
			int cnt67=0;
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if (((LA67_0>=Expr_Access && LA67_0<=Expr_Where)||LA67_0==IDENT||LA67_0==Match_Expr||LA67_0==Match_Tuple||LA67_0==NUMBER||LA67_0==STRING||LA67_0==84||LA67_0==87||LA67_0==91||LA67_0==94||LA67_0==98||LA67_0==104||LA67_0==107||LA67_0==112||LA67_0==114||LA67_0==120||LA67_0==123||LA67_0==127||LA67_0==168||LA67_0==DOUBLE))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:552:18: a= expr
					{
					DebugLocation(552, 19);
					PushFollow(Follow._expr_in_expr_tuple2156);
					a=expr();
					PopFollow();

					DebugLocation(552, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt67 >= 1)
						goto loop67;

					EarlyExitException eee67 = new EarlyExitException( 67, input );
					DebugRecognitionException(eee67);
					throw eee67;
				}
				cnt67++;
			}
			loop67:
				;

			} finally { DebugExitSubRule(67); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 45);
			LeaveRule("expr_tuple", 45);
			LeaveRule_expr_tuple();
		}
		DebugLocation(553, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:555:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 46);
		TraceIn("match_tuple", 46);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(555, 1);
		try
		{
			// SugarWalker.g:560:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:560:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(560, 4);
			DebugLocation(560, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2183); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(560, 18);
				// SugarWalker.g:560:18: (a= expr )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if (((LA68_0>=Expr_Access && LA68_0<=Expr_Where)||LA68_0==IDENT||LA68_0==Match_Expr||LA68_0==Match_Tuple||LA68_0==NUMBER||LA68_0==STRING||LA68_0==84||LA68_0==87||LA68_0==91||LA68_0==94||LA68_0==98||LA68_0==104||LA68_0==107||LA68_0==112||LA68_0==114||LA68_0==120||LA68_0==123||LA68_0==127||LA68_0==168||LA68_0==DOUBLE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:560:19: a= expr
						{
						DebugLocation(560, 20);
						PushFollow(Follow._expr_in_match_tuple2188);
						a=expr();
						PopFollow();

						DebugLocation(560, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 46);
			LeaveRule("match_tuple", 46);
			LeaveRule_match_tuple();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:563:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 47);
		TraceIn("expr_list", 47);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(563, 1);
		try
		{
			// SugarWalker.g:568:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:568:4: (a= expr )+
			{
			DebugLocation(568, 4);
			// SugarWalker.g:568:4: (a= expr )+
			int cnt69=0;
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if (((LA69_0>=Expr_Access && LA69_0<=Expr_Where)||LA69_0==IDENT||LA69_0==Match_Expr||LA69_0==Match_Tuple||LA69_0==NUMBER||LA69_0==STRING||LA69_0==84||LA69_0==87||LA69_0==91||LA69_0==94||LA69_0==98||LA69_0==104||LA69_0==107||LA69_0==112||LA69_0==114||LA69_0==120||LA69_0==123||LA69_0==127||LA69_0==168||LA69_0==DOUBLE))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:568:5: a= expr
					{
					DebugLocation(568, 6);
					PushFollow(Follow._expr_in_expr_list2216);
					a=expr();
					PopFollow();

					DebugLocation(568, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt69 >= 1)
						goto loop69;

					EarlyExitException eee69 = new EarlyExitException( 69, input );
					DebugRecognitionException(eee69);
					throw eee69;
				}
				cnt69++;
			}
			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 47);
			LeaveRule("expr_list", 47);
			LeaveRule_expr_list();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:571:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 48);
		TraceIn("call_expr", 48);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(571, 1);
		try
		{
			// SugarWalker.g:572:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:572:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(572, 4);
			DebugLocation(572, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2236); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(572, 17);
			PushFollow(Follow._expr_in_call_expr2240);
			a=expr();
			PopFollow();

			DebugLocation(572, 23);
			// SugarWalker.g:572:23: (b= generic_parameter )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==Generic_Patameters))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:572:24: b= generic_parameter
				{
				DebugLocation(572, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2245);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(572, 46);
			// SugarWalker.g:572:46: (c= expr_list )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if (((LA71_0>=Expr_Access && LA71_0<=Expr_Where)||LA71_0==IDENT||LA71_0==Match_Expr||LA71_0==Match_Tuple||LA71_0==NUMBER||LA71_0==STRING||LA71_0==84||LA71_0==87||LA71_0==91||LA71_0==94||LA71_0==98||LA71_0==104||LA71_0==107||LA71_0==112||LA71_0==114||LA71_0==120||LA71_0==123||LA71_0==127||LA71_0==168||LA71_0==DOUBLE))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:572:47: c= expr_list
				{
				DebugLocation(572, 48);
				PushFollow(Follow._expr_list_in_call_expr2252);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(573, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 48);
			LeaveRule("call_expr", 48);
			LeaveRule_call_expr();
		}
		DebugLocation(576, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:578:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 49);
		TraceIn("dict_expr", 49);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(578, 1);
		try
		{
			// SugarWalker.g:579:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:579:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(579, 4);
			DebugLocation(579, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2274); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(579, 17);
			PushFollow(Follow._expr_in_dict_expr2278);
			a=expr();
			PopFollow();

			DebugLocation(579, 23);
			// SugarWalker.g:579:23: (b= expr_list )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if (((LA72_0>=Expr_Access && LA72_0<=Expr_Where)||LA72_0==IDENT||LA72_0==Match_Expr||LA72_0==Match_Tuple||LA72_0==NUMBER||LA72_0==STRING||LA72_0==84||LA72_0==87||LA72_0==91||LA72_0==94||LA72_0==98||LA72_0==104||LA72_0==107||LA72_0==112||LA72_0==114||LA72_0==120||LA72_0==123||LA72_0==127||LA72_0==168||LA72_0==DOUBLE))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:579:24: b= expr_list
				{
				DebugLocation(579, 25);
				PushFollow(Follow._expr_list_in_dict_expr2283);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(580, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 49);
			LeaveRule("dict_expr", 49);
			LeaveRule_dict_expr();
		}
		DebugLocation(583, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:585:1: lambda_expr returns [ExprLambda value] : ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) );
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 50);
		TraceIn("lambda_expr", 50);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(585, 1);
		try
		{
			// SugarWalker.g:586:2: ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==Expr_Lambda))
			{
				int LA75_1 = input.LA(2);

				if ((LA75_1==DOWN))
				{
					int LA75_2 = input.LA(3);

					if ((LA75_2==99))
					{
						alt75 = 1;
					}
					else if ((LA75_2==116))
					{
						alt75 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 75, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:586:4: ^( Expr_Lambda '->' (b= func_args )? a= expr )
				{
				DebugLocation(586, 4);
				DebugLocation(586, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2305); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(586, 18);
				Match(input,99,Follow._99_in_lambda_expr2307); 
				DebugLocation(586, 23);
				// SugarWalker.g:586:23: (b= func_args )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==Func_Args))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:586:24: b= func_args
					{
					DebugLocation(586, 25);
					PushFollow(Follow._func_args_in_lambda_expr2312);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(586, 39);
				PushFollow(Follow._expr_in_lambda_expr2318);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(587, 2);

						value = new ExprLambda(a, b, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:590:4: ^( Expr_Lambda '=>' (b= func_args )? a= expr )
				{
				DebugLocation(590, 4);
				DebugLocation(590, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2328); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(590, 18);
				Match(input,116,Follow._116_in_lambda_expr2330); 
				DebugLocation(590, 23);
				// SugarWalker.g:590:23: (b= func_args )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==Func_Args))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:590:24: b= func_args
					{
					DebugLocation(590, 25);
					PushFollow(Follow._func_args_in_lambda_expr2335);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(590, 39);
				PushFollow(Follow._expr_in_lambda_expr2341);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(591, 2);

						value = new ExprLambda(a, b, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 50);
			LeaveRule("lambda_expr", 50);
			LeaveRule_lambda_expr();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:596:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 51);
		TraceIn("new_expr", 51);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(596, 1);
		try
		{
			// SugarWalker.g:597:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==Expr_New_Type))
			{
				alt77 = 1;
			}
			else if ((LA77_0==Expr_New_Array))
			{
				alt77 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:597:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(597, 4);
				DebugLocation(597, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2361); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(597, 21);
				PushFollow(Follow._type_name_in_new_expr2365);
				a=type_name();
				PopFollow();

				DebugLocation(597, 33);
				// SugarWalker.g:597:33: (b= expr_list )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if (((LA76_0>=Expr_Access && LA76_0<=Expr_Where)||LA76_0==IDENT||LA76_0==Match_Expr||LA76_0==Match_Tuple||LA76_0==NUMBER||LA76_0==STRING||LA76_0==84||LA76_0==87||LA76_0==91||LA76_0==94||LA76_0==98||LA76_0==104||LA76_0==107||LA76_0==112||LA76_0==114||LA76_0==120||LA76_0==123||LA76_0==127||LA76_0==168||LA76_0==DOUBLE))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:597:33: b= expr_list
					{
					DebugLocation(597, 33);
					PushFollow(Follow._expr_list_in_new_expr2369);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(598, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:601:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(601, 4);
				DebugLocation(601, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2380); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(601, 22);
				PushFollow(Follow._type_name_in_new_expr2384);
				a=type_name();
				PopFollow();

				DebugLocation(601, 34);
				PushFollow(Follow._expr_list_in_new_expr2388);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(602, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 51);
			LeaveRule("new_expr", 51);
			LeaveRule_new_expr();
		}
		DebugLocation(605, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:607:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 52);
		TraceIn("call_with_expr", 52);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(607, 1);
		try
		{
			// SugarWalker.g:608:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:608:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(608, 4);
			DebugLocation(608, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2408); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(608, 22);
			PushFollow(Follow._expr_in_call_with_expr2412);
			a=expr();
			PopFollow();

			DebugLocation(608, 29);
			PushFollow(Follow._ident_in_call_with_expr2416);
			b=ident();
			PopFollow();

			DebugLocation(608, 37);
			// SugarWalker.g:608:37: (c= expr_list )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if (((LA78_0>=Expr_Access && LA78_0<=Expr_Where)||LA78_0==IDENT||LA78_0==Match_Expr||LA78_0==Match_Tuple||LA78_0==NUMBER||LA78_0==STRING||LA78_0==84||LA78_0==87||LA78_0==91||LA78_0==94||LA78_0==98||LA78_0==104||LA78_0==107||LA78_0==112||LA78_0==114||LA78_0==120||LA78_0==123||LA78_0==127||LA78_0==168||LA78_0==DOUBLE))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:608:37: c= expr_list
				{
				DebugLocation(608, 37);
				PushFollow(Follow._expr_list_in_call_with_expr2420);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(78); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(609, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 52);
			LeaveRule("call_with_expr", 52);
			LeaveRule_call_with_expr();
		}
		DebugLocation(621, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:623:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 53);
		TraceIn("cast_expr", 53);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(623, 1);
		try
		{
			// SugarWalker.g:624:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:624:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(624, 4);
			DebugLocation(624, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2441); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(624, 17);
			PushFollow(Follow._type_name_in_cast_expr2445);
			a=type_name();
			PopFollow();

			DebugLocation(624, 29);
			PushFollow(Follow._expr_in_cast_expr2449);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(625, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 53);
			LeaveRule("cast_expr", 53);
			LeaveRule_cast_expr();
		}
		DebugLocation(628, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:630:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr_list )? ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 54);
		TraceIn("list_expr", 54);
		ExprList value = default(ExprList);


		List<Expr> a = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(630, 1);
		try
		{
			// SugarWalker.g:631:2: ( ^( Expr_List (a= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:631:4: ^( Expr_List (a= expr_list )? )
			{
			DebugLocation(631, 4);
			DebugLocation(631, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2469); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(631, 17);
				// SugarWalker.g:631:17: (a= expr_list )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if (((LA79_0>=Expr_Access && LA79_0<=Expr_Where)||LA79_0==IDENT||LA79_0==Match_Expr||LA79_0==Match_Tuple||LA79_0==NUMBER||LA79_0==STRING||LA79_0==84||LA79_0==87||LA79_0==91||LA79_0==94||LA79_0==98||LA79_0==104||LA79_0==107||LA79_0==112||LA79_0==114||LA79_0==120||LA79_0==123||LA79_0==127||LA79_0==168||LA79_0==DOUBLE))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:631:17: a= expr_list
					{
					DebugLocation(631, 17);
					PushFollow(Follow._expr_list_in_list_expr2473);
					a=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(79); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(632, 2);

					value = new ExprList(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 54);
			LeaveRule("list_expr", 54);
			LeaveRule_list_expr();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:637:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 55);
		TraceIn("chain_expr", 55);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(637, 1);
		try
		{
			// SugarWalker.g:642:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:642:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(642, 4);
			DebugLocation(642, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2499); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(643, 5);
			PushFollow(Follow._expr_in_chain_expr2506);
			a=expr();
			PopFollow();

			DebugLocation(644, 4);

							last=a;
						
			DebugLocation(647, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(647, 64);
			PushFollow(Follow._expr_in_chain_expr2552);
			a=expr();
			PopFollow();

			DebugLocation(648, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(652, 4);
			// SugarWalker.g:652:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==82||LA80_0==109||LA80_0==113||LA80_0==115||(LA80_0>=117 && LA80_0<=118)||(LA80_0>=145 && LA80_0<=146)))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:653:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(653, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(653, 65);
					PushFollow(Follow._expr_in_chain_expr2604);
					a=expr();
					PopFollow();

					DebugLocation(654, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 55);
			LeaveRule("chain_expr", 55);
			LeaveRule_chain_expr();
		}
		DebugLocation(659, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:661:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(661, 1);
		try
		{
			// SugarWalker.g:666:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:666:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(666, 4);
			DebugLocation(666, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2638); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(666, 18);
			PushFollow(Follow._expr_in_where_expr2642);
			a=expr();
			PopFollow();

			DebugLocation(666, 24);
			// SugarWalker.g:666:24: (b= stmt )+
			int cnt81=0;
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if (((LA81_0>=Expr_Access && LA81_0<=Expr_Where)||LA81_0==IDENT||LA81_0==Match_Expr||LA81_0==Match_Tuple||LA81_0==NUMBER||LA81_0==STRING||(LA81_0>=Stmt_Defer && LA81_0<=Stmt_While)||LA81_0==84||LA81_0==87||LA81_0==91||LA81_0==94||LA81_0==98||LA81_0==104||LA81_0==107||(LA81_0>=111 && LA81_0<=112)||LA81_0==114||LA81_0==120||(LA81_0>=122 && LA81_0<=123)||LA81_0==127||LA81_0==168||LA81_0==DOUBLE))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:666:25: b= stmt
					{
					DebugLocation(666, 26);
					PushFollow(Follow._stmt_in_where_expr2647);
					b=stmt();
					PopFollow();

					DebugLocation(666, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt81 >= 1)
						goto loop81;

					EarlyExitException eee81 = new EarlyExitException( 81, input );
					DebugRecognitionException(eee81);
					throw eee81;
				}
				cnt81++;
			}
			loop81:
				;

			} finally { DebugExitSubRule(81); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(667, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(670, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarWalker.g:672:1: match_item returns [ExprMatchItem value] : ^( Match_Expr_Item a= expr b= expr ) ;
	[GrammarRule("match_item")]
	private ExprMatchItem match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 57);
		TraceIn("match_item", 57);
		ExprMatchItem value = default(ExprMatchItem);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(672, 1);
		try
		{
			// SugarWalker.g:673:2: ( ^( Match_Expr_Item a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:673:4: ^( Match_Expr_Item a= expr b= expr )
			{
			DebugLocation(673, 4);
			DebugLocation(673, 6);
			Match(input,Match_Expr_Item,Follow._Match_Expr_Item_in_match_item2672); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(673, 23);
			PushFollow(Follow._expr_in_match_item2676);
			a=expr();
			PopFollow();

			DebugLocation(673, 30);
			PushFollow(Follow._expr_in_match_item2680);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(674, 2);

					value = new ExprMatchItem(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_item", 57);
			LeaveRule("match_item", 57);
			LeaveRule_match_item();
		}
		DebugLocation(677, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return value;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarWalker.g:679:1: match_expr returns [Expr value] : ^( Match_Expr (a= expr )? (b= match_item )+ ) ;
	[GrammarRule("match_expr")]
	private Expr match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 58);
		TraceIn("match_expr", 58);
		Expr value = default(Expr);


		Expr a = default(Expr);
		ExprMatchItem b = default(ExprMatchItem);


			List<ExprMatchItem> list = new List<ExprMatchItem>();

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(679, 1);
		try
		{
			// SugarWalker.g:684:2: ( ^( Match_Expr (a= expr )? (b= match_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:684:5: ^( Match_Expr (a= expr )? (b= match_item )+ )
			{
			DebugLocation(684, 5);
			DebugLocation(684, 7);
			Match(input,Match_Expr,Follow._Match_Expr_in_match_expr2706); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(684, 18);
			// SugarWalker.g:684:18: (a= expr )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if (((LA82_0>=Expr_Access && LA82_0<=Expr_Where)||LA82_0==IDENT||LA82_0==Match_Expr||LA82_0==Match_Tuple||LA82_0==NUMBER||LA82_0==STRING||LA82_0==84||LA82_0==87||LA82_0==91||LA82_0==94||LA82_0==98||LA82_0==104||LA82_0==107||LA82_0==112||LA82_0==114||LA82_0==120||LA82_0==123||LA82_0==127||LA82_0==168||LA82_0==DOUBLE))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:684:19: a= expr
				{
				DebugLocation(684, 20);
				PushFollow(Follow._expr_in_match_expr2711);
				a=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(684, 28);
			// SugarWalker.g:684:28: (b= match_item )+
			int cnt83=0;
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==Match_Expr_Item))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:684:29: b= match_item
					{
					DebugLocation(684, 30);
					PushFollow(Follow._match_item_in_match_expr2718);
					b=match_item();
					PopFollow();

					DebugLocation(684, 42);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt83 >= 1)
						goto loop83;

					EarlyExitException eee83 = new EarlyExitException( 83, input );
					DebugRecognitionException(eee83);
					throw eee83;
				}
				cnt83++;
			}
			loop83:
				;

			} finally { DebugExitSubRule(83); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(685, 2);

					value = new ExprMatch(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_expr", 58);
			LeaveRule("match_expr", 58);
			LeaveRule_match_expr();
		}
		DebugLocation(688, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return value;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:690:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 59);
		TraceIn("expr", 59);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		Expr expr_match = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(690, 1);
		try
		{
			// SugarWalker.g:691:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt84=28;
			try { DebugEnterDecision(84, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt84 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt84 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt84 = 3;
				}
				break;
			case Expr_Call:
				{
				alt84 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt84 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt84 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt84 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt84 = 8;
				}
				break;
			case Expr_List:
				{
				alt84 = 9;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt84 = 10;
				}
				break;
			case Expr_Where:
				{
				alt84 = 11;
				}
				break;
			case Match_Expr:
				{
				alt84 = 12;
				}
				break;
			case Expr_Infix:
				{
				alt84 = 13;
				}
				break;
			case Expr_Cond:
				{
				alt84 = 14;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt84 = 15;
				}
				break;
			case Expr_Not_Null:
				{
				alt84 = 16;
				}
				break;
			case Expr_Access:
				{
				alt84 = 17;
				}
				break;
			case Expr_Chain:
				{
				alt84 = 18;
				}
				break;
			case Expr_Bin:
				{
				alt84 = 19;
				}
				break;
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 127:
			case 168:
				{
				alt84 = 20;
				}
				break;
			case 123:
				{
				alt84 = 21;
				}
				break;
			case Expr_Bracket:
				{
				alt84 = 22;
				}
				break;
			case Expr_Suffix:
				{
				alt84 = 23;
				}
				break;
			case Expr_Prefix:
				{
				alt84 = 24;
				}
				break;
			case 107:
				{
				alt84 = 25;
				}
				break;
			case IDENT:
				{
				alt84 = 26;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt84 = 27;
				}
				break;
			case STRING:
				{
				alt84 = 28;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:691:7: tuple= expr_tuple
				{
				DebugLocation(691, 12);
				PushFollow(Follow._expr_tuple_in_expr2747);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(692, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:695:4: alloc= alloc_expr
				{
				DebugLocation(695, 9);
				PushFollow(Follow._alloc_expr_in_expr2757);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(696, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:699:4: match= match_tuple
				{
				DebugLocation(699, 9);
				PushFollow(Follow._match_tuple_in_expr2767);
				match=match_tuple();
				PopFollow();

				DebugLocation(700, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:703:4: call= call_expr
				{
				DebugLocation(703, 8);
				PushFollow(Follow._call_expr_in_expr2777);
				call=call_expr();
				PopFollow();

				DebugLocation(704, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:707:4: call_with= call_with_expr
				{
				DebugLocation(707, 13);
				PushFollow(Follow._call_with_expr_in_expr2787);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(708, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:711:4: dict= dict_expr
				{
				DebugLocation(711, 8);
				PushFollow(Follow._dict_expr_in_expr2797);
				dict=dict_expr();
				PopFollow();

				DebugLocation(712, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:715:4: lambda= lambda_expr
				{
				DebugLocation(715, 10);
				PushFollow(Follow._lambda_expr_in_expr2807);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(716, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:719:4: cast= cast_expr
				{
				DebugLocation(719, 8);
				PushFollow(Follow._cast_expr_in_expr2817);
				cast=cast_expr();
				PopFollow();

				DebugLocation(720, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:723:4: list= list_expr
				{
				DebugLocation(723, 8);
				PushFollow(Follow._list_expr_in_expr2827);
				list=list_expr();
				PopFollow();

				DebugLocation(724, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:727:4: expr_new= new_expr
				{
				DebugLocation(727, 12);
				PushFollow(Follow._new_expr_in_expr2837);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(728, 2);

						value = expr_new;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:731:4: where= where_expr
				{
				DebugLocation(731, 9);
				PushFollow(Follow._where_expr_in_expr2847);
				where=where_expr();
				PopFollow();

				DebugLocation(732, 2);

						value = where;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:735:4: expr_match= match_expr
				{
				DebugLocation(735, 14);
				PushFollow(Follow._match_expr_in_expr2857);
				expr_match=match_expr();
				PopFollow();

				DebugLocation(736, 2);

						value = expr_match;
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:739:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(739, 4);
				DebugLocation(739, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr2866); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(739, 27);
				PushFollow(Follow._ident_in_expr2870);
				ident_text=ident();
				PopFollow();

				DebugLocation(739, 35);
				PushFollow(Follow._expr_in_expr2874);
				a=expr();
				PopFollow();

				DebugLocation(739, 42);
				PushFollow(Follow._expr_in_expr2878);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(740, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:743:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(743, 4);
				DebugLocation(743, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2888); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(743, 17);
				PushFollow(Follow._expr_in_expr2892);
				a=expr();
				PopFollow();

				DebugLocation(743, 24);
				PushFollow(Follow._expr_in_expr2896);
				b=expr();
				PopFollow();

				DebugLocation(743, 31);
				PushFollow(Follow._expr_in_expr2900);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(744, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:747:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(747, 4);
				DebugLocation(747, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr2910); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(747, 26);
				PushFollow(Follow._expr_in_expr2914);
				a=expr();
				PopFollow();

				DebugLocation(747, 33);
				PushFollow(Follow._expr_in_expr2918);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(748, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:751:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(751, 4);
				DebugLocation(751, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr2928); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(751, 21);
				PushFollow(Follow._expr_in_expr2932);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(752, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:755:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(755, 4);
				DebugLocation(755, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2942); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(755, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=99 && input.LA(1)<=102)||input.LA(1)==106)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(755, 57);
				PushFollow(Follow._expr_in_expr2968);
				a=expr();
				PopFollow();

				DebugLocation(755, 73);
				PushFollow(Follow._ident_in_expr2972);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(756, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:759:4: chain= chain_expr
				{
				DebugLocation(759, 10);
				PushFollow(Follow._chain_expr_in_expr2985);
				chain=chain_expr();
				PopFollow();

				DebugLocation(760, 2);

						value = chain;
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:763:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(763, 4);
				DebugLocation(763, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2994); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(763, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=82 && input.LA(1)<=83)||(input.LA(1)>=85 && input.LA(1)<=86)||input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103||input.LA(1)==109||input.LA(1)==111||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=119)||input.LA(1)==126||input.LA(1)==129||(input.LA(1)>=145 && input.LA(1)<=146)||input.LA(1)==153||input.LA(1)==167||input.LA(1)==169)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(770, 9);
				PushFollow(Follow._expr_in_expr3125);
				a=expr();
				PopFollow();

				DebugLocation(770, 16);
				PushFollow(Follow._expr_in_expr3129);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(771, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:774:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(774, 4);
				DebugLocation(774, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==114||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(774, 88);
				PushFollow(Follow._expr_in_expr3187);
				a=expr();
				PopFollow();

				DebugLocation(774, 95);
				PushFollow(Follow._expr_in_expr3191);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(775, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:778:4: ^( '@' text_ident= ident )
				{
				DebugLocation(778, 4);
				DebugLocation(778, 6);
				Match(input,123,Follow._123_in_expr3201); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(778, 20);
				PushFollow(Follow._ident_in_expr3205);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(779, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:782:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(782, 4);
				DebugLocation(782, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3215); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(782, 20);
				PushFollow(Follow._expr_in_expr3219);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(783, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:786:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(786, 4);
				DebugLocation(786, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3229); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(786, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==93||input.LA(1)==97)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(786, 36);
				PushFollow(Follow._expr_in_expr3243);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(787, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:790:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(790, 4);
				DebugLocation(790, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3253); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(790, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==81||input.LA(1)==86||input.LA(1)==90||(input.LA(1)>=92 && input.LA(1)<=93)||(input.LA(1)>=96 && input.LA(1)<=97)||input.LA(1)==152||input.LA(1)==170)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(790, 80);
				PushFollow(Follow._expr_in_expr3295);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(791, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:794:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(794, 4);
				DebugLocation(794, 6);
				Match(input,107,Follow._107_in_expr3305); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(794, 12);
				PushFollow(Follow._expr_in_expr3309);
				a=expr();
				PopFollow();

				DebugLocation(794, 19);
				PushFollow(Follow._expr_in_expr3313);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(795, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:802:4: text_ident= ident
				{
				DebugLocation(802, 15);
				PushFollow(Follow._ident_in_expr3326);
				text_ident=ident();
				PopFollow();

				DebugLocation(803, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:807:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(807, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(808, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// SugarWalker.g:811:4: text= STRING
				{
				DebugLocation(811, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3357); 
				DebugLocation(812, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 59);
			LeaveRule("expr", 59);
			LeaveRule_expr();
		}
		DebugLocation(815, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA39 dfa39;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa39 = new DFA39( this );
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x7\xFFFF";
		private const string DFA39_eofS =
			"\x7\xFFFF";
		private const string DFA39_minS =
			"\x1\xC\x1\x3\x2\xFFFF\x1\x2A\x1\xFFFF\x1\x3";
		private const string DFA39_maxS =
			"\x2\xAB\x2\xFFFF\x1\x2A\x1\xFFFF\x1\xAB";
		private const string DFA39_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA39_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x16\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x2\x3\x19\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x28\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x16\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x19\xFFFF"+
				"\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x28\xFFFF\x1\x5\x2\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6",
				"",
				"\x1\x3\x8\xFFFF\x16\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x19\xFFFF"+
				"\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x28\xFFFF\x1\x5\x2\xFFFF\x1\x5"
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "276:69: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x20208000006848UL,0x80000000048UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x400000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_global_using281 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x400000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0xEE00UL});
		public static readonly BitSet _type_name_in_global_alloc318 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc322 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_global_alloc327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc344 = new BitSet(new ulong[]{0x0UL,0xEE00UL});
		public static readonly BitSet _type_name_in_global_alloc350 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc354 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_global_alloc359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _107_in_global_alloc371 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc376 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc382 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_global_alloc386 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef406 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef411 = new BitSet(new ulong[]{0x0UL,0xEE00UL});
		public static readonly BitSet _type_name_in_global_typedef417 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef421 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item486 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item491 = new BitSet(new ulong[]{0x210040000000008UL});
		public static readonly BitSet _135_in_attribute_item499 = new BitSet(new ulong[]{0x210040000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item507 = new BitSet(new ulong[]{0x210040000000008UL});
		public static readonly BitSet _attribute_item_in_attribute535 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def556 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def560 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _global_block_in_namespace_def565 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def597 = new BitSet(new ulong[]{0x200000000000008UL});
		public static readonly BitSet _STRING_in_import_def607 = new BitSet(new ulong[]{0x200000000000008UL});
		public static readonly BitSet _Enum_in_enum_def628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def633 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def639 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_enum_def643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def663 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _132_in_class_def668 = new BitSet(new ulong[]{0x40000000010UL});
		public static readonly BitSet _attribute_in_class_def675 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def681 = new BitSet(new ulong[]{0x134000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def686 = new BitSet(new ulong[]{0x124000000008UL});
		public static readonly BitSet _func_args_in_class_def693 = new BitSet(new ulong[]{0x120000000008UL});
		public static readonly BitSet _ident_list_in_class_def700 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _global_block_in_class_def707 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident734 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _135_in_type_ident738 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x8000080UL});
		public static readonly BitSet _155_in_type_ident751 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x8000080UL});
		public static readonly BitSet _ident_in_type_ident766 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x8000080UL});
		public static readonly BitSet _Type_Template_in_type_template803 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template807 = new BitSet(new ulong[]{0x8UL,0xEE00UL});
		public static readonly BitSet _type_name_in_type_template812 = new BitSet(new ulong[]{0x8UL,0xEE00UL});
		public static readonly BitSet _Type_Array_in_type_array841 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array845 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_type_array850 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _Type_Star_in_type_star874 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star878 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star880 = new BitSet(new ulong[]{0x8UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star885 = new BitSet(new ulong[]{0x8UL,0x4000000UL});
		public static readonly BitSet _Type_Ref_in_type_ref907 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref911 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Func_in_type_func931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_list_in_type_func936 = new BitSet(new ulong[]{0x8UL,0xEE00UL});
		public static readonly BitSet _type_name_in_type_func943 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_List_in_type_list969 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_list974 = new BitSet(new ulong[]{0x8UL,0xEE00UL});
		public static readonly BitSet _type_array_in_type_name997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name1024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type_name1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args1065 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args1070 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter1097 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter1102 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _Func_Def_in_func_def1128 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def1133 = new BitSet(new ulong[]{0x6150543FFFFF000UL,0x890509855C90EE00UL,0xD0000000000UL});
		public static readonly BitSet _type_name_in_func_def1140 = new BitSet(new ulong[]{0x6150543FFFFF000UL,0x890509855C900000UL,0xD0000000000UL});
		public static readonly BitSet _170_in_func_def1147 = new BitSet(new ulong[]{0x6150543FFFFF000UL,0x890509855C900000UL,0x90000000000UL});
		public static readonly BitSet _ident_in_func_def1154 = new BitSet(new ulong[]{0x6150543FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _set_in_func_def1160 = new BitSet(new ulong[]{0x6150543FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _generic_parameter_in_func_def1175 = new BitSet(new ulong[]{0x6150443FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _func_args_in_func_def1183 = new BitSet(new ulong[]{0x6150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1194 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1204 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1232 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1237 = new BitSet(new ulong[]{0xFA150403FFFFF008UL,0x8D058904489000FFUL,0x90000000000UL});
		public static readonly BitSet _stmt_expr_in_stmt1268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_translate1363 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1367 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_stmt_translate1371 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _107_in_stmt_translate1381 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1385 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1389 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _111_in_stmt_translate1399 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1403 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_stmt_translate1407 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1432 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1436 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1440 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1467 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1472 = new BitSet(new ulong[]{0x400000000000008UL,0x100UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1478 = new BitSet(new ulong[]{0x400000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1483 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1505 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1509 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1519 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1523 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1585 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1591 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_stmt_using1606 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x400000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1627 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1631 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1635 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1674 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1678 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1682 = new BitSet(new ulong[]{0x400000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1687 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1699 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1703 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1707 = new BitSet(new ulong[]{0x400000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1712 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1734 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1738 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1742 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1752 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1756 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1760 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1770 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1775 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1781 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1801 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1805 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1809 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1813 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1818 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1830 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1834 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1838 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1842 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1847 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1859 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1863 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_for_item1867 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1877 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1881 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list1908 = new BitSet(new ulong[]{0x3C00000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for1933 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1937 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1957 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1961 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try1965 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1969 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1989 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1994 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident2022 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_ident2027 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident2031 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list2059 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list2064 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr2086 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2090 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2094 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2099 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr2111 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2115 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2119 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2124 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2151 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2156 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2183 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2188 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr_list2216 = new BitSet(new ulong[]{0x2150403FFFFF002UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _Expr_Call_in_call_expr2236 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2240 = new BitSet(new ulong[]{0x2150503FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2245 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_call_expr2252 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2274 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2278 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_dict_expr2283 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2305 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _99_in_lambda_expr2307 = new BitSet(new ulong[]{0x2150443FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2312 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_lambda_expr2318 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2328 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _116_in_lambda_expr2330 = new BitSet(new ulong[]{0x2150443FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2335 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_lambda_expr2341 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2361 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2365 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_new_expr2369 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2380 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2384 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_new_expr2388 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2408 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2412 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2416 = new BitSet(new ulong[]{0x2150403FFFFF008UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2420 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2441 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2445 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_cast_expr2449 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2469 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_list_expr2473 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2499 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2506 = new BitSet(new ulong[]{0x0UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _set_in_chain_expr2518 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_chain_expr2552 = new BitSet(new ulong[]{0x8UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _set_in_chain_expr2570 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_chain_expr2604 = new BitSet(new ulong[]{0x8UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _Expr_Where_in_where_expr2638 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2642 = new BitSet(new ulong[]{0xFA150403FFFFF000UL,0x8D058904489000FFUL,0x90000000000UL});
		public static readonly BitSet _stmt_in_where_expr2647 = new BitSet(new ulong[]{0xFA150403FFFFF008UL,0x8D058904489000FFUL,0x90000000000UL});
		public static readonly BitSet _Match_Expr_Item_in_match_item2672 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_item2676 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_match_item2680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Match_Expr_in_match_expr2706 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_expr2711 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _match_item_in_match_expr2718 = new BitSet(new ulong[]{0x2000000000008UL});
		public static readonly BitSet _expr_tuple_in_expr2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr2817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr2847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr2857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr2866 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2870 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2874 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2878 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2888 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2892 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2896 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2900 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr2910 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2914 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2918 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr2928 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2932 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2942 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2946 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr2968 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_expr2972 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr2985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr2994 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2998 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3125 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3129 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr3141 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3187 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3191 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _123_in_expr3201 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3205 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3215 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3219 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3229 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3233 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3243 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3253 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3257 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3295 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _107_in_expr3305 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3309 = new BitSet(new ulong[]{0x2150403FFFFF000UL,0x8905090448900000UL,0x90000000000UL});
		public static readonly BitSet _expr_in_expr3313 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3357 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
