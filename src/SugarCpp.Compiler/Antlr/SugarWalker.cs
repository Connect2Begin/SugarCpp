//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-18 12:59:56

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Tuple=48;
	public const int NEWLINE=49;
	public const int NUMBER=50;
	public const int Namespace=51;
	public const int Right_Bracket=52;
	public const int Root=53;
	public const int SP=54;
	public const int STRING=55;
	public const int Stmt_Block=56;
	public const int Stmt_Defer=57;
	public const int Stmt_Finally=58;
	public const int Stmt_For=59;
	public const int Stmt_If=60;
	public const int Stmt_Loop=61;
	public const int Stmt_Return=62;
	public const int Stmt_Switch=63;
	public const int Stmt_Try=64;
	public const int Stmt_Typedef=65;
	public const int Stmt_Unless=66;
	public const int Stmt_Until=67;
	public const int Stmt_Using=68;
	public const int Stmt_While=69;
	public const int Switch_Item=70;
	public const int Type_Array=71;
	public const int Type_Ident=72;
	public const int Type_Ref=73;
	public const int Type_Star=74;
	public const int Type_Template=75;
	public const int White_Space=76;
	public const int DOUBLE=164;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:33:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(33, 1);
		try
		{
			// SugarWalker.g:34:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:34:4: ^( Root a= global_block )
			{
			DebugLocation(34, 4);
			DebugLocation(34, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(34, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(35, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(38, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:40:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(40, 1);
		try
		{
			// SugarWalker.g:45:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(45, 19);
				// SugarWalker.g:45:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==103))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:45:20: a= node
						{
						DebugLocation(45, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(45, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:48:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(48, 1);
		try
		{
			// SugarWalker.g:53:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 103:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:53:4: a= func_def
				{
				DebugLocation(53, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(53, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:54:4: b= import_def
				{
				DebugLocation(54, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(54, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:55:4: c= enum_def
				{
				DebugLocation(55, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(55, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:56:4: d= class_def
				{
				DebugLocation(56, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(56, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:57:4: e= global_alloc
				{
				DebugLocation(57, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(57, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:58:4: f= global_using
				{
				DebugLocation(58, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(58, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:59:4: g= global_typedef
				{
				DebugLocation(59, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(59, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:60:4: h= namespace_def
				{
				DebugLocation(60, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(60, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:63:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(63, 1);
		try
		{
			// SugarWalker.g:68:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:68:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(68, 4);
			DebugLocation(68, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(68, 17);
				// SugarWalker.g:68:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:68:18: attr= attribute
					{
					DebugLocation(68, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(68, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(68, 65);
				// SugarWalker.g:68:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==142))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:68:67: a= ident
						{
						DebugLocation(68, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(68, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:69:22: b= 'namespace'
						{
						DebugLocation(69, 23);
						b=(CommonTree)Match(input,142,Follow._142_in_global_using281); 
						DebugLocation(69, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:72:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(72, 1);
		try
		{
			// SugarWalker.g:77:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt10 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt10 = 2;
				}
				break;
			case 103:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:77:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(77, 4);
				DebugLocation(77, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(77, 23);
				// SugarWalker.g:77:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:77:24: attr= attribute
					{
					DebugLocation(77, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(77, 42);
				PushFollow(Follow._type_name_in_global_alloc318);
				a=type_name();
				PopFollow();

				DebugLocation(77, 54);
				PushFollow(Follow._ident_list_in_global_alloc322);
				b=ident_list();
				PopFollow();

				DebugLocation(77, 66);
				// SugarWalker.g:77:66: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Where)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==80||LA6_0==83||LA6_0==87||LA6_0==90||LA6_0==94||LA6_0==100||LA6_0==103||LA6_0==108||LA6_0==110||LA6_0==116||LA6_0==119||LA6_0==123||LA6_0==161||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:77:67: c= expr_list
					{
					DebugLocation(77, 68);
					PushFollow(Follow._expr_list_in_global_alloc327);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(78, 2);

						if (c != null)
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Equal));
						}
						else
						{
							value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Declare));
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:88:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(88, 4);
				DebugLocation(88, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc339); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(88, 25);
				// SugarWalker.g:88:25: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:88:26: attr= attribute
					{
					DebugLocation(88, 30);
					PushFollow(Follow._attribute_in_global_alloc344);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(88, 44);
				PushFollow(Follow._type_name_in_global_alloc350);
				a=type_name();
				PopFollow();

				DebugLocation(88, 56);
				PushFollow(Follow._ident_list_in_global_alloc354);
				b=ident_list();
				PopFollow();

				DebugLocation(88, 68);
				// SugarWalker.g:88:68: (c= expr_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>=Expr_Access && LA8_0<=Expr_Where)||LA8_0==IDENT||LA8_0==Match_Tuple||LA8_0==NUMBER||LA8_0==STRING||LA8_0==80||LA8_0==83||LA8_0==87||LA8_0==90||LA8_0==94||LA8_0==100||LA8_0==103||LA8_0==108||LA8_0==110||LA8_0==116||LA8_0==119||LA8_0==123||LA8_0==161||LA8_0==DOUBLE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:88:69: c= expr_list
					{
					DebugLocation(88, 70);
					PushFollow(Follow._expr_list_in_global_alloc359);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(89, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, AllocType.Bracket));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:92:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(92, 4);
				DebugLocation(92, 6);
				Match(input,103,Follow._103_in_global_alloc371); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(92, 11);
				// SugarWalker.g:92:11: (attr= attribute )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:92:12: attr= attribute
					{
					DebugLocation(92, 16);
					PushFollow(Follow._attribute_in_global_alloc376);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(92, 30);
				PushFollow(Follow._ident_list_in_global_alloc382);
				d=ident_list();
				PopFollow();

				DebugLocation(92, 43);
				PushFollow(Follow._expr_list_in_global_alloc386);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(93, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:103:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(103, 1);
		try
		{
			// SugarWalker.g:104:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:104:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(104, 4);
			DebugLocation(104, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef406); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(104, 19);
			// SugarWalker.g:104:19: (attr= attribute )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Attribute))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:104:20: attr= attribute
				{
				DebugLocation(104, 24);
				PushFollow(Follow._attribute_in_global_typedef411);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(104, 38);
			PushFollow(Follow._type_name_in_global_typedef417);
			a=type_name();
			PopFollow();

			DebugLocation(104, 50);
			PushFollow(Follow._ident_in_global_typedef421);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(105, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:111:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(111, 1);
		try
		{
			// SugarWalker.g:112:2: (a= NUMBER |a= STRING |b= ident )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt12 = 1;
				}
				break;
			case STRING:
				{
				alt12 = 2;
				}
				break;
			case IDENT:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:112:4: a= NUMBER
				{
				DebugLocation(112, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args442); 
				DebugLocation(113, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:116:4: a= STRING
				{
				DebugLocation(116, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args452); 
				DebugLocation(117, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:120:4: b= ident
				{
				DebugLocation(120, 5);
				PushFollow(Follow._ident_in_attribute_args462);
				b=ident();
				PopFollow();

				DebugLocation(121, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:126:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(126, 1);
		try
		{
			// SugarWalker.g:131:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:131:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(131, 4);
			DebugLocation(131, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item486); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(131, 16);
			// SugarWalker.g:131:16: (a= ident |c= 'const' )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==IDENT))
			{
				alt13 = 1;
			}
			else if ((LA13_0==130))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:131:17: a= ident
				{
				DebugLocation(131, 18);
				PushFollow(Follow._ident_in_attribute_item491);
				a=ident();
				PopFollow();

				DebugLocation(131, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:131:48: c= 'const'
				{
				DebugLocation(131, 49);
				c=(CommonTree)Match(input,130,Follow._130_in_attribute_item499); 
				DebugLocation(131, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(131, 86);
			// SugarWalker.g:131:86: (b= attribute_args )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENT||LA14_0==NUMBER||LA14_0==STRING))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:131:87: b= attribute_args
					{
					DebugLocation(131, 88);
					PushFollow(Follow._attribute_args_in_attribute_item507);
					b=attribute_args();
					PopFollow();

					DebugLocation(131, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:134:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: (a= attribute_item )+
			{
			DebugLocation(139, 4);
			// SugarWalker.g:139:4: (a= attribute_item )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Attribute))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:139:5: a= attribute_item
					{
					DebugLocation(139, 6);
					PushFollow(Follow._attribute_item_in_attribute535);
					a=attribute_item();
					PopFollow();

					DebugLocation(139, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:142:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(142, 1);
		try
		{
			// SugarWalker.g:143:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:143:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(143, 4);
			DebugLocation(143, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def556); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(143, 17);
			PushFollow(Follow._ident_in_namespace_def560);
			a=ident();
			PopFollow();

			DebugLocation(143, 24);
			// SugarWalker.g:143:24: (b= global_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Global_Block))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:143:25: b= global_block
				{
				DebugLocation(143, 26);
				PushFollow(Follow._global_block_in_namespace_def565);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(144, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:149:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(149, 1);
		try
		{
			// SugarWalker.g:154:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:154:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(154, 4);
			DebugLocation(154, 6);
			Match(input,Import,Follow._Import_in_import_def592); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(154, 13);
				// SugarWalker.g:154:13: (attr= attribute )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==Attribute))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:154:14: attr= attribute
					{
					DebugLocation(154, 18);
					PushFollow(Follow._attribute_in_import_def597);
					attr=attribute();
					PopFollow();

					DebugLocation(154, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(154, 61);
				// SugarWalker.g:154:61: (a= STRING )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==STRING))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:154:62: a= STRING
						{
						DebugLocation(154, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def607); 
						DebugLocation(154, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:157:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(157, 1);
		try
		{
			// SugarWalker.g:158:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:158:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(158, 4);
			DebugLocation(158, 6);
			Match(input,Enum,Follow._Enum_in_enum_def628); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(158, 11);
			// SugarWalker.g:158:11: (attr= attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Attribute))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:158:12: attr= attribute
				{
				DebugLocation(158, 16);
				PushFollow(Follow._attribute_in_enum_def633);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(158, 30);
			PushFollow(Follow._ident_in_enum_def639);
			a=ident();
			PopFollow();

			DebugLocation(158, 38);
			PushFollow(Follow._ident_list_in_enum_def643);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(159, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:164:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(164, 1);
		try
		{
			// SugarWalker.g:165:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 6);
			Match(input,Class,Follow._Class_in_class_def663); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(165, 12);
			// SugarWalker.g:165:12: (attr= attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Attribute))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:13: attr= attribute
				{
				DebugLocation(165, 17);
				PushFollow(Follow._attribute_in_class_def668);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(165, 31);
			PushFollow(Follow._ident_in_class_def674);
			a=ident();
			PopFollow();

			DebugLocation(165, 38);
			// SugarWalker.g:165:38: (b= generic_parameter )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Generic_Patameters))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:39: b= generic_parameter
				{
				DebugLocation(165, 40);
				PushFollow(Follow._generic_parameter_in_class_def679);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(165, 61);
			// SugarWalker.g:165:61: (c= func_args )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Func_Args))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:62: c= func_args
				{
				DebugLocation(165, 63);
				PushFollow(Follow._func_args_in_class_def686);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(165, 76);
			// SugarWalker.g:165:76: (d= ident_list )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Ident_List))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:77: d= ident_list
				{
				DebugLocation(165, 78);
				PushFollow(Follow._ident_list_in_class_def693);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(165, 92);
			// SugarWalker.g:165:92: (e= global_block )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Global_Block))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:93: e= global_block
				{
				DebugLocation(165, 94);
				PushFollow(Follow._global_block_in_class_def700);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(166, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:171:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? a= ident ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(171, 1);
		try
		{
			// SugarWalker.g:176:2: ( ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? a= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:176:4: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? a= ident )
			{
			DebugLocation(176, 4);
			DebugLocation(176, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident727); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(176, 17);
			// SugarWalker.g:176:17: ( 'const' )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==130))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:18: 'const'
				{
				DebugLocation(176, 18);
				Match(input,130,Follow._130_in_type_ident730); 
				DebugLocation(176, 26);
				type+="const ";

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(176, 46);
			// SugarWalker.g:176:46: ( 'unsigned' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==154))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:47: 'unsigned'
				{
				DebugLocation(176, 47);
				Match(input,154,Follow._154_in_type_ident737); 
				DebugLocation(176, 58);
				type+="unsigned ";

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(176, 81);
			// SugarWalker.g:176:81: ( 'struct' )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==147))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:176:82: 'struct'
				{
				DebugLocation(176, 82);
				Match(input,147,Follow._147_in_type_ident744); 
				DebugLocation(176, 91);
				type+="struct ";

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(176, 113);
			PushFollow(Follow._ident_in_type_ident752);
			a=ident();
			PopFollow();

			DebugLocation(176, 120);
			type+=a;

			Match(input, TokenTypes.Up, null); 

			DebugLocation(177, 2);

					value = new IdentType(type);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:182:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(182, 1);
		try
		{
			// SugarWalker.g:187:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:187:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(187, 4);
			DebugLocation(187, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template779); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(187, 21);
			PushFollow(Follow._type_name_in_type_template783);
			a=type_name();
			PopFollow();

			DebugLocation(187, 32);
			// SugarWalker.g:187:32: (b= type_name )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>=Type_Array && LA28_0<=Type_Template)))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:187:33: b= type_name
					{
					DebugLocation(187, 34);
					PushFollow(Follow._type_name_in_type_template788);
					b=type_name();
					PopFollow();

					DebugLocation(187, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(188, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:193:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(193, 1);
		try
		{
			// SugarWalker.g:198:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:198:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(198, 4);
			DebugLocation(198, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array817); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(198, 18);
			PushFollow(Follow._type_name_in_type_array821);
			a=type_name();
			PopFollow();

			DebugLocation(198, 29);
			// SugarWalker.g:198:29: (b= expr )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Expr_Access && LA29_0<=Expr_Where)||LA29_0==IDENT||LA29_0==Match_Tuple||LA29_0==NUMBER||LA29_0==STRING||LA29_0==80||LA29_0==83||LA29_0==87||LA29_0==90||LA29_0==94||LA29_0==100||LA29_0==103||LA29_0==108||LA29_0==110||LA29_0==116||LA29_0==119||LA29_0==123||LA29_0==161||LA29_0==DOUBLE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:198:30: b= expr
					{
					DebugLocation(198, 31);
					PushFollow(Follow._expr_in_type_array826);
					b=expr();
					PopFollow();

					DebugLocation(198, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(199, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:204:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(204, 1);
		try
		{
			// SugarWalker.g:205:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:205:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(205, 4);
			DebugLocation(205, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star850); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(205, 17);
			PushFollow(Follow._type_name_in_type_star854);
			a=type_name();
			PopFollow();

			DebugLocation(205, 28);
			Match(input,86,Follow._86_in_type_star856); 
			DebugLocation(205, 32);
			 value = new StarType(a); 
			DebugLocation(205, 62);
			// SugarWalker.g:205:62: ( '*' )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==86))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:205:63: '*'
					{
					DebugLocation(205, 63);
					Match(input,86,Follow._86_in_type_star861); 
					DebugLocation(205, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:209:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(209, 1);
		try
		{
			// SugarWalker.g:210:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:210:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(210, 4);
			DebugLocation(210, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref883); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(210, 16);
			PushFollow(Follow._type_name_in_type_ref887);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(211, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:216:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 19);
		TraceIn("type_name", 19);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(216, 1);
		try
		{
			// SugarWalker.g:217:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident )
			int alt31=5;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt31 = 1;
				}
				break;
			case Type_Ref:
				{
				alt31 = 2;
				}
				break;
			case Type_Star:
				{
				alt31 = 3;
				}
				break;
			case Type_Template:
				{
				alt31 = 4;
				}
				break;
			case Type_Ident:
				{
				alt31 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:217:4: a= type_array
				{
				DebugLocation(217, 5);
				PushFollow(Follow._type_array_in_type_name908);
				a=type_array();
				PopFollow();

				DebugLocation(217, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:218:4: a= type_ref
				{
				DebugLocation(218, 5);
				PushFollow(Follow._type_ref_in_type_name917);
				a=type_ref();
				PopFollow();

				DebugLocation(218, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:219:4: a= type_star
				{
				DebugLocation(219, 5);
				PushFollow(Follow._type_star_in_type_name926);
				a=type_star();
				PopFollow();

				DebugLocation(219, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:220:4: a= type_template
				{
				DebugLocation(220, 5);
				PushFollow(Follow._type_template_in_type_name935);
				a=type_template();
				PopFollow();

				DebugLocation(220, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:221:4: a= type_ident
				{
				DebugLocation(221, 5);
				PushFollow(Follow._type_ident_in_type_name944);
				a=type_ident();
				PopFollow();

				DebugLocation(221, 17);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 19);
			LeaveRule("type_name", 19);
			LeaveRule_type_name();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:224:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(224, 1);
		try
		{
			// SugarWalker.g:229:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:229:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(229, 4);
			DebugLocation(229, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args967); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(229, 16);
				// SugarWalker.g:229:16: (a= alloc_expr )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if (((LA32_0>=Expr_Alloc_Bracket && LA32_0<=Expr_Alloc_Equal)))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:229:17: a= alloc_expr
						{
						DebugLocation(229, 18);
						PushFollow(Follow._alloc_expr_in_func_args972);
						a=alloc_expr();
						PopFollow();

						DebugLocation(230, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:235:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 21);
		TraceIn("generic_parameter", 21);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(235, 1);
		try
		{
			// SugarWalker.g:240:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:240:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(240, 4);
			DebugLocation(240, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter999); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(240, 25);
				// SugarWalker.g:240:25: (a= ident )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==IDENT))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:240:26: a= ident
						{
						DebugLocation(240, 27);
						PushFollow(Follow._ident_in_generic_parameter1004);
						a=ident();
						PopFollow();

						DebugLocation(240, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 21);
			LeaveRule("generic_parameter", 21);
			LeaveRule_generic_parameter();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:243:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(243, 1);
		try
		{
			// SugarWalker.g:248:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:248:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(248, 4);
			DebugLocation(248, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1030); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(248, 15);
			// SugarWalker.g:248:15: (attr= attribute )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==Attribute))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:16: attr= attribute
				{
				DebugLocation(248, 20);
				PushFollow(Follow._attribute_in_func_def1035);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(248, 33);
			// SugarWalker.g:248:33: (a= type_name )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if (((LA35_0>=Type_Array && LA35_0<=Type_Template)))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:34: a= type_name
				{
				DebugLocation(248, 35);
				PushFollow(Follow._type_name_in_func_def1042);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(248, 48);
			// SugarWalker.g:248:48: (deconstructor= '~' )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==163))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:49: deconstructor= '~'
				{
				DebugLocation(248, 62);
				deconstructor=(CommonTree)Match(input,163,Follow._163_in_func_def1049); 

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(248, 70);
			PushFollow(Follow._ident_in_func_def1055);
			b=ident();
			PopFollow();

			DebugLocation(248, 77);
			// SugarWalker.g:248:77: (x= generic_parameter )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==Generic_Patameters))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:78: x= generic_parameter
				{
				DebugLocation(248, 79);
				PushFollow(Follow._generic_parameter_in_func_def1060);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(248, 101);
			// SugarWalker.g:248:101: (args= func_args )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Func_Args))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:248:102: args= func_args
				{
				DebugLocation(248, 106);
				PushFollow(Follow._func_args_in_func_def1068);
				args=func_args();
				PopFollow();

				DebugLocation(248, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(249, 2);
			// SugarWalker.g:249:2: (e= stmt_block |f= expr )
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Stmt_Block))
			{
				alt39 = 1;
			}
			else if (((LA39_0>=Expr_Access && LA39_0<=Expr_Where)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||LA39_0==80||LA39_0==83||LA39_0==87||LA39_0==90||LA39_0==94||LA39_0==100||LA39_0==103||LA39_0==108||LA39_0==110||LA39_0==116||LA39_0==119||LA39_0==123||LA39_0==161||LA39_0==DOUBLE))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:249:4: e= stmt_block
				{
				DebugLocation(249, 5);
				PushFollow(Follow._stmt_block_in_func_def1079);
				e=stmt_block();
				PopFollow();

				DebugLocation(250, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:264:4: f= expr
				{
				DebugLocation(264, 5);
				PushFollow(Follow._expr_in_func_def1089);
				f=expr();
				PopFollow();

				DebugLocation(265, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:291:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 23);
		TraceIn("stmt_block", 23);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(291, 4);
		try
		{
			// SugarWalker.g:296:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:296:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(296, 4);
			DebugLocation(296, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1117); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(296, 17);
				// SugarWalker.g:296:17: (a= stmt )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if (((LA40_0>=Expr_Access && LA40_0<=Expr_Where)||LA40_0==IDENT||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||(LA40_0>=Stmt_Defer && LA40_0<=Stmt_While)||LA40_0==80||LA40_0==83||LA40_0==87||LA40_0==90||LA40_0==94||LA40_0==100||LA40_0==103||LA40_0==108||LA40_0==110||LA40_0==116||(LA40_0>=118 && LA40_0<=119)||LA40_0==123||LA40_0==161||LA40_0==DOUBLE))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:296:18: a= stmt
						{
						DebugLocation(296, 19);
						PushFollow(Follow._stmt_in_stmt_block1122);
						a=stmt();
						PopFollow();

						DebugLocation(296, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 23);
			LeaveRule("stmt_block", 23);
			LeaveRule_stmt_block();
		}
		DebugLocation(297, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:299:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 24);
		TraceIn("stmt", 24);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(299, 1);
		try
		{
			// SugarWalker.g:304:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt41=9;
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 80:
			case 83:
			case 87:
			case 90:
			case 94:
			case 100:
			case 108:
			case 110:
			case 116:
			case 119:
			case 123:
			case 161:
			case DOUBLE:
				{
				alt41 = 1;
				}
				break;
			case 103:
				{
				int LA41_2 = input.LA(2);

				if ((LA41_2==DOWN))
				{
					int LA41_11 = input.LA(3);

					if (((LA41_11>=Expr_Access && LA41_11<=Expr_Where)||LA41_11==IDENT||LA41_11==Match_Tuple||LA41_11==NUMBER||LA41_11==STRING||LA41_11==80||LA41_11==83||LA41_11==87||LA41_11==90||LA41_11==94||LA41_11==100||LA41_11==103||LA41_11==108||LA41_11==110||LA41_11==116||LA41_11==119||LA41_11==123||LA41_11==161||LA41_11==DOUBLE))
					{
						alt41 = 1;
					}
					else if ((LA41_11==Ident_List))
					{
						alt41 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 41, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt41 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt41 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt41 = 4;
				}
				break;
			case Stmt_For:
				{
				alt41 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt41 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt41 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt41 = 8;
				}
				break;
			case 118:
				{
				alt41 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:304:4: a= stmt_expr
				{
				DebugLocation(304, 5);
				PushFollow(Follow._stmt_expr_in_stmt1153);
				a=stmt_expr();
				PopFollow();

				DebugLocation(304, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:305:4: a= stmt_return
				{
				DebugLocation(305, 5);
				PushFollow(Follow._stmt_return_in_stmt1162);
				a=stmt_return();
				PopFollow();

				DebugLocation(305, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:306:4: a= stmt_if
				{
				DebugLocation(306, 5);
				PushFollow(Follow._stmt_if_in_stmt1171);
				a=stmt_if();
				PopFollow();

				DebugLocation(306, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:307:4: a= stmt_while
				{
				DebugLocation(307, 5);
				PushFollow(Follow._stmt_while_in_stmt1180);
				a=stmt_while();
				PopFollow();

				DebugLocation(307, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:308:4: a= stmt_for
				{
				DebugLocation(308, 5);
				PushFollow(Follow._stmt_for_in_stmt1189);
				a=stmt_for();
				PopFollow();

				DebugLocation(308, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:309:4: a= stmt_try
				{
				DebugLocation(309, 5);
				PushFollow(Follow._stmt_try_in_stmt1198);
				a=stmt_try();
				PopFollow();

				DebugLocation(309, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:310:4: a= stmt_switch
				{
				DebugLocation(310, 5);
				PushFollow(Follow._stmt_switch_in_stmt1207);
				a=stmt_switch();
				PopFollow();

				DebugLocation(310, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:311:4: a= stmt_defer
				{
				DebugLocation(311, 5);
				PushFollow(Follow._stmt_defer_in_stmt1216);
				a=stmt_defer();
				PopFollow();

				DebugLocation(311, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:312:4: b= stmt_translate
				{
				DebugLocation(312, 5);
				PushFollow(Follow._stmt_translate_in_stmt1225);
				b=stmt_translate();
				PopFollow();

				DebugLocation(312, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 24);
			LeaveRule("stmt", 24);
			LeaveRule_stmt();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:315:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 25);
		TraceIn("stmt_translate", 25);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(315, 1);
		try
		{
			// SugarWalker.g:320:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==118))
			{
				alt42 = 1;
			}
			else if ((LA42_0==103))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:320:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(320, 4);
				DebugLocation(320, 6);
				Match(input,118,Follow._118_in_stmt_translate1248); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(320, 12);
				PushFollow(Follow._expr_in_stmt_translate1252);
				a=expr();
				PopFollow();

				DebugLocation(320, 19);
				PushFollow(Follow._expr_in_stmt_translate1256);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(321, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:327:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(327, 4);
				DebugLocation(327, 6);
				Match(input,103,Follow._103_in_stmt_translate1266); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(327, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1270);
				d=ident_list();
				PopFollow();

				DebugLocation(327, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1274);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(328, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 25);
			LeaveRule("stmt_translate", 25);
			LeaveRule_stmt_translate();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:338:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 26);
		TraceIn("stmt_switch_item_list", 26);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(338, 1);
		try
		{
			// SugarWalker.g:343:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:343:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(343, 4);
			// SugarWalker.g:343:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==Switch_Item))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:344:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(344, 3);
					DebugLocation(344, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1302); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(344, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1306);
					a=expr_list();
					PopFollow();

					DebugLocation(344, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1310);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(345, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 26);
			LeaveRule("stmt_switch_item_list", 26);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:351:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 27);
		TraceIn("stmt_switch", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(351, 1);
		try
		{
			// SugarWalker.g:352:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:352:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(352, 4);
			DebugLocation(352, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1337); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(352, 18);
				// SugarWalker.g:352:18: (a= expr )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if (((LA44_0>=Expr_Access && LA44_0<=Expr_Where)||LA44_0==IDENT||LA44_0==Match_Tuple||LA44_0==NUMBER||LA44_0==STRING||LA44_0==80||LA44_0==83||LA44_0==87||LA44_0==90||LA44_0==94||LA44_0==100||LA44_0==103||LA44_0==108||LA44_0==110||LA44_0==116||LA44_0==119||LA44_0==123||LA44_0==161||LA44_0==DOUBLE))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:352:19: a= expr
					{
					DebugLocation(352, 20);
					PushFollow(Follow._expr_in_stmt_switch1342);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(352, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1348);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(352, 52);
				// SugarWalker.g:352:52: (c= stmt_block )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==Stmt_Block))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:352:53: c= stmt_block
					{
					DebugLocation(352, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1353);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(353, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 27);
			LeaveRule("stmt_switch", 27);
			LeaveRule_stmt_switch();
		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:358:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 28);
		TraceIn("stmt_defer", 28);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(358, 1);
		try
		{
			// SugarWalker.g:359:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==Stmt_Defer))
			{
				alt46 = 1;
			}
			else if ((LA46_0==Stmt_Finally))
			{
				alt46 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:359:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(359, 4);
				DebugLocation(359, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1375); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(359, 18);
				PushFollow(Follow._stmt_in_stmt_defer1379);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(360, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:363:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(363, 4);
				DebugLocation(363, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1389); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(363, 20);
				PushFollow(Follow._stmt_in_stmt_defer1393);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(364, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 28);
			LeaveRule("stmt_defer", 28);
			LeaveRule_stmt_defer();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:369:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 29);
		TraceIn("stmt_expr", 29);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(369, 1);
		try
		{
			// SugarWalker.g:370:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt47=3;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt47 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 80:
			case 83:
			case 87:
			case 90:
			case 94:
			case 100:
			case 103:
			case 108:
			case 110:
			case 116:
			case 119:
			case 123:
			case 161:
			case DOUBLE:
				{
				alt47 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:370:4: a= stmt_using
				{
				DebugLocation(370, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1414);
				a=stmt_using();
				PopFollow();

				DebugLocation(370, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:371:4: b= expr
				{
				DebugLocation(371, 5);
				PushFollow(Follow._expr_in_stmt_expr1423);
				b=expr();
				PopFollow();

				DebugLocation(371, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:372:4: c= stmt_typedef
				{
				DebugLocation(372, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1432);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(372, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 29);
			LeaveRule("stmt_expr", 29);
			LeaveRule_stmt_expr();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:375:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 30);
		TraceIn("stmt_using", 30);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(375, 1);
		try
		{
			// SugarWalker.g:380:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:380:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(380, 4);
			DebugLocation(380, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1455); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(380, 17);
				// SugarWalker.g:380:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=3;
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==IDENT))
					{
						alt48 = 1;
					}
					else if ((LA48_0==142))
					{
						alt48 = 2;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:380:19: a= ident
						{
						DebugLocation(380, 20);
						PushFollow(Follow._ident_in_stmt_using1461);
						a=ident();
						PopFollow();

						DebugLocation(380, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:381:10: b= 'namespace'
						{
						DebugLocation(381, 11);
						b=(CommonTree)Match(input,142,Follow._142_in_stmt_using1476); 
						DebugLocation(381, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 30);
			LeaveRule("stmt_using", 30);
			LeaveRule_stmt_using();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:384:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 31);
		TraceIn("stmt_typedef", 31);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(384, 1);
		try
		{
			// SugarWalker.g:385:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:385:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(385, 4);
			DebugLocation(385, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1497); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(385, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1501);
			a=type_name();
			PopFollow();

			DebugLocation(385, 32);
			PushFollow(Follow._ident_in_stmt_typedef1505);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(386, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 31);
			LeaveRule("stmt_typedef", 31);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:391:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 32);
		TraceIn("stmt_alloc", 32);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(391, 1);
		try
		{
			// SugarWalker.g:392:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:392:4: a= expr
			{
			DebugLocation(392, 5);
			PushFollow(Follow._expr_in_stmt_alloc1526);
			a=expr();
			PopFollow();

			DebugLocation(392, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 32);
			LeaveRule("stmt_alloc", 32);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:395:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 33);
		TraceIn("stmt_if", 33);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(395, 1);
		try
		{
			// SugarWalker.g:396:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==Stmt_If))
			{
				alt51 = 1;
			}
			else if ((LA51_0==Stmt_Unless))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:396:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(396, 4);
				DebugLocation(396, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1544); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(396, 15);
				PushFollow(Follow._expr_in_stmt_if1548);
				a=expr();
				PopFollow();

				DebugLocation(396, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1552);
				b=stmt_block();
				PopFollow();

				DebugLocation(396, 34);
				// SugarWalker.g:396:34: (c= stmt_block )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==Stmt_Block))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:396:35: c= stmt_block
					{
					DebugLocation(396, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1557);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(397, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:400:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(400, 4);
				DebugLocation(400, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1569); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(400, 19);
				PushFollow(Follow._expr_in_stmt_if1573);
				a=expr();
				PopFollow();

				DebugLocation(400, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1577);
				b=stmt_block();
				PopFollow();

				DebugLocation(400, 38);
				// SugarWalker.g:400:38: (c= stmt_block )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==Stmt_Block))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:400:39: c= stmt_block
					{
					DebugLocation(400, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1582);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(401, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 33);
			LeaveRule("stmt_if", 33);
			LeaveRule_stmt_if();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:406:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 34);
		TraceIn("stmt_while", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(406, 1);
		try
		{
			// SugarWalker.g:407:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt53=3;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt53 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt53 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt53 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:407:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(407, 4);
				DebugLocation(407, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1604); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(407, 18);
				PushFollow(Follow._expr_in_stmt_while1608);
				a=expr();
				PopFollow();

				DebugLocation(407, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1612);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(408, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:411:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(411, 4);
				DebugLocation(411, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1622); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(411, 18);
				PushFollow(Follow._expr_in_stmt_while1626);
				a=expr();
				PopFollow();

				DebugLocation(411, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1630);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(412, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:415:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(415, 4);
				DebugLocation(415, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1640); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(415, 16);
				// SugarWalker.g:415:16: (a= expr )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if (((LA52_0>=Expr_Access && LA52_0<=Expr_Where)||LA52_0==IDENT||LA52_0==Match_Tuple||LA52_0==NUMBER||LA52_0==STRING||LA52_0==80||LA52_0==83||LA52_0==87||LA52_0==90||LA52_0==94||LA52_0==100||LA52_0==103||LA52_0==108||LA52_0==110||LA52_0==116||LA52_0==119||LA52_0==123||LA52_0==161||LA52_0==DOUBLE))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:415:17: a= expr
					{
					DebugLocation(415, 18);
					PushFollow(Follow._expr_in_stmt_while1645);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(415, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1651);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(416, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 34);
			LeaveRule("stmt_while", 34);
			LeaveRule_stmt_while();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:433:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 35);
		TraceIn("for_item", 35);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(433, 1);
		try
		{
			// SugarWalker.g:434:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt56=4;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt56 = 1;
				}
				break;
			case For_Item_Down_To:
				{
				alt56 = 2;
				}
				break;
			case For_Item_Each:
				{
				alt56 = 3;
				}
				break;
			case For_Item_When:
				{
				alt56 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:434:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(434, 4);
				DebugLocation(434, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1671); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(434, 19);
				PushFollow(Follow._ident_in_for_item1675);
				a=ident();
				PopFollow();

				DebugLocation(434, 27);
				PushFollow(Follow._expr_in_for_item1679);
				b=expr();
				PopFollow();

				DebugLocation(434, 34);
				PushFollow(Follow._expr_in_for_item1683);
				c=expr();
				PopFollow();

				DebugLocation(434, 40);
				// SugarWalker.g:434:40: (d= expr )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if (((LA54_0>=Expr_Access && LA54_0<=Expr_Where)||LA54_0==IDENT||LA54_0==Match_Tuple||LA54_0==NUMBER||LA54_0==STRING||LA54_0==80||LA54_0==83||LA54_0==87||LA54_0==90||LA54_0==94||LA54_0==100||LA54_0==103||LA54_0==108||LA54_0==110||LA54_0==116||LA54_0==119||LA54_0==123||LA54_0==161||LA54_0==DOUBLE))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:434:41: d= expr
					{
					DebugLocation(434, 42);
					PushFollow(Follow._expr_in_for_item1688);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(435, 2);

						value = new ForItemTo(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:438:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(438, 4);
				DebugLocation(438, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1700); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(438, 24);
				PushFollow(Follow._ident_in_for_item1704);
				a=ident();
				PopFollow();

				DebugLocation(438, 32);
				PushFollow(Follow._expr_in_for_item1708);
				b=expr();
				PopFollow();

				DebugLocation(438, 39);
				PushFollow(Follow._expr_in_for_item1712);
				c=expr();
				PopFollow();

				DebugLocation(438, 45);
				// SugarWalker.g:438:45: (d= expr )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=Expr_Access && LA55_0<=Expr_Where)||LA55_0==IDENT||LA55_0==Match_Tuple||LA55_0==NUMBER||LA55_0==STRING||LA55_0==80||LA55_0==83||LA55_0==87||LA55_0==90||LA55_0==94||LA55_0==100||LA55_0==103||LA55_0==108||LA55_0==110||LA55_0==116||LA55_0==119||LA55_0==123||LA55_0==161||LA55_0==DOUBLE))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:438:46: d= expr
					{
					DebugLocation(438, 47);
					PushFollow(Follow._expr_in_for_item1717);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(439, 2);

						value = new ForItemDownTo(a, b, c, d);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:442:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(442, 4);
				DebugLocation(442, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1729); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(442, 21);
				PushFollow(Follow._ident_in_for_item1733);
				a=ident();
				PopFollow();

				DebugLocation(442, 29);
				PushFollow(Follow._expr_in_for_item1737);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(443, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:446:4: ^( For_Item_When b= expr )
				{
				DebugLocation(446, 4);
				DebugLocation(446, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1747); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(446, 21);
				PushFollow(Follow._expr_in_for_item1751);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(447, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 35);
			LeaveRule("for_item", 35);
			LeaveRule_for_item();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:452:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 36);
		TraceIn("for_item_list", 36);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(452, 1);
		try
		{
			// SugarWalker.g:457:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:457:4: (a= for_item )+
			{
			DebugLocation(457, 4);
			// SugarWalker.g:457:4: (a= for_item )+
			int cnt57=0;
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if (((LA57_0>=For_Item_Down_To && LA57_0<=For_Item_When)))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:457:5: a= for_item
					{
					DebugLocation(457, 6);
					PushFollow(Follow._for_item_in_for_item_list1778);
					a=for_item();
					PopFollow();

					DebugLocation(457, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt57 >= 1)
						goto loop57;

					EarlyExitException eee57 = new EarlyExitException( 57, input );
					DebugRecognitionException(eee57);
					throw eee57;
				}
				cnt57++;
			}
			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 36);
			LeaveRule("for_item_list", 36);
			LeaveRule_for_item_list();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:460:1: stmt_for returns [Stmt value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 37);
		TraceIn("stmt_for", 37);
		Stmt value = default(Stmt);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(460, 1);
		try
		{
			// SugarWalker.g:461:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:461:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(461, 4);
			DebugLocation(461, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1799); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(461, 16);
			PushFollow(Follow._for_item_list_in_stmt_for1803);
			a=for_item_list();
			PopFollow();

			DebugLocation(461, 32);
			PushFollow(Follow._stmt_block_in_stmt_for1807);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(462, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 37);
			LeaveRule("stmt_for", 37);
			LeaveRule_stmt_for();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:467:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 38);
		TraceIn("stmt_try", 38);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(467, 1);
		try
		{
			// SugarWalker.g:468:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:468:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(468, 4);
			DebugLocation(468, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1827); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(468, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1831);
			a=stmt_block();
			PopFollow();

			DebugLocation(468, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try1835);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(468, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1839);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(469, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 38);
			LeaveRule("stmt_try", 38);
			LeaveRule_stmt_try();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:474:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 39);
		TraceIn("stmt_return", 39);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(474, 1);
		try
		{
			// SugarWalker.g:475:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:475:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(475, 4);
			DebugLocation(475, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1859); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(475, 18);
				// SugarWalker.g:475:18: (a= expr )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=Expr_Access && LA58_0<=Expr_Where)||LA58_0==IDENT||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==80||LA58_0==83||LA58_0==87||LA58_0==90||LA58_0==94||LA58_0==100||LA58_0==103||LA58_0==108||LA58_0==110||LA58_0==116||LA58_0==119||LA58_0==123||LA58_0==161||LA58_0==DOUBLE))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:475:19: a= expr
					{
					DebugLocation(475, 20);
					PushFollow(Follow._expr_in_stmt_return1864);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(476, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 39);
			LeaveRule("stmt_return", 39);
			LeaveRule_stmt_return();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:481:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 40);
		TraceIn("ident", 40);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(481, 1);
		try
		{
			// SugarWalker.g:486:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:486:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(486, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1892); 
			DebugLocation(486, 12);
			 value += a.Text; 
			DebugLocation(486, 34);
			// SugarWalker.g:486:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==102))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:486:35: '::' a= IDENT
					{
					DebugLocation(486, 35);
					Match(input,102,Follow._102_in_ident1897); 
					DebugLocation(486, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1901); 
					DebugLocation(486, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(487, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 40);
			LeaveRule("ident", 40);
			LeaveRule_ident();
		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:492:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 41);
		TraceIn("ident_list", 41);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(492, 1);
		try
		{
			// SugarWalker.g:497:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:497:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(497, 4);
			DebugLocation(497, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1929); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(497, 17);
				// SugarWalker.g:497:17: (a= ident )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==IDENT))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:497:18: a= ident
						{
						DebugLocation(497, 19);
						PushFollow(Follow._ident_in_ident_list1934);
						a=ident();
						PopFollow();

						DebugLocation(497, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 41);
			LeaveRule("ident_list", 41);
			LeaveRule_ident_list();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:500:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 42);
		TraceIn("alloc_expr", 42);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(500, 1);
		try
		{
			// SugarWalker.g:501:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==Expr_Alloc_Equal))
			{
				alt63 = 1;
			}
			else if ((LA63_0==Expr_Alloc_Bracket))
			{
				alt63 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:501:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(501, 4);
				DebugLocation(501, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1956); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(501, 24);
				PushFollow(Follow._type_name_in_alloc_expr1960);
				a=type_name();
				PopFollow();

				DebugLocation(501, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1964);
				b=ident_list();
				PopFollow();

				DebugLocation(501, 48);
				// SugarWalker.g:501:48: (c= expr_list )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if (((LA61_0>=Expr_Access && LA61_0<=Expr_Where)||LA61_0==IDENT||LA61_0==Match_Tuple||LA61_0==NUMBER||LA61_0==STRING||LA61_0==80||LA61_0==83||LA61_0==87||LA61_0==90||LA61_0==94||LA61_0==100||LA61_0==103||LA61_0==108||LA61_0==110||LA61_0==116||LA61_0==119||LA61_0==123||LA61_0==161||LA61_0==DOUBLE))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:501:49: c= expr_list
					{
					DebugLocation(501, 50);
					PushFollow(Follow._expr_list_in_alloc_expr1969);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(502, 2);

						if (c != null)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:512:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(512, 4);
				DebugLocation(512, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1981); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(512, 26);
				PushFollow(Follow._type_name_in_alloc_expr1985);
				a=type_name();
				PopFollow();

				DebugLocation(512, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1989);
				b=ident_list();
				PopFollow();

				DebugLocation(512, 50);
				// SugarWalker.g:512:50: (c= expr_list )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if (((LA62_0>=Expr_Access && LA62_0<=Expr_Where)||LA62_0==IDENT||LA62_0==Match_Tuple||LA62_0==NUMBER||LA62_0==STRING||LA62_0==80||LA62_0==83||LA62_0==87||LA62_0==90||LA62_0==94||LA62_0==100||LA62_0==103||LA62_0==108||LA62_0==110||LA62_0==116||LA62_0==119||LA62_0==123||LA62_0==161||LA62_0==DOUBLE))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:512:51: c= expr_list
					{
					DebugLocation(512, 52);
					PushFollow(Follow._expr_list_in_alloc_expr1994);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(513, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 42);
			LeaveRule("alloc_expr", 42);
			LeaveRule_alloc_expr();
		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:518:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 43);
		TraceIn("expr_tuple", 43);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(518, 1);
		try
		{
			// SugarWalker.g:523:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:523:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(523, 4);
			DebugLocation(523, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2021); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(523, 17);
			// SugarWalker.g:523:17: (a= expr )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if (((LA64_0>=Expr_Access && LA64_0<=Expr_Where)||LA64_0==IDENT||LA64_0==Match_Tuple||LA64_0==NUMBER||LA64_0==STRING||LA64_0==80||LA64_0==83||LA64_0==87||LA64_0==90||LA64_0==94||LA64_0==100||LA64_0==103||LA64_0==108||LA64_0==110||LA64_0==116||LA64_0==119||LA64_0==123||LA64_0==161||LA64_0==DOUBLE))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:523:18: a= expr
					{
					DebugLocation(523, 19);
					PushFollow(Follow._expr_in_expr_tuple2026);
					a=expr();
					PopFollow();

					DebugLocation(523, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 43);
			LeaveRule("expr_tuple", 43);
			LeaveRule_expr_tuple();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:526:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 44);
		TraceIn("match_tuple", 44);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(526, 1);
		try
		{
			// SugarWalker.g:531:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:531:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(531, 4);
			DebugLocation(531, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2053); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(531, 18);
				// SugarWalker.g:531:18: (a= expr )*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if (((LA65_0>=Expr_Access && LA65_0<=Expr_Where)||LA65_0==IDENT||LA65_0==Match_Tuple||LA65_0==NUMBER||LA65_0==STRING||LA65_0==80||LA65_0==83||LA65_0==87||LA65_0==90||LA65_0==94||LA65_0==100||LA65_0==103||LA65_0==108||LA65_0==110||LA65_0==116||LA65_0==119||LA65_0==123||LA65_0==161||LA65_0==DOUBLE))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:531:19: a= expr
						{
						DebugLocation(531, 20);
						PushFollow(Follow._expr_in_match_tuple2058);
						a=expr();
						PopFollow();

						DebugLocation(531, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 44);
			LeaveRule("match_tuple", 44);
			LeaveRule_match_tuple();
		}
		DebugLocation(532, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:534:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 45);
		TraceIn("expr_list", 45);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(534, 1);
		try
		{
			// SugarWalker.g:539:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:539:4: (a= expr )+
			{
			DebugLocation(539, 4);
			// SugarWalker.g:539:4: (a= expr )+
			int cnt66=0;
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if (((LA66_0>=Expr_Access && LA66_0<=Expr_Where)||LA66_0==IDENT||LA66_0==Match_Tuple||LA66_0==NUMBER||LA66_0==STRING||LA66_0==80||LA66_0==83||LA66_0==87||LA66_0==90||LA66_0==94||LA66_0==100||LA66_0==103||LA66_0==108||LA66_0==110||LA66_0==116||LA66_0==119||LA66_0==123||LA66_0==161||LA66_0==DOUBLE))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:539:5: a= expr
					{
					DebugLocation(539, 6);
					PushFollow(Follow._expr_in_expr_list2086);
					a=expr();
					PopFollow();

					DebugLocation(539, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt66 >= 1)
						goto loop66;

					EarlyExitException eee66 = new EarlyExitException( 66, input );
					DebugRecognitionException(eee66);
					throw eee66;
				}
				cnt66++;
			}
			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 45);
			LeaveRule("expr_list", 45);
			LeaveRule_expr_list();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:542:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 46);
		TraceIn("call_expr", 46);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(542, 1);
		try
		{
			// SugarWalker.g:543:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:543:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(543, 4);
			DebugLocation(543, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2106); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(543, 17);
			PushFollow(Follow._expr_in_call_expr2110);
			a=expr();
			PopFollow();

			DebugLocation(543, 23);
			// SugarWalker.g:543:23: (b= generic_parameter )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==Generic_Patameters))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:543:24: b= generic_parameter
				{
				DebugLocation(543, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2115);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(543, 46);
			// SugarWalker.g:543:46: (c= expr_list )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if (((LA68_0>=Expr_Access && LA68_0<=Expr_Where)||LA68_0==IDENT||LA68_0==Match_Tuple||LA68_0==NUMBER||LA68_0==STRING||LA68_0==80||LA68_0==83||LA68_0==87||LA68_0==90||LA68_0==94||LA68_0==100||LA68_0==103||LA68_0==108||LA68_0==110||LA68_0==116||LA68_0==119||LA68_0==123||LA68_0==161||LA68_0==DOUBLE))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:543:47: c= expr_list
				{
				DebugLocation(543, 48);
				PushFollow(Follow._expr_list_in_call_expr2122);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(544, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 46);
			LeaveRule("call_expr", 46);
			LeaveRule_call_expr();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:549:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 47);
		TraceIn("dict_expr", 47);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(549, 1);
		try
		{
			// SugarWalker.g:550:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:550:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(550, 4);
			DebugLocation(550, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2144); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(550, 17);
			PushFollow(Follow._expr_in_dict_expr2148);
			a=expr();
			PopFollow();

			DebugLocation(550, 23);
			// SugarWalker.g:550:23: (b= expr_list )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if (((LA69_0>=Expr_Access && LA69_0<=Expr_Where)||LA69_0==IDENT||LA69_0==Match_Tuple||LA69_0==NUMBER||LA69_0==STRING||LA69_0==80||LA69_0==83||LA69_0==87||LA69_0==90||LA69_0==94||LA69_0==100||LA69_0==103||LA69_0==108||LA69_0==110||LA69_0==116||LA69_0==119||LA69_0==123||LA69_0==161||LA69_0==DOUBLE))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:550:24: b= expr_list
				{
				DebugLocation(550, 25);
				PushFollow(Follow._expr_list_in_dict_expr2153);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(69); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(551, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 47);
			LeaveRule("dict_expr", 47);
			LeaveRule_dict_expr();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:556:1: lambda_expr returns [ExprLambda value] : ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) );
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 48);
		TraceIn("lambda_expr", 48);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(556, 1);
		try
		{
			// SugarWalker.g:557:2: ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==Expr_Lambda))
			{
				int LA72_1 = input.LA(2);

				if ((LA72_1==DOWN))
				{
					int LA72_2 = input.LA(3);

					if ((LA72_2==95))
					{
						alt72 = 1;
					}
					else if ((LA72_2==112))
					{
						alt72 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 72, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:557:4: ^( Expr_Lambda '->' (b= func_args )? a= expr )
				{
				DebugLocation(557, 4);
				DebugLocation(557, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2175); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(557, 18);
				Match(input,95,Follow._95_in_lambda_expr2177); 
				DebugLocation(557, 23);
				// SugarWalker.g:557:23: (b= func_args )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==Func_Args))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:557:24: b= func_args
					{
					DebugLocation(557, 25);
					PushFollow(Follow._func_args_in_lambda_expr2182);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(557, 39);
				PushFollow(Follow._expr_in_lambda_expr2188);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(558, 2);

						value = new ExprLambda(a, b, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:561:4: ^( Expr_Lambda '=>' (b= func_args )? a= expr )
				{
				DebugLocation(561, 4);
				DebugLocation(561, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2198); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(561, 18);
				Match(input,112,Follow._112_in_lambda_expr2200); 
				DebugLocation(561, 23);
				// SugarWalker.g:561:23: (b= func_args )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==Func_Args))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:561:24: b= func_args
					{
					DebugLocation(561, 25);
					PushFollow(Follow._func_args_in_lambda_expr2205);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(561, 39);
				PushFollow(Follow._expr_in_lambda_expr2211);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(562, 2);

						value = new ExprLambda(a, b, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 48);
			LeaveRule("lambda_expr", 48);
			LeaveRule_lambda_expr();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:567:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 49);
		TraceIn("new_expr", 49);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarWalker.g:568:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==Expr_New_Type))
			{
				alt74 = 1;
			}
			else if ((LA74_0==Expr_New_Array))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:568:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(568, 4);
				DebugLocation(568, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2231); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(568, 21);
				PushFollow(Follow._type_name_in_new_expr2235);
				a=type_name();
				PopFollow();

				DebugLocation(568, 33);
				// SugarWalker.g:568:33: (b= expr_list )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if (((LA73_0>=Expr_Access && LA73_0<=Expr_Where)||LA73_0==IDENT||LA73_0==Match_Tuple||LA73_0==NUMBER||LA73_0==STRING||LA73_0==80||LA73_0==83||LA73_0==87||LA73_0==90||LA73_0==94||LA73_0==100||LA73_0==103||LA73_0==108||LA73_0==110||LA73_0==116||LA73_0==119||LA73_0==123||LA73_0==161||LA73_0==DOUBLE))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:568:33: b= expr_list
					{
					DebugLocation(568, 33);
					PushFollow(Follow._expr_list_in_new_expr2239);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(569, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:572:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(572, 4);
				DebugLocation(572, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2250); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(572, 22);
				PushFollow(Follow._type_name_in_new_expr2254);
				a=type_name();
				PopFollow();

				DebugLocation(572, 34);
				PushFollow(Follow._expr_list_in_new_expr2258);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(573, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 49);
			LeaveRule("new_expr", 49);
			LeaveRule_new_expr();
		}
		DebugLocation(576, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:578:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 50);
		TraceIn("call_with_expr", 50);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(578, 1);
		try
		{
			// SugarWalker.g:579:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:579:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(579, 4);
			DebugLocation(579, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2278); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(579, 22);
			PushFollow(Follow._expr_in_call_with_expr2282);
			a=expr();
			PopFollow();

			DebugLocation(579, 29);
			PushFollow(Follow._ident_in_call_with_expr2286);
			b=ident();
			PopFollow();

			DebugLocation(579, 37);
			// SugarWalker.g:579:37: (c= expr_list )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if (((LA75_0>=Expr_Access && LA75_0<=Expr_Where)||LA75_0==IDENT||LA75_0==Match_Tuple||LA75_0==NUMBER||LA75_0==STRING||LA75_0==80||LA75_0==83||LA75_0==87||LA75_0==90||LA75_0==94||LA75_0==100||LA75_0==103||LA75_0==108||LA75_0==110||LA75_0==116||LA75_0==119||LA75_0==123||LA75_0==161||LA75_0==DOUBLE))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:579:37: c= expr_list
				{
				DebugLocation(579, 37);
				PushFollow(Follow._expr_list_in_call_with_expr2290);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(75); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(580, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 50);
			LeaveRule("call_with_expr", 50);
			LeaveRule_call_with_expr();
		}
		DebugLocation(592, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:594:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 51);
		TraceIn("cast_expr", 51);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(594, 1);
		try
		{
			// SugarWalker.g:595:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:595:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(595, 4);
			DebugLocation(595, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2311); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(595, 17);
			PushFollow(Follow._type_name_in_cast_expr2315);
			a=type_name();
			PopFollow();

			DebugLocation(595, 29);
			PushFollow(Follow._expr_in_cast_expr2319);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(596, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 51);
			LeaveRule("cast_expr", 51);
			LeaveRule_cast_expr();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:601:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr_list )? ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 52);
		TraceIn("list_expr", 52);
		ExprList value = default(ExprList);


		List<Expr> a = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(601, 1);
		try
		{
			// SugarWalker.g:602:2: ( ^( Expr_List (a= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:602:4: ^( Expr_List (a= expr_list )? )
			{
			DebugLocation(602, 4);
			DebugLocation(602, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2339); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(602, 17);
				// SugarWalker.g:602:17: (a= expr_list )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if (((LA76_0>=Expr_Access && LA76_0<=Expr_Where)||LA76_0==IDENT||LA76_0==Match_Tuple||LA76_0==NUMBER||LA76_0==STRING||LA76_0==80||LA76_0==83||LA76_0==87||LA76_0==90||LA76_0==94||LA76_0==100||LA76_0==103||LA76_0==108||LA76_0==110||LA76_0==116||LA76_0==119||LA76_0==123||LA76_0==161||LA76_0==DOUBLE))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:602:17: a= expr_list
					{
					DebugLocation(602, 17);
					PushFollow(Follow._expr_list_in_list_expr2343);
					a=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(603, 2);

					value = new ExprList(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 52);
			LeaveRule("list_expr", 52);
			LeaveRule_list_expr();
		}
		DebugLocation(606, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:608:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 53);
		TraceIn("chain_expr", 53);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(608, 1);
		try
		{
			// SugarWalker.g:613:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:613:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(613, 4);
			DebugLocation(613, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2369); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(614, 5);
			PushFollow(Follow._expr_in_chain_expr2376);
			a=expr();
			PopFollow();

			DebugLocation(615, 4);

							last=a;
						
			DebugLocation(618, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==105||input.LA(1)==109||input.LA(1)==111||(input.LA(1)>=113 && input.LA(1)<=114)||(input.LA(1)>=139 && input.LA(1)<=140))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(618, 64);
			PushFollow(Follow._expr_in_chain_expr2422);
			a=expr();
			PopFollow();

			DebugLocation(619, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(623, 4);
			// SugarWalker.g:623:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==78||LA77_0==105||LA77_0==109||LA77_0==111||(LA77_0>=113 && LA77_0<=114)||(LA77_0>=139 && LA77_0<=140)))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:624:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(624, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==78||input.LA(1)==105||input.LA(1)==109||input.LA(1)==111||(input.LA(1)>=113 && input.LA(1)<=114)||(input.LA(1)>=139 && input.LA(1)<=140))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(624, 65);
					PushFollow(Follow._expr_in_chain_expr2474);
					a=expr();
					PopFollow();

					DebugLocation(625, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 53);
			LeaveRule("chain_expr", 53);
			LeaveRule_chain_expr();
		}
		DebugLocation(630, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:632:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 54);
		TraceIn("where_expr", 54);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(632, 1);
		try
		{
			// SugarWalker.g:637:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:637:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(637, 4);
			DebugLocation(637, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2508); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(637, 18);
			PushFollow(Follow._expr_in_where_expr2512);
			a=expr();
			PopFollow();

			DebugLocation(637, 24);
			// SugarWalker.g:637:24: (b= stmt )+
			int cnt78=0;
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if (((LA78_0>=Expr_Access && LA78_0<=Expr_Where)||LA78_0==IDENT||LA78_0==Match_Tuple||LA78_0==NUMBER||LA78_0==STRING||(LA78_0>=Stmt_Defer && LA78_0<=Stmt_While)||LA78_0==80||LA78_0==83||LA78_0==87||LA78_0==90||LA78_0==94||LA78_0==100||LA78_0==103||LA78_0==108||LA78_0==110||LA78_0==116||(LA78_0>=118 && LA78_0<=119)||LA78_0==123||LA78_0==161||LA78_0==DOUBLE))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:637:25: b= stmt
					{
					DebugLocation(637, 26);
					PushFollow(Follow._stmt_in_where_expr2517);
					b=stmt();
					PopFollow();

					DebugLocation(637, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt78 >= 1)
						goto loop78;

					EarlyExitException eee78 = new EarlyExitException( 78, input );
					DebugRecognitionException(eee78);
					throw eee78;
				}
				cnt78++;
			}
			loop78:
				;

			} finally { DebugExitSubRule(78); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(638, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 54);
			LeaveRule("where_expr", 54);
			LeaveRule_where_expr();
		}
		DebugLocation(641, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:643:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr |where= where_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 55);
		TraceIn("expr", 55);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(643, 1);
		try
		{
			// SugarWalker.g:644:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr |where= where_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt79=27;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt79 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt79 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt79 = 3;
				}
				break;
			case Expr_Call:
				{
				alt79 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt79 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt79 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt79 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt79 = 8;
				}
				break;
			case Expr_List:
				{
				alt79 = 9;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt79 = 10;
				}
				break;
			case Expr_Where:
				{
				alt79 = 11;
				}
				break;
			case Expr_Infix:
				{
				alt79 = 12;
				}
				break;
			case Expr_Cond:
				{
				alt79 = 13;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt79 = 14;
				}
				break;
			case Expr_Not_Null:
				{
				alt79 = 15;
				}
				break;
			case Expr_Access:
				{
				alt79 = 16;
				}
				break;
			case Expr_Chain:
				{
				alt79 = 17;
				}
				break;
			case Expr_Bin:
				{
				alt79 = 18;
				}
				break;
			case 80:
			case 83:
			case 87:
			case 90:
			case 94:
			case 100:
			case 108:
			case 110:
			case 116:
			case 123:
			case 161:
				{
				alt79 = 19;
				}
				break;
			case 119:
				{
				alt79 = 20;
				}
				break;
			case Expr_Bracket:
				{
				alt79 = 21;
				}
				break;
			case Expr_Suffix:
				{
				alt79 = 22;
				}
				break;
			case Expr_Prefix:
				{
				alt79 = 23;
				}
				break;
			case 103:
				{
				alt79 = 24;
				}
				break;
			case IDENT:
				{
				alt79 = 25;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt79 = 26;
				}
				break;
			case STRING:
				{
				alt79 = 27;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:644:7: tuple= expr_tuple
				{
				DebugLocation(644, 12);
				PushFollow(Follow._expr_tuple_in_expr2546);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(645, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:648:4: alloc= alloc_expr
				{
				DebugLocation(648, 9);
				PushFollow(Follow._alloc_expr_in_expr2556);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(649, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:652:4: match= match_tuple
				{
				DebugLocation(652, 9);
				PushFollow(Follow._match_tuple_in_expr2566);
				match=match_tuple();
				PopFollow();

				DebugLocation(653, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:656:4: call= call_expr
				{
				DebugLocation(656, 8);
				PushFollow(Follow._call_expr_in_expr2576);
				call=call_expr();
				PopFollow();

				DebugLocation(657, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:660:4: call_with= call_with_expr
				{
				DebugLocation(660, 13);
				PushFollow(Follow._call_with_expr_in_expr2586);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(661, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:664:4: dict= dict_expr
				{
				DebugLocation(664, 8);
				PushFollow(Follow._dict_expr_in_expr2596);
				dict=dict_expr();
				PopFollow();

				DebugLocation(665, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:668:4: lambda= lambda_expr
				{
				DebugLocation(668, 10);
				PushFollow(Follow._lambda_expr_in_expr2606);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(669, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:672:4: cast= cast_expr
				{
				DebugLocation(672, 8);
				PushFollow(Follow._cast_expr_in_expr2616);
				cast=cast_expr();
				PopFollow();

				DebugLocation(673, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:676:4: list= list_expr
				{
				DebugLocation(676, 8);
				PushFollow(Follow._list_expr_in_expr2626);
				list=list_expr();
				PopFollow();

				DebugLocation(677, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:680:4: expr_new= new_expr
				{
				DebugLocation(680, 12);
				PushFollow(Follow._new_expr_in_expr2636);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(681, 2);

						value = expr_new;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:684:4: where= where_expr
				{
				DebugLocation(684, 9);
				PushFollow(Follow._where_expr_in_expr2646);
				where=where_expr();
				PopFollow();

				DebugLocation(685, 2);

						value = where;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:688:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(688, 4);
				DebugLocation(688, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr2655); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(688, 27);
				PushFollow(Follow._ident_in_expr2659);
				ident_text=ident();
				PopFollow();

				DebugLocation(688, 35);
				PushFollow(Follow._expr_in_expr2663);
				a=expr();
				PopFollow();

				DebugLocation(688, 42);
				PushFollow(Follow._expr_in_expr2667);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(689, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:692:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(692, 4);
				DebugLocation(692, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2677); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(692, 17);
				PushFollow(Follow._expr_in_expr2681);
				a=expr();
				PopFollow();

				DebugLocation(692, 24);
				PushFollow(Follow._expr_in_expr2685);
				b=expr();
				PopFollow();

				DebugLocation(692, 31);
				PushFollow(Follow._expr_in_expr2689);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(693, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:696:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(696, 4);
				DebugLocation(696, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr2699); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(696, 26);
				PushFollow(Follow._expr_in_expr2703);
				a=expr();
				PopFollow();

				DebugLocation(696, 33);
				PushFollow(Follow._expr_in_expr2707);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(697, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:700:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(700, 4);
				DebugLocation(700, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr2717); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(700, 21);
				PushFollow(Follow._expr_in_expr2721);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(701, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:704:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(704, 4);
				DebugLocation(704, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2731); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(704, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=95 && input.LA(1)<=98)||input.LA(1)==102)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(704, 57);
				PushFollow(Follow._expr_in_expr2757);
				a=expr();
				PopFollow();

				DebugLocation(704, 73);
				PushFollow(Follow._ident_in_expr2761);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(705, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:708:4: chain= chain_expr
				{
				DebugLocation(708, 10);
				PushFollow(Follow._chain_expr_in_expr2774);
				chain=chain_expr();
				PopFollow();

				DebugLocation(709, 2);

						value = chain;
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:712:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(712, 4);
				DebugLocation(712, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2783); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(712, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=78 && input.LA(1)<=79)||(input.LA(1)>=81 && input.LA(1)<=82)||input.LA(1)==86||input.LA(1)==88||input.LA(1)==92||input.LA(1)==99||input.LA(1)==105||input.LA(1)==107||input.LA(1)==109||input.LA(1)==111||(input.LA(1)>=113 && input.LA(1)<=115)||input.LA(1)==122||input.LA(1)==125||(input.LA(1)>=139 && input.LA(1)<=140)||input.LA(1)==145||input.LA(1)==160||input.LA(1)==162)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(719, 9);
				PushFollow(Follow._expr_in_expr2914);
				a=expr();
				PopFollow();

				DebugLocation(719, 16);
				PushFollow(Follow._expr_in_expr2918);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(720, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:723:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(723, 4);
				DebugLocation(723, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==80||input.LA(1)==83||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==100||input.LA(1)==108||input.LA(1)==110||input.LA(1)==116||input.LA(1)==123||input.LA(1)==161)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(723, 88);
				PushFollow(Follow._expr_in_expr2976);
				a=expr();
				PopFollow();

				DebugLocation(723, 95);
				PushFollow(Follow._expr_in_expr2980);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(724, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:727:4: ^( '@' text_ident= ident )
				{
				DebugLocation(727, 4);
				DebugLocation(727, 6);
				Match(input,119,Follow._119_in_expr2990); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(727, 20);
				PushFollow(Follow._ident_in_expr2994);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(728, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:731:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(731, 4);
				DebugLocation(731, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3004); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(731, 20);
				PushFollow(Follow._expr_in_expr3008);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(732, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:735:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(735, 4);
				DebugLocation(735, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3018); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(735, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==93)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(735, 36);
				PushFollow(Follow._expr_in_expr3032);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(736, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:739:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(739, 4);
				DebugLocation(739, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3042); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(739, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==77||input.LA(1)==82||input.LA(1)==86||(input.LA(1)>=88 && input.LA(1)<=89)||(input.LA(1)>=92 && input.LA(1)<=93)||input.LA(1)==144||input.LA(1)==163)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(739, 80);
				PushFollow(Follow._expr_in_expr3084);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(740, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:743:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(743, 4);
				DebugLocation(743, 6);
				Match(input,103,Follow._103_in_expr3094); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(743, 12);
				PushFollow(Follow._expr_in_expr3098);
				a=expr();
				PopFollow();

				DebugLocation(743, 19);
				PushFollow(Follow._expr_in_expr3102);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(744, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:751:4: text_ident= ident
				{
				DebugLocation(751, 15);
				PushFollow(Follow._ident_in_expr3115);
				text_ident=ident();
				PopFollow();

				DebugLocation(752, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:756:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(756, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(757, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:760:4: text= STRING
				{
				DebugLocation(760, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3146); 
				DebugLocation(761, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 55);
			LeaveRule("expr", 55);
			LeaveRule_expr();
		}
		DebugLocation(764, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x8208000006848UL,0x8000000012UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x4000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_global_using281 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x4000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0xF80UL});
		public static readonly BitSet _type_name_in_global_alloc318 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc322 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_global_alloc327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc344 = new BitSet(new ulong[]{0x0UL,0xF80UL});
		public static readonly BitSet _type_name_in_global_alloc350 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc354 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_global_alloc359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _103_in_global_alloc371 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc376 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc382 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_global_alloc386 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef406 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef411 = new BitSet(new ulong[]{0x0UL,0xF80UL});
		public static readonly BitSet _type_name_in_global_typedef417 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef421 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item486 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item491 = new BitSet(new ulong[]{0x84040000000008UL});
		public static readonly BitSet _130_in_attribute_item499 = new BitSet(new ulong[]{0x84040000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item507 = new BitSet(new ulong[]{0x84040000000008UL});
		public static readonly BitSet _attribute_item_in_attribute535 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def556 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def560 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _global_block_in_namespace_def565 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def597 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _STRING_in_import_def607 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _Enum_in_enum_def628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def633 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def639 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_enum_def643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def663 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def668 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def674 = new BitSet(new ulong[]{0x134000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def679 = new BitSet(new ulong[]{0x124000000008UL});
		public static readonly BitSet _func_args_in_class_def686 = new BitSet(new ulong[]{0x120000000008UL});
		public static readonly BitSet _ident_list_in_class_def693 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _global_block_in_class_def700 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident727 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _130_in_type_ident730 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080000UL});
		public static readonly BitSet _154_in_type_ident737 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_type_ident744 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident752 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Template_in_type_template779 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template783 = new BitSet(new ulong[]{0x8UL,0xF80UL});
		public static readonly BitSet _type_name_in_type_template788 = new BitSet(new ulong[]{0x8UL,0xF80UL});
		public static readonly BitSet _Type_Array_in_type_array817 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array821 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_type_array826 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _Type_Star_in_type_star850 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star854 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_type_star856 = new BitSet(new ulong[]{0x8UL,0x400000UL});
		public static readonly BitSet _86_in_type_star861 = new BitSet(new ulong[]{0x8UL,0x400000UL});
		public static readonly BitSet _Type_Ref_in_type_ref883 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref887 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _type_array_in_type_name908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args967 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args972 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter999 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter1004 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _Func_Def_in_func_def1030 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def1035 = new BitSet(new ulong[]{0x40000000000UL,0xF80UL,0x800000000UL});
		public static readonly BitSet _type_name_in_func_def1042 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_func_def1049 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_func_def1055 = new BitSet(new ulong[]{0x1850543FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _generic_parameter_in_func_def1060 = new BitSet(new ulong[]{0x1850443FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _func_args_in_func_def1068 = new BitSet(new ulong[]{0x1850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _stmt_block_in_func_def1079 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1089 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1117 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1122 = new BitSet(new ulong[]{0xFE850403FFFFF008UL,0x8D050904489003FUL,0x1200000000UL});
		public static readonly BitSet _stmt_expr_in_stmt1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_stmt_translate1248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1252 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_stmt_translate1256 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _103_in_stmt_translate1266 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1270 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1274 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1302 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1306 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1310 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1337 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1342 = new BitSet(new ulong[]{0x100000000000008UL,0x40UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1348 = new BitSet(new ulong[]{0x100000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1353 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1375 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1389 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1393 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1455 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1461 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_stmt_using1476 = new BitSet(new ulong[]{0x40000000008UL,0x0UL,0x4000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1497 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1501 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1505 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1544 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1548 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1552 = new BitSet(new ulong[]{0x100000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1557 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1573 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1577 = new BitSet(new ulong[]{0x100000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1582 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1604 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1608 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1612 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1622 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1626 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1630 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1640 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1645 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1651 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1671 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1675 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1679 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1683 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1688 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1700 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1704 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1708 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1712 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1717 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1729 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1733 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_for_item1737 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1747 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1751 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list1778 = new BitSet(new ulong[]{0x3C00000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1799 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for1803 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1807 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1827 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1831 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try1835 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1839 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1859 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1864 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1892 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _102_in_ident1897 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident1901 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1934 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1956 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1960 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1964 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1969 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1981 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1985 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1989 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1994 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2021 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2026 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2053 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2058 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr_list2086 = new BitSet(new ulong[]{0x850403FFFFF002UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _Expr_Call_in_call_expr2106 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2110 = new BitSet(new ulong[]{0x850503FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2115 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_call_expr2122 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2144 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2148 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_dict_expr2153 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2175 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _95_in_lambda_expr2177 = new BitSet(new ulong[]{0x850443FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2182 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_lambda_expr2188 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2198 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _112_in_lambda_expr2200 = new BitSet(new ulong[]{0x850443FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _func_args_in_lambda_expr2205 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_lambda_expr2211 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2231 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2235 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_new_expr2239 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2250 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2254 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_new_expr2258 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2278 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2282 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2286 = new BitSet(new ulong[]{0x850403FFFFF008UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2290 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2311 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2315 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_cast_expr2319 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_list_expr2343 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2369 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2376 = new BitSet(new ulong[]{0x0UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _set_in_chain_expr2388 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_chain_expr2422 = new BitSet(new ulong[]{0x8UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _set_in_chain_expr2440 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_chain_expr2474 = new BitSet(new ulong[]{0x8UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _Expr_Where_in_where_expr2508 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2512 = new BitSet(new ulong[]{0xFE850403FFFFF000UL,0x8D050904489003FUL,0x1200000000UL});
		public static readonly BitSet _stmt_in_where_expr2517 = new BitSet(new ulong[]{0xFE850403FFFFF008UL,0x8D050904489003FUL,0x1200000000UL});
		public static readonly BitSet _expr_tuple_in_expr2546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr2655 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2659 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2663 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2667 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2677 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2681 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2685 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2689 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr2699 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2703 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2707 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr2717 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2721 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2731 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2735 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2757 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_expr2761 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr2774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr2783 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2787 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2914 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2918 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2930 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2976 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr2980 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _119_in_expr2990 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2994 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3004 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3008 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3018 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3022 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr3032 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3042 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3046 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr3084 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _103_in_expr3094 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3098 = new BitSet(new ulong[]{0x850403FFFFF000UL,0x890509044890000UL,0x1200000000UL});
		public static readonly BitSet _expr_in_expr3102 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3146 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
