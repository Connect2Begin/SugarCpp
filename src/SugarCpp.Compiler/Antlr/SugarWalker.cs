//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-08-11 17:37:47

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Declare", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'extern'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Declare=43;
	public const int Func_Def=44;
	public const int Generic_Patameters=45;
	public const int Global_Block=46;
	public const int IDENT=47;
	public const int INDENT=48;
	public const int Ident_List=49;
	public const int Import=50;
	public const int Left_Bracket=51;
	public const int LineComment=52;
	public const int Match_Expr=53;
	public const int Match_Expr_Item=54;
	public const int Match_Tuple=55;
	public const int NEWLINE=56;
	public const int NUMBER=57;
	public const int Namespace=58;
	public const int Right_Bracket=59;
	public const int Root=60;
	public const int SP=61;
	public const int STRING=62;
	public const int Stmt_Block=63;
	public const int Stmt_Defer=64;
	public const int Stmt_Finally=65;
	public const int Stmt_For=66;
	public const int Stmt_If=67;
	public const int Stmt_Loop=68;
	public const int Stmt_Return=69;
	public const int Stmt_Switch=70;
	public const int Stmt_Try=71;
	public const int Stmt_Typedef=72;
	public const int Stmt_Unless=73;
	public const int Stmt_Until=74;
	public const int Stmt_Using=75;
	public const int Stmt_While=76;
	public const int Switch_Item=77;
	public const int Type_Array=78;
	public const int Type_Func=79;
	public const int Type_Ident=80;
	public const int Type_List=81;
	public const int Type_Ref=82;
	public const int Type_Star=83;
	public const int Type_Template=84;
	public const int White_Space=85;
	public const int DOUBLE=185;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			if (op == "uint") return "unsigned int";
			if (op == "uchar") return "unsigned char";
			if (op == "schar") return "signed char";
			if (op == "int8") return "int8_t";
			if (op == "int16") return "int16_t";
			if (op == "int32") return "int32_t";
			if (op == "int64") return "int64_t";
			if (op == "uint8") return "uint8_t";
			if (op == "uint16") return "uint16_t";
			if (op == "uint32") return "uint32_t";
			if (op == "uint64") return "uint64_t";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:44:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(44, 1);
		try
		{
			// SugarWalker.g:45:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: ^( Root a= global_block )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(45, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(46, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:51:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(51, 1);
		try
		{
			// SugarWalker.g:56:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:56:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(56, 4);
			DebugLocation(56, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(56, 19);
				// SugarWalker.g:56:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==113))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:56:20: a= node
						{
						DebugLocation(56, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(56, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:59:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(59, 1);
		try
		{
			// SugarWalker.g:64:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 113:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:64:4: a= func_def
				{
				DebugLocation(64, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(64, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:65:4: b= import_def
				{
				DebugLocation(65, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(65, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:66:4: c= enum_def
				{
				DebugLocation(66, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(66, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:67:4: d= class_def
				{
				DebugLocation(67, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(67, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:68:4: e= global_alloc
				{
				DebugLocation(68, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(68, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:69:4: f= global_using
				{
				DebugLocation(69, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(69, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:70:4: g= global_typedef
				{
				DebugLocation(70, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(70, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:71:4: h= namespace_def
				{
				DebugLocation(71, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(71, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:74:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:79:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:79:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(79, 4);
			DebugLocation(79, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using238); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 17);
				// SugarWalker.g:79:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:79:18: attr= attribute
					{
					DebugLocation(79, 22);
					PushFollow(Follow._attribute_in_global_using243);
					attr=attribute();
					PopFollow();

					DebugLocation(79, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(79, 65);
				// SugarWalker.g:79:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==158))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:79:67: a= ident
						{
						DebugLocation(79, 68);
						PushFollow(Follow._ident_in_global_using254);
						a=ident();
						PopFollow();

						DebugLocation(79, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:80:22: b= 'namespace'
						{
						DebugLocation(80, 23);
						b=(CommonTree)Match(input,158,Follow._158_in_global_using281); 
						DebugLocation(80, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:83:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		CommonTree has_extern = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();
			GlobalAlloc item;

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(83, 1);
		try
		{
			// SugarWalker.g:89:2: ( ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list ) )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt11 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt11 = 2;
				}
				break;
			case 113:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:89:4: ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(89, 4);
				DebugLocation(89, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(89, 23);
				// SugarWalker.g:89:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:89:24: attr= attribute
					{
					DebugLocation(89, 28);
					PushFollow(Follow._attribute_in_global_alloc312);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(89, 41);
				// SugarWalker.g:89:41: (has_extern= 'extern' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==146))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:89:42: has_extern= 'extern'
					{
					DebugLocation(89, 52);
					has_extern=(CommonTree)Match(input,146,Follow._146_in_global_alloc319); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(89, 65);
				PushFollow(Follow._type_name_in_global_alloc325);
				a=type_name();
				PopFollow();

				DebugLocation(89, 77);
				PushFollow(Follow._ident_list_in_global_alloc329);
				b=ident_list();
				PopFollow();

				DebugLocation(89, 90);
				PushFollow(Follow._expr_list_in_global_alloc333);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(90, 2);

						if (c != null && c.Count > 0)
						{
							item = new GlobalAlloc(a, b, c, attr, AllocType.Equal);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
						}
						else
						{
							item = new GlobalAlloc(a, b, c, attr, AllocType.Declare);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:104:4: ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(104, 4);
				DebugLocation(104, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc343); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(104, 25);
				// SugarWalker.g:104:25: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:104:26: attr= attribute
					{
					DebugLocation(104, 30);
					PushFollow(Follow._attribute_in_global_alloc348);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(104, 43);
				// SugarWalker.g:104:43: (has_extern= 'extern' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==146))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:104:44: has_extern= 'extern'
					{
					DebugLocation(104, 54);
					has_extern=(CommonTree)Match(input,146,Follow._146_in_global_alloc355); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(104, 67);
				PushFollow(Follow._type_name_in_global_alloc361);
				a=type_name();
				PopFollow();

				DebugLocation(104, 79);
				PushFollow(Follow._ident_list_in_global_alloc365);
				b=ident_list();
				PopFollow();

				DebugLocation(104, 92);
				PushFollow(Follow._expr_list_in_global_alloc369);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(105, 2);

						item = new GlobalAlloc(a, b, c, attr, AllocType.Bracket);
						if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
						value.Add(item);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:110:4: ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list )
				{
				DebugLocation(110, 4);
				DebugLocation(110, 6);
				Match(input,113,Follow._113_in_global_alloc379); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(110, 11);
				// SugarWalker.g:110:11: (attr= attribute )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:110:12: attr= attribute
					{
					DebugLocation(110, 16);
					PushFollow(Follow._attribute_in_global_alloc384);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(110, 29);
				// SugarWalker.g:110:29: (has_extern= 'extern' )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==146))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:110:30: has_extern= 'extern'
					{
					DebugLocation(110, 40);
					has_extern=(CommonTree)Match(input,146,Follow._146_in_global_alloc391); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(110, 53);
				PushFollow(Follow._ident_list_in_global_alloc397);
				d=ident_list();
				PopFollow();

				DebugLocation(110, 66);
				PushFollow(Follow._expr_list_in_global_alloc401);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(111, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							item = new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:123:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(123, 1);
		try
		{
			// SugarWalker.g:124:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:124:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(124, 4);
			DebugLocation(124, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef421); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(124, 19);
			// SugarWalker.g:124:19: (attr= attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Attribute))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:124:20: attr= attribute
				{
				DebugLocation(124, 24);
				PushFollow(Follow._attribute_in_global_typedef426);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(124, 38);
			PushFollow(Follow._type_name_in_global_typedef432);
			a=type_name();
			PopFollow();

			DebugLocation(124, 50);
			PushFollow(Follow._ident_in_global_typedef436);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(125, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:131:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(131, 1);
		try
		{
			// SugarWalker.g:132:2: (a= NUMBER |a= STRING |b= ident )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt13 = 1;
				}
				break;
			case STRING:
				{
				alt13 = 2;
				}
				break;
			case IDENT:
				{
				alt13 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:4: a= NUMBER
				{
				DebugLocation(132, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args457); 
				DebugLocation(133, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:136:4: a= STRING
				{
				DebugLocation(136, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args467); 
				DebugLocation(137, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:140:4: b= ident
				{
				DebugLocation(140, 5);
				PushFollow(Follow._ident_in_attribute_args477);
				b=ident();
				PopFollow();

				DebugLocation(141, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:146:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		CommonTree d = default(CommonTree);
		CommonTree e = default(CommonTree);
		CommonTree f = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(146, 1);
		try
		{
			// SugarWalker.g:151:2: ( ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:151:4: ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* )
			{
			DebugLocation(151, 4);
			DebugLocation(151, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item501); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(151, 16);
			// SugarWalker.g:151:16: (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' )
			int alt14=5;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt14 = 1;
				}
				break;
			case 141:
				{
				alt14 = 2;
				}
				break;
			case 165:
				{
				alt14 = 3;
				}
				break;
			case 162:
				{
				alt14 = 4;
				}
				break;
			case 176:
				{
				alt14 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:151:17: a= ident
				{
				DebugLocation(151, 18);
				PushFollow(Follow._ident_in_attribute_item506);
				a=ident();
				PopFollow();

				DebugLocation(151, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:151:48: c= 'const'
				{
				DebugLocation(151, 49);
				c=(CommonTree)Match(input,141,Follow._141_in_attribute_item514); 
				DebugLocation(151, 58);
				 value.Name = "const"; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:151:87: d= 'static'
				{
				DebugLocation(151, 88);
				d=(CommonTree)Match(input,165,Follow._165_in_attribute_item522); 
				DebugLocation(151, 98);
				 value.Name = "static"; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:151:128: e= 'public'
				{
				DebugLocation(151, 129);
				e=(CommonTree)Match(input,162,Follow._162_in_attribute_item530); 
				DebugLocation(151, 139);
				 value.Name = "public"; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:151:169: f= 'virtual'
				{
				DebugLocation(151, 170);
				f=(CommonTree)Match(input,176,Follow._176_in_attribute_item538); 
				DebugLocation(151, 181);
				 value.Name = "virtual"; 

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(151, 211);
			// SugarWalker.g:151:211: (b= attribute_args )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENT||LA15_0==NUMBER||LA15_0==STRING))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:151:212: b= attribute_args
					{
					DebugLocation(151, 213);
					PushFollow(Follow._attribute_args_in_attribute_item546);
					b=attribute_args();
					PopFollow();

					DebugLocation(151, 229);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:154:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(154, 1);
		try
		{
			// SugarWalker.g:159:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:159:4: (a= attribute_item )+
			{
			DebugLocation(159, 4);
			// SugarWalker.g:159:4: (a= attribute_item )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==Attribute))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:159:5: a= attribute_item
					{
					DebugLocation(159, 6);
					PushFollow(Follow._attribute_item_in_attribute574);
					a=attribute_item();
					PopFollow();

					DebugLocation(159, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:162:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(162, 1);
		try
		{
			// SugarWalker.g:163:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:163:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(163, 4);
			DebugLocation(163, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def595); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(163, 17);
			PushFollow(Follow._ident_in_namespace_def599);
			a=ident();
			PopFollow();

			DebugLocation(163, 24);
			// SugarWalker.g:163:24: (b= global_block )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Global_Block))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:163:25: b= global_block
				{
				DebugLocation(163, 26);
				PushFollow(Follow._global_block_in_namespace_def604);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(164, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:169:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(169, 1);
		try
		{
			// SugarWalker.g:174:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:174:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(174, 4);
			DebugLocation(174, 6);
			Match(input,Import,Follow._Import_in_import_def631); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(174, 13);
				// SugarWalker.g:174:13: (attr= attribute )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==Attribute))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:174:14: attr= attribute
					{
					DebugLocation(174, 18);
					PushFollow(Follow._attribute_in_import_def636);
					attr=attribute();
					PopFollow();

					DebugLocation(174, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(174, 61);
				// SugarWalker.g:174:61: (a= STRING )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==STRING))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:174:62: a= STRING
						{
						DebugLocation(174, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def646); 
						DebugLocation(174, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:177:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(177, 1);
		try
		{
			// SugarWalker.g:178:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:178:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(178, 4);
			DebugLocation(178, 6);
			Match(input,Enum,Follow._Enum_in_enum_def667); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(178, 11);
			// SugarWalker.g:178:11: (attr= attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Attribute))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:178:12: attr= attribute
				{
				DebugLocation(178, 16);
				PushFollow(Follow._attribute_in_enum_def672);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(178, 30);
			PushFollow(Follow._ident_in_enum_def678);
			a=ident();
			PopFollow();

			DebugLocation(178, 38);
			PushFollow(Follow._ident_list_in_enum_def682);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(179, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:184:1: class_def returns [Class value] : ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		CommonTree pub = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<SugarType> b = default(List<SugarType>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(184, 1);
		try
		{
			// SugarWalker.g:185:2: ( ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:185:4: ^( Class (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(185, 4);
			DebugLocation(185, 6);
			Match(input,Class,Follow._Class_in_class_def702); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(185, 12);
			// SugarWalker.g:185:12: (pub= 'public' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==162))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:13: pub= 'public'
				{
				DebugLocation(185, 16);
				pub=(CommonTree)Match(input,162,Follow._162_in_class_def707); 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(185, 28);
			// SugarWalker.g:185:28: (attr= attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Attribute))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:29: attr= attribute
				{
				DebugLocation(185, 33);
				PushFollow(Follow._attribute_in_class_def714);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(185, 47);
			PushFollow(Follow._ident_in_class_def720);
			a=ident();
			PopFollow();

			DebugLocation(185, 54);
			// SugarWalker.g:185:54: (b= generic_parameter )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Generic_Patameters))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:55: b= generic_parameter
				{
				DebugLocation(185, 56);
				PushFollow(Follow._generic_parameter_in_class_def725);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(185, 77);
			// SugarWalker.g:185:77: (c= func_args )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Func_Args))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:78: c= func_args
				{
				DebugLocation(185, 79);
				PushFollow(Follow._func_args_in_class_def732);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(185, 92);
			// SugarWalker.g:185:92: (d= ident_list )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Ident_List))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:93: d= ident_list
				{
				DebugLocation(185, 94);
				PushFollow(Follow._ident_list_in_class_def739);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(185, 108);
			// SugarWalker.g:185:108: (e= global_block )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Global_Block))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:109: e= global_block
				{
				DebugLocation(185, 110);
				PushFollow(Follow._global_block_in_class_def746);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(186, 2);

					value = new Class(a, b, c, d, e, attr);
					if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
					if (c != null) value.Attribute.Add(new Attr { Name = "case" });
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:193:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(193, 1);
		try
		{
			// SugarWalker.g:198:2: ( ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:198:4: ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' |a= ident )* )
			{
			DebugLocation(198, 4);
			DebugLocation(198, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident773); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(198, 17);
				// SugarWalker.g:198:17: ( 'const' | 'static' | 'long' | 'struct' |a= ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=6;
					try { DebugEnterDecision(27, false);
					switch (input.LA(1))
					{
					case 141:
						{
						alt27 = 1;
						}
						break;
					case 165:
						{
						alt27 = 2;
						}
						break;
					case 155:
						{
						alt27 = 3;
						}
						break;
					case 166:
						{
						alt27 = 4;
						}
						break;
					case IDENT:
						{
						alt27 = 5;
						}
						break;
					}

					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:198:19: 'const'
						{
						DebugLocation(198, 19);
						Match(input,141,Follow._141_in_type_ident777); 
						DebugLocation(198, 27);
						 type+="const "; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:199:10: 'static'
						{
						DebugLocation(199, 10);
						Match(input,165,Follow._165_in_type_ident790); 
						DebugLocation(199, 19);
						 type+="static "; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarWalker.g:200:10: 'long'
						{
						DebugLocation(200, 10);
						Match(input,155,Follow._155_in_type_ident803); 
						DebugLocation(200, 18);
						 type+="long "; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarWalker.g:201:10: 'struct'
						{
						DebugLocation(201, 10);
						Match(input,166,Follow._166_in_type_ident817); 
						DebugLocation(201, 19);
						 type+="struct "; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// SugarWalker.g:202:10: a= ident
						{
						DebugLocation(202, 11);
						PushFollow(Follow._ident_in_type_ident832);
						a=ident();
						PopFollow();

						DebugLocation(202, 18);
						 type+=Alias(a); 

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(204, 2);

					value = new IdentType(type.Trim());
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:209:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(209, 1);
		try
		{
			// SugarWalker.g:214:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:214:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(214, 4);
			DebugLocation(214, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template869); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(214, 21);
			PushFollow(Follow._type_name_in_type_template873);
			a=type_name();
			PopFollow();

			DebugLocation(214, 32);
			// SugarWalker.g:214:32: (b= type_name )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>=Type_Array && LA28_0<=Type_Ident)||(LA28_0>=Type_Ref && LA28_0<=Type_Template)))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:214:33: b= type_name
					{
					DebugLocation(214, 34);
					PushFollow(Follow._type_name_in_type_template878);
					b=type_name();
					PopFollow();

					DebugLocation(214, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(215, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:220:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(220, 1);
		try
		{
			// SugarWalker.g:225:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:225:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(225, 4);
			DebugLocation(225, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array907); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(225, 18);
			PushFollow(Follow._type_name_in_type_array911);
			a=type_name();
			PopFollow();

			DebugLocation(225, 29);
			// SugarWalker.g:225:29: (b= expr )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Expr_Access && LA29_0<=Expr_Alloc_Equal)||(LA29_0>=Expr_Bin && LA29_0<=Expr_Where)||LA29_0==IDENT||LA29_0==Match_Expr||LA29_0==Match_Tuple||LA29_0==NUMBER||LA29_0==STRING||LA29_0==89||LA29_0==92||LA29_0==96||LA29_0==99||LA29_0==104||LA29_0==110||LA29_0==113||LA29_0==118||LA29_0==121||LA29_0==128||LA29_0==131||LA29_0==135||LA29_0==181||LA29_0==DOUBLE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:225:30: b= expr
					{
					DebugLocation(225, 31);
					PushFollow(Follow._expr_in_type_array916);
					b=expr();
					PopFollow();

					DebugLocation(225, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(226, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:231:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(231, 1);
		try
		{
			// SugarWalker.g:232:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:232:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(232, 4);
			DebugLocation(232, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star940); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(232, 17);
			PushFollow(Follow._type_name_in_type_star944);
			a=type_name();
			PopFollow();

			DebugLocation(232, 28);
			Match(input,95,Follow._95_in_type_star946); 
			DebugLocation(232, 32);
			 value = new StarType(a); 
			DebugLocation(232, 62);
			// SugarWalker.g:232:62: ( '*' )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==95))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:232:63: '*'
					{
					DebugLocation(232, 63);
					Match(input,95,Follow._95_in_type_star951); 
					DebugLocation(232, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:236:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(236, 1);
		try
		{
			// SugarWalker.g:237:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:237:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(237, 4);
			DebugLocation(237, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref973); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(237, 16);
			PushFollow(Follow._type_name_in_type_ref977);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(238, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// SugarWalker.g:243:1: type_func returns [SugarType value] : ^( Type_Func (a= type_list )? (b= type_name )? ) ;
	[GrammarRule("type_func")]
	private SugarType type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 19);
		TraceIn("type_func", 19);
		SugarType value = default(SugarType);


		List<SugarType> a = default(List<SugarType>);
		SugarType b = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(243, 1);
		try
		{
			// SugarWalker.g:244:2: ( ^( Type_Func (a= type_list )? (b= type_name )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:244:4: ^( Type_Func (a= type_list )? (b= type_name )? )
			{
			DebugLocation(244, 4);
			DebugLocation(244, 6);
			Match(input,Type_Func,Follow._Type_Func_in_type_func997); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(244, 16);
				// SugarWalker.g:244:16: (a= type_list )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==Type_List))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:244:17: a= type_list
					{
					DebugLocation(244, 18);
					PushFollow(Follow._type_list_in_type_func1002);
					a=type_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(244, 31);
				// SugarWalker.g:244:31: (b= type_name )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if (((LA32_0>=Type_Array && LA32_0<=Type_Ident)||(LA32_0>=Type_Ref && LA32_0<=Type_Template)))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:244:32: b= type_name
					{
					DebugLocation(244, 33);
					PushFollow(Follow._type_name_in_type_func1009);
					b=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(245, 2);

					value = new FuncType(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_func", 19);
			LeaveRule("type_func", 19);
			LeaveRule_type_func();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return value;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarWalker.g:250:1: type_list returns [List<SugarType> value] : ^( Type_List (a= type_name )* ) ;
	[GrammarRule("type_list")]
	private List<SugarType> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 20);
		TraceIn("type_list", 20);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(250, 1);
		try
		{
			// SugarWalker.g:255:2: ( ^( Type_List (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:255:4: ^( Type_List (a= type_name )* )
			{
			DebugLocation(255, 4);
			DebugLocation(255, 6);
			Match(input,Type_List,Follow._Type_List_in_type_list1035); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(255, 16);
				// SugarWalker.g:255:16: (a= type_name )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=Type_Array && LA33_0<=Type_Ident)||(LA33_0>=Type_Ref && LA33_0<=Type_Template)))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:255:17: a= type_name
						{
						DebugLocation(255, 18);
						PushFollow(Follow._type_name_in_type_list1040);
						a=type_name();
						PopFollow();

						DebugLocation(255, 29);
						 value.Add(a); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_list", 20);
			LeaveRule("type_list", 20);
			LeaveRule_type_list();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return value;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:258:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 21);
		TraceIn("type_name", 21);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(258, 1);
		try
		{
			// SugarWalker.g:259:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func )
			int alt34=6;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt34 = 1;
				}
				break;
			case Type_Ref:
				{
				alt34 = 2;
				}
				break;
			case Type_Star:
				{
				alt34 = 3;
				}
				break;
			case Type_Template:
				{
				alt34 = 4;
				}
				break;
			case Type_Ident:
				{
				alt34 = 5;
				}
				break;
			case Type_Func:
				{
				alt34 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:259:4: a= type_array
				{
				DebugLocation(259, 5);
				PushFollow(Follow._type_array_in_type_name1063);
				a=type_array();
				PopFollow();

				DebugLocation(259, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:260:4: a= type_ref
				{
				DebugLocation(260, 5);
				PushFollow(Follow._type_ref_in_type_name1072);
				a=type_ref();
				PopFollow();

				DebugLocation(260, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:261:4: a= type_star
				{
				DebugLocation(261, 5);
				PushFollow(Follow._type_star_in_type_name1081);
				a=type_star();
				PopFollow();

				DebugLocation(261, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:262:4: a= type_template
				{
				DebugLocation(262, 5);
				PushFollow(Follow._type_template_in_type_name1090);
				a=type_template();
				PopFollow();

				DebugLocation(262, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:263:4: a= type_ident
				{
				DebugLocation(263, 5);
				PushFollow(Follow._type_ident_in_type_name1099);
				a=type_ident();
				PopFollow();

				DebugLocation(263, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:264:4: a= type_func
				{
				DebugLocation(264, 5);
				PushFollow(Follow._type_func_in_type_name1108);
				a=type_func();
				PopFollow();

				DebugLocation(264, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 21);
			LeaveRule("type_name", 21);
			LeaveRule_type_name();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:267:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(267, 1);
		try
		{
			// SugarWalker.g:272:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:272:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(272, 4);
			DebugLocation(272, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args1131); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(272, 16);
				// SugarWalker.g:272:16: (a= alloc_expr )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=Expr_Alloc_Bracket && LA35_0<=Expr_Alloc_Equal)))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:272:17: a= alloc_expr
						{
						DebugLocation(272, 18);
						PushFollow(Follow._alloc_expr_in_func_args1136);
						a=alloc_expr();
						PopFollow();

						DebugLocation(273, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:278:1: generic_parameter returns [List<SugarType> value] : ^( Generic_Patameters (a= type_name )* ) ;
	[GrammarRule("generic_parameter")]
	private List<SugarType> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(278, 1);
		try
		{
			// SugarWalker.g:283:2: ( ^( Generic_Patameters (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:283:4: ^( Generic_Patameters (a= type_name )* )
			{
			DebugLocation(283, 4);
			DebugLocation(283, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter1163); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(283, 25);
				// SugarWalker.g:283:25: (a= type_name )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if (((LA36_0>=Type_Array && LA36_0<=Type_Ident)||(LA36_0>=Type_Ref && LA36_0<=Type_Template)))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:283:26: a= type_name
						{
						DebugLocation(283, 27);
						PushFollow(Follow._type_name_in_generic_parameter1168);
						a=type_name();
						PopFollow();

						DebugLocation(283, 38);
						 value.Add(a); 

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:286:1: func_def returns [FuncDef value] : ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		FuncDef value = default(FuncDef);


		CommonTree pub = default(CommonTree);
		CommonTree vir = default(CommonTree);
		CommonTree deconstructor = default(CommonTree);
		CommonTree op = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<SugarType> x = default(List<SugarType>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(286, 1);
		try
		{
			// SugarWalker.g:291:2: ( ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:291:4: ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) )
			{
			DebugLocation(291, 4);
			DebugLocation(291, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1194); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(291, 15);
			// SugarWalker.g:291:15: (pub= 'public' )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==162))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:16: pub= 'public'
				{
				DebugLocation(291, 19);
				pub=(CommonTree)Match(input,162,Follow._162_in_func_def1199); 

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(291, 31);
			// SugarWalker.g:291:31: (vir= 'virtual' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==176))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:32: vir= 'virtual'
				{
				DebugLocation(291, 35);
				vir=(CommonTree)Match(input,176,Follow._176_in_func_def1206); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(291, 48);
			// SugarWalker.g:291:48: (attr= attribute )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Attribute))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:49: attr= attribute
				{
				DebugLocation(291, 53);
				PushFollow(Follow._attribute_in_func_def1213);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(291, 65);
			// SugarWalker.g:291:65: (a= type_name )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if (((LA40_0>=Type_Array && LA40_0<=Type_Ident)||(LA40_0>=Type_Ref && LA40_0<=Type_Template)))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:66: a= type_name
				{
				DebugLocation(291, 67);
				PushFollow(Follow._type_name_in_func_def1219);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(291, 80);
			// SugarWalker.g:291:80: (deconstructor= '~' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==184))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:81: deconstructor= '~'
				{
				DebugLocation(291, 94);
				deconstructor=(CommonTree)Match(input,184,Follow._184_in_func_def1226); 

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(291, 101);
			// SugarWalker.g:291:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?
			int alt42=3;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			try
			{
				alt42 = dfa42.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:102: b= ident
				{
				DebugLocation(291, 103);
				PushFollow(Follow._ident_in_func_def1233);
				b=ident();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:291:112: op= ( '+' | '-' | '*' | '/' )
				{
				DebugLocation(291, 114);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(291, 135);
			// SugarWalker.g:291:135: (x= generic_parameter )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==Generic_Patameters))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:136: x= generic_parameter
				{
				DebugLocation(291, 137);
				PushFollow(Follow._generic_parameter_in_func_def1254);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(291, 159);
			// SugarWalker.g:291:159: (args= func_args )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==Func_Args))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:291:160: args= func_args
				{
				DebugLocation(291, 164);
				PushFollow(Follow._func_args_in_func_def1262);
				args=func_args();
				PopFollow();

				DebugLocation(291, 175);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(292, 2);
			// SugarWalker.g:292:2: (e= stmt_block |f= expr | Func_Declare )
			int alt45=3;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case Stmt_Block:
				{
				alt45 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 113:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 181:
			case DOUBLE:
				{
				alt45 = 2;
				}
				break;
			case Func_Declare:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:4: e= stmt_block
				{
				DebugLocation(292, 5);
				PushFollow(Follow._stmt_block_in_func_def1273);
				e=stmt_block();
				PopFollow();

				DebugLocation(293, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:309:4: f= expr
				{
				DebugLocation(309, 5);
				PushFollow(Follow._expr_in_func_def1283);
				f=expr();
				PopFollow();

				DebugLocation(310, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:335:4: Func_Declare
				{
				DebugLocation(335, 4);
				Match(input,Func_Declare,Follow._Func_Declare_in_func_def1291); 
				DebugLocation(336, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Attribute.Add(new Attr { Name = "extern" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = null;
					

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:365:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(365, 4);
		try
		{
			// SugarWalker.g:370:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:370:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(370, 4);
			DebugLocation(370, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1319); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(370, 17);
				// SugarWalker.g:370:17: (a= stmt )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if (((LA46_0>=Expr_Access && LA46_0<=Expr_Alloc_Equal)||(LA46_0>=Expr_Bin && LA46_0<=Expr_Where)||LA46_0==IDENT||LA46_0==Match_Expr||LA46_0==Match_Tuple||LA46_0==NUMBER||LA46_0==STRING||(LA46_0>=Stmt_Defer && LA46_0<=Stmt_While)||LA46_0==89||LA46_0==92||LA46_0==96||LA46_0==99||LA46_0==104||LA46_0==110||LA46_0==113||(LA46_0>=117 && LA46_0<=118)||LA46_0==121||LA46_0==128||(LA46_0>=130 && LA46_0<=131)||LA46_0==135||LA46_0==181||LA46_0==DOUBLE))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:370:18: a= stmt
						{
						DebugLocation(370, 19);
						PushFollow(Follow._stmt_in_stmt_block1324);
						a=stmt();
						PopFollow();

						DebugLocation(370, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(371, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:373:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(373, 1);
		try
		{
			// SugarWalker.g:378:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt47=9;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 181:
			case DOUBLE:
				{
				alt47 = 1;
				}
				break;
			case 113:
				{
				int LA47_2 = input.LA(2);

				if ((LA47_2==DOWN))
				{
					int LA47_11 = input.LA(3);

					if (((LA47_11>=Expr_Access && LA47_11<=Expr_Alloc_Equal)||(LA47_11>=Expr_Bin && LA47_11<=Expr_Where)||LA47_11==IDENT||LA47_11==Match_Expr||LA47_11==Match_Tuple||LA47_11==NUMBER||LA47_11==STRING||LA47_11==89||LA47_11==92||LA47_11==96||LA47_11==99||LA47_11==104||LA47_11==110||LA47_11==113||LA47_11==118||LA47_11==121||LA47_11==128||LA47_11==131||LA47_11==135||LA47_11==181||LA47_11==DOUBLE))
					{
						alt47 = 1;
					}
					else if ((LA47_11==Ident_List))
					{
						alt47 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 47, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt47 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt47 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt47 = 4;
				}
				break;
			case Stmt_For:
				{
				alt47 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt47 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt47 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt47 = 8;
				}
				break;
			case 117:
			case 130:
				{
				alt47 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:378:4: a= stmt_expr
				{
				DebugLocation(378, 5);
				PushFollow(Follow._stmt_expr_in_stmt1355);
				a=stmt_expr();
				PopFollow();

				DebugLocation(378, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:379:4: a= stmt_return
				{
				DebugLocation(379, 5);
				PushFollow(Follow._stmt_return_in_stmt1364);
				a=stmt_return();
				PopFollow();

				DebugLocation(379, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:380:4: a= stmt_if
				{
				DebugLocation(380, 5);
				PushFollow(Follow._stmt_if_in_stmt1373);
				a=stmt_if();
				PopFollow();

				DebugLocation(380, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:381:4: a= stmt_while
				{
				DebugLocation(381, 5);
				PushFollow(Follow._stmt_while_in_stmt1382);
				a=stmt_while();
				PopFollow();

				DebugLocation(381, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:382:4: a= stmt_for
				{
				DebugLocation(382, 5);
				PushFollow(Follow._stmt_for_in_stmt1391);
				a=stmt_for();
				PopFollow();

				DebugLocation(382, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:383:4: a= stmt_try
				{
				DebugLocation(383, 5);
				PushFollow(Follow._stmt_try_in_stmt1400);
				a=stmt_try();
				PopFollow();

				DebugLocation(383, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:384:4: a= stmt_switch
				{
				DebugLocation(384, 5);
				PushFollow(Follow._stmt_switch_in_stmt1409);
				a=stmt_switch();
				PopFollow();

				DebugLocation(384, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:385:4: a= stmt_defer
				{
				DebugLocation(385, 5);
				PushFollow(Follow._stmt_defer_in_stmt1418);
				a=stmt_defer();
				PopFollow();

				DebugLocation(385, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:386:4: b= stmt_translate
				{
				DebugLocation(386, 5);
				PushFollow(Follow._stmt_translate_in_stmt1427);
				b=stmt_translate();
				PopFollow();

				DebugLocation(386, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:389:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 27);
		TraceIn("stmt_translate", 27);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(389, 1);
		try
		{
			// SugarWalker.g:394:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) )
			int alt48=3;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case 130:
				{
				alt48 = 1;
				}
				break;
			case 113:
				{
				alt48 = 2;
				}
				break;
			case 117:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:394:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(394, 4);
				DebugLocation(394, 6);
				Match(input,130,Follow._130_in_stmt_translate1450); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(394, 12);
				PushFollow(Follow._expr_in_stmt_translate1454);
				a=expr();
				PopFollow();

				DebugLocation(394, 19);
				PushFollow(Follow._expr_in_stmt_translate1458);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(395, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:401:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(401, 4);
				DebugLocation(401, 6);
				Match(input,113,Follow._113_in_stmt_translate1468); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(401, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1472);
				d=ident_list();
				PopFollow();

				DebugLocation(401, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1476);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(402, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:410:4: ^( '<<' a= expr b= expr )
				{
				DebugLocation(410, 4);
				DebugLocation(410, 6);
				Match(input,117,Follow._117_in_stmt_translate1486); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(410, 12);
				PushFollow(Follow._expr_in_stmt_translate1490);
				a=expr();
				PopFollow();

				DebugLocation(410, 19);
				PushFollow(Follow._expr_in_stmt_translate1494);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 27);
			LeaveRule("stmt_translate", 27);
			LeaveRule_stmt_translate();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:413:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 28);
		TraceIn("stmt_switch_item_list", 28);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(413, 1);
		try
		{
			// SugarWalker.g:418:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:418:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(418, 4);
			// SugarWalker.g:418:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==Switch_Item))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:419:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(419, 3);
					DebugLocation(419, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1519); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(419, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1523);
					a=expr_list();
					PopFollow();

					DebugLocation(419, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1527);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(420, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 28);
			LeaveRule("stmt_switch_item_list", 28);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:426:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 29);
		TraceIn("stmt_switch", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(426, 1);
		try
		{
			// SugarWalker.g:427:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:427:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(427, 4);
			DebugLocation(427, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1554); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(427, 18);
				// SugarWalker.g:427:18: (a= expr )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if (((LA50_0>=Expr_Access && LA50_0<=Expr_Alloc_Equal)||(LA50_0>=Expr_Bin && LA50_0<=Expr_Where)||LA50_0==IDENT||LA50_0==Match_Expr||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==89||LA50_0==92||LA50_0==96||LA50_0==99||LA50_0==104||LA50_0==110||LA50_0==113||LA50_0==118||LA50_0==121||LA50_0==128||LA50_0==131||LA50_0==135||LA50_0==181||LA50_0==DOUBLE))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:427:19: a= expr
					{
					DebugLocation(427, 20);
					PushFollow(Follow._expr_in_stmt_switch1559);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(427, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1565);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(427, 52);
				// SugarWalker.g:427:52: (c= stmt_block )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==Stmt_Block))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:427:53: c= stmt_block
					{
					DebugLocation(427, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1570);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(428, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 29);
			LeaveRule("stmt_switch", 29);
			LeaveRule_stmt_switch();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:433:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(433, 1);
		try
		{
			// SugarWalker.g:434:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==Stmt_Defer))
			{
				alt52 = 1;
			}
			else if ((LA52_0==Stmt_Finally))
			{
				alt52 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:434:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(434, 4);
				DebugLocation(434, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1592); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(434, 18);
				PushFollow(Follow._stmt_in_stmt_defer1596);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(435, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:438:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(438, 4);
				DebugLocation(438, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1606); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(438, 20);
				PushFollow(Follow._stmt_in_stmt_defer1610);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(439, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:444:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 31);
		TraceIn("stmt_expr", 31);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(444, 1);
		try
		{
			// SugarWalker.g:445:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt53=3;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt53 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 113:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 181:
			case DOUBLE:
				{
				alt53 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt53 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:445:4: a= stmt_using
				{
				DebugLocation(445, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1631);
				a=stmt_using();
				PopFollow();

				DebugLocation(445, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:446:4: b= expr
				{
				DebugLocation(446, 5);
				PushFollow(Follow._expr_in_stmt_expr1640);
				b=expr();
				PopFollow();

				DebugLocation(446, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:447:4: c= stmt_typedef
				{
				DebugLocation(447, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1649);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(447, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 31);
			LeaveRule("stmt_expr", 31);
			LeaveRule_stmt_expr();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:450:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 32);
		TraceIn("stmt_using", 32);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(450, 1);
		try
		{
			// SugarWalker.g:455:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:455:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(455, 4);
			DebugLocation(455, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1672); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(455, 17);
				// SugarWalker.g:455:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=3;
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==IDENT))
					{
						alt54 = 1;
					}
					else if ((LA54_0==158))
					{
						alt54 = 2;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:455:19: a= ident
						{
						DebugLocation(455, 20);
						PushFollow(Follow._ident_in_stmt_using1678);
						a=ident();
						PopFollow();

						DebugLocation(455, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:456:10: b= 'namespace'
						{
						DebugLocation(456, 11);
						b=(CommonTree)Match(input,158,Follow._158_in_stmt_using1693); 
						DebugLocation(456, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 32);
			LeaveRule("stmt_using", 32);
			LeaveRule_stmt_using();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:459:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(459, 1);
		try
		{
			// SugarWalker.g:460:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:460:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(460, 4);
			DebugLocation(460, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1714); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(460, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1718);
			a=type_name();
			PopFollow();

			DebugLocation(460, 32);
			PushFollow(Follow._ident_in_stmt_typedef1722);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(461, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:466:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(466, 1);
		try
		{
			// SugarWalker.g:467:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:467:4: a= expr
			{
			DebugLocation(467, 5);
			PushFollow(Follow._expr_in_stmt_alloc1743);
			a=expr();
			PopFollow();

			DebugLocation(467, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:470:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 35);
		TraceIn("stmt_if", 35);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(470, 1);
		try
		{
			// SugarWalker.g:471:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==Stmt_If))
			{
				alt57 = 1;
			}
			else if ((LA57_0==Stmt_Unless))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:471:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(471, 4);
				DebugLocation(471, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1761); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(471, 15);
				PushFollow(Follow._expr_in_stmt_if1765);
				a=expr();
				PopFollow();

				DebugLocation(471, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1769);
				b=stmt_block();
				PopFollow();

				DebugLocation(471, 34);
				// SugarWalker.g:471:34: (c= stmt_block )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==Stmt_Block))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:471:35: c= stmt_block
					{
					DebugLocation(471, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1774);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(472, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:475:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(475, 4);
				DebugLocation(475, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1786); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(475, 19);
				PushFollow(Follow._expr_in_stmt_if1790);
				a=expr();
				PopFollow();

				DebugLocation(475, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1794);
				b=stmt_block();
				PopFollow();

				DebugLocation(475, 38);
				// SugarWalker.g:475:38: (c= stmt_block )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==Stmt_Block))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:475:39: c= stmt_block
					{
					DebugLocation(475, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1799);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(476, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 35);
			LeaveRule("stmt_if", 35);
			LeaveRule_stmt_if();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:481:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 36);
		TraceIn("stmt_while", 36);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(481, 1);
		try
		{
			// SugarWalker.g:482:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt59=3;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt59 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt59 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt59 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:482:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(482, 4);
				DebugLocation(482, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1821); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(482, 18);
				PushFollow(Follow._expr_in_stmt_while1825);
				a=expr();
				PopFollow();

				DebugLocation(482, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1829);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(483, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:486:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(486, 4);
				DebugLocation(486, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1839); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(486, 18);
				PushFollow(Follow._expr_in_stmt_while1843);
				a=expr();
				PopFollow();

				DebugLocation(486, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1847);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(487, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:490:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(490, 4);
				DebugLocation(490, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1857); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(490, 16);
				// SugarWalker.g:490:16: (a= expr )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=Expr_Access && LA58_0<=Expr_Alloc_Equal)||(LA58_0>=Expr_Bin && LA58_0<=Expr_Where)||LA58_0==IDENT||LA58_0==Match_Expr||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==89||LA58_0==92||LA58_0==96||LA58_0==99||LA58_0==104||LA58_0==110||LA58_0==113||LA58_0==118||LA58_0==121||LA58_0==128||LA58_0==131||LA58_0==135||LA58_0==181||LA58_0==DOUBLE))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:490:17: a= expr
					{
					DebugLocation(490, 18);
					PushFollow(Follow._expr_in_stmt_while1862);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(490, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1868);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(491, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 36);
			LeaveRule("stmt_while", 36);
			LeaveRule_stmt_while();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:508:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 37);
		TraceIn("for_item", 37);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(508, 1);
		try
		{
			// SugarWalker.g:509:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt63=6;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt63 = 1;
				}
				break;
			case For_Item_Til:
				{
				alt63 = 2;
				}
				break;
			case For_Item_Down_To:
				{
				alt63 = 3;
				}
				break;
			case For_Item_Each:
				{
				alt63 = 4;
				}
				break;
			case For_Item_Map:
				{
				alt63 = 5;
				}
				break;
			case For_Item_When:
				{
				alt63 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:509:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(509, 4);
				DebugLocation(509, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1888); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(509, 19);
				PushFollow(Follow._ident_in_for_item1892);
				a=ident();
				PopFollow();

				DebugLocation(509, 27);
				PushFollow(Follow._expr_in_for_item1896);
				b=expr();
				PopFollow();

				DebugLocation(509, 34);
				PushFollow(Follow._expr_in_for_item1900);
				c=expr();
				PopFollow();

				DebugLocation(509, 40);
				// SugarWalker.g:509:40: (d= expr )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if (((LA60_0>=Expr_Access && LA60_0<=Expr_Alloc_Equal)||(LA60_0>=Expr_Bin && LA60_0<=Expr_Where)||LA60_0==IDENT||LA60_0==Match_Expr||LA60_0==Match_Tuple||LA60_0==NUMBER||LA60_0==STRING||LA60_0==89||LA60_0==92||LA60_0==96||LA60_0==99||LA60_0==104||LA60_0==110||LA60_0==113||LA60_0==118||LA60_0==121||LA60_0==128||LA60_0==131||LA60_0==135||LA60_0==181||LA60_0==DOUBLE))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:509:41: d= expr
					{
					DebugLocation(509, 42);
					PushFollow(Follow._expr_in_for_item1905);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(510, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.To);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:513:4: ^( For_Item_Til a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(513, 4);
				DebugLocation(513, 6);
				Match(input,For_Item_Til,Follow._For_Item_Til_in_for_item1917); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(513, 20);
				PushFollow(Follow._ident_in_for_item1921);
				a=ident();
				PopFollow();

				DebugLocation(513, 28);
				PushFollow(Follow._expr_in_for_item1925);
				b=expr();
				PopFollow();

				DebugLocation(513, 35);
				PushFollow(Follow._expr_in_for_item1929);
				c=expr();
				PopFollow();

				DebugLocation(513, 41);
				// SugarWalker.g:513:41: (d= expr )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if (((LA61_0>=Expr_Access && LA61_0<=Expr_Alloc_Equal)||(LA61_0>=Expr_Bin && LA61_0<=Expr_Where)||LA61_0==IDENT||LA61_0==Match_Expr||LA61_0==Match_Tuple||LA61_0==NUMBER||LA61_0==STRING||LA61_0==89||LA61_0==92||LA61_0==96||LA61_0==99||LA61_0==104||LA61_0==110||LA61_0==113||LA61_0==118||LA61_0==121||LA61_0==128||LA61_0==131||LA61_0==135||LA61_0==181||LA61_0==DOUBLE))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:513:42: d= expr
					{
					DebugLocation(513, 43);
					PushFollow(Follow._expr_in_for_item1934);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(514, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.Til);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:517:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(517, 4);
				DebugLocation(517, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1946); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(517, 24);
				PushFollow(Follow._ident_in_for_item1950);
				a=ident();
				PopFollow();

				DebugLocation(517, 32);
				PushFollow(Follow._expr_in_for_item1954);
				b=expr();
				PopFollow();

				DebugLocation(517, 39);
				PushFollow(Follow._expr_in_for_item1958);
				c=expr();
				PopFollow();

				DebugLocation(517, 45);
				// SugarWalker.g:517:45: (d= expr )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if (((LA62_0>=Expr_Access && LA62_0<=Expr_Alloc_Equal)||(LA62_0>=Expr_Bin && LA62_0<=Expr_Where)||LA62_0==IDENT||LA62_0==Match_Expr||LA62_0==Match_Tuple||LA62_0==NUMBER||LA62_0==STRING||LA62_0==89||LA62_0==92||LA62_0==96||LA62_0==99||LA62_0==104||LA62_0==110||LA62_0==113||LA62_0==118||LA62_0==121||LA62_0==128||LA62_0==131||LA62_0==135||LA62_0==181||LA62_0==DOUBLE))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:517:46: d= expr
					{
					DebugLocation(517, 47);
					PushFollow(Follow._expr_in_for_item1963);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(518, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.DownTo);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:521:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(521, 4);
				DebugLocation(521, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1975); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(521, 21);
				PushFollow(Follow._ident_in_for_item1979);
				a=ident();
				PopFollow();

				DebugLocation(521, 29);
				PushFollow(Follow._expr_in_for_item1983);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(522, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:525:4: ^( For_Item_Map a= ident b= expr )
				{
				DebugLocation(525, 4);
				DebugLocation(525, 6);
				Match(input,For_Item_Map,Follow._For_Item_Map_in_for_item1993); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(525, 20);
				PushFollow(Follow._ident_in_for_item1997);
				a=ident();
				PopFollow();

				DebugLocation(525, 28);
				PushFollow(Follow._expr_in_for_item2001);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(526, 2);

						value = new ForItemMap(a, b);
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:529:4: ^( For_Item_When b= expr )
				{
				DebugLocation(529, 4);
				DebugLocation(529, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item2011); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(529, 21);
				PushFollow(Follow._expr_in_for_item2015);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(530, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 37);
			LeaveRule("for_item", 37);
			LeaveRule_for_item();
		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:535:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 38);
		TraceIn("for_item_list", 38);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(535, 1);
		try
		{
			// SugarWalker.g:540:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:540:4: (a= for_item )+
			{
			DebugLocation(540, 4);
			// SugarWalker.g:540:4: (a= for_item )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if (((LA64_0>=For_Item_Down_To && LA64_0<=For_Item_When)))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:540:5: a= for_item
					{
					DebugLocation(540, 6);
					PushFollow(Follow._for_item_in_for_item_list2042);
					a=for_item();
					PopFollow();

					DebugLocation(540, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 38);
			LeaveRule("for_item_list", 38);
			LeaveRule_for_item_list();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:543:1: stmt_for returns [StmtFor value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 39);
		TraceIn("stmt_for", 39);
		StmtFor value = default(StmtFor);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(543, 1);
		try
		{
			// SugarWalker.g:544:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:544:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(544, 4);
			DebugLocation(544, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for2063); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(544, 16);
			PushFollow(Follow._for_item_list_in_stmt_for2067);
			a=for_item_list();
			PopFollow();

			DebugLocation(544, 32);
			PushFollow(Follow._stmt_block_in_stmt_for2071);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(545, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 39);
			LeaveRule("stmt_for", 39);
			LeaveRule_stmt_for();
		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:550:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 40);
		TraceIn("stmt_try", 40);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(550, 1);
		try
		{
			// SugarWalker.g:551:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:551:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(551, 4);
			DebugLocation(551, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try2091); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(551, 16);
			PushFollow(Follow._stmt_block_in_stmt_try2095);
			a=stmt_block();
			PopFollow();

			DebugLocation(551, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2099);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(551, 42);
			PushFollow(Follow._stmt_block_in_stmt_try2103);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(552, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 40);
			LeaveRule("stmt_try", 40);
			LeaveRule_stmt_try();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:557:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(557, 1);
		try
		{
			// SugarWalker.g:558:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:558:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(558, 4);
			DebugLocation(558, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return2123); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(558, 18);
				// SugarWalker.g:558:18: (a= expr )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if (((LA65_0>=Expr_Access && LA65_0<=Expr_Alloc_Equal)||(LA65_0>=Expr_Bin && LA65_0<=Expr_Where)||LA65_0==IDENT||LA65_0==Match_Expr||LA65_0==Match_Tuple||LA65_0==NUMBER||LA65_0==STRING||LA65_0==89||LA65_0==92||LA65_0==96||LA65_0==99||LA65_0==104||LA65_0==110||LA65_0==113||LA65_0==118||LA65_0==121||LA65_0==128||LA65_0==131||LA65_0==135||LA65_0==181||LA65_0==DOUBLE))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:558:19: a= expr
					{
					DebugLocation(558, 20);
					PushFollow(Follow._expr_in_stmt_return2128);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(559, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:564:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 42);
		TraceIn("ident", 42);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(564, 1);
		try
		{
			// SugarWalker.g:569:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:569:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(569, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2156); 
			DebugLocation(569, 12);
			 value += a.Text; 
			DebugLocation(569, 34);
			// SugarWalker.g:569:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==112))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:569:35: '::' a= IDENT
					{
					DebugLocation(569, 35);
					Match(input,112,Follow._112_in_ident2161); 
					DebugLocation(569, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2165); 
					DebugLocation(569, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(570, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 42);
			LeaveRule("ident", 42);
			LeaveRule_ident();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:575:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 43);
		TraceIn("ident_list", 43);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(575, 1);
		try
		{
			// SugarWalker.g:580:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:580:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(580, 4);
			DebugLocation(580, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list2193); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(580, 17);
				// SugarWalker.g:580:17: (a= ident )*
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==IDENT))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch ( alt67 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:580:18: a= ident
						{
						DebugLocation(580, 19);
						PushFollow(Follow._ident_in_ident_list2198);
						a=ident();
						PopFollow();

						DebugLocation(580, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop67;
					}
				}

				loop67:
					;

				} finally { DebugExitSubRule(67); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 43);
			LeaveRule("ident_list", 43);
			LeaveRule_ident_list();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:583:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 44);
		TraceIn("alloc_expr", 44);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(583, 1);
		try
		{
			// SugarWalker.g:584:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==Expr_Alloc_Equal))
			{
				alt68 = 1;
			}
			else if ((LA68_0==Expr_Alloc_Bracket))
			{
				alt68 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:584:4: ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(584, 4);
				DebugLocation(584, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr2220); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(584, 24);
				PushFollow(Follow._type_name_in_alloc_expr2224);
				a=type_name();
				PopFollow();

				DebugLocation(584, 36);
				PushFollow(Follow._ident_list_in_alloc_expr2228);
				b=ident_list();
				PopFollow();

				DebugLocation(584, 49);
				PushFollow(Follow._expr_list_in_alloc_expr2232);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(585, 2);

						if (c != null && c.Count > 0)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:595:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(595, 4);
				DebugLocation(595, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr2242); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(595, 26);
				PushFollow(Follow._type_name_in_alloc_expr2246);
				a=type_name();
				PopFollow();

				DebugLocation(595, 38);
				PushFollow(Follow._ident_list_in_alloc_expr2250);
				b=ident_list();
				PopFollow();

				DebugLocation(595, 51);
				PushFollow(Follow._expr_list_in_alloc_expr2254);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(596, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 44);
			LeaveRule("alloc_expr", 44);
			LeaveRule_alloc_expr();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:601:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 45);
		TraceIn("expr_tuple", 45);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(601, 1);
		try
		{
			// SugarWalker.g:606:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:606:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(606, 4);
			DebugLocation(606, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2279); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(606, 17);
			// SugarWalker.g:606:17: (a= expr )+
			int cnt69=0;
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if (((LA69_0>=Expr_Access && LA69_0<=Expr_Alloc_Equal)||(LA69_0>=Expr_Bin && LA69_0<=Expr_Where)||LA69_0==IDENT||LA69_0==Match_Expr||LA69_0==Match_Tuple||LA69_0==NUMBER||LA69_0==STRING||LA69_0==89||LA69_0==92||LA69_0==96||LA69_0==99||LA69_0==104||LA69_0==110||LA69_0==113||LA69_0==118||LA69_0==121||LA69_0==128||LA69_0==131||LA69_0==135||LA69_0==181||LA69_0==DOUBLE))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:606:18: a= expr
					{
					DebugLocation(606, 19);
					PushFollow(Follow._expr_in_expr_tuple2284);
					a=expr();
					PopFollow();

					DebugLocation(606, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt69 >= 1)
						goto loop69;

					EarlyExitException eee69 = new EarlyExitException( 69, input );
					DebugRecognitionException(eee69);
					throw eee69;
				}
				cnt69++;
			}
			loop69:
				;

			} finally { DebugExitSubRule(69); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 45);
			LeaveRule("expr_tuple", 45);
			LeaveRule_expr_tuple();
		}
		DebugLocation(607, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:609:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 46);
		TraceIn("match_tuple", 46);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(609, 1);
		try
		{
			// SugarWalker.g:614:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:614:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(614, 4);
			DebugLocation(614, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2311); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(614, 18);
				// SugarWalker.g:614:18: (a= expr )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if (((LA70_0>=Expr_Access && LA70_0<=Expr_Alloc_Equal)||(LA70_0>=Expr_Bin && LA70_0<=Expr_Where)||LA70_0==IDENT||LA70_0==Match_Expr||LA70_0==Match_Tuple||LA70_0==NUMBER||LA70_0==STRING||LA70_0==89||LA70_0==92||LA70_0==96||LA70_0==99||LA70_0==104||LA70_0==110||LA70_0==113||LA70_0==118||LA70_0==121||LA70_0==128||LA70_0==131||LA70_0==135||LA70_0==181||LA70_0==DOUBLE))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:614:19: a= expr
						{
						DebugLocation(614, 20);
						PushFollow(Follow._expr_in_match_tuple2316);
						a=expr();
						PopFollow();

						DebugLocation(614, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 46);
			LeaveRule("match_tuple", 46);
			LeaveRule_match_tuple();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:617:1: expr_list returns [List<Expr> value] : ^( Expr_Args (a= expr )* ) ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 47);
		TraceIn("expr_list", 47);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(617, 1);
		try
		{
			// SugarWalker.g:622:2: ( ^( Expr_Args (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:622:4: ^( Expr_Args (a= expr )* )
			{
			DebugLocation(622, 4);
			DebugLocation(622, 6);
			Match(input,Expr_Args,Follow._Expr_Args_in_expr_list2342); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(622, 16);
				// SugarWalker.g:622:16: (a= expr )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_0 = input.LA(1);

					if (((LA71_0>=Expr_Access && LA71_0<=Expr_Alloc_Equal)||(LA71_0>=Expr_Bin && LA71_0<=Expr_Where)||LA71_0==IDENT||LA71_0==Match_Expr||LA71_0==Match_Tuple||LA71_0==NUMBER||LA71_0==STRING||LA71_0==89||LA71_0==92||LA71_0==96||LA71_0==99||LA71_0==104||LA71_0==110||LA71_0==113||LA71_0==118||LA71_0==121||LA71_0==128||LA71_0==131||LA71_0==135||LA71_0==181||LA71_0==DOUBLE))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:622:17: a= expr
						{
						DebugLocation(622, 18);
						PushFollow(Follow._expr_in_expr_list2347);
						a=expr();
						PopFollow();

						DebugLocation(622, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 47);
			LeaveRule("expr_list", 47);
			LeaveRule_expr_list();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:625:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 48);
		TraceIn("call_expr", 48);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<SugarType> b = default(List<SugarType>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(625, 1);
		try
		{
			// SugarWalker.g:626:2: ( ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:626:4: ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list )
			{
			DebugLocation(626, 4);
			DebugLocation(626, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2368); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(626, 17);
			PushFollow(Follow._expr_in_call_expr2372);
			a=expr();
			PopFollow();

			DebugLocation(626, 23);
			// SugarWalker.g:626:23: (b= generic_parameter )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==Generic_Patameters))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:626:24: b= generic_parameter
				{
				DebugLocation(626, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2377);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(626, 47);
			PushFollow(Follow._expr_list_in_call_expr2383);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(627, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 48);
			LeaveRule("call_expr", 48);
			LeaveRule_call_expr();
		}
		DebugLocation(630, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:632:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr_list ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 49);
		TraceIn("dict_expr", 49);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(632, 1);
		try
		{
			// SugarWalker.g:633:2: ( ^( Expr_Dict a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:633:4: ^( Expr_Dict a= expr b= expr_list )
			{
			DebugLocation(633, 4);
			DebugLocation(633, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2403); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(633, 17);
			PushFollow(Follow._expr_in_dict_expr2407);
			a=expr();
			PopFollow();

			DebugLocation(633, 24);
			PushFollow(Follow._expr_list_in_dict_expr2411);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(634, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 49);
			LeaveRule("dict_expr", 49);
			LeaveRule_dict_expr();
		}
		DebugLocation(637, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:639:1: lambda_expr returns [Expr value] : ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) );
	[GrammarRule("lambda_expr")]
	private Expr lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 50);
		TraceIn("lambda_expr", 50);
		Expr value = default(Expr);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		SugarType t = default(SugarType);
		StmtBlock a = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(639, 1);
		try
		{
			// SugarWalker.g:640:2: ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) )
			int alt81=4;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==Expr_Lambda))
			{
				int LA81_1 = input.LA(2);

				if ((LA81_1==DOWN))
				{
					switch (input.LA(3))
					{
					case 105:
						{
						alt81 = 1;
						}
						break;
					case 124:
						{
						alt81 = 2;
						}
						break;
					case 103:
						{
						alt81 = 3;
						}
						break;
					case 123:
						{
						alt81 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 81, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:640:4: ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(640, 4);
				DebugLocation(640, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2431); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(640, 18);
				Match(input,105,Follow._105_in_lambda_expr2433); 
				DebugLocation(640, 23);
				// SugarWalker.g:640:23: (b= func_args )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==Func_Args))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:640:24: b= func_args
					{
					DebugLocation(640, 25);
					PushFollow(Follow._func_args_in_lambda_expr2438);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(640, 38);
				// SugarWalker.g:640:38: (t= type_name )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if (((LA74_0>=Type_Array && LA74_0<=Type_Ident)||(LA74_0>=Type_Ref && LA74_0<=Type_Template)))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:640:39: t= type_name
					{
					DebugLocation(640, 40);
					PushFollow(Follow._type_name_in_lambda_expr2445);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(640, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2451);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(641, 2);

						value = new ExprLambda(a, b, true, t);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:644:4: ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(644, 4);
				DebugLocation(644, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2461); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(644, 18);
				Match(input,124,Follow._124_in_lambda_expr2463); 
				DebugLocation(644, 23);
				// SugarWalker.g:644:23: (b= func_args )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==Func_Args))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:644:24: b= func_args
					{
					DebugLocation(644, 25);
					PushFollow(Follow._func_args_in_lambda_expr2468);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(644, 38);
				// SugarWalker.g:644:38: (t= type_name )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if (((LA76_0>=Type_Array && LA76_0<=Type_Ident)||(LA76_0>=Type_Ref && LA76_0<=Type_Template)))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:644:39: t= type_name
					{
					DebugLocation(644, 40);
					PushFollow(Follow._type_name_in_lambda_expr2475);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(644, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2481);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(645, 2);

						value = new ExprLambda(a, b, false, t);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:648:4: ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(648, 4);
				DebugLocation(648, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2491); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(648, 18);
				Match(input,103,Follow._103_in_lambda_expr2493); 
				DebugLocation(648, 24);
				// SugarWalker.g:648:24: (b= func_args )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==Func_Args))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:648:25: b= func_args
					{
					DebugLocation(648, 26);
					PushFollow(Follow._func_args_in_lambda_expr2498);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(648, 39);
				// SugarWalker.g:648:39: (t= type_name )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if (((LA78_0>=Type_Array && LA78_0<=Type_Ident)||(LA78_0>=Type_Ref && LA78_0<=Type_Template)))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:648:40: t= type_name
					{
					DebugLocation(648, 41);
					PushFollow(Follow._type_name_in_lambda_expr2505);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(648, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2511);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(649, 2);

						value = new ExprCurryLambda(a, b, true, t);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:652:4: ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(652, 4);
				DebugLocation(652, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2521); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(652, 18);
				Match(input,123,Follow._123_in_lambda_expr2523); 
				DebugLocation(652, 24);
				// SugarWalker.g:652:24: (b= func_args )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==Func_Args))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:652:25: b= func_args
					{
					DebugLocation(652, 26);
					PushFollow(Follow._func_args_in_lambda_expr2528);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(652, 39);
				// SugarWalker.g:652:39: (t= type_name )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if (((LA80_0>=Type_Array && LA80_0<=Type_Ident)||(LA80_0>=Type_Ref && LA80_0<=Type_Template)))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:652:40: t= type_name
					{
					DebugLocation(652, 41);
					PushFollow(Follow._type_name_in_lambda_expr2535);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(652, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2541);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(653, 2);

						value = new ExprCurryLambda(a, b, false, t);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 50);
			LeaveRule("lambda_expr", 50);
			LeaveRule_lambda_expr();
		}
		DebugLocation(656, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:658:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 51);
		TraceIn("new_expr", 51);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(658, 1);
		try
		{
			// SugarWalker.g:659:2: ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt82=2;
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==Expr_New_Type))
			{
				alt82 = 1;
			}
			else if ((LA82_0==Expr_New_Array))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:659:4: ^( Expr_New_Type a= type_name b= expr_list )
				{
				DebugLocation(659, 4);
				DebugLocation(659, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2561); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(659, 21);
				PushFollow(Follow._type_name_in_new_expr2565);
				a=type_name();
				PopFollow();

				DebugLocation(659, 33);
				PushFollow(Follow._expr_list_in_new_expr2569);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(660, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:663:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(663, 4);
				DebugLocation(663, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2579); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(663, 22);
				PushFollow(Follow._type_name_in_new_expr2583);
				a=type_name();
				PopFollow();

				DebugLocation(663, 34);
				PushFollow(Follow._expr_list_in_new_expr2587);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(664, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 51);
			LeaveRule("new_expr", 51);
			LeaveRule_new_expr();
		}
		DebugLocation(667, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:669:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident c= expr_list ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 52);
		TraceIn("call_with_expr", 52);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(669, 1);
		try
		{
			// SugarWalker.g:670:2: ( ^( Expr_Call_With a= expr b= ident c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:670:4: ^( Expr_Call_With a= expr b= ident c= expr_list )
			{
			DebugLocation(670, 4);
			DebugLocation(670, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2607); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(670, 22);
			PushFollow(Follow._expr_in_call_with_expr2611);
			a=expr();
			PopFollow();

			DebugLocation(670, 29);
			PushFollow(Follow._ident_in_call_with_expr2615);
			b=ident();
			PopFollow();

			DebugLocation(670, 37);
			PushFollow(Follow._expr_list_in_call_with_expr2619);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(671, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 52);
			LeaveRule("call_with_expr", 52);
			LeaveRule_call_with_expr();
		}
		DebugLocation(683, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:685:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 53);
		TraceIn("cast_expr", 53);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(685, 1);
		try
		{
			// SugarWalker.g:686:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:686:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(686, 4);
			DebugLocation(686, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2639); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(686, 17);
			PushFollow(Follow._type_name_in_cast_expr2643);
			a=type_name();
			PopFollow();

			DebugLocation(686, 29);
			PushFollow(Follow._expr_in_cast_expr2647);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(687, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 53);
			LeaveRule("cast_expr", 53);
			LeaveRule_cast_expr();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:692:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr )* ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 54);
		TraceIn("list_expr", 54);
		ExprList value = default(ExprList);


		Expr a = default(Expr);


			var list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(692, 1);
		try
		{
			// SugarWalker.g:697:2: ( ^( Expr_List (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:697:4: ^( Expr_List (a= expr )* )
			{
			DebugLocation(697, 4);
			DebugLocation(697, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2672); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(697, 16);
				// SugarWalker.g:697:16: (a= expr )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if (((LA83_0>=Expr_Access && LA83_0<=Expr_Alloc_Equal)||(LA83_0>=Expr_Bin && LA83_0<=Expr_Where)||LA83_0==IDENT||LA83_0==Match_Expr||LA83_0==Match_Tuple||LA83_0==NUMBER||LA83_0==STRING||LA83_0==89||LA83_0==92||LA83_0==96||LA83_0==99||LA83_0==104||LA83_0==110||LA83_0==113||LA83_0==118||LA83_0==121||LA83_0==128||LA83_0==131||LA83_0==135||LA83_0==181||LA83_0==DOUBLE))
					{
						alt83 = 1;
					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:697:17: a= expr
						{
						DebugLocation(697, 18);
						PushFollow(Follow._expr_in_list_expr2677);
						a=expr();
						PopFollow();

						DebugLocation(697, 24);
						 list.Add(a); 

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(698, 2);

					value = new ExprList(list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 54);
			LeaveRule("list_expr", 54);
			LeaveRule_list_expr();
		}
		DebugLocation(701, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_list_generation_expr();
	partial void LeaveRule_list_generation_expr();

	// $ANTLR start "list_generation_expr"
	// SugarWalker.g:703:1: list_generation_expr returns [ExprListGeneration value] : ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) ;
	[GrammarRule("list_generation_expr")]
	private ExprListGeneration list_generation_expr()
	{
		EnterRule_list_generation_expr();
		EnterRule("list_generation_expr", 55);
		TraceIn("list_generation_expr", 55);
		ExprListGeneration value = default(ExprListGeneration);


		SugarType a = default(SugarType);
		StmtFor b = default(StmtFor);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "list_generation_expr");
		DebugLocation(703, 1);
		try
		{
			// SugarWalker.g:704:2: ( ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:704:4: ^( Expr_List_Generation a= type_name b= stmt_for c= expr )
			{
			DebugLocation(704, 4);
			DebugLocation(704, 6);
			Match(input,Expr_List_Generation,Follow._Expr_List_Generation_in_list_generation_expr2701); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(704, 28);
			PushFollow(Follow._type_name_in_list_generation_expr2705);
			a=type_name();
			PopFollow();

			DebugLocation(704, 40);
			PushFollow(Follow._stmt_for_in_list_generation_expr2709);
			b=stmt_for();
			PopFollow();

			DebugLocation(704, 51);
			PushFollow(Follow._expr_in_list_generation_expr2713);
			c=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(705, 2);

					value = new ExprListGeneration(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_generation_expr", 55);
			LeaveRule("list_generation_expr", 55);
			LeaveRule_list_generation_expr();
		}
		DebugLocation(708, 1);
		} finally { DebugExitRule(GrammarFileName, "list_generation_expr"); }
		return value;

	}
	// $ANTLR end "list_generation_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:710:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 56);
		TraceIn("chain_expr", 56);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(710, 1);
		try
		{
			// SugarWalker.g:715:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:715:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(715, 4);
			DebugLocation(715, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2738); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(716, 5);
			PushFollow(Follow._expr_in_chain_expr2745);
			a=expr();
			PopFollow();

			DebugLocation(717, 4);

							last=a;
						
			DebugLocation(720, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(720, 64);
			PushFollow(Follow._expr_in_chain_expr2791);
			a=expr();
			PopFollow();

			DebugLocation(721, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(725, 4);
			// SugarWalker.g:725:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==87||LA84_0==115||LA84_0==119||LA84_0==122||(LA84_0>=125 && LA84_0<=126)||(LA84_0>=152 && LA84_0<=153)))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:726:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(726, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(726, 65);
					PushFollow(Follow._expr_in_chain_expr2843);
					a=expr();
					PopFollow();

					DebugLocation(727, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 56);
			LeaveRule("chain_expr", 56);
			LeaveRule_chain_expr();
		}
		DebugLocation(732, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:734:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(734, 1);
		try
		{
			// SugarWalker.g:739:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:739:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(739, 4);
			DebugLocation(739, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2877); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(739, 18);
			PushFollow(Follow._expr_in_where_expr2881);
			a=expr();
			PopFollow();

			DebugLocation(739, 24);
			// SugarWalker.g:739:24: (b= stmt )+
			int cnt85=0;
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if (((LA85_0>=Expr_Access && LA85_0<=Expr_Alloc_Equal)||(LA85_0>=Expr_Bin && LA85_0<=Expr_Where)||LA85_0==IDENT||LA85_0==Match_Expr||LA85_0==Match_Tuple||LA85_0==NUMBER||LA85_0==STRING||(LA85_0>=Stmt_Defer && LA85_0<=Stmt_While)||LA85_0==89||LA85_0==92||LA85_0==96||LA85_0==99||LA85_0==104||LA85_0==110||LA85_0==113||(LA85_0>=117 && LA85_0<=118)||LA85_0==121||LA85_0==128||(LA85_0>=130 && LA85_0<=131)||LA85_0==135||LA85_0==181||LA85_0==DOUBLE))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:739:25: b= stmt
					{
					DebugLocation(739, 26);
					PushFollow(Follow._stmt_in_where_expr2886);
					b=stmt();
					PopFollow();

					DebugLocation(739, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt85 >= 1)
						goto loop85;

					EarlyExitException eee85 = new EarlyExitException( 85, input );
					DebugRecognitionException(eee85);
					throw eee85;
				}
				cnt85++;
			}
			loop85:
				;

			} finally { DebugExitSubRule(85); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(740, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(743, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarWalker.g:745:1: match_item returns [ExprMatchItem value] : ^( Match_Expr_Item a= expr b= expr ) ;
	[GrammarRule("match_item")]
	private ExprMatchItem match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		ExprMatchItem value = default(ExprMatchItem);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(745, 1);
		try
		{
			// SugarWalker.g:746:2: ( ^( Match_Expr_Item a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:746:4: ^( Match_Expr_Item a= expr b= expr )
			{
			DebugLocation(746, 4);
			DebugLocation(746, 6);
			Match(input,Match_Expr_Item,Follow._Match_Expr_Item_in_match_item2911); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(746, 23);
			PushFollow(Follow._expr_in_match_item2915);
			a=expr();
			PopFollow();

			DebugLocation(746, 30);
			PushFollow(Follow._expr_in_match_item2919);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(747, 2);

					value = new ExprMatchItem(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(750, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return value;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarWalker.g:752:1: match_expr returns [Expr value] : ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) ;
	[GrammarRule("match_expr")]
	private Expr match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		Expr value = default(Expr);


		Expr a = default(Expr);
		SugarType tp = default(SugarType);
		ExprMatchItem b = default(ExprMatchItem);


			List<ExprMatchItem> list = new List<ExprMatchItem>();

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(752, 1);
		try
		{
			// SugarWalker.g:757:2: ( ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:757:5: ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ )
			{
			DebugLocation(757, 5);
			DebugLocation(757, 7);
			Match(input,Match_Expr,Follow._Match_Expr_in_match_expr2945); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(757, 18);
			// SugarWalker.g:757:18: (a= expr )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if (((LA86_0>=Expr_Access && LA86_0<=Expr_Alloc_Equal)||(LA86_0>=Expr_Bin && LA86_0<=Expr_Where)||LA86_0==IDENT||LA86_0==Match_Expr||LA86_0==Match_Tuple||LA86_0==NUMBER||LA86_0==STRING||LA86_0==89||LA86_0==92||LA86_0==96||LA86_0==99||LA86_0==104||LA86_0==110||LA86_0==113||LA86_0==118||LA86_0==121||LA86_0==128||LA86_0==131||LA86_0==135||LA86_0==181||LA86_0==DOUBLE))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:757:19: a= expr
				{
				DebugLocation(757, 20);
				PushFollow(Follow._expr_in_match_expr2950);
				a=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(757, 28);
			// SugarWalker.g:757:28: (tp= type_name )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if (((LA87_0>=Type_Array && LA87_0<=Type_Ident)||(LA87_0>=Type_Ref && LA87_0<=Type_Template)))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:757:29: tp= type_name
				{
				DebugLocation(757, 31);
				PushFollow(Follow._type_name_in_match_expr2957);
				tp=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(757, 44);
			// SugarWalker.g:757:44: (b= match_item )+
			int cnt88=0;
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==Match_Expr_Item))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:757:45: b= match_item
					{
					DebugLocation(757, 46);
					PushFollow(Follow._match_item_in_match_expr2964);
					b=match_item();
					PopFollow();

					DebugLocation(757, 58);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt88 >= 1)
						goto loop88;

					EarlyExitException eee88 = new EarlyExitException( 88, input );
					DebugRecognitionException(eee88);
					throw eee88;
				}
				cnt88++;
			}
			loop88:
				;

			} finally { DebugExitSubRule(88); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(758, 2);

					value = new ExprMatch(a, tp, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(761, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return value;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:763:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		Expr lambda = default(Expr);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		ExprListGeneration list_generation = default(ExprListGeneration);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		Expr expr_match = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(763, 1);
		try
		{
			// SugarWalker.g:764:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt89=29;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt89 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt89 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt89 = 3;
				}
				break;
			case Expr_Call:
				{
				alt89 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt89 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt89 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt89 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt89 = 8;
				}
				break;
			case Expr_List:
				{
				alt89 = 9;
				}
				break;
			case Expr_List_Generation:
				{
				alt89 = 10;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt89 = 11;
				}
				break;
			case Expr_Where:
				{
				alt89 = 12;
				}
				break;
			case Match_Expr:
				{
				alt89 = 13;
				}
				break;
			case Expr_Infix:
				{
				alt89 = 14;
				}
				break;
			case Expr_Cond:
				{
				alt89 = 15;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt89 = 16;
				}
				break;
			case Expr_Not_Null:
				{
				alt89 = 17;
				}
				break;
			case Expr_Access:
				{
				alt89 = 18;
				}
				break;
			case Expr_Chain:
				{
				alt89 = 19;
				}
				break;
			case Expr_Bin:
				{
				alt89 = 20;
				}
				break;
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 135:
			case 181:
				{
				alt89 = 21;
				}
				break;
			case 131:
				{
				alt89 = 22;
				}
				break;
			case Expr_Bracket:
				{
				alt89 = 23;
				}
				break;
			case Expr_Suffix:
				{
				alt89 = 24;
				}
				break;
			case Expr_Prefix:
				{
				alt89 = 25;
				}
				break;
			case 113:
				{
				alt89 = 26;
				}
				break;
			case IDENT:
				{
				alt89 = 27;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt89 = 28;
				}
				break;
			case STRING:
				{
				alt89 = 29;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:764:7: tuple= expr_tuple
				{
				DebugLocation(764, 12);
				PushFollow(Follow._expr_tuple_in_expr2993);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(765, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:768:4: alloc= alloc_expr
				{
				DebugLocation(768, 9);
				PushFollow(Follow._alloc_expr_in_expr3003);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(769, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:772:4: match= match_tuple
				{
				DebugLocation(772, 9);
				PushFollow(Follow._match_tuple_in_expr3013);
				match=match_tuple();
				PopFollow();

				DebugLocation(773, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:776:4: call= call_expr
				{
				DebugLocation(776, 8);
				PushFollow(Follow._call_expr_in_expr3023);
				call=call_expr();
				PopFollow();

				DebugLocation(777, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:780:4: call_with= call_with_expr
				{
				DebugLocation(780, 13);
				PushFollow(Follow._call_with_expr_in_expr3033);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(781, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:784:4: dict= dict_expr
				{
				DebugLocation(784, 8);
				PushFollow(Follow._dict_expr_in_expr3043);
				dict=dict_expr();
				PopFollow();

				DebugLocation(785, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:788:4: lambda= lambda_expr
				{
				DebugLocation(788, 10);
				PushFollow(Follow._lambda_expr_in_expr3053);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(789, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:792:4: cast= cast_expr
				{
				DebugLocation(792, 8);
				PushFollow(Follow._cast_expr_in_expr3063);
				cast=cast_expr();
				PopFollow();

				DebugLocation(793, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:796:4: list= list_expr
				{
				DebugLocation(796, 8);
				PushFollow(Follow._list_expr_in_expr3073);
				list=list_expr();
				PopFollow();

				DebugLocation(797, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:800:4: list_generation= list_generation_expr
				{
				DebugLocation(800, 19);
				PushFollow(Follow._list_generation_expr_in_expr3083);
				list_generation=list_generation_expr();
				PopFollow();

				DebugLocation(801, 2);

						value = list_generation;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:804:4: expr_new= new_expr
				{
				DebugLocation(804, 12);
				PushFollow(Follow._new_expr_in_expr3093);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(805, 2);

						value = expr_new;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:808:4: where= where_expr
				{
				DebugLocation(808, 9);
				PushFollow(Follow._where_expr_in_expr3103);
				where=where_expr();
				PopFollow();

				DebugLocation(809, 2);

						value = where;
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:812:4: expr_match= match_expr
				{
				DebugLocation(812, 14);
				PushFollow(Follow._match_expr_in_expr3113);
				expr_match=match_expr();
				PopFollow();

				DebugLocation(813, 2);

						value = expr_match;
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:816:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(816, 4);
				DebugLocation(816, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr3122); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(816, 27);
				PushFollow(Follow._ident_in_expr3126);
				ident_text=ident();
				PopFollow();

				DebugLocation(816, 35);
				PushFollow(Follow._expr_in_expr3130);
				a=expr();
				PopFollow();

				DebugLocation(816, 42);
				PushFollow(Follow._expr_in_expr3134);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(817, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:820:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(820, 4);
				DebugLocation(820, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr3144); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(820, 17);
				PushFollow(Follow._expr_in_expr3148);
				a=expr();
				PopFollow();

				DebugLocation(820, 24);
				PushFollow(Follow._expr_in_expr3152);
				b=expr();
				PopFollow();

				DebugLocation(820, 31);
				PushFollow(Follow._expr_in_expr3156);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(821, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:824:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(824, 4);
				DebugLocation(824, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr3166); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(824, 26);
				PushFollow(Follow._expr_in_expr3170);
				a=expr();
				PopFollow();

				DebugLocation(824, 33);
				PushFollow(Follow._expr_in_expr3174);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(825, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:828:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(828, 4);
				DebugLocation(828, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr3184); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(828, 21);
				PushFollow(Follow._expr_in_expr3188);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(829, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:832:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(832, 4);
				DebugLocation(832, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr3198); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(832, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=105 && input.LA(1)<=108)||input.LA(1)==112)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(832, 57);
				PushFollow(Follow._expr_in_expr3224);
				a=expr();
				PopFollow();

				DebugLocation(832, 73);
				PushFollow(Follow._ident_in_expr3228);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(833, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:836:4: chain= chain_expr
				{
				DebugLocation(836, 10);
				PushFollow(Follow._chain_expr_in_expr3241);
				chain=chain_expr();
				PopFollow();

				DebugLocation(837, 2);

						value = chain;
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:840:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(840, 4);
				DebugLocation(840, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr3250); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(840, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=87 && input.LA(1)<=88)||(input.LA(1)>=90 && input.LA(1)<=91)||input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109||input.LA(1)==115||input.LA(1)==117||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=127)||input.LA(1)==134||input.LA(1)==137||(input.LA(1)>=152 && input.LA(1)<=153)||input.LA(1)==161||input.LA(1)==180||input.LA(1)==183)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(847, 9);
				PushFollow(Follow._expr_in_expr3381);
				a=expr();
				PopFollow();

				DebugLocation(847, 16);
				PushFollow(Follow._expr_in_expr3385);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(848, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:851:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(851, 4);
				DebugLocation(851, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==118||input.LA(1)==121||input.LA(1)==128||input.LA(1)==135||input.LA(1)==181)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(851, 88);
				PushFollow(Follow._expr_in_expr3443);
				a=expr();
				PopFollow();

				DebugLocation(851, 95);
				PushFollow(Follow._expr_in_expr3447);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(852, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:855:4: ^( '@' text_ident= ident )
				{
				DebugLocation(855, 4);
				DebugLocation(855, 6);
				Match(input,131,Follow._131_in_expr3457); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(855, 20);
				PushFollow(Follow._ident_in_expr3461);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(856, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:859:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(859, 4);
				DebugLocation(859, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3471); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(859, 20);
				PushFollow(Follow._expr_in_expr3475);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(860, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:863:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(863, 4);
				DebugLocation(863, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3485); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(863, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==98||input.LA(1)==102)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(863, 36);
				PushFollow(Follow._expr_in_expr3499);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(864, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:867:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(867, 4);
				DebugLocation(867, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3509); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(867, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==86||input.LA(1)==91||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=101 && input.LA(1)<=102)||input.LA(1)==160||input.LA(1)==184)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(867, 80);
				PushFollow(Follow._expr_in_expr3551);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(868, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:871:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(871, 4);
				DebugLocation(871, 6);
				Match(input,113,Follow._113_in_expr3561); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(871, 12);
				PushFollow(Follow._expr_in_expr3565);
				a=expr();
				PopFollow();

				DebugLocation(871, 19);
				PushFollow(Follow._expr_in_expr3569);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(872, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:879:4: text_ident= ident
				{
				DebugLocation(879, 15);
				PushFollow(Follow._ident_in_expr3582);
				text_ident=ident();
				PopFollow();

				DebugLocation(880, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// SugarWalker.g:884:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(884, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(885, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// SugarWalker.g:888:4: text= STRING
				{
				DebugLocation(888, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3613); 
				DebugLocation(889, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(892, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA42 dfa42;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa42 = new DFA42( this );
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x7\xFFFF";
		private const string DFA42_eofS =
			"\x7\xFFFF";
		private const string DFA42_minS =
			"\x1\xC\x1\x3\x2\xFFFF\x1\x2F\x1\xFFFF\x1\x3";
		private const string DFA42_maxS =
			"\x2\xB9\x2\xFFFF\x1\x2F\x1\xFFFF\x1\xB9";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA42_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x3\x3\x1\xFFFF\x14\x3\x6\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1"+
				"\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x3\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2D"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x2\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2D\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6",
				"",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x2\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2D\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "291:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x404100000006848UL,0x2000000000900UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using243 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x40000000UL});
		public static readonly BitSet _ident_in_global_using254 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_global_using281 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x40000000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc312 = new BitSet(new ulong[]{0x0UL,0x1DC000UL,0x40000UL});
		public static readonly BitSet _146_in_global_alloc319 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_alloc325 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc329 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc333 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc343 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc348 = new BitSet(new ulong[]{0x0UL,0x1DC000UL,0x40000UL});
		public static readonly BitSet _146_in_global_alloc355 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_alloc361 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc365 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc369 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_global_alloc379 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc384 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_global_alloc391 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc397 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc401 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef421 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef426 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_typedef432 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_global_typedef436 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item501 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item506 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _141_in_attribute_item514 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _165_in_attribute_item522 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _162_in_attribute_item530 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _176_in_attribute_item538 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item546 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _attribute_item_in_attribute574 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def595 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def599 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _global_block_in_namespace_def604 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def631 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def636 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _STRING_in_import_def646 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _Enum_in_enum_def667 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def672 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def678 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_enum_def682 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def702 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _162_in_class_def707 = new BitSet(new ulong[]{0x800000000010UL});
		public static readonly BitSet _attribute_in_class_def714 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def720 = new BitSet(new ulong[]{0x2640000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def725 = new BitSet(new ulong[]{0x2440000000008UL});
		public static readonly BitSet _func_args_in_class_def732 = new BitSet(new ulong[]{0x2400000000008UL});
		public static readonly BitSet _ident_list_in_class_def739 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _global_block_in_class_def746 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _141_in_type_ident777 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _165_in_type_ident790 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _155_in_type_ident803 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _166_in_type_ident817 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _ident_in_type_ident832 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _Type_Template_in_type_template869 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template873 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_type_template878 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _Type_Array_in_type_array907 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array911 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_type_array916 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _Type_Star_in_type_star940 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star944 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star946 = new BitSet(new ulong[]{0x8UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star951 = new BitSet(new ulong[]{0x8UL,0x80000000UL});
		public static readonly BitSet _Type_Ref_in_type_ref973 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref977 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Func_in_type_func997 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_list_in_type_func1002 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_type_func1009 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_List_in_type_list1035 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_list1040 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_array_in_type_name1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type_name1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args1131 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args1136 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter1163 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_generic_parameter1168 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _Func_Def_in_func_def1194 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _162_in_func_def1199 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7010UL,0x242612B921DC000UL,0x321000000000089UL});
		public static readonly BitSet _176_in_func_def1206 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7010UL,0x242612B921DC000UL,0x320000000000089UL});
		public static readonly BitSet _attribute_in_func_def1213 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B921DC000UL,0x320000000000089UL});
		public static readonly BitSet _type_name_in_func_def1219 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B92000000UL,0x320000000000089UL});
		public static readonly BitSet _184_in_func_def1226 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B92000000UL,0x220000000000089UL});
		public static readonly BitSet _ident_in_func_def1233 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _set_in_func_def1239 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _generic_parameter_in_func_def1254 = new BitSet(new ulong[]{0xC2A08C0FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _func_args_in_func_def1262 = new BitSet(new ulong[]{0xC2A0880FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _stmt_block_in_func_def1273 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1283 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Func_Declare_in_func_def1291 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1319 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1324 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x262410912001FFFUL,0x22000000000008DUL});
		public static readonly BitSet _stmt_expr_in_stmt1355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_translate1450 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1454 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_stmt_translate1458 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_stmt_translate1468 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1472 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1476 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _117_in_stmt_translate1486 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1490 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_stmt_translate1494 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1519 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1523 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1527 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1554 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1559 = new BitSet(new ulong[]{0x8000000000000008UL,0x2000UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1565 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1570 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1596 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1606 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1610 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1672 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1678 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_stmt_using1693 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x40000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1714 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1718 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1722 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1761 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1765 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1769 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1774 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1786 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1790 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1794 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1799 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1821 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1825 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1829 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1839 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1843 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1847 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1857 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1862 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1868 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1888 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1892 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1896 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1900 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1905 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Til_in_for_item1917 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1921 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1925 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1929 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1934 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1946 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1950 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1954 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1958 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1963 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1975 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1979 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item1983 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Map_in_for_item1993 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1997 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_for_item2001 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item2011 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item2015 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list2042 = new BitSet(new ulong[]{0x3F000000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for2063 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for2067 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2071 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try2091 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try2095 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2099 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2103 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return2123 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return2128 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident2156 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_ident2161 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _IDENT_in_ident2165 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list2193 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list2198 = new BitSet(new ulong[]{0x800000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr2220 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2224 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2228 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2232 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr2242 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2246 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2250 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2254 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2279 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2284 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2311 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2316 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _Expr_Args_in_expr_list2342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_list2347 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _Expr_Call_in_call_expr2368 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2372 = new BitSet(new ulong[]{0x200000008000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2377 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_expr2383 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2403 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2407 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_dict_expr2411 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2431 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _105_in_lambda_expr2433 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2438 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2445 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2451 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2461 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _124_in_lambda_expr2463 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2468 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2475 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2481 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2491 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _103_in_lambda_expr2493 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2498 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2505 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2511 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2521 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _123_in_lambda_expr2523 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2528 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2535 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2541 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2565 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2569 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2579 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2583 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2587 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2607 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2611 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2615 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2619 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2639 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2643 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_cast_expr2647 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2672 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_list_expr2677 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _Expr_List_Generation_in_list_generation_expr2701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_list_generation_expr2705 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _stmt_for_in_list_generation_expr2709 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_list_generation_expr2713 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2738 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2745 = new BitSet(new ulong[]{0x0UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _set_in_chain_expr2757 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_chain_expr2791 = new BitSet(new ulong[]{0x8UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _set_in_chain_expr2809 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_chain_expr2843 = new BitSet(new ulong[]{0x8UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _Expr_Where_in_where_expr2877 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2881 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x262410912001FFFUL,0x22000000000008DUL});
		public static readonly BitSet _stmt_in_where_expr2886 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x262410912001FFFUL,0x22000000000008DUL});
		public static readonly BitSet _Match_Expr_Item_in_match_item2911 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_item2915 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_match_item2919 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Match_Expr_in_match_expr2945 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_expr2950 = new BitSet(new ulong[]{0x40000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_match_expr2957 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _match_item_in_match_expr2964 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _expr_tuple_in_expr2993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr3003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr3013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr3023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr3033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr3043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr3053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr3063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_generation_expr_in_expr3083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr3093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr3103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr3113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr3122 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3126 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3130 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr3144 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3148 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3152 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3156 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr3166 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3170 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3174 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr3184 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3188 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr3198 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3202 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3224 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_expr3228 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr3241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr3250 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3254 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3381 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3385 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr3397 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3443 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3447 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _131_in_expr3457 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3461 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3471 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3475 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3485 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3489 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3499 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3509 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3513 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3551 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_expr3561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3565 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x220000000000089UL});
		public static readonly BitSet _expr_in_expr3569 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3613 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
